/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TFileSplitGeneratorSpec implements org.apache.thrift.TBase<TFileSplitGeneratorSpec, TFileSplitGeneratorSpec._Fields>, java.io.Serializable, Cloneable, Comparable<TFileSplitGeneratorSpec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFileSplitGeneratorSpec");

  private static final org.apache.thrift.protocol.TField FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("file_desc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_block_size", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField IS_SPLITTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_splittable", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PARTITION_PATH_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_path_hash", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TFileSplitGeneratorSpecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TFileSplitGeneratorSpecTupleSchemeFactory());
  }

  public org.apache.impala.thrift.THdfsFileDesc file_desc; // required
  public long max_block_size; // required
  public boolean is_splittable; // required
  public long partition_id; // required
  public int partition_path_hash; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILE_DESC((short)1, "file_desc"),
    MAX_BLOCK_SIZE((short)2, "max_block_size"),
    IS_SPLITTABLE((short)3, "is_splittable"),
    PARTITION_ID((short)4, "partition_id"),
    PARTITION_PATH_HASH((short)5, "partition_path_hash");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_DESC
          return FILE_DESC;
        case 2: // MAX_BLOCK_SIZE
          return MAX_BLOCK_SIZE;
        case 3: // IS_SPLITTABLE
          return IS_SPLITTABLE;
        case 4: // PARTITION_ID
          return PARTITION_ID;
        case 5: // PARTITION_PATH_HASH
          return PARTITION_PATH_HASH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_BLOCK_SIZE_ISSET_ID = 0;
  private static final int __IS_SPLITTABLE_ISSET_ID = 1;
  private static final int __PARTITION_ID_ISSET_ID = 2;
  private static final int __PARTITION_PATH_HASH_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("file_desc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.THdfsFileDesc.class)));
    tmpMap.put(_Fields.MAX_BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("max_block_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_SPLITTABLE, new org.apache.thrift.meta_data.FieldMetaData("is_splittable", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_PATH_HASH, new org.apache.thrift.meta_data.FieldMetaData("partition_path_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFileSplitGeneratorSpec.class, metaDataMap);
  }

  public TFileSplitGeneratorSpec() {
  }

  public TFileSplitGeneratorSpec(
    org.apache.impala.thrift.THdfsFileDesc file_desc,
    long max_block_size,
    boolean is_splittable,
    long partition_id,
    int partition_path_hash)
  {
    this();
    this.file_desc = file_desc;
    this.max_block_size = max_block_size;
    setMax_block_sizeIsSet(true);
    this.is_splittable = is_splittable;
    setIs_splittableIsSet(true);
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    this.partition_path_hash = partition_path_hash;
    setPartition_path_hashIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFileSplitGeneratorSpec(TFileSplitGeneratorSpec other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFile_desc()) {
      this.file_desc = new org.apache.impala.thrift.THdfsFileDesc(other.file_desc);
    }
    this.max_block_size = other.max_block_size;
    this.is_splittable = other.is_splittable;
    this.partition_id = other.partition_id;
    this.partition_path_hash = other.partition_path_hash;
  }

  public TFileSplitGeneratorSpec deepCopy() {
    return new TFileSplitGeneratorSpec(this);
  }

  @Override
  public void clear() {
    this.file_desc = null;
    setMax_block_sizeIsSet(false);
    this.max_block_size = 0;
    setIs_splittableIsSet(false);
    this.is_splittable = false;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setPartition_path_hashIsSet(false);
    this.partition_path_hash = 0;
  }

  public org.apache.impala.thrift.THdfsFileDesc getFile_desc() {
    return this.file_desc;
  }

  public TFileSplitGeneratorSpec setFile_desc(org.apache.impala.thrift.THdfsFileDesc file_desc) {
    this.file_desc = file_desc;
    return this;
  }

  public void unsetFile_desc() {
    this.file_desc = null;
  }

  /** Returns true if field file_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_desc() {
    return this.file_desc != null;
  }

  public void setFile_descIsSet(boolean value) {
    if (!value) {
      this.file_desc = null;
    }
  }

  public long getMax_block_size() {
    return this.max_block_size;
  }

  public TFileSplitGeneratorSpec setMax_block_size(long max_block_size) {
    this.max_block_size = max_block_size;
    setMax_block_sizeIsSet(true);
    return this;
  }

  public void unsetMax_block_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_BLOCK_SIZE_ISSET_ID);
  }

  /** Returns true if field max_block_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_block_size() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_BLOCK_SIZE_ISSET_ID);
  }

  public void setMax_block_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_BLOCK_SIZE_ISSET_ID, value);
  }

  public boolean isIs_splittable() {
    return this.is_splittable;
  }

  public TFileSplitGeneratorSpec setIs_splittable(boolean is_splittable) {
    this.is_splittable = is_splittable;
    setIs_splittableIsSet(true);
    return this;
  }

  public void unsetIs_splittable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_SPLITTABLE_ISSET_ID);
  }

  /** Returns true if field is_splittable is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_splittable() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_SPLITTABLE_ISSET_ID);
  }

  public void setIs_splittableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_SPLITTABLE_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TFileSplitGeneratorSpec setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public int getPartition_path_hash() {
    return this.partition_path_hash;
  }

  public TFileSplitGeneratorSpec setPartition_path_hash(int partition_path_hash) {
    this.partition_path_hash = partition_path_hash;
    setPartition_path_hashIsSet(true);
    return this;
  }

  public void unsetPartition_path_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITION_PATH_HASH_ISSET_ID);
  }

  /** Returns true if field partition_path_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_path_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITION_PATH_HASH_ISSET_ID);
  }

  public void setPartition_path_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITION_PATH_HASH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILE_DESC:
      if (value == null) {
        unsetFile_desc();
      } else {
        setFile_desc((org.apache.impala.thrift.THdfsFileDesc)value);
      }
      break;

    case MAX_BLOCK_SIZE:
      if (value == null) {
        unsetMax_block_size();
      } else {
        setMax_block_size((Long)value);
      }
      break;

    case IS_SPLITTABLE:
      if (value == null) {
        unsetIs_splittable();
      } else {
        setIs_splittable((Boolean)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((Long)value);
      }
      break;

    case PARTITION_PATH_HASH:
      if (value == null) {
        unsetPartition_path_hash();
      } else {
        setPartition_path_hash((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_DESC:
      return getFile_desc();

    case MAX_BLOCK_SIZE:
      return getMax_block_size();

    case IS_SPLITTABLE:
      return isIs_splittable();

    case PARTITION_ID:
      return getPartition_id();

    case PARTITION_PATH_HASH:
      return getPartition_path_hash();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILE_DESC:
      return isSetFile_desc();
    case MAX_BLOCK_SIZE:
      return isSetMax_block_size();
    case IS_SPLITTABLE:
      return isSetIs_splittable();
    case PARTITION_ID:
      return isSetPartition_id();
    case PARTITION_PATH_HASH:
      return isSetPartition_path_hash();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TFileSplitGeneratorSpec)
      return this.equals((TFileSplitGeneratorSpec)that);
    return false;
  }

  public boolean equals(TFileSplitGeneratorSpec that) {
    if (that == null)
      return false;

    boolean this_present_file_desc = true && this.isSetFile_desc();
    boolean that_present_file_desc = true && that.isSetFile_desc();
    if (this_present_file_desc || that_present_file_desc) {
      if (!(this_present_file_desc && that_present_file_desc))
        return false;
      if (!this.file_desc.equals(that.file_desc))
        return false;
    }

    boolean this_present_max_block_size = true;
    boolean that_present_max_block_size = true;
    if (this_present_max_block_size || that_present_max_block_size) {
      if (!(this_present_max_block_size && that_present_max_block_size))
        return false;
      if (this.max_block_size != that.max_block_size)
        return false;
    }

    boolean this_present_is_splittable = true;
    boolean that_present_is_splittable = true;
    if (this_present_is_splittable || that_present_is_splittable) {
      if (!(this_present_is_splittable && that_present_is_splittable))
        return false;
      if (this.is_splittable != that.is_splittable)
        return false;
    }

    boolean this_present_partition_id = true;
    boolean that_present_partition_id = true;
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_partition_path_hash = true;
    boolean that_present_partition_path_hash = true;
    if (this_present_partition_path_hash || that_present_partition_path_hash) {
      if (!(this_present_partition_path_hash && that_present_partition_path_hash))
        return false;
      if (this.partition_path_hash != that.partition_path_hash)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_file_desc = true && (isSetFile_desc());
    list.add(present_file_desc);
    if (present_file_desc)
      list.add(file_desc);

    boolean present_max_block_size = true;
    list.add(present_max_block_size);
    if (present_max_block_size)
      list.add(max_block_size);

    boolean present_is_splittable = true;
    list.add(present_is_splittable);
    if (present_is_splittable)
      list.add(is_splittable);

    boolean present_partition_id = true;
    list.add(present_partition_id);
    if (present_partition_id)
      list.add(partition_id);

    boolean present_partition_path_hash = true;
    list.add(present_partition_path_hash);
    if (present_partition_path_hash)
      list.add(partition_path_hash);

    return list.hashCode();
  }

  @Override
  public int compareTo(TFileSplitGeneratorSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFile_desc()).compareTo(other.isSetFile_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_desc, other.file_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_block_size()).compareTo(other.isSetMax_block_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_block_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_block_size, other.max_block_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_splittable()).compareTo(other.isSetIs_splittable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_splittable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_splittable, other.is_splittable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_id()).compareTo(other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_path_hash()).compareTo(other.isSetPartition_path_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_path_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_path_hash, other.partition_path_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TFileSplitGeneratorSpec(");
    boolean first = true;

    sb.append("file_desc:");
    if (this.file_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.file_desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_block_size:");
    sb.append(this.max_block_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_splittable:");
    sb.append(this.is_splittable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_id:");
    sb.append(this.partition_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_path_hash:");
    sb.append(this.partition_path_hash);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (file_desc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_desc' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'max_block_size' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'is_splittable' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'partition_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'partition_path_hash' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (file_desc != null) {
      file_desc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFileSplitGeneratorSpecStandardSchemeFactory implements SchemeFactory {
    public TFileSplitGeneratorSpecStandardScheme getScheme() {
      return new TFileSplitGeneratorSpecStandardScheme();
    }
  }

  private static class TFileSplitGeneratorSpecStandardScheme extends StandardScheme<TFileSplitGeneratorSpec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFileSplitGeneratorSpec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.file_desc = new org.apache.impala.thrift.THdfsFileDesc();
              struct.file_desc.read(iprot);
              struct.setFile_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_BLOCK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_block_size = iprot.readI64();
              struct.setMax_block_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_SPLITTABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_splittable = iprot.readBool();
              struct.setIs_splittableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_PATH_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partition_path_hash = iprot.readI32();
              struct.setPartition_path_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMax_block_size()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_block_size' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIs_splittable()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_splittable' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPartition_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPartition_path_hash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_path_hash' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFileSplitGeneratorSpec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file_desc != null) {
        oprot.writeFieldBegin(FILE_DESC_FIELD_DESC);
        struct.file_desc.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_BLOCK_SIZE_FIELD_DESC);
      oprot.writeI64(struct.max_block_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SPLITTABLE_FIELD_DESC);
      oprot.writeBool(struct.is_splittable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
      oprot.writeI64(struct.partition_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTITION_PATH_HASH_FIELD_DESC);
      oprot.writeI32(struct.partition_path_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFileSplitGeneratorSpecTupleSchemeFactory implements SchemeFactory {
    public TFileSplitGeneratorSpecTupleScheme getScheme() {
      return new TFileSplitGeneratorSpecTupleScheme();
    }
  }

  private static class TFileSplitGeneratorSpecTupleScheme extends TupleScheme<TFileSplitGeneratorSpec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFileSplitGeneratorSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.file_desc.write(oprot);
      oprot.writeI64(struct.max_block_size);
      oprot.writeBool(struct.is_splittable);
      oprot.writeI64(struct.partition_id);
      oprot.writeI32(struct.partition_path_hash);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFileSplitGeneratorSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.file_desc = new org.apache.impala.thrift.THdfsFileDesc();
      struct.file_desc.read(iprot);
      struct.setFile_descIsSet(true);
      struct.max_block_size = iprot.readI64();
      struct.setMax_block_sizeIsSet(true);
      struct.is_splittable = iprot.readBool();
      struct.setIs_splittableIsSet(true);
      struct.partition_id = iprot.readI64();
      struct.setPartition_idIsSet(true);
      struct.partition_path_hash = iprot.readI32();
      struct.setPartition_path_hashIsSet(true);
    }
  }

}

