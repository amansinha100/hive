/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TDataSink implements org.apache.thrift.TBase<TDataSink, TDataSink._Fields>, java.io.Serializable, Cloneable, Comparable<TDataSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDataSink");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STREAM_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_sink", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("table_sink", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField JOIN_BUILD_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("join_build_sink", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PLAN_ROOT_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_root_sink", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ESTIMATED_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("estimated_stats", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField OUTPUT_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("output_exprs", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDataSinkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDataSinkTupleSchemeFactory());
  }

  /**
   * 
   * @see TDataSinkType
   */
  public TDataSinkType type; // required
  public TDataStreamSink stream_sink; // optional
  public TTableSink table_sink; // optional
  public TJoinBuildSink join_build_sink; // optional
  public TPlanRootSink plan_root_sink; // optional
  public String label; // optional
  public org.apache.impala.thrift.TExecStats estimated_stats; // optional
  public List<org.apache.impala.thrift.TExpr> output_exprs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TDataSinkType
     */
    TYPE((short)1, "type"),
    STREAM_SINK((short)2, "stream_sink"),
    TABLE_SINK((short)3, "table_sink"),
    JOIN_BUILD_SINK((short)4, "join_build_sink"),
    PLAN_ROOT_SINK((short)5, "plan_root_sink"),
    LABEL((short)6, "label"),
    ESTIMATED_STATS((short)7, "estimated_stats"),
    OUTPUT_EXPRS((short)8, "output_exprs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // STREAM_SINK
          return STREAM_SINK;
        case 3: // TABLE_SINK
          return TABLE_SINK;
        case 4: // JOIN_BUILD_SINK
          return JOIN_BUILD_SINK;
        case 5: // PLAN_ROOT_SINK
          return PLAN_ROOT_SINK;
        case 6: // LABEL
          return LABEL;
        case 7: // ESTIMATED_STATS
          return ESTIMATED_STATS;
        case 8: // OUTPUT_EXPRS
          return OUTPUT_EXPRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STREAM_SINK,_Fields.TABLE_SINK,_Fields.JOIN_BUILD_SINK,_Fields.PLAN_ROOT_SINK,_Fields.LABEL,_Fields.ESTIMATED_STATS,_Fields.OUTPUT_EXPRS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDataSinkType.class)));
    tmpMap.put(_Fields.STREAM_SINK, new org.apache.thrift.meta_data.FieldMetaData("stream_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataStreamSink.class)));
    tmpMap.put(_Fields.TABLE_SINK, new org.apache.thrift.meta_data.FieldMetaData("table_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableSink.class)));
    tmpMap.put(_Fields.JOIN_BUILD_SINK, new org.apache.thrift.meta_data.FieldMetaData("join_build_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJoinBuildSink.class)));
    tmpMap.put(_Fields.PLAN_ROOT_SINK, new org.apache.thrift.meta_data.FieldMetaData("plan_root_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanRootSink.class)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ESTIMATED_STATS, new org.apache.thrift.meta_data.FieldMetaData("estimated_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExecStats.class)));
    tmpMap.put(_Fields.OUTPUT_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("output_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDataSink.class, metaDataMap);
  }

  public TDataSink() {
  }

  public TDataSink(
    TDataSinkType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDataSink(TDataSink other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetStream_sink()) {
      this.stream_sink = new TDataStreamSink(other.stream_sink);
    }
    if (other.isSetTable_sink()) {
      this.table_sink = new TTableSink(other.table_sink);
    }
    if (other.isSetJoin_build_sink()) {
      this.join_build_sink = new TJoinBuildSink(other.join_build_sink);
    }
    if (other.isSetPlan_root_sink()) {
      this.plan_root_sink = new TPlanRootSink(other.plan_root_sink);
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetEstimated_stats()) {
      this.estimated_stats = new org.apache.impala.thrift.TExecStats(other.estimated_stats);
    }
    if (other.isSetOutput_exprs()) {
      List<org.apache.impala.thrift.TExpr> __this__output_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(other.output_exprs.size());
      for (org.apache.impala.thrift.TExpr other_element : other.output_exprs) {
        __this__output_exprs.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.output_exprs = __this__output_exprs;
    }
  }

  public TDataSink deepCopy() {
    return new TDataSink(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.stream_sink = null;
    this.table_sink = null;
    this.join_build_sink = null;
    this.plan_root_sink = null;
    this.label = null;
    this.estimated_stats = null;
    this.output_exprs = null;
  }

  /**
   * 
   * @see TDataSinkType
   */
  public TDataSinkType getType() {
    return this.type;
  }

  /**
   * 
   * @see TDataSinkType
   */
  public TDataSink setType(TDataSinkType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public TDataStreamSink getStream_sink() {
    return this.stream_sink;
  }

  public TDataSink setStream_sink(TDataStreamSink stream_sink) {
    this.stream_sink = stream_sink;
    return this;
  }

  public void unsetStream_sink() {
    this.stream_sink = null;
  }

  /** Returns true if field stream_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetStream_sink() {
    return this.stream_sink != null;
  }

  public void setStream_sinkIsSet(boolean value) {
    if (!value) {
      this.stream_sink = null;
    }
  }

  public TTableSink getTable_sink() {
    return this.table_sink;
  }

  public TDataSink setTable_sink(TTableSink table_sink) {
    this.table_sink = table_sink;
    return this;
  }

  public void unsetTable_sink() {
    this.table_sink = null;
  }

  /** Returns true if field table_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_sink() {
    return this.table_sink != null;
  }

  public void setTable_sinkIsSet(boolean value) {
    if (!value) {
      this.table_sink = null;
    }
  }

  public TJoinBuildSink getJoin_build_sink() {
    return this.join_build_sink;
  }

  public TDataSink setJoin_build_sink(TJoinBuildSink join_build_sink) {
    this.join_build_sink = join_build_sink;
    return this;
  }

  public void unsetJoin_build_sink() {
    this.join_build_sink = null;
  }

  /** Returns true if field join_build_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_build_sink() {
    return this.join_build_sink != null;
  }

  public void setJoin_build_sinkIsSet(boolean value) {
    if (!value) {
      this.join_build_sink = null;
    }
  }

  public TPlanRootSink getPlan_root_sink() {
    return this.plan_root_sink;
  }

  public TDataSink setPlan_root_sink(TPlanRootSink plan_root_sink) {
    this.plan_root_sink = plan_root_sink;
    return this;
  }

  public void unsetPlan_root_sink() {
    this.plan_root_sink = null;
  }

  /** Returns true if field plan_root_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan_root_sink() {
    return this.plan_root_sink != null;
  }

  public void setPlan_root_sinkIsSet(boolean value) {
    if (!value) {
      this.plan_root_sink = null;
    }
  }

  public String getLabel() {
    return this.label;
  }

  public TDataSink setLabel(String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public org.apache.impala.thrift.TExecStats getEstimated_stats() {
    return this.estimated_stats;
  }

  public TDataSink setEstimated_stats(org.apache.impala.thrift.TExecStats estimated_stats) {
    this.estimated_stats = estimated_stats;
    return this;
  }

  public void unsetEstimated_stats() {
    this.estimated_stats = null;
  }

  /** Returns true if field estimated_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimated_stats() {
    return this.estimated_stats != null;
  }

  public void setEstimated_statsIsSet(boolean value) {
    if (!value) {
      this.estimated_stats = null;
    }
  }

  public int getOutput_exprsSize() {
    return (this.output_exprs == null) ? 0 : this.output_exprs.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getOutput_exprsIterator() {
    return (this.output_exprs == null) ? null : this.output_exprs.iterator();
  }

  public void addToOutput_exprs(org.apache.impala.thrift.TExpr elem) {
    if (this.output_exprs == null) {
      this.output_exprs = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.output_exprs.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getOutput_exprs() {
    return this.output_exprs;
  }

  public TDataSink setOutput_exprs(List<org.apache.impala.thrift.TExpr> output_exprs) {
    this.output_exprs = output_exprs;
    return this;
  }

  public void unsetOutput_exprs() {
    this.output_exprs = null;
  }

  /** Returns true if field output_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_exprs() {
    return this.output_exprs != null;
  }

  public void setOutput_exprsIsSet(boolean value) {
    if (!value) {
      this.output_exprs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TDataSinkType)value);
      }
      break;

    case STREAM_SINK:
      if (value == null) {
        unsetStream_sink();
      } else {
        setStream_sink((TDataStreamSink)value);
      }
      break;

    case TABLE_SINK:
      if (value == null) {
        unsetTable_sink();
      } else {
        setTable_sink((TTableSink)value);
      }
      break;

    case JOIN_BUILD_SINK:
      if (value == null) {
        unsetJoin_build_sink();
      } else {
        setJoin_build_sink((TJoinBuildSink)value);
      }
      break;

    case PLAN_ROOT_SINK:
      if (value == null) {
        unsetPlan_root_sink();
      } else {
        setPlan_root_sink((TPlanRootSink)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case ESTIMATED_STATS:
      if (value == null) {
        unsetEstimated_stats();
      } else {
        setEstimated_stats((org.apache.impala.thrift.TExecStats)value);
      }
      break;

    case OUTPUT_EXPRS:
      if (value == null) {
        unsetOutput_exprs();
      } else {
        setOutput_exprs((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case STREAM_SINK:
      return getStream_sink();

    case TABLE_SINK:
      return getTable_sink();

    case JOIN_BUILD_SINK:
      return getJoin_build_sink();

    case PLAN_ROOT_SINK:
      return getPlan_root_sink();

    case LABEL:
      return getLabel();

    case ESTIMATED_STATS:
      return getEstimated_stats();

    case OUTPUT_EXPRS:
      return getOutput_exprs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case STREAM_SINK:
      return isSetStream_sink();
    case TABLE_SINK:
      return isSetTable_sink();
    case JOIN_BUILD_SINK:
      return isSetJoin_build_sink();
    case PLAN_ROOT_SINK:
      return isSetPlan_root_sink();
    case LABEL:
      return isSetLabel();
    case ESTIMATED_STATS:
      return isSetEstimated_stats();
    case OUTPUT_EXPRS:
      return isSetOutput_exprs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDataSink)
      return this.equals((TDataSink)that);
    return false;
  }

  public boolean equals(TDataSink that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_stream_sink = true && this.isSetStream_sink();
    boolean that_present_stream_sink = true && that.isSetStream_sink();
    if (this_present_stream_sink || that_present_stream_sink) {
      if (!(this_present_stream_sink && that_present_stream_sink))
        return false;
      if (!this.stream_sink.equals(that.stream_sink))
        return false;
    }

    boolean this_present_table_sink = true && this.isSetTable_sink();
    boolean that_present_table_sink = true && that.isSetTable_sink();
    if (this_present_table_sink || that_present_table_sink) {
      if (!(this_present_table_sink && that_present_table_sink))
        return false;
      if (!this.table_sink.equals(that.table_sink))
        return false;
    }

    boolean this_present_join_build_sink = true && this.isSetJoin_build_sink();
    boolean that_present_join_build_sink = true && that.isSetJoin_build_sink();
    if (this_present_join_build_sink || that_present_join_build_sink) {
      if (!(this_present_join_build_sink && that_present_join_build_sink))
        return false;
      if (!this.join_build_sink.equals(that.join_build_sink))
        return false;
    }

    boolean this_present_plan_root_sink = true && this.isSetPlan_root_sink();
    boolean that_present_plan_root_sink = true && that.isSetPlan_root_sink();
    if (this_present_plan_root_sink || that_present_plan_root_sink) {
      if (!(this_present_plan_root_sink && that_present_plan_root_sink))
        return false;
      if (!this.plan_root_sink.equals(that.plan_root_sink))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_estimated_stats = true && this.isSetEstimated_stats();
    boolean that_present_estimated_stats = true && that.isSetEstimated_stats();
    if (this_present_estimated_stats || that_present_estimated_stats) {
      if (!(this_present_estimated_stats && that_present_estimated_stats))
        return false;
      if (!this.estimated_stats.equals(that.estimated_stats))
        return false;
    }

    boolean this_present_output_exprs = true && this.isSetOutput_exprs();
    boolean that_present_output_exprs = true && that.isSetOutput_exprs();
    if (this_present_output_exprs || that_present_output_exprs) {
      if (!(this_present_output_exprs && that_present_output_exprs))
        return false;
      if (!this.output_exprs.equals(that.output_exprs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_stream_sink = true && (isSetStream_sink());
    list.add(present_stream_sink);
    if (present_stream_sink)
      list.add(stream_sink);

    boolean present_table_sink = true && (isSetTable_sink());
    list.add(present_table_sink);
    if (present_table_sink)
      list.add(table_sink);

    boolean present_join_build_sink = true && (isSetJoin_build_sink());
    list.add(present_join_build_sink);
    if (present_join_build_sink)
      list.add(join_build_sink);

    boolean present_plan_root_sink = true && (isSetPlan_root_sink());
    list.add(present_plan_root_sink);
    if (present_plan_root_sink)
      list.add(plan_root_sink);

    boolean present_label = true && (isSetLabel());
    list.add(present_label);
    if (present_label)
      list.add(label);

    boolean present_estimated_stats = true && (isSetEstimated_stats());
    list.add(present_estimated_stats);
    if (present_estimated_stats)
      list.add(estimated_stats);

    boolean present_output_exprs = true && (isSetOutput_exprs());
    list.add(present_output_exprs);
    if (present_output_exprs)
      list.add(output_exprs);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDataSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStream_sink()).compareTo(other.isSetStream_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStream_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_sink, other.stream_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_sink()).compareTo(other.isSetTable_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_sink, other.table_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoin_build_sink()).compareTo(other.isSetJoin_build_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_build_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_build_sink, other.join_build_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlan_root_sink()).compareTo(other.isSetPlan_root_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan_root_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_root_sink, other.plan_root_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstimated_stats()).compareTo(other.isSetEstimated_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimated_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimated_stats, other.estimated_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput_exprs()).compareTo(other.isSetOutput_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_exprs, other.output_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDataSink(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetStream_sink()) {
      if (!first) sb.append(", ");
      sb.append("stream_sink:");
      if (this.stream_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.stream_sink);
      }
      first = false;
    }
    if (isSetTable_sink()) {
      if (!first) sb.append(", ");
      sb.append("table_sink:");
      if (this.table_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.table_sink);
      }
      first = false;
    }
    if (isSetJoin_build_sink()) {
      if (!first) sb.append(", ");
      sb.append("join_build_sink:");
      if (this.join_build_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.join_build_sink);
      }
      first = false;
    }
    if (isSetPlan_root_sink()) {
      if (!first) sb.append(", ");
      sb.append("plan_root_sink:");
      if (this.plan_root_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.plan_root_sink);
      }
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetEstimated_stats()) {
      if (!first) sb.append(", ");
      sb.append("estimated_stats:");
      if (this.estimated_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.estimated_stats);
      }
      first = false;
    }
    if (isSetOutput_exprs()) {
      if (!first) sb.append(", ");
      sb.append("output_exprs:");
      if (this.output_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.output_exprs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (stream_sink != null) {
      stream_sink.validate();
    }
    if (table_sink != null) {
      table_sink.validate();
    }
    if (join_build_sink != null) {
      join_build_sink.validate();
    }
    if (plan_root_sink != null) {
      plan_root_sink.validate();
    }
    if (estimated_stats != null) {
      estimated_stats.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDataSinkStandardSchemeFactory implements SchemeFactory {
    public TDataSinkStandardScheme getScheme() {
      return new TDataSinkStandardScheme();
    }
  }

  private static class TDataSinkStandardScheme extends StandardScheme<TDataSink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDataSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.impala.thrift.TDataSinkType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STREAM_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stream_sink = new TDataStreamSink();
              struct.stream_sink.read(iprot);
              struct.setStream_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_sink = new TTableSink();
              struct.table_sink.read(iprot);
              struct.setTable_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JOIN_BUILD_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.join_build_sink = new TJoinBuildSink();
              struct.join_build_sink.read(iprot);
              struct.setJoin_build_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLAN_ROOT_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.plan_root_sink = new TPlanRootSink();
              struct.plan_root_sink.read(iprot);
              struct.setPlan_root_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ESTIMATED_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.estimated_stats = new org.apache.impala.thrift.TExecStats();
              struct.estimated_stats.read(iprot);
              struct.setEstimated_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OUTPUT_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.output_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list32.size);
                org.apache.impala.thrift.TExpr _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new org.apache.impala.thrift.TExpr();
                  _elem33.read(iprot);
                  struct.output_exprs.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setOutput_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDataSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stream_sink != null) {
        if (struct.isSetStream_sink()) {
          oprot.writeFieldBegin(STREAM_SINK_FIELD_DESC);
          struct.stream_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_sink != null) {
        if (struct.isSetTable_sink()) {
          oprot.writeFieldBegin(TABLE_SINK_FIELD_DESC);
          struct.table_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.join_build_sink != null) {
        if (struct.isSetJoin_build_sink()) {
          oprot.writeFieldBegin(JOIN_BUILD_SINK_FIELD_DESC);
          struct.join_build_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.plan_root_sink != null) {
        if (struct.isSetPlan_root_sink()) {
          oprot.writeFieldBegin(PLAN_ROOT_SINK_FIELD_DESC);
          struct.plan_root_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.estimated_stats != null) {
        if (struct.isSetEstimated_stats()) {
          oprot.writeFieldBegin(ESTIMATED_STATS_FIELD_DESC);
          struct.estimated_stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.output_exprs != null) {
        if (struct.isSetOutput_exprs()) {
          oprot.writeFieldBegin(OUTPUT_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.output_exprs.size()));
            for (org.apache.impala.thrift.TExpr _iter35 : struct.output_exprs)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDataSinkTupleSchemeFactory implements SchemeFactory {
    public TDataSinkTupleScheme getScheme() {
      return new TDataSinkTupleScheme();
    }
  }

  private static class TDataSinkTupleScheme extends TupleScheme<TDataSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDataSink struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetStream_sink()) {
        optionals.set(0);
      }
      if (struct.isSetTable_sink()) {
        optionals.set(1);
      }
      if (struct.isSetJoin_build_sink()) {
        optionals.set(2);
      }
      if (struct.isSetPlan_root_sink()) {
        optionals.set(3);
      }
      if (struct.isSetLabel()) {
        optionals.set(4);
      }
      if (struct.isSetEstimated_stats()) {
        optionals.set(5);
      }
      if (struct.isSetOutput_exprs()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetStream_sink()) {
        struct.stream_sink.write(oprot);
      }
      if (struct.isSetTable_sink()) {
        struct.table_sink.write(oprot);
      }
      if (struct.isSetJoin_build_sink()) {
        struct.join_build_sink.write(oprot);
      }
      if (struct.isSetPlan_root_sink()) {
        struct.plan_root_sink.write(oprot);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetEstimated_stats()) {
        struct.estimated_stats.write(oprot);
      }
      if (struct.isSetOutput_exprs()) {
        {
          oprot.writeI32(struct.output_exprs.size());
          for (org.apache.impala.thrift.TExpr _iter36 : struct.output_exprs)
          {
            _iter36.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDataSink struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = org.apache.impala.thrift.TDataSinkType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.stream_sink = new TDataStreamSink();
        struct.stream_sink.read(iprot);
        struct.setStream_sinkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_sink = new TTableSink();
        struct.table_sink.read(iprot);
        struct.setTable_sinkIsSet(true);
      }
      if (incoming.get(2)) {
        struct.join_build_sink = new TJoinBuildSink();
        struct.join_build_sink.read(iprot);
        struct.setJoin_build_sinkIsSet(true);
      }
      if (incoming.get(3)) {
        struct.plan_root_sink = new TPlanRootSink();
        struct.plan_root_sink.read(iprot);
        struct.setPlan_root_sinkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.estimated_stats = new org.apache.impala.thrift.TExecStats();
        struct.estimated_stats.read(iprot);
        struct.setEstimated_statsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.output_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list37.size);
          org.apache.impala.thrift.TExpr _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new org.apache.impala.thrift.TExpr();
            _elem38.read(iprot);
            struct.output_exprs.add(_elem38);
          }
        }
        struct.setOutput_exprsIsSet(true);
      }
    }
  }

}

