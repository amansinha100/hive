/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class THdfsScanNode implements org.apache.thrift.TBase<THdfsScanNode, THdfsScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsScanNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COLLECTION_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("collection_conjuncts", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField REPLICA_PREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("replica_preference", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RANDOM_REPLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("random_replica", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SKIP_HEADER_LINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("skip_header_line_count", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField USE_MT_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("use_mt_scan_node", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField MIN_MAX_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("min_max_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MIN_MAX_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("min_max_tuple_id", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DICTIONARY_FILTER_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionary_filter_conjuncts", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField PARQUET_COUNT_STAR_SLOT_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_count_star_slot_offset", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THdfsScanNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THdfsScanNodeTupleSchemeFactory());
  }

  public int tuple_id; // required
  public Map<Integer,List<org.apache.impala.thrift.TExpr>> collection_conjuncts; // optional
  /**
   * 
   * @see TReplicaPreference
   */
  public TReplicaPreference replica_preference; // optional
  public boolean random_replica; // optional
  public int skip_header_line_count; // optional
  public boolean use_mt_scan_node; // optional
  public List<org.apache.impala.thrift.TExpr> min_max_conjuncts; // optional
  public int min_max_tuple_id; // optional
  public Map<Integer,List<Integer>> dictionary_filter_conjuncts; // optional
  public int parquet_count_star_slot_offset; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    COLLECTION_CONJUNCTS((short)2, "collection_conjuncts"),
    /**
     * 
     * @see TReplicaPreference
     */
    REPLICA_PREFERENCE((short)3, "replica_preference"),
    RANDOM_REPLICA((short)4, "random_replica"),
    SKIP_HEADER_LINE_COUNT((short)5, "skip_header_line_count"),
    USE_MT_SCAN_NODE((short)6, "use_mt_scan_node"),
    MIN_MAX_CONJUNCTS((short)7, "min_max_conjuncts"),
    MIN_MAX_TUPLE_ID((short)8, "min_max_tuple_id"),
    DICTIONARY_FILTER_CONJUNCTS((short)9, "dictionary_filter_conjuncts"),
    PARQUET_COUNT_STAR_SLOT_OFFSET((short)10, "parquet_count_star_slot_offset");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // COLLECTION_CONJUNCTS
          return COLLECTION_CONJUNCTS;
        case 3: // REPLICA_PREFERENCE
          return REPLICA_PREFERENCE;
        case 4: // RANDOM_REPLICA
          return RANDOM_REPLICA;
        case 5: // SKIP_HEADER_LINE_COUNT
          return SKIP_HEADER_LINE_COUNT;
        case 6: // USE_MT_SCAN_NODE
          return USE_MT_SCAN_NODE;
        case 7: // MIN_MAX_CONJUNCTS
          return MIN_MAX_CONJUNCTS;
        case 8: // MIN_MAX_TUPLE_ID
          return MIN_MAX_TUPLE_ID;
        case 9: // DICTIONARY_FILTER_CONJUNCTS
          return DICTIONARY_FILTER_CONJUNCTS;
        case 10: // PARQUET_COUNT_STAR_SLOT_OFFSET
          return PARQUET_COUNT_STAR_SLOT_OFFSET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private static final int __RANDOM_REPLICA_ISSET_ID = 1;
  private static final int __SKIP_HEADER_LINE_COUNT_ISSET_ID = 2;
  private static final int __USE_MT_SCAN_NODE_ISSET_ID = 3;
  private static final int __MIN_MAX_TUPLE_ID_ISSET_ID = 4;
  private static final int __PARQUET_COUNT_STAR_SLOT_OFFSET_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLLECTION_CONJUNCTS,_Fields.REPLICA_PREFERENCE,_Fields.RANDOM_REPLICA,_Fields.SKIP_HEADER_LINE_COUNT,_Fields.USE_MT_SCAN_NODE,_Fields.MIN_MAX_CONJUNCTS,_Fields.MIN_MAX_TUPLE_ID,_Fields.DICTIONARY_FILTER_CONJUNCTS,_Fields.PARQUET_COUNT_STAR_SLOT_OFFSET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.COLLECTION_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("collection_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class)))));
    tmpMap.put(_Fields.REPLICA_PREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("replica_preference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TReplicaPreference.class)));
    tmpMap.put(_Fields.RANDOM_REPLICA, new org.apache.thrift.meta_data.FieldMetaData("random_replica", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SKIP_HEADER_LINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("skip_header_line_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USE_MT_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("use_mt_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MIN_MAX_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("min_max_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.MIN_MAX_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("min_max_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.DICTIONARY_FILTER_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("dictionary_filter_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.PARQUET_COUNT_STAR_SLOT_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("parquet_count_star_slot_offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsScanNode.class, metaDataMap);
  }

  public THdfsScanNode() {
  }

  public THdfsScanNode(
    int tuple_id)
  {
    this();
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsScanNode(THdfsScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetCollection_conjuncts()) {
      Map<Integer,List<org.apache.impala.thrift.TExpr>> __this__collection_conjuncts = new HashMap<Integer,List<org.apache.impala.thrift.TExpr>>(other.collection_conjuncts.size());
      for (Map.Entry<Integer, List<org.apache.impala.thrift.TExpr>> other_element : other.collection_conjuncts.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<org.apache.impala.thrift.TExpr> other_element_value = other_element.getValue();

        Integer __this__collection_conjuncts_copy_key = other_element_key;

        List<org.apache.impala.thrift.TExpr> __this__collection_conjuncts_copy_value = new ArrayList<org.apache.impala.thrift.TExpr>(other_element_value.size());
        for (org.apache.impala.thrift.TExpr other_element_value_element : other_element_value) {
          __this__collection_conjuncts_copy_value.add(new org.apache.impala.thrift.TExpr(other_element_value_element));
        }

        __this__collection_conjuncts.put(__this__collection_conjuncts_copy_key, __this__collection_conjuncts_copy_value);
      }
      this.collection_conjuncts = __this__collection_conjuncts;
    }
    if (other.isSetReplica_preference()) {
      this.replica_preference = other.replica_preference;
    }
    this.random_replica = other.random_replica;
    this.skip_header_line_count = other.skip_header_line_count;
    this.use_mt_scan_node = other.use_mt_scan_node;
    if (other.isSetMin_max_conjuncts()) {
      List<org.apache.impala.thrift.TExpr> __this__min_max_conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>(other.min_max_conjuncts.size());
      for (org.apache.impala.thrift.TExpr other_element : other.min_max_conjuncts) {
        __this__min_max_conjuncts.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.min_max_conjuncts = __this__min_max_conjuncts;
    }
    this.min_max_tuple_id = other.min_max_tuple_id;
    if (other.isSetDictionary_filter_conjuncts()) {
      Map<Integer,List<Integer>> __this__dictionary_filter_conjuncts = new HashMap<Integer,List<Integer>>(other.dictionary_filter_conjuncts.size());
      for (Map.Entry<Integer, List<Integer>> other_element : other.dictionary_filter_conjuncts.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<Integer> other_element_value = other_element.getValue();

        Integer __this__dictionary_filter_conjuncts_copy_key = other_element_key;

        List<Integer> __this__dictionary_filter_conjuncts_copy_value = new ArrayList<Integer>(other_element_value);

        __this__dictionary_filter_conjuncts.put(__this__dictionary_filter_conjuncts_copy_key, __this__dictionary_filter_conjuncts_copy_value);
      }
      this.dictionary_filter_conjuncts = __this__dictionary_filter_conjuncts;
    }
    this.parquet_count_star_slot_offset = other.parquet_count_star_slot_offset;
  }

  public THdfsScanNode deepCopy() {
    return new THdfsScanNode(this);
  }

  @Override
  public void clear() {
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    this.collection_conjuncts = null;
    this.replica_preference = null;
    setRandom_replicaIsSet(false);
    this.random_replica = false;
    setSkip_header_line_countIsSet(false);
    this.skip_header_line_count = 0;
    setUse_mt_scan_nodeIsSet(false);
    this.use_mt_scan_node = false;
    this.min_max_conjuncts = null;
    setMin_max_tuple_idIsSet(false);
    this.min_max_tuple_id = 0;
    this.dictionary_filter_conjuncts = null;
    setParquet_count_star_slot_offsetIsSet(false);
    this.parquet_count_star_slot_offset = 0;
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public THdfsScanNode setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    return this;
  }

  public void unsetTuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getCollection_conjunctsSize() {
    return (this.collection_conjuncts == null) ? 0 : this.collection_conjuncts.size();
  }

  public void putToCollection_conjuncts(int key, List<org.apache.impala.thrift.TExpr> val) {
    if (this.collection_conjuncts == null) {
      this.collection_conjuncts = new HashMap<Integer,List<org.apache.impala.thrift.TExpr>>();
    }
    this.collection_conjuncts.put(key, val);
  }

  public Map<Integer,List<org.apache.impala.thrift.TExpr>> getCollection_conjuncts() {
    return this.collection_conjuncts;
  }

  public THdfsScanNode setCollection_conjuncts(Map<Integer,List<org.apache.impala.thrift.TExpr>> collection_conjuncts) {
    this.collection_conjuncts = collection_conjuncts;
    return this;
  }

  public void unsetCollection_conjuncts() {
    this.collection_conjuncts = null;
  }

  /** Returns true if field collection_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection_conjuncts() {
    return this.collection_conjuncts != null;
  }

  public void setCollection_conjunctsIsSet(boolean value) {
    if (!value) {
      this.collection_conjuncts = null;
    }
  }

  /**
   * 
   * @see TReplicaPreference
   */
  public TReplicaPreference getReplica_preference() {
    return this.replica_preference;
  }

  /**
   * 
   * @see TReplicaPreference
   */
  public THdfsScanNode setReplica_preference(TReplicaPreference replica_preference) {
    this.replica_preference = replica_preference;
    return this;
  }

  public void unsetReplica_preference() {
    this.replica_preference = null;
  }

  /** Returns true if field replica_preference is set (has been assigned a value) and false otherwise */
  public boolean isSetReplica_preference() {
    return this.replica_preference != null;
  }

  public void setReplica_preferenceIsSet(boolean value) {
    if (!value) {
      this.replica_preference = null;
    }
  }

  public boolean isRandom_replica() {
    return this.random_replica;
  }

  public THdfsScanNode setRandom_replica(boolean random_replica) {
    this.random_replica = random_replica;
    setRandom_replicaIsSet(true);
    return this;
  }

  public void unsetRandom_replica() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANDOM_REPLICA_ISSET_ID);
  }

  /** Returns true if field random_replica is set (has been assigned a value) and false otherwise */
  public boolean isSetRandom_replica() {
    return EncodingUtils.testBit(__isset_bitfield, __RANDOM_REPLICA_ISSET_ID);
  }

  public void setRandom_replicaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANDOM_REPLICA_ISSET_ID, value);
  }

  public int getSkip_header_line_count() {
    return this.skip_header_line_count;
  }

  public THdfsScanNode setSkip_header_line_count(int skip_header_line_count) {
    this.skip_header_line_count = skip_header_line_count;
    setSkip_header_line_countIsSet(true);
    return this;
  }

  public void unsetSkip_header_line_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKIP_HEADER_LINE_COUNT_ISSET_ID);
  }

  /** Returns true if field skip_header_line_count is set (has been assigned a value) and false otherwise */
  public boolean isSetSkip_header_line_count() {
    return EncodingUtils.testBit(__isset_bitfield, __SKIP_HEADER_LINE_COUNT_ISSET_ID);
  }

  public void setSkip_header_line_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKIP_HEADER_LINE_COUNT_ISSET_ID, value);
  }

  public boolean isUse_mt_scan_node() {
    return this.use_mt_scan_node;
  }

  public THdfsScanNode setUse_mt_scan_node(boolean use_mt_scan_node) {
    this.use_mt_scan_node = use_mt_scan_node;
    setUse_mt_scan_nodeIsSet(true);
    return this;
  }

  public void unsetUse_mt_scan_node() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_MT_SCAN_NODE_ISSET_ID);
  }

  /** Returns true if field use_mt_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_mt_scan_node() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_MT_SCAN_NODE_ISSET_ID);
  }

  public void setUse_mt_scan_nodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_MT_SCAN_NODE_ISSET_ID, value);
  }

  public int getMin_max_conjunctsSize() {
    return (this.min_max_conjuncts == null) ? 0 : this.min_max_conjuncts.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getMin_max_conjunctsIterator() {
    return (this.min_max_conjuncts == null) ? null : this.min_max_conjuncts.iterator();
  }

  public void addToMin_max_conjuncts(org.apache.impala.thrift.TExpr elem) {
    if (this.min_max_conjuncts == null) {
      this.min_max_conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.min_max_conjuncts.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getMin_max_conjuncts() {
    return this.min_max_conjuncts;
  }

  public THdfsScanNode setMin_max_conjuncts(List<org.apache.impala.thrift.TExpr> min_max_conjuncts) {
    this.min_max_conjuncts = min_max_conjuncts;
    return this;
  }

  public void unsetMin_max_conjuncts() {
    this.min_max_conjuncts = null;
  }

  /** Returns true if field min_max_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_max_conjuncts() {
    return this.min_max_conjuncts != null;
  }

  public void setMin_max_conjunctsIsSet(boolean value) {
    if (!value) {
      this.min_max_conjuncts = null;
    }
  }

  public int getMin_max_tuple_id() {
    return this.min_max_tuple_id;
  }

  public THdfsScanNode setMin_max_tuple_id(int min_max_tuple_id) {
    this.min_max_tuple_id = min_max_tuple_id;
    setMin_max_tuple_idIsSet(true);
    return this;
  }

  public void unsetMin_max_tuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_MAX_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field min_max_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_max_tuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_MAX_TUPLE_ID_ISSET_ID);
  }

  public void setMin_max_tuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_MAX_TUPLE_ID_ISSET_ID, value);
  }

  public int getDictionary_filter_conjunctsSize() {
    return (this.dictionary_filter_conjuncts == null) ? 0 : this.dictionary_filter_conjuncts.size();
  }

  public void putToDictionary_filter_conjuncts(int key, List<Integer> val) {
    if (this.dictionary_filter_conjuncts == null) {
      this.dictionary_filter_conjuncts = new HashMap<Integer,List<Integer>>();
    }
    this.dictionary_filter_conjuncts.put(key, val);
  }

  public Map<Integer,List<Integer>> getDictionary_filter_conjuncts() {
    return this.dictionary_filter_conjuncts;
  }

  public THdfsScanNode setDictionary_filter_conjuncts(Map<Integer,List<Integer>> dictionary_filter_conjuncts) {
    this.dictionary_filter_conjuncts = dictionary_filter_conjuncts;
    return this;
  }

  public void unsetDictionary_filter_conjuncts() {
    this.dictionary_filter_conjuncts = null;
  }

  /** Returns true if field dictionary_filter_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionary_filter_conjuncts() {
    return this.dictionary_filter_conjuncts != null;
  }

  public void setDictionary_filter_conjunctsIsSet(boolean value) {
    if (!value) {
      this.dictionary_filter_conjuncts = null;
    }
  }

  public int getParquet_count_star_slot_offset() {
    return this.parquet_count_star_slot_offset;
  }

  public THdfsScanNode setParquet_count_star_slot_offset(int parquet_count_star_slot_offset) {
    this.parquet_count_star_slot_offset = parquet_count_star_slot_offset;
    setParquet_count_star_slot_offsetIsSet(true);
    return this;
  }

  public void unsetParquet_count_star_slot_offset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARQUET_COUNT_STAR_SLOT_OFFSET_ISSET_ID);
  }

  /** Returns true if field parquet_count_star_slot_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_count_star_slot_offset() {
    return EncodingUtils.testBit(__isset_bitfield, __PARQUET_COUNT_STAR_SLOT_OFFSET_ISSET_ID);
  }

  public void setParquet_count_star_slot_offsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARQUET_COUNT_STAR_SLOT_OFFSET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((Integer)value);
      }
      break;

    case COLLECTION_CONJUNCTS:
      if (value == null) {
        unsetCollection_conjuncts();
      } else {
        setCollection_conjuncts((Map<Integer,List<org.apache.impala.thrift.TExpr>>)value);
      }
      break;

    case REPLICA_PREFERENCE:
      if (value == null) {
        unsetReplica_preference();
      } else {
        setReplica_preference((TReplicaPreference)value);
      }
      break;

    case RANDOM_REPLICA:
      if (value == null) {
        unsetRandom_replica();
      } else {
        setRandom_replica((Boolean)value);
      }
      break;

    case SKIP_HEADER_LINE_COUNT:
      if (value == null) {
        unsetSkip_header_line_count();
      } else {
        setSkip_header_line_count((Integer)value);
      }
      break;

    case USE_MT_SCAN_NODE:
      if (value == null) {
        unsetUse_mt_scan_node();
      } else {
        setUse_mt_scan_node((Boolean)value);
      }
      break;

    case MIN_MAX_CONJUNCTS:
      if (value == null) {
        unsetMin_max_conjuncts();
      } else {
        setMin_max_conjuncts((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case MIN_MAX_TUPLE_ID:
      if (value == null) {
        unsetMin_max_tuple_id();
      } else {
        setMin_max_tuple_id((Integer)value);
      }
      break;

    case DICTIONARY_FILTER_CONJUNCTS:
      if (value == null) {
        unsetDictionary_filter_conjuncts();
      } else {
        setDictionary_filter_conjuncts((Map<Integer,List<Integer>>)value);
      }
      break;

    case PARQUET_COUNT_STAR_SLOT_OFFSET:
      if (value == null) {
        unsetParquet_count_star_slot_offset();
      } else {
        setParquet_count_star_slot_offset((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTuple_id();

    case COLLECTION_CONJUNCTS:
      return getCollection_conjuncts();

    case REPLICA_PREFERENCE:
      return getReplica_preference();

    case RANDOM_REPLICA:
      return isRandom_replica();

    case SKIP_HEADER_LINE_COUNT:
      return getSkip_header_line_count();

    case USE_MT_SCAN_NODE:
      return isUse_mt_scan_node();

    case MIN_MAX_CONJUNCTS:
      return getMin_max_conjuncts();

    case MIN_MAX_TUPLE_ID:
      return getMin_max_tuple_id();

    case DICTIONARY_FILTER_CONJUNCTS:
      return getDictionary_filter_conjuncts();

    case PARQUET_COUNT_STAR_SLOT_OFFSET:
      return getParquet_count_star_slot_offset();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTuple_id();
    case COLLECTION_CONJUNCTS:
      return isSetCollection_conjuncts();
    case REPLICA_PREFERENCE:
      return isSetReplica_preference();
    case RANDOM_REPLICA:
      return isSetRandom_replica();
    case SKIP_HEADER_LINE_COUNT:
      return isSetSkip_header_line_count();
    case USE_MT_SCAN_NODE:
      return isSetUse_mt_scan_node();
    case MIN_MAX_CONJUNCTS:
      return isSetMin_max_conjuncts();
    case MIN_MAX_TUPLE_ID:
      return isSetMin_max_tuple_id();
    case DICTIONARY_FILTER_CONJUNCTS:
      return isSetDictionary_filter_conjuncts();
    case PARQUET_COUNT_STAR_SLOT_OFFSET:
      return isSetParquet_count_star_slot_offset();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THdfsScanNode)
      return this.equals((THdfsScanNode)that);
    return false;
  }

  public boolean equals(THdfsScanNode that) {
    if (that == null)
      return false;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_collection_conjuncts = true && this.isSetCollection_conjuncts();
    boolean that_present_collection_conjuncts = true && that.isSetCollection_conjuncts();
    if (this_present_collection_conjuncts || that_present_collection_conjuncts) {
      if (!(this_present_collection_conjuncts && that_present_collection_conjuncts))
        return false;
      if (!this.collection_conjuncts.equals(that.collection_conjuncts))
        return false;
    }

    boolean this_present_replica_preference = true && this.isSetReplica_preference();
    boolean that_present_replica_preference = true && that.isSetReplica_preference();
    if (this_present_replica_preference || that_present_replica_preference) {
      if (!(this_present_replica_preference && that_present_replica_preference))
        return false;
      if (!this.replica_preference.equals(that.replica_preference))
        return false;
    }

    boolean this_present_random_replica = true && this.isSetRandom_replica();
    boolean that_present_random_replica = true && that.isSetRandom_replica();
    if (this_present_random_replica || that_present_random_replica) {
      if (!(this_present_random_replica && that_present_random_replica))
        return false;
      if (this.random_replica != that.random_replica)
        return false;
    }

    boolean this_present_skip_header_line_count = true && this.isSetSkip_header_line_count();
    boolean that_present_skip_header_line_count = true && that.isSetSkip_header_line_count();
    if (this_present_skip_header_line_count || that_present_skip_header_line_count) {
      if (!(this_present_skip_header_line_count && that_present_skip_header_line_count))
        return false;
      if (this.skip_header_line_count != that.skip_header_line_count)
        return false;
    }

    boolean this_present_use_mt_scan_node = true && this.isSetUse_mt_scan_node();
    boolean that_present_use_mt_scan_node = true && that.isSetUse_mt_scan_node();
    if (this_present_use_mt_scan_node || that_present_use_mt_scan_node) {
      if (!(this_present_use_mt_scan_node && that_present_use_mt_scan_node))
        return false;
      if (this.use_mt_scan_node != that.use_mt_scan_node)
        return false;
    }

    boolean this_present_min_max_conjuncts = true && this.isSetMin_max_conjuncts();
    boolean that_present_min_max_conjuncts = true && that.isSetMin_max_conjuncts();
    if (this_present_min_max_conjuncts || that_present_min_max_conjuncts) {
      if (!(this_present_min_max_conjuncts && that_present_min_max_conjuncts))
        return false;
      if (!this.min_max_conjuncts.equals(that.min_max_conjuncts))
        return false;
    }

    boolean this_present_min_max_tuple_id = true && this.isSetMin_max_tuple_id();
    boolean that_present_min_max_tuple_id = true && that.isSetMin_max_tuple_id();
    if (this_present_min_max_tuple_id || that_present_min_max_tuple_id) {
      if (!(this_present_min_max_tuple_id && that_present_min_max_tuple_id))
        return false;
      if (this.min_max_tuple_id != that.min_max_tuple_id)
        return false;
    }

    boolean this_present_dictionary_filter_conjuncts = true && this.isSetDictionary_filter_conjuncts();
    boolean that_present_dictionary_filter_conjuncts = true && that.isSetDictionary_filter_conjuncts();
    if (this_present_dictionary_filter_conjuncts || that_present_dictionary_filter_conjuncts) {
      if (!(this_present_dictionary_filter_conjuncts && that_present_dictionary_filter_conjuncts))
        return false;
      if (!this.dictionary_filter_conjuncts.equals(that.dictionary_filter_conjuncts))
        return false;
    }

    boolean this_present_parquet_count_star_slot_offset = true && this.isSetParquet_count_star_slot_offset();
    boolean that_present_parquet_count_star_slot_offset = true && that.isSetParquet_count_star_slot_offset();
    if (this_present_parquet_count_star_slot_offset || that_present_parquet_count_star_slot_offset) {
      if (!(this_present_parquet_count_star_slot_offset && that_present_parquet_count_star_slot_offset))
        return false;
      if (this.parquet_count_star_slot_offset != that.parquet_count_star_slot_offset)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tuple_id = true;
    list.add(present_tuple_id);
    if (present_tuple_id)
      list.add(tuple_id);

    boolean present_collection_conjuncts = true && (isSetCollection_conjuncts());
    list.add(present_collection_conjuncts);
    if (present_collection_conjuncts)
      list.add(collection_conjuncts);

    boolean present_replica_preference = true && (isSetReplica_preference());
    list.add(present_replica_preference);
    if (present_replica_preference)
      list.add(replica_preference.getValue());

    boolean present_random_replica = true && (isSetRandom_replica());
    list.add(present_random_replica);
    if (present_random_replica)
      list.add(random_replica);

    boolean present_skip_header_line_count = true && (isSetSkip_header_line_count());
    list.add(present_skip_header_line_count);
    if (present_skip_header_line_count)
      list.add(skip_header_line_count);

    boolean present_use_mt_scan_node = true && (isSetUse_mt_scan_node());
    list.add(present_use_mt_scan_node);
    if (present_use_mt_scan_node)
      list.add(use_mt_scan_node);

    boolean present_min_max_conjuncts = true && (isSetMin_max_conjuncts());
    list.add(present_min_max_conjuncts);
    if (present_min_max_conjuncts)
      list.add(min_max_conjuncts);

    boolean present_min_max_tuple_id = true && (isSetMin_max_tuple_id());
    list.add(present_min_max_tuple_id);
    if (present_min_max_tuple_id)
      list.add(min_max_tuple_id);

    boolean present_dictionary_filter_conjuncts = true && (isSetDictionary_filter_conjuncts());
    list.add(present_dictionary_filter_conjuncts);
    if (present_dictionary_filter_conjuncts)
      list.add(dictionary_filter_conjuncts);

    boolean present_parquet_count_star_slot_offset = true && (isSetParquet_count_star_slot_offset());
    list.add(present_parquet_count_star_slot_offset);
    if (present_parquet_count_star_slot_offset)
      list.add(parquet_count_star_slot_offset);

    return list.hashCode();
  }

  @Override
  public int compareTo(THdfsScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTuple_id()).compareTo(other.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollection_conjuncts()).compareTo(other.isSetCollection_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection_conjuncts, other.collection_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplica_preference()).compareTo(other.isSetReplica_preference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplica_preference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replica_preference, other.replica_preference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRandom_replica()).compareTo(other.isSetRandom_replica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandom_replica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.random_replica, other.random_replica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkip_header_line_count()).compareTo(other.isSetSkip_header_line_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkip_header_line_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip_header_line_count, other.skip_header_line_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_mt_scan_node()).compareTo(other.isSetUse_mt_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_mt_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_mt_scan_node, other.use_mt_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_max_conjuncts()).compareTo(other.isSetMin_max_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_max_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_max_conjuncts, other.min_max_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_max_tuple_id()).compareTo(other.isSetMin_max_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_max_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_max_tuple_id, other.min_max_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDictionary_filter_conjuncts()).compareTo(other.isSetDictionary_filter_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionary_filter_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionary_filter_conjuncts, other.dictionary_filter_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_count_star_slot_offset()).compareTo(other.isSetParquet_count_star_slot_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_count_star_slot_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_count_star_slot_offset, other.parquet_count_star_slot_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THdfsScanNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (isSetCollection_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("collection_conjuncts:");
      if (this.collection_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.collection_conjuncts);
      }
      first = false;
    }
    if (isSetReplica_preference()) {
      if (!first) sb.append(", ");
      sb.append("replica_preference:");
      if (this.replica_preference == null) {
        sb.append("null");
      } else {
        sb.append(this.replica_preference);
      }
      first = false;
    }
    if (isSetRandom_replica()) {
      if (!first) sb.append(", ");
      sb.append("random_replica:");
      sb.append(this.random_replica);
      first = false;
    }
    if (isSetSkip_header_line_count()) {
      if (!first) sb.append(", ");
      sb.append("skip_header_line_count:");
      sb.append(this.skip_header_line_count);
      first = false;
    }
    if (isSetUse_mt_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("use_mt_scan_node:");
      sb.append(this.use_mt_scan_node);
      first = false;
    }
    if (isSetMin_max_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("min_max_conjuncts:");
      if (this.min_max_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.min_max_conjuncts);
      }
      first = false;
    }
    if (isSetMin_max_tuple_id()) {
      if (!first) sb.append(", ");
      sb.append("min_max_tuple_id:");
      sb.append(this.min_max_tuple_id);
      first = false;
    }
    if (isSetDictionary_filter_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("dictionary_filter_conjuncts:");
      if (this.dictionary_filter_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.dictionary_filter_conjuncts);
      }
      first = false;
    }
    if (isSetParquet_count_star_slot_offset()) {
      if (!first) sb.append(", ");
      sb.append("parquet_count_star_slot_offset:");
      sb.append(this.parquet_count_star_slot_offset);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsScanNodeStandardSchemeFactory implements SchemeFactory {
    public THdfsScanNodeStandardScheme getScheme() {
      return new THdfsScanNodeStandardScheme();
    }
  }

  private static class THdfsScanNodeStandardScheme extends StandardScheme<THdfsScanNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLLECTION_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.collection_conjuncts = new HashMap<Integer,List<org.apache.impala.thrift.TExpr>>(2*_map26.size);
                int _key27;
                List<org.apache.impala.thrift.TExpr> _val28;
                for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                {
                  _key27 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                    _val28 = new ArrayList<org.apache.impala.thrift.TExpr>(_list30.size);
                    org.apache.impala.thrift.TExpr _elem31;
                    for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                    {
                      _elem31 = new org.apache.impala.thrift.TExpr();
                      _elem31.read(iprot);
                      _val28.add(_elem31);
                    }
                    iprot.readListEnd();
                  }
                  struct.collection_conjuncts.put(_key27, _val28);
                }
                iprot.readMapEnd();
              }
              struct.setCollection_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLICA_PREFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replica_preference = org.apache.impala.thrift.TReplicaPreference.findByValue(iprot.readI32());
              struct.setReplica_preferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RANDOM_REPLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.random_replica = iprot.readBool();
              struct.setRandom_replicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SKIP_HEADER_LINE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skip_header_line_count = iprot.readI32();
              struct.setSkip_header_line_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USE_MT_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_mt_scan_node = iprot.readBool();
              struct.setUse_mt_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MIN_MAX_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.min_max_conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>(_list33.size);
                org.apache.impala.thrift.TExpr _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = new org.apache.impala.thrift.TExpr();
                  _elem34.read(iprot);
                  struct.min_max_conjuncts.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setMin_max_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MIN_MAX_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_max_tuple_id = iprot.readI32();
              struct.setMin_max_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DICTIONARY_FILTER_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                struct.dictionary_filter_conjuncts = new HashMap<Integer,List<Integer>>(2*_map36.size);
                int _key37;
                List<Integer> _val38;
                for (int _i39 = 0; _i39 < _map36.size; ++_i39)
                {
                  _key37 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                    _val38 = new ArrayList<Integer>(_list40.size);
                    int _elem41;
                    for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                    {
                      _elem41 = iprot.readI32();
                      _val38.add(_elem41);
                    }
                    iprot.readListEnd();
                  }
                  struct.dictionary_filter_conjuncts.put(_key37, _val38);
                }
                iprot.readMapEnd();
              }
              struct.setDictionary_filter_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARQUET_COUNT_STAR_SLOT_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parquet_count_star_slot_offset = iprot.readI32();
              struct.setParquet_count_star_slot_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.collection_conjuncts != null) {
        if (struct.isSetCollection_conjuncts()) {
          oprot.writeFieldBegin(COLLECTION_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.collection_conjuncts.size()));
            for (Map.Entry<Integer, List<org.apache.impala.thrift.TExpr>> _iter43 : struct.collection_conjuncts.entrySet())
            {
              oprot.writeI32(_iter43.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter43.getValue().size()));
                for (org.apache.impala.thrift.TExpr _iter44 : _iter43.getValue())
                {
                  _iter44.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.replica_preference != null) {
        if (struct.isSetReplica_preference()) {
          oprot.writeFieldBegin(REPLICA_PREFERENCE_FIELD_DESC);
          oprot.writeI32(struct.replica_preference.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRandom_replica()) {
        oprot.writeFieldBegin(RANDOM_REPLICA_FIELD_DESC);
        oprot.writeBool(struct.random_replica);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkip_header_line_count()) {
        oprot.writeFieldBegin(SKIP_HEADER_LINE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.skip_header_line_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_mt_scan_node()) {
        oprot.writeFieldBegin(USE_MT_SCAN_NODE_FIELD_DESC);
        oprot.writeBool(struct.use_mt_scan_node);
        oprot.writeFieldEnd();
      }
      if (struct.min_max_conjuncts != null) {
        if (struct.isSetMin_max_conjuncts()) {
          oprot.writeFieldBegin(MIN_MAX_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.min_max_conjuncts.size()));
            for (org.apache.impala.thrift.TExpr _iter45 : struct.min_max_conjuncts)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMin_max_tuple_id()) {
        oprot.writeFieldBegin(MIN_MAX_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.min_max_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.dictionary_filter_conjuncts != null) {
        if (struct.isSetDictionary_filter_conjuncts()) {
          oprot.writeFieldBegin(DICTIONARY_FILTER_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.dictionary_filter_conjuncts.size()));
            for (Map.Entry<Integer, List<Integer>> _iter46 : struct.dictionary_filter_conjuncts.entrySet())
            {
              oprot.writeI32(_iter46.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter46.getValue().size()));
                for (int _iter47 : _iter46.getValue())
                {
                  oprot.writeI32(_iter47);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParquet_count_star_slot_offset()) {
        oprot.writeFieldBegin(PARQUET_COUNT_STAR_SLOT_OFFSET_FIELD_DESC);
        oprot.writeI32(struct.parquet_count_star_slot_offset);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsScanNodeTupleSchemeFactory implements SchemeFactory {
    public THdfsScanNodeTupleScheme getScheme() {
      return new THdfsScanNodeTupleScheme();
    }
  }

  private static class THdfsScanNodeTupleScheme extends TupleScheme<THdfsScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsScanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      BitSet optionals = new BitSet();
      if (struct.isSetCollection_conjuncts()) {
        optionals.set(0);
      }
      if (struct.isSetReplica_preference()) {
        optionals.set(1);
      }
      if (struct.isSetRandom_replica()) {
        optionals.set(2);
      }
      if (struct.isSetSkip_header_line_count()) {
        optionals.set(3);
      }
      if (struct.isSetUse_mt_scan_node()) {
        optionals.set(4);
      }
      if (struct.isSetMin_max_conjuncts()) {
        optionals.set(5);
      }
      if (struct.isSetMin_max_tuple_id()) {
        optionals.set(6);
      }
      if (struct.isSetDictionary_filter_conjuncts()) {
        optionals.set(7);
      }
      if (struct.isSetParquet_count_star_slot_offset()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetCollection_conjuncts()) {
        {
          oprot.writeI32(struct.collection_conjuncts.size());
          for (Map.Entry<Integer, List<org.apache.impala.thrift.TExpr>> _iter48 : struct.collection_conjuncts.entrySet())
          {
            oprot.writeI32(_iter48.getKey());
            {
              oprot.writeI32(_iter48.getValue().size());
              for (org.apache.impala.thrift.TExpr _iter49 : _iter48.getValue())
              {
                _iter49.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetReplica_preference()) {
        oprot.writeI32(struct.replica_preference.getValue());
      }
      if (struct.isSetRandom_replica()) {
        oprot.writeBool(struct.random_replica);
      }
      if (struct.isSetSkip_header_line_count()) {
        oprot.writeI32(struct.skip_header_line_count);
      }
      if (struct.isSetUse_mt_scan_node()) {
        oprot.writeBool(struct.use_mt_scan_node);
      }
      if (struct.isSetMin_max_conjuncts()) {
        {
          oprot.writeI32(struct.min_max_conjuncts.size());
          for (org.apache.impala.thrift.TExpr _iter50 : struct.min_max_conjuncts)
          {
            _iter50.write(oprot);
          }
        }
      }
      if (struct.isSetMin_max_tuple_id()) {
        oprot.writeI32(struct.min_max_tuple_id);
      }
      if (struct.isSetDictionary_filter_conjuncts()) {
        {
          oprot.writeI32(struct.dictionary_filter_conjuncts.size());
          for (Map.Entry<Integer, List<Integer>> _iter51 : struct.dictionary_filter_conjuncts.entrySet())
          {
            oprot.writeI32(_iter51.getKey());
            {
              oprot.writeI32(_iter51.getValue().size());
              for (int _iter52 : _iter51.getValue())
              {
                oprot.writeI32(_iter52);
              }
            }
          }
        }
      }
      if (struct.isSetParquet_count_star_slot_offset()) {
        oprot.writeI32(struct.parquet_count_star_slot_offset);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsScanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTuple_idIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map53 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.collection_conjuncts = new HashMap<Integer,List<org.apache.impala.thrift.TExpr>>(2*_map53.size);
          int _key54;
          List<org.apache.impala.thrift.TExpr> _val55;
          for (int _i56 = 0; _i56 < _map53.size; ++_i56)
          {
            _key54 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val55 = new ArrayList<org.apache.impala.thrift.TExpr>(_list57.size);
              org.apache.impala.thrift.TExpr _elem58;
              for (int _i59 = 0; _i59 < _list57.size; ++_i59)
              {
                _elem58 = new org.apache.impala.thrift.TExpr();
                _elem58.read(iprot);
                _val55.add(_elem58);
              }
            }
            struct.collection_conjuncts.put(_key54, _val55);
          }
        }
        struct.setCollection_conjunctsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.replica_preference = org.apache.impala.thrift.TReplicaPreference.findByValue(iprot.readI32());
        struct.setReplica_preferenceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.random_replica = iprot.readBool();
        struct.setRandom_replicaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.skip_header_line_count = iprot.readI32();
        struct.setSkip_header_line_countIsSet(true);
      }
      if (incoming.get(4)) {
        struct.use_mt_scan_node = iprot.readBool();
        struct.setUse_mt_scan_nodeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.min_max_conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>(_list60.size);
          org.apache.impala.thrift.TExpr _elem61;
          for (int _i62 = 0; _i62 < _list60.size; ++_i62)
          {
            _elem61 = new org.apache.impala.thrift.TExpr();
            _elem61.read(iprot);
            struct.min_max_conjuncts.add(_elem61);
          }
        }
        struct.setMin_max_conjunctsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.min_max_tuple_id = iprot.readI32();
        struct.setMin_max_tuple_idIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map63 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.dictionary_filter_conjuncts = new HashMap<Integer,List<Integer>>(2*_map63.size);
          int _key64;
          List<Integer> _val65;
          for (int _i66 = 0; _i66 < _map63.size; ++_i66)
          {
            _key64 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _val65 = new ArrayList<Integer>(_list67.size);
              int _elem68;
              for (int _i69 = 0; _i69 < _list67.size; ++_i69)
              {
                _elem68 = iprot.readI32();
                _val65.add(_elem68);
              }
            }
            struct.dictionary_filter_conjuncts.put(_key64, _val65);
          }
        }
        struct.setDictionary_filter_conjunctsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.parquet_count_star_slot_offset = iprot.readI32();
        struct.setParquet_count_star_slot_offsetIsSet(true);
      }
    }
  }

}

