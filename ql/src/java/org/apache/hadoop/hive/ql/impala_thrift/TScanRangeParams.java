/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TScanRangeParams implements org.apache.thrift.TBase<TScanRangeParams, TScanRangeParams._Fields>, java.io.Serializable, Cloneable, Comparable<TScanRangeParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TScanRangeParams");

  private static final org.apache.thrift.protocol.TField SCAN_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_range", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField VOLUME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("volume_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TRY_HDFS_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("try_hdfs_cache", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_REMOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_remote", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TScanRangeParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TScanRangeParamsTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TScanRange scan_range; // required
  private int volume_id; // optional
  private boolean try_hdfs_cache; // optional
  private boolean is_remote; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCAN_RANGE((short)1, "scan_range"),
    VOLUME_ID((short)2, "volume_id"),
    TRY_HDFS_CACHE((short)3, "try_hdfs_cache"),
    IS_REMOTE((short)4, "is_remote");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCAN_RANGE
          return SCAN_RANGE;
        case 2: // VOLUME_ID
          return VOLUME_ID;
        case 3: // TRY_HDFS_CACHE
          return TRY_HDFS_CACHE;
        case 4: // IS_REMOTE
          return IS_REMOTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOLUME_ID_ISSET_ID = 0;
  private static final int __TRY_HDFS_CACHE_ISSET_ID = 1;
  private static final int __IS_REMOTE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VOLUME_ID,_Fields.TRY_HDFS_CACHE,_Fields.IS_REMOTE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCAN_RANGE, new org.apache.thrift.meta_data.FieldMetaData("scan_range", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TScanRange.class)));
    tmpMap.put(_Fields.VOLUME_ID, new org.apache.thrift.meta_data.FieldMetaData("volume_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRY_HDFS_CACHE, new org.apache.thrift.meta_data.FieldMetaData("try_hdfs_cache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_REMOTE, new org.apache.thrift.meta_data.FieldMetaData("is_remote", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TScanRangeParams.class, metaDataMap);
  }

  public TScanRangeParams() {
    this.volume_id = -1;

    this.try_hdfs_cache = false;

  }

  public TScanRangeParams(
    org.apache.impala.thrift.TScanRange scan_range)
  {
    this();
    this.scan_range = scan_range;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TScanRangeParams(TScanRangeParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetScan_range()) {
      this.scan_range = new org.apache.impala.thrift.TScanRange(other.scan_range);
    }
    this.volume_id = other.volume_id;
    this.try_hdfs_cache = other.try_hdfs_cache;
    this.is_remote = other.is_remote;
  }

  public TScanRangeParams deepCopy() {
    return new TScanRangeParams(this);
  }

  @Override
  public void clear() {
    this.scan_range = null;
    this.volume_id = -1;

    this.try_hdfs_cache = false;

    setIs_remoteIsSet(false);
    this.is_remote = false;
  }

  public org.apache.impala.thrift.TScanRange getScan_range() {
    return this.scan_range;
  }

  public void setScan_range(org.apache.impala.thrift.TScanRange scan_range) {
    this.scan_range = scan_range;
  }

  public void unsetScan_range() {
    this.scan_range = null;
  }

  /** Returns true if field scan_range is set (has been assigned a value) and false otherwise */
  public boolean isSetScan_range() {
    return this.scan_range != null;
  }

  public void setScan_rangeIsSet(boolean value) {
    if (!value) {
      this.scan_range = null;
    }
  }

  public int getVolume_id() {
    return this.volume_id;
  }

  public void setVolume_id(int volume_id) {
    this.volume_id = volume_id;
    setVolume_idIsSet(true);
  }

  public void unsetVolume_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ID_ISSET_ID);
  }

  /** Returns true if field volume_id is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume_id() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ID_ISSET_ID);
  }

  public void setVolume_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ID_ISSET_ID, value);
  }

  public boolean isTry_hdfs_cache() {
    return this.try_hdfs_cache;
  }

  public void setTry_hdfs_cache(boolean try_hdfs_cache) {
    this.try_hdfs_cache = try_hdfs_cache;
    setTry_hdfs_cacheIsSet(true);
  }

  public void unsetTry_hdfs_cache() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRY_HDFS_CACHE_ISSET_ID);
  }

  /** Returns true if field try_hdfs_cache is set (has been assigned a value) and false otherwise */
  public boolean isSetTry_hdfs_cache() {
    return EncodingUtils.testBit(__isset_bitfield, __TRY_HDFS_CACHE_ISSET_ID);
  }

  public void setTry_hdfs_cacheIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRY_HDFS_CACHE_ISSET_ID, value);
  }

  public boolean isIs_remote() {
    return this.is_remote;
  }

  public void setIs_remote(boolean is_remote) {
    this.is_remote = is_remote;
    setIs_remoteIsSet(true);
  }

  public void unsetIs_remote() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_REMOTE_ISSET_ID);
  }

  /** Returns true if field is_remote is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_remote() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_REMOTE_ISSET_ID);
  }

  public void setIs_remoteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_REMOTE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SCAN_RANGE:
      if (value == null) {
        unsetScan_range();
      } else {
        setScan_range((org.apache.impala.thrift.TScanRange)value);
      }
      break;

    case VOLUME_ID:
      if (value == null) {
        unsetVolume_id();
      } else {
        setVolume_id((Integer)value);
      }
      break;

    case TRY_HDFS_CACHE:
      if (value == null) {
        unsetTry_hdfs_cache();
      } else {
        setTry_hdfs_cache((Boolean)value);
      }
      break;

    case IS_REMOTE:
      if (value == null) {
        unsetIs_remote();
      } else {
        setIs_remote((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SCAN_RANGE:
      return getScan_range();

    case VOLUME_ID:
      return getVolume_id();

    case TRY_HDFS_CACHE:
      return isTry_hdfs_cache();

    case IS_REMOTE:
      return isIs_remote();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SCAN_RANGE:
      return isSetScan_range();
    case VOLUME_ID:
      return isSetVolume_id();
    case TRY_HDFS_CACHE:
      return isSetTry_hdfs_cache();
    case IS_REMOTE:
      return isSetIs_remote();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TScanRangeParams)
      return this.equals((TScanRangeParams)that);
    return false;
  }

  public boolean equals(TScanRangeParams that) {
    if (that == null)
      return false;

    boolean this_present_scan_range = true && this.isSetScan_range();
    boolean that_present_scan_range = true && that.isSetScan_range();
    if (this_present_scan_range || that_present_scan_range) {
      if (!(this_present_scan_range && that_present_scan_range))
        return false;
      if (!this.scan_range.equals(that.scan_range))
        return false;
    }

    boolean this_present_volume_id = true && this.isSetVolume_id();
    boolean that_present_volume_id = true && that.isSetVolume_id();
    if (this_present_volume_id || that_present_volume_id) {
      if (!(this_present_volume_id && that_present_volume_id))
        return false;
      if (this.volume_id != that.volume_id)
        return false;
    }

    boolean this_present_try_hdfs_cache = true && this.isSetTry_hdfs_cache();
    boolean that_present_try_hdfs_cache = true && that.isSetTry_hdfs_cache();
    if (this_present_try_hdfs_cache || that_present_try_hdfs_cache) {
      if (!(this_present_try_hdfs_cache && that_present_try_hdfs_cache))
        return false;
      if (this.try_hdfs_cache != that.try_hdfs_cache)
        return false;
    }

    boolean this_present_is_remote = true && this.isSetIs_remote();
    boolean that_present_is_remote = true && that.isSetIs_remote();
    if (this_present_is_remote || that_present_is_remote) {
      if (!(this_present_is_remote && that_present_is_remote))
        return false;
      if (this.is_remote != that.is_remote)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_scan_range = true && (isSetScan_range());
    list.add(present_scan_range);
    if (present_scan_range)
      list.add(scan_range);

    boolean present_volume_id = true && (isSetVolume_id());
    list.add(present_volume_id);
    if (present_volume_id)
      list.add(volume_id);

    boolean present_try_hdfs_cache = true && (isSetTry_hdfs_cache());
    list.add(present_try_hdfs_cache);
    if (present_try_hdfs_cache)
      list.add(try_hdfs_cache);

    boolean present_is_remote = true && (isSetIs_remote());
    list.add(present_is_remote);
    if (present_is_remote)
      list.add(is_remote);

    return list.hashCode();
  }

  @Override
  public int compareTo(TScanRangeParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetScan_range()).compareTo(other.isSetScan_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScan_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_range, other.scan_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume_id()).compareTo(other.isSetVolume_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume_id, other.volume_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTry_hdfs_cache()).compareTo(other.isSetTry_hdfs_cache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTry_hdfs_cache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.try_hdfs_cache, other.try_hdfs_cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_remote()).compareTo(other.isSetIs_remote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_remote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_remote, other.is_remote);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TScanRangeParams(");
    boolean first = true;

    sb.append("scan_range:");
    if (this.scan_range == null) {
      sb.append("null");
    } else {
      sb.append(this.scan_range);
    }
    first = false;
    if (isSetVolume_id()) {
      if (!first) sb.append(", ");
      sb.append("volume_id:");
      sb.append(this.volume_id);
      first = false;
    }
    if (isSetTry_hdfs_cache()) {
      if (!first) sb.append(", ");
      sb.append("try_hdfs_cache:");
      sb.append(this.try_hdfs_cache);
      first = false;
    }
    if (isSetIs_remote()) {
      if (!first) sb.append(", ");
      sb.append("is_remote:");
      sb.append(this.is_remote);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetScan_range()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scan_range' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (scan_range != null) {
      scan_range.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TScanRangeParamsStandardSchemeFactory implements SchemeFactory {
    public TScanRangeParamsStandardScheme getScheme() {
      return new TScanRangeParamsStandardScheme();
    }
  }

  private static class TScanRangeParamsStandardScheme extends StandardScheme<TScanRangeParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TScanRangeParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCAN_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scan_range = new org.apache.impala.thrift.TScanRange();
              struct.scan_range.read(iprot);
              struct.setScan_rangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VOLUME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volume_id = iprot.readI32();
              struct.setVolume_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRY_HDFS_CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.try_hdfs_cache = iprot.readBool();
              struct.setTry_hdfs_cacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_REMOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_remote = iprot.readBool();
              struct.setIs_remoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TScanRangeParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.scan_range != null) {
        oprot.writeFieldBegin(SCAN_RANGE_FIELD_DESC);
        struct.scan_range.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolume_id()) {
        oprot.writeFieldBegin(VOLUME_ID_FIELD_DESC);
        oprot.writeI32(struct.volume_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTry_hdfs_cache()) {
        oprot.writeFieldBegin(TRY_HDFS_CACHE_FIELD_DESC);
        oprot.writeBool(struct.try_hdfs_cache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_remote()) {
        oprot.writeFieldBegin(IS_REMOTE_FIELD_DESC);
        oprot.writeBool(struct.is_remote);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TScanRangeParamsTupleSchemeFactory implements SchemeFactory {
    public TScanRangeParamsTupleScheme getScheme() {
      return new TScanRangeParamsTupleScheme();
    }
  }

  private static class TScanRangeParamsTupleScheme extends TupleScheme<TScanRangeParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TScanRangeParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.scan_range.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetVolume_id()) {
        optionals.set(0);
      }
      if (struct.isSetTry_hdfs_cache()) {
        optionals.set(1);
      }
      if (struct.isSetIs_remote()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetVolume_id()) {
        oprot.writeI32(struct.volume_id);
      }
      if (struct.isSetTry_hdfs_cache()) {
        oprot.writeBool(struct.try_hdfs_cache);
      }
      if (struct.isSetIs_remote()) {
        oprot.writeBool(struct.is_remote);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TScanRangeParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.scan_range = new org.apache.impala.thrift.TScanRange();
      struct.scan_range.read(iprot);
      struct.setScan_rangeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.volume_id = iprot.readI32();
        struct.setVolume_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.try_hdfs_cache = iprot.readBool();
        struct.setTry_hdfs_cacheIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_remote = iprot.readBool();
        struct.setIs_remoteIsSet(true);
      }
    }
  }

}

