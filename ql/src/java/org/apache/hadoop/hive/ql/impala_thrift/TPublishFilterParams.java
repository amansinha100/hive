/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TPublishFilterParams implements org.apache.thrift.TBase<TPublishFilterParams, TPublishFilterParams._Fields>, java.io.Serializable, Cloneable, Comparable<TPublishFilterParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPublishFilterParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DST_QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dst_query_id", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DST_FRAGMENT_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("dst_fragment_idx", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BLOOM_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("bloom_filter", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_MAX_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("min_max_filter", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPublishFilterParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPublishFilterParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public ImpalaInternalServiceVersion protocol_version; // required
  public int filter_id; // optional
  public org.apache.impala.thrift.TUniqueId dst_query_id; // optional
  public int dst_fragment_idx; // optional
  public TBloomFilter bloom_filter; // optional
  public TMinMaxFilter min_max_filter; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ImpalaInternalServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    FILTER_ID((short)2, "filter_id"),
    DST_QUERY_ID((short)3, "dst_query_id"),
    DST_FRAGMENT_IDX((short)4, "dst_fragment_idx"),
    BLOOM_FILTER((short)5, "bloom_filter"),
    MIN_MAX_FILTER((short)6, "min_max_filter");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // FILTER_ID
          return FILTER_ID;
        case 3: // DST_QUERY_ID
          return DST_QUERY_ID;
        case 4: // DST_FRAGMENT_IDX
          return DST_FRAGMENT_IDX;
        case 5: // BLOOM_FILTER
          return BLOOM_FILTER;
        case 6: // MIN_MAX_FILTER
          return MIN_MAX_FILTER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILTER_ID_ISSET_ID = 0;
  private static final int __DST_FRAGMENT_IDX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FILTER_ID,_Fields.DST_QUERY_ID,_Fields.DST_FRAGMENT_IDX,_Fields.BLOOM_FILTER,_Fields.MIN_MAX_FILTER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ImpalaInternalServiceVersion.class)));
    tmpMap.put(_Fields.FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("filter_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DST_QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("dst_query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.DST_FRAGMENT_IDX, new org.apache.thrift.meta_data.FieldMetaData("dst_fragment_idx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TFragmentIdx")));
    tmpMap.put(_Fields.BLOOM_FILTER, new org.apache.thrift.meta_data.FieldMetaData("bloom_filter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBloomFilter.class)));
    tmpMap.put(_Fields.MIN_MAX_FILTER, new org.apache.thrift.meta_data.FieldMetaData("min_max_filter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMinMaxFilter.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPublishFilterParams.class, metaDataMap);
  }

  public TPublishFilterParams() {
  }

  public TPublishFilterParams(
    ImpalaInternalServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPublishFilterParams(TPublishFilterParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    this.filter_id = other.filter_id;
    if (other.isSetDst_query_id()) {
      this.dst_query_id = new org.apache.impala.thrift.TUniqueId(other.dst_query_id);
    }
    this.dst_fragment_idx = other.dst_fragment_idx;
    if (other.isSetBloom_filter()) {
      this.bloom_filter = new TBloomFilter(other.bloom_filter);
    }
    if (other.isSetMin_max_filter()) {
      this.min_max_filter = new TMinMaxFilter(other.min_max_filter);
    }
  }

  public TPublishFilterParams deepCopy() {
    return new TPublishFilterParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    setFilter_idIsSet(false);
    this.filter_id = 0;
    this.dst_query_id = null;
    setDst_fragment_idxIsSet(false);
    this.dst_fragment_idx = 0;
    this.bloom_filter = null;
    this.min_max_filter = null;
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public ImpalaInternalServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see ImpalaInternalServiceVersion
   */
  public TPublishFilterParams setProtocol_version(ImpalaInternalServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public int getFilter_id() {
    return this.filter_id;
  }

  public TPublishFilterParams setFilter_id(int filter_id) {
    this.filter_id = filter_id;
    setFilter_idIsSet(true);
    return this;
  }

  public void unsetFilter_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  /** Returns true if field filter_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_id() {
    return EncodingUtils.testBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  public void setFilter_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILTER_ID_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TUniqueId getDst_query_id() {
    return this.dst_query_id;
  }

  public TPublishFilterParams setDst_query_id(org.apache.impala.thrift.TUniqueId dst_query_id) {
    this.dst_query_id = dst_query_id;
    return this;
  }

  public void unsetDst_query_id() {
    this.dst_query_id = null;
  }

  /** Returns true if field dst_query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDst_query_id() {
    return this.dst_query_id != null;
  }

  public void setDst_query_idIsSet(boolean value) {
    if (!value) {
      this.dst_query_id = null;
    }
  }

  public int getDst_fragment_idx() {
    return this.dst_fragment_idx;
  }

  public TPublishFilterParams setDst_fragment_idx(int dst_fragment_idx) {
    this.dst_fragment_idx = dst_fragment_idx;
    setDst_fragment_idxIsSet(true);
    return this;
  }

  public void unsetDst_fragment_idx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DST_FRAGMENT_IDX_ISSET_ID);
  }

  /** Returns true if field dst_fragment_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetDst_fragment_idx() {
    return EncodingUtils.testBit(__isset_bitfield, __DST_FRAGMENT_IDX_ISSET_ID);
  }

  public void setDst_fragment_idxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DST_FRAGMENT_IDX_ISSET_ID, value);
  }

  public TBloomFilter getBloom_filter() {
    return this.bloom_filter;
  }

  public TPublishFilterParams setBloom_filter(TBloomFilter bloom_filter) {
    this.bloom_filter = bloom_filter;
    return this;
  }

  public void unsetBloom_filter() {
    this.bloom_filter = null;
  }

  /** Returns true if field bloom_filter is set (has been assigned a value) and false otherwise */
  public boolean isSetBloom_filter() {
    return this.bloom_filter != null;
  }

  public void setBloom_filterIsSet(boolean value) {
    if (!value) {
      this.bloom_filter = null;
    }
  }

  public TMinMaxFilter getMin_max_filter() {
    return this.min_max_filter;
  }

  public TPublishFilterParams setMin_max_filter(TMinMaxFilter min_max_filter) {
    this.min_max_filter = min_max_filter;
    return this;
  }

  public void unsetMin_max_filter() {
    this.min_max_filter = null;
  }

  /** Returns true if field min_max_filter is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_max_filter() {
    return this.min_max_filter != null;
  }

  public void setMin_max_filterIsSet(boolean value) {
    if (!value) {
      this.min_max_filter = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((ImpalaInternalServiceVersion)value);
      }
      break;

    case FILTER_ID:
      if (value == null) {
        unsetFilter_id();
      } else {
        setFilter_id((Integer)value);
      }
      break;

    case DST_QUERY_ID:
      if (value == null) {
        unsetDst_query_id();
      } else {
        setDst_query_id((org.apache.impala.thrift.TUniqueId)value);
      }
      break;

    case DST_FRAGMENT_IDX:
      if (value == null) {
        unsetDst_fragment_idx();
      } else {
        setDst_fragment_idx((Integer)value);
      }
      break;

    case BLOOM_FILTER:
      if (value == null) {
        unsetBloom_filter();
      } else {
        setBloom_filter((TBloomFilter)value);
      }
      break;

    case MIN_MAX_FILTER:
      if (value == null) {
        unsetMin_max_filter();
      } else {
        setMin_max_filter((TMinMaxFilter)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case FILTER_ID:
      return getFilter_id();

    case DST_QUERY_ID:
      return getDst_query_id();

    case DST_FRAGMENT_IDX:
      return getDst_fragment_idx();

    case BLOOM_FILTER:
      return getBloom_filter();

    case MIN_MAX_FILTER:
      return getMin_max_filter();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case FILTER_ID:
      return isSetFilter_id();
    case DST_QUERY_ID:
      return isSetDst_query_id();
    case DST_FRAGMENT_IDX:
      return isSetDst_fragment_idx();
    case BLOOM_FILTER:
      return isSetBloom_filter();
    case MIN_MAX_FILTER:
      return isSetMin_max_filter();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPublishFilterParams)
      return this.equals((TPublishFilterParams)that);
    return false;
  }

  public boolean equals(TPublishFilterParams that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_filter_id = true && this.isSetFilter_id();
    boolean that_present_filter_id = true && that.isSetFilter_id();
    if (this_present_filter_id || that_present_filter_id) {
      if (!(this_present_filter_id && that_present_filter_id))
        return false;
      if (this.filter_id != that.filter_id)
        return false;
    }

    boolean this_present_dst_query_id = true && this.isSetDst_query_id();
    boolean that_present_dst_query_id = true && that.isSetDst_query_id();
    if (this_present_dst_query_id || that_present_dst_query_id) {
      if (!(this_present_dst_query_id && that_present_dst_query_id))
        return false;
      if (!this.dst_query_id.equals(that.dst_query_id))
        return false;
    }

    boolean this_present_dst_fragment_idx = true && this.isSetDst_fragment_idx();
    boolean that_present_dst_fragment_idx = true && that.isSetDst_fragment_idx();
    if (this_present_dst_fragment_idx || that_present_dst_fragment_idx) {
      if (!(this_present_dst_fragment_idx && that_present_dst_fragment_idx))
        return false;
      if (this.dst_fragment_idx != that.dst_fragment_idx)
        return false;
    }

    boolean this_present_bloom_filter = true && this.isSetBloom_filter();
    boolean that_present_bloom_filter = true && that.isSetBloom_filter();
    if (this_present_bloom_filter || that_present_bloom_filter) {
      if (!(this_present_bloom_filter && that_present_bloom_filter))
        return false;
      if (!this.bloom_filter.equals(that.bloom_filter))
        return false;
    }

    boolean this_present_min_max_filter = true && this.isSetMin_max_filter();
    boolean that_present_min_max_filter = true && that.isSetMin_max_filter();
    if (this_present_min_max_filter || that_present_min_max_filter) {
      if (!(this_present_min_max_filter && that_present_min_max_filter))
        return false;
      if (!this.min_max_filter.equals(that.min_max_filter))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocol_version = true && (isSetProtocol_version());
    list.add(present_protocol_version);
    if (present_protocol_version)
      list.add(protocol_version.getValue());

    boolean present_filter_id = true && (isSetFilter_id());
    list.add(present_filter_id);
    if (present_filter_id)
      list.add(filter_id);

    boolean present_dst_query_id = true && (isSetDst_query_id());
    list.add(present_dst_query_id);
    if (present_dst_query_id)
      list.add(dst_query_id);

    boolean present_dst_fragment_idx = true && (isSetDst_fragment_idx());
    list.add(present_dst_fragment_idx);
    if (present_dst_fragment_idx)
      list.add(dst_fragment_idx);

    boolean present_bloom_filter = true && (isSetBloom_filter());
    list.add(present_bloom_filter);
    if (present_bloom_filter)
      list.add(bloom_filter);

    boolean present_min_max_filter = true && (isSetMin_max_filter());
    list.add(present_min_max_filter);
    if (present_min_max_filter)
      list.add(min_max_filter);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPublishFilterParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_id()).compareTo(other.isSetFilter_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_id, other.filter_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDst_query_id()).compareTo(other.isSetDst_query_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDst_query_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dst_query_id, other.dst_query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDst_fragment_idx()).compareTo(other.isSetDst_fragment_idx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDst_fragment_idx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dst_fragment_idx, other.dst_fragment_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBloom_filter()).compareTo(other.isSetBloom_filter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloom_filter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloom_filter, other.bloom_filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_max_filter()).compareTo(other.isSetMin_max_filter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_max_filter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_max_filter, other.min_max_filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPublishFilterParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetFilter_id()) {
      if (!first) sb.append(", ");
      sb.append("filter_id:");
      sb.append(this.filter_id);
      first = false;
    }
    if (isSetDst_query_id()) {
      if (!first) sb.append(", ");
      sb.append("dst_query_id:");
      if (this.dst_query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.dst_query_id);
      }
      first = false;
    }
    if (isSetDst_fragment_idx()) {
      if (!first) sb.append(", ");
      sb.append("dst_fragment_idx:");
      sb.append(this.dst_fragment_idx);
      first = false;
    }
    if (isSetBloom_filter()) {
      if (!first) sb.append(", ");
      sb.append("bloom_filter:");
      if (this.bloom_filter == null) {
        sb.append("null");
      } else {
        sb.append(this.bloom_filter);
      }
      first = false;
    }
    if (isSetMin_max_filter()) {
      if (!first) sb.append(", ");
      sb.append("min_max_filter:");
      if (this.min_max_filter == null) {
        sb.append("null");
      } else {
        sb.append(this.min_max_filter);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (dst_query_id != null) {
      dst_query_id.validate();
    }
    if (bloom_filter != null) {
      bloom_filter.validate();
    }
    if (min_max_filter != null) {
      min_max_filter.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPublishFilterParamsStandardSchemeFactory implements SchemeFactory {
    public TPublishFilterParamsStandardScheme getScheme() {
      return new TPublishFilterParamsStandardScheme();
    }
  }

  private static class TPublishFilterParamsStandardScheme extends StandardScheme<TPublishFilterParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPublishFilterParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = org.apache.impala.thrift.ImpalaInternalServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filter_id = iprot.readI32();
              struct.setFilter_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DST_QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dst_query_id = new org.apache.impala.thrift.TUniqueId();
              struct.dst_query_id.read(iprot);
              struct.setDst_query_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DST_FRAGMENT_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dst_fragment_idx = iprot.readI32();
              struct.setDst_fragment_idxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BLOOM_FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bloom_filter = new TBloomFilter();
              struct.bloom_filter.read(iprot);
              struct.setBloom_filterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MIN_MAX_FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.min_max_filter = new TMinMaxFilter();
              struct.min_max_filter.read(iprot);
              struct.setMin_max_filterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPublishFilterParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetFilter_id()) {
        oprot.writeFieldBegin(FILTER_ID_FIELD_DESC);
        oprot.writeI32(struct.filter_id);
        oprot.writeFieldEnd();
      }
      if (struct.dst_query_id != null) {
        if (struct.isSetDst_query_id()) {
          oprot.writeFieldBegin(DST_QUERY_ID_FIELD_DESC);
          struct.dst_query_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDst_fragment_idx()) {
        oprot.writeFieldBegin(DST_FRAGMENT_IDX_FIELD_DESC);
        oprot.writeI32(struct.dst_fragment_idx);
        oprot.writeFieldEnd();
      }
      if (struct.bloom_filter != null) {
        if (struct.isSetBloom_filter()) {
          oprot.writeFieldBegin(BLOOM_FILTER_FIELD_DESC);
          struct.bloom_filter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.min_max_filter != null) {
        if (struct.isSetMin_max_filter()) {
          oprot.writeFieldBegin(MIN_MAX_FILTER_FIELD_DESC);
          struct.min_max_filter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPublishFilterParamsTupleSchemeFactory implements SchemeFactory {
    public TPublishFilterParamsTupleScheme getScheme() {
      return new TPublishFilterParamsTupleScheme();
    }
  }

  private static class TPublishFilterParamsTupleScheme extends TupleScheme<TPublishFilterParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPublishFilterParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetFilter_id()) {
        optionals.set(0);
      }
      if (struct.isSetDst_query_id()) {
        optionals.set(1);
      }
      if (struct.isSetDst_fragment_idx()) {
        optionals.set(2);
      }
      if (struct.isSetBloom_filter()) {
        optionals.set(3);
      }
      if (struct.isSetMin_max_filter()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetFilter_id()) {
        oprot.writeI32(struct.filter_id);
      }
      if (struct.isSetDst_query_id()) {
        struct.dst_query_id.write(oprot);
      }
      if (struct.isSetDst_fragment_idx()) {
        oprot.writeI32(struct.dst_fragment_idx);
      }
      if (struct.isSetBloom_filter()) {
        struct.bloom_filter.write(oprot);
      }
      if (struct.isSetMin_max_filter()) {
        struct.min_max_filter.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPublishFilterParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = org.apache.impala.thrift.ImpalaInternalServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.filter_id = iprot.readI32();
        struct.setFilter_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dst_query_id = new org.apache.impala.thrift.TUniqueId();
        struct.dst_query_id.read(iprot);
        struct.setDst_query_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dst_fragment_idx = iprot.readI32();
        struct.setDst_fragment_idxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bloom_filter = new TBloomFilter();
        struct.bloom_filter.read(iprot);
        struct.setBloom_filterIsSet(true);
      }
      if (incoming.get(4)) {
        struct.min_max_filter = new TMinMaxFilter();
        struct.min_max_filter.read(iprot);
        struct.setMin_max_filterIsSet(true);
      }
    }
  }

}

