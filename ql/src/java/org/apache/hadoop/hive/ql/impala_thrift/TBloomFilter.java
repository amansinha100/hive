/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TBloomFilter implements org.apache.thrift.TBase<TBloomFilter, TBloomFilter._Fields>, java.io.Serializable, Cloneable, Comparable<TBloomFilter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBloomFilter");

  private static final org.apache.thrift.protocol.TField LOG_BUFFERPOOL_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("log_bufferpool_space", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DIRECTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("directory", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ALWAYS_TRUE_FIELD_DESC = new org.apache.thrift.protocol.TField("always_true", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField ALWAYS_FALSE_FIELD_DESC = new org.apache.thrift.protocol.TField("always_false", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBloomFilterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBloomFilterTupleSchemeFactory());
  }

  private int log_bufferpool_space; // required
  private ByteBuffer directory; // required
  private boolean always_true; // required
  private boolean always_false; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOG_BUFFERPOOL_SPACE((short)1, "log_bufferpool_space"),
    DIRECTORY((short)2, "directory"),
    ALWAYS_TRUE((short)3, "always_true"),
    ALWAYS_FALSE((short)4, "always_false");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOG_BUFFERPOOL_SPACE
          return LOG_BUFFERPOOL_SPACE;
        case 2: // DIRECTORY
          return DIRECTORY;
        case 3: // ALWAYS_TRUE
          return ALWAYS_TRUE;
        case 4: // ALWAYS_FALSE
          return ALWAYS_FALSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOG_BUFFERPOOL_SPACE_ISSET_ID = 0;
  private static final int __ALWAYS_TRUE_ISSET_ID = 1;
  private static final int __ALWAYS_FALSE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOG_BUFFERPOOL_SPACE, new org.apache.thrift.meta_data.FieldMetaData("log_bufferpool_space", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIRECTORY, new org.apache.thrift.meta_data.FieldMetaData("directory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ALWAYS_TRUE, new org.apache.thrift.meta_data.FieldMetaData("always_true", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALWAYS_FALSE, new org.apache.thrift.meta_data.FieldMetaData("always_false", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBloomFilter.class, metaDataMap);
  }

  public TBloomFilter() {
  }

  public TBloomFilter(
    int log_bufferpool_space,
    ByteBuffer directory,
    boolean always_true,
    boolean always_false)
  {
    this();
    this.log_bufferpool_space = log_bufferpool_space;
    setLog_bufferpool_spaceIsSet(true);
    this.directory = org.apache.thrift.TBaseHelper.copyBinary(directory);
    this.always_true = always_true;
    setAlways_trueIsSet(true);
    this.always_false = always_false;
    setAlways_falseIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBloomFilter(TBloomFilter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.log_bufferpool_space = other.log_bufferpool_space;
    if (other.isSetDirectory()) {
      this.directory = org.apache.thrift.TBaseHelper.copyBinary(other.directory);
    }
    this.always_true = other.always_true;
    this.always_false = other.always_false;
  }

  public TBloomFilter deepCopy() {
    return new TBloomFilter(this);
  }

  @Override
  public void clear() {
    setLog_bufferpool_spaceIsSet(false);
    this.log_bufferpool_space = 0;
    this.directory = null;
    setAlways_trueIsSet(false);
    this.always_true = false;
    setAlways_falseIsSet(false);
    this.always_false = false;
  }

  public int getLog_bufferpool_space() {
    return this.log_bufferpool_space;
  }

  public void setLog_bufferpool_space(int log_bufferpool_space) {
    this.log_bufferpool_space = log_bufferpool_space;
    setLog_bufferpool_spaceIsSet(true);
  }

  public void unsetLog_bufferpool_space() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOG_BUFFERPOOL_SPACE_ISSET_ID);
  }

  /** Returns true if field log_bufferpool_space is set (has been assigned a value) and false otherwise */
  public boolean isSetLog_bufferpool_space() {
    return EncodingUtils.testBit(__isset_bitfield, __LOG_BUFFERPOOL_SPACE_ISSET_ID);
  }

  public void setLog_bufferpool_spaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOG_BUFFERPOOL_SPACE_ISSET_ID, value);
  }

  public byte[] getDirectory() {
    setDirectory(org.apache.thrift.TBaseHelper.rightSize(directory));
    return directory == null ? null : directory.array();
  }

  public ByteBuffer bufferForDirectory() {
    return org.apache.thrift.TBaseHelper.copyBinary(directory);
  }

  public void setDirectory(byte[] directory) {
    this.directory = directory == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(directory, directory.length));
  }

  public void setDirectory(ByteBuffer directory) {
    this.directory = org.apache.thrift.TBaseHelper.copyBinary(directory);
  }

  public void unsetDirectory() {
    this.directory = null;
  }

  /** Returns true if field directory is set (has been assigned a value) and false otherwise */
  public boolean isSetDirectory() {
    return this.directory != null;
  }

  public void setDirectoryIsSet(boolean value) {
    if (!value) {
      this.directory = null;
    }
  }

  public boolean isAlways_true() {
    return this.always_true;
  }

  public void setAlways_true(boolean always_true) {
    this.always_true = always_true;
    setAlways_trueIsSet(true);
  }

  public void unsetAlways_true() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALWAYS_TRUE_ISSET_ID);
  }

  /** Returns true if field always_true is set (has been assigned a value) and false otherwise */
  public boolean isSetAlways_true() {
    return EncodingUtils.testBit(__isset_bitfield, __ALWAYS_TRUE_ISSET_ID);
  }

  public void setAlways_trueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALWAYS_TRUE_ISSET_ID, value);
  }

  public boolean isAlways_false() {
    return this.always_false;
  }

  public void setAlways_false(boolean always_false) {
    this.always_false = always_false;
    setAlways_falseIsSet(true);
  }

  public void unsetAlways_false() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALWAYS_FALSE_ISSET_ID);
  }

  /** Returns true if field always_false is set (has been assigned a value) and false otherwise */
  public boolean isSetAlways_false() {
    return EncodingUtils.testBit(__isset_bitfield, __ALWAYS_FALSE_ISSET_ID);
  }

  public void setAlways_falseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALWAYS_FALSE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOG_BUFFERPOOL_SPACE:
      if (value == null) {
        unsetLog_bufferpool_space();
      } else {
        setLog_bufferpool_space((Integer)value);
      }
      break;

    case DIRECTORY:
      if (value == null) {
        unsetDirectory();
      } else {
        setDirectory((ByteBuffer)value);
      }
      break;

    case ALWAYS_TRUE:
      if (value == null) {
        unsetAlways_true();
      } else {
        setAlways_true((Boolean)value);
      }
      break;

    case ALWAYS_FALSE:
      if (value == null) {
        unsetAlways_false();
      } else {
        setAlways_false((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOG_BUFFERPOOL_SPACE:
      return getLog_bufferpool_space();

    case DIRECTORY:
      return getDirectory();

    case ALWAYS_TRUE:
      return isAlways_true();

    case ALWAYS_FALSE:
      return isAlways_false();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOG_BUFFERPOOL_SPACE:
      return isSetLog_bufferpool_space();
    case DIRECTORY:
      return isSetDirectory();
    case ALWAYS_TRUE:
      return isSetAlways_true();
    case ALWAYS_FALSE:
      return isSetAlways_false();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBloomFilter)
      return this.equals((TBloomFilter)that);
    return false;
  }

  public boolean equals(TBloomFilter that) {
    if (that == null)
      return false;

    boolean this_present_log_bufferpool_space = true;
    boolean that_present_log_bufferpool_space = true;
    if (this_present_log_bufferpool_space || that_present_log_bufferpool_space) {
      if (!(this_present_log_bufferpool_space && that_present_log_bufferpool_space))
        return false;
      if (this.log_bufferpool_space != that.log_bufferpool_space)
        return false;
    }

    boolean this_present_directory = true && this.isSetDirectory();
    boolean that_present_directory = true && that.isSetDirectory();
    if (this_present_directory || that_present_directory) {
      if (!(this_present_directory && that_present_directory))
        return false;
      if (!this.directory.equals(that.directory))
        return false;
    }

    boolean this_present_always_true = true;
    boolean that_present_always_true = true;
    if (this_present_always_true || that_present_always_true) {
      if (!(this_present_always_true && that_present_always_true))
        return false;
      if (this.always_true != that.always_true)
        return false;
    }

    boolean this_present_always_false = true;
    boolean that_present_always_false = true;
    if (this_present_always_false || that_present_always_false) {
      if (!(this_present_always_false && that_present_always_false))
        return false;
      if (this.always_false != that.always_false)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_log_bufferpool_space = true;
    list.add(present_log_bufferpool_space);
    if (present_log_bufferpool_space)
      list.add(log_bufferpool_space);

    boolean present_directory = true && (isSetDirectory());
    list.add(present_directory);
    if (present_directory)
      list.add(directory);

    boolean present_always_true = true;
    list.add(present_always_true);
    if (present_always_true)
      list.add(always_true);

    boolean present_always_false = true;
    list.add(present_always_false);
    if (present_always_false)
      list.add(always_false);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBloomFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLog_bufferpool_space()).compareTo(other.isSetLog_bufferpool_space());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog_bufferpool_space()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log_bufferpool_space, other.log_bufferpool_space);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirectory()).compareTo(other.isSetDirectory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirectory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.directory, other.directory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlways_true()).compareTo(other.isSetAlways_true());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlways_true()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.always_true, other.always_true);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlways_false()).compareTo(other.isSetAlways_false());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlways_false()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.always_false, other.always_false);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBloomFilter(");
    boolean first = true;

    sb.append("log_bufferpool_space:");
    sb.append(this.log_bufferpool_space);
    first = false;
    if (!first) sb.append(", ");
    sb.append("directory:");
    if (this.directory == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.directory, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("always_true:");
    sb.append(this.always_true);
    first = false;
    if (!first) sb.append(", ");
    sb.append("always_false:");
    sb.append(this.always_false);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetLog_bufferpool_space()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'log_bufferpool_space' is unset! Struct:" + toString());
    }

    if (!isSetAlways_true()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'always_true' is unset! Struct:" + toString());
    }

    if (!isSetAlways_false()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'always_false' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBloomFilterStandardSchemeFactory implements SchemeFactory {
    public TBloomFilterStandardScheme getScheme() {
      return new TBloomFilterStandardScheme();
    }
  }

  private static class TBloomFilterStandardScheme extends StandardScheme<TBloomFilter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBloomFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOG_BUFFERPOOL_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.log_bufferpool_space = iprot.readI32();
              struct.setLog_bufferpool_spaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIRECTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.directory = iprot.readBinary();
              struct.setDirectoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALWAYS_TRUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.always_true = iprot.readBool();
              struct.setAlways_trueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALWAYS_FALSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.always_false = iprot.readBool();
              struct.setAlways_falseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBloomFilter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOG_BUFFERPOOL_SPACE_FIELD_DESC);
      oprot.writeI32(struct.log_bufferpool_space);
      oprot.writeFieldEnd();
      if (struct.directory != null) {
        oprot.writeFieldBegin(DIRECTORY_FIELD_DESC);
        oprot.writeBinary(struct.directory);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ALWAYS_TRUE_FIELD_DESC);
      oprot.writeBool(struct.always_true);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALWAYS_FALSE_FIELD_DESC);
      oprot.writeBool(struct.always_false);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBloomFilterTupleSchemeFactory implements SchemeFactory {
    public TBloomFilterTupleScheme getScheme() {
      return new TBloomFilterTupleScheme();
    }
  }

  private static class TBloomFilterTupleScheme extends TupleScheme<TBloomFilter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBloomFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.log_bufferpool_space);
      oprot.writeBool(struct.always_true);
      oprot.writeBool(struct.always_false);
      BitSet optionals = new BitSet();
      if (struct.isSetDirectory()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDirectory()) {
        oprot.writeBinary(struct.directory);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBloomFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.log_bufferpool_space = iprot.readI32();
      struct.setLog_bufferpool_spaceIsSet(true);
      struct.always_true = iprot.readBool();
      struct.setAlways_trueIsSet(true);
      struct.always_false = iprot.readBool();
      struct.setAlways_falseIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.directory = iprot.readBinary();
        struct.setDirectoryIsSet(true);
      }
    }
  }

}

