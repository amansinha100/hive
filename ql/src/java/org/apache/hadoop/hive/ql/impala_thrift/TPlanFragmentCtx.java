/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TPlanFragmentCtx implements org.apache.thrift.TBase<TPlanFragmentCtx, TPlanFragmentCtx._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragmentCtx> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragmentCtx");

  private static final org.apache.thrift.protocol.TField FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DESTINATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("destinations", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanFragmentCtxStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanFragmentCtxTupleSchemeFactory());
  }

  public org.apache.impala.thrift.TPlanFragment fragment; // required
  public List<TPlanFragmentDestination> destinations; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAGMENT((short)1, "fragment"),
    DESTINATIONS((short)2, "destinations");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRAGMENT
          return FRAGMENT;
        case 2: // DESTINATIONS
          return DESTINATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("fragment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TPlanFragment.class)));
    tmpMap.put(_Fields.DESTINATIONS, new org.apache.thrift.meta_data.FieldMetaData("destinations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentDestination.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragmentCtx.class, metaDataMap);
  }

  public TPlanFragmentCtx() {
  }

  public TPlanFragmentCtx(
    org.apache.impala.thrift.TPlanFragment fragment,
    List<TPlanFragmentDestination> destinations)
  {
    this();
    this.fragment = fragment;
    this.destinations = destinations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragmentCtx(TPlanFragmentCtx other) {
    if (other.isSetFragment()) {
      this.fragment = new org.apache.impala.thrift.TPlanFragment(other.fragment);
    }
    if (other.isSetDestinations()) {
      List<TPlanFragmentDestination> __this__destinations = new ArrayList<TPlanFragmentDestination>(other.destinations.size());
      for (TPlanFragmentDestination other_element : other.destinations) {
        __this__destinations.add(new TPlanFragmentDestination(other_element));
      }
      this.destinations = __this__destinations;
    }
  }

  public TPlanFragmentCtx deepCopy() {
    return new TPlanFragmentCtx(this);
  }

  @Override
  public void clear() {
    this.fragment = null;
    this.destinations = null;
  }

  public org.apache.impala.thrift.TPlanFragment getFragment() {
    return this.fragment;
  }

  public TPlanFragmentCtx setFragment(org.apache.impala.thrift.TPlanFragment fragment) {
    this.fragment = fragment;
    return this;
  }

  public void unsetFragment() {
    this.fragment = null;
  }

  /** Returns true if field fragment is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment() {
    return this.fragment != null;
  }

  public void setFragmentIsSet(boolean value) {
    if (!value) {
      this.fragment = null;
    }
  }

  public int getDestinationsSize() {
    return (this.destinations == null) ? 0 : this.destinations.size();
  }

  public java.util.Iterator<TPlanFragmentDestination> getDestinationsIterator() {
    return (this.destinations == null) ? null : this.destinations.iterator();
  }

  public void addToDestinations(TPlanFragmentDestination elem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<TPlanFragmentDestination>();
    }
    this.destinations.add(elem);
  }

  public List<TPlanFragmentDestination> getDestinations() {
    return this.destinations;
  }

  public TPlanFragmentCtx setDestinations(List<TPlanFragmentDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public void unsetDestinations() {
    this.destinations = null;
  }

  /** Returns true if field destinations is set (has been assigned a value) and false otherwise */
  public boolean isSetDestinations() {
    return this.destinations != null;
  }

  public void setDestinationsIsSet(boolean value) {
    if (!value) {
      this.destinations = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRAGMENT:
      if (value == null) {
        unsetFragment();
      } else {
        setFragment((org.apache.impala.thrift.TPlanFragment)value);
      }
      break;

    case DESTINATIONS:
      if (value == null) {
        unsetDestinations();
      } else {
        setDestinations((List<TPlanFragmentDestination>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAGMENT:
      return getFragment();

    case DESTINATIONS:
      return getDestinations();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRAGMENT:
      return isSetFragment();
    case DESTINATIONS:
      return isSetDestinations();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanFragmentCtx)
      return this.equals((TPlanFragmentCtx)that);
    return false;
  }

  public boolean equals(TPlanFragmentCtx that) {
    if (that == null)
      return false;

    boolean this_present_fragment = true && this.isSetFragment();
    boolean that_present_fragment = true && that.isSetFragment();
    if (this_present_fragment || that_present_fragment) {
      if (!(this_present_fragment && that_present_fragment))
        return false;
      if (!this.fragment.equals(that.fragment))
        return false;
    }

    boolean this_present_destinations = true && this.isSetDestinations();
    boolean that_present_destinations = true && that.isSetDestinations();
    if (this_present_destinations || that_present_destinations) {
      if (!(this_present_destinations && that_present_destinations))
        return false;
      if (!this.destinations.equals(that.destinations))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fragment = true && (isSetFragment());
    list.add(present_fragment);
    if (present_fragment)
      list.add(fragment);

    boolean present_destinations = true && (isSetDestinations());
    list.add(present_destinations);
    if (present_destinations)
      list.add(destinations);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlanFragmentCtx other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFragment()).compareTo(other.isSetFragment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment, other.fragment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestinations()).compareTo(other.isSetDestinations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestinations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinations, other.destinations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanFragmentCtx(");
    boolean first = true;

    sb.append("fragment:");
    if (this.fragment == null) {
      sb.append("null");
    } else {
      sb.append(this.fragment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destinations:");
    if (this.destinations == null) {
      sb.append("null");
    } else {
      sb.append(this.destinations);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fragment == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fragment != null) {
      fragment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentCtxStandardSchemeFactory implements SchemeFactory {
    public TPlanFragmentCtxStandardScheme getScheme() {
      return new TPlanFragmentCtxStandardScheme();
    }
  }

  private static class TPlanFragmentCtxStandardScheme extends StandardScheme<TPlanFragmentCtx> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragmentCtx struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRAGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment = new org.apache.impala.thrift.TPlanFragment();
              struct.fragment.read(iprot);
              struct.setFragmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESTINATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.destinations = new ArrayList<TPlanFragmentDestination>(_list0.size);
                TPlanFragmentDestination _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TPlanFragmentDestination();
                  _elem1.read(iprot);
                  struct.destinations.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDestinationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragmentCtx struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fragment != null) {
        oprot.writeFieldBegin(FRAGMENT_FIELD_DESC);
        struct.fragment.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.destinations != null) {
        oprot.writeFieldBegin(DESTINATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.destinations.size()));
          for (TPlanFragmentDestination _iter3 : struct.destinations)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentCtxTupleSchemeFactory implements SchemeFactory {
    public TPlanFragmentCtxTupleScheme getScheme() {
      return new TPlanFragmentCtxTupleScheme();
    }
  }

  private static class TPlanFragmentCtxTupleScheme extends TupleScheme<TPlanFragmentCtx> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.fragment.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetDestinations()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDestinations()) {
        {
          oprot.writeI32(struct.destinations.size());
          for (TPlanFragmentDestination _iter4 : struct.destinations)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fragment = new org.apache.impala.thrift.TPlanFragment();
      struct.fragment.read(iprot);
      struct.setFragmentIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.destinations = new ArrayList<TPlanFragmentDestination>(_list5.size);
          TPlanFragmentDestination _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TPlanFragmentDestination();
            _elem6.read(iprot);
            struct.destinations.add(_elem6);
          }
        }
        struct.setDestinationsIsSet(true);
      }
    }
  }

}

