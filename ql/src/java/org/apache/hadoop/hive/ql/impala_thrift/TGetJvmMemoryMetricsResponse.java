/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TGetJvmMemoryMetricsResponse implements org.apache.thrift.TBase<TGetJvmMemoryMetricsResponse, TGetJvmMemoryMetricsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TGetJvmMemoryMetricsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetJvmMemoryMetricsResponse");

  private static final org.apache.thrift.protocol.TField MEMORY_POOLS_FIELD_DESC = new org.apache.thrift.protocol.TField("memory_pools", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField GC_NUM_WARN_THRESHOLD_EXCEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("gc_num_warn_threshold_exceeded", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GC_NUM_INFO_THRESHOLD_EXCEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("gc_num_info_threshold_exceeded", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("gc_total_extra_sleep_time_millis", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField GC_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("gc_count", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField GC_TIME_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("gc_time_millis", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGetJvmMemoryMetricsResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGetJvmMemoryMetricsResponseTupleSchemeFactory());
  }

  public List<TJvmMemoryPool> memory_pools; // required
  public long gc_num_warn_threshold_exceeded; // required
  public long gc_num_info_threshold_exceeded; // required
  public long gc_total_extra_sleep_time_millis; // required
  public long gc_count; // required
  public long gc_time_millis; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEMORY_POOLS((short)1, "memory_pools"),
    GC_NUM_WARN_THRESHOLD_EXCEEDED((short)2, "gc_num_warn_threshold_exceeded"),
    GC_NUM_INFO_THRESHOLD_EXCEEDED((short)3, "gc_num_info_threshold_exceeded"),
    GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS((short)4, "gc_total_extra_sleep_time_millis"),
    GC_COUNT((short)5, "gc_count"),
    GC_TIME_MILLIS((short)6, "gc_time_millis");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMORY_POOLS
          return MEMORY_POOLS;
        case 2: // GC_NUM_WARN_THRESHOLD_EXCEEDED
          return GC_NUM_WARN_THRESHOLD_EXCEEDED;
        case 3: // GC_NUM_INFO_THRESHOLD_EXCEEDED
          return GC_NUM_INFO_THRESHOLD_EXCEEDED;
        case 4: // GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS
          return GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS;
        case 5: // GC_COUNT
          return GC_COUNT;
        case 6: // GC_TIME_MILLIS
          return GC_TIME_MILLIS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GC_NUM_WARN_THRESHOLD_EXCEEDED_ISSET_ID = 0;
  private static final int __GC_NUM_INFO_THRESHOLD_EXCEEDED_ISSET_ID = 1;
  private static final int __GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS_ISSET_ID = 2;
  private static final int __GC_COUNT_ISSET_ID = 3;
  private static final int __GC_TIME_MILLIS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMORY_POOLS, new org.apache.thrift.meta_data.FieldMetaData("memory_pools", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJvmMemoryPool.class))));
    tmpMap.put(_Fields.GC_NUM_WARN_THRESHOLD_EXCEEDED, new org.apache.thrift.meta_data.FieldMetaData("gc_num_warn_threshold_exceeded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GC_NUM_INFO_THRESHOLD_EXCEEDED, new org.apache.thrift.meta_data.FieldMetaData("gc_num_info_threshold_exceeded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("gc_total_extra_sleep_time_millis", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GC_COUNT, new org.apache.thrift.meta_data.FieldMetaData("gc_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GC_TIME_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("gc_time_millis", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetJvmMemoryMetricsResponse.class, metaDataMap);
  }

  public TGetJvmMemoryMetricsResponse() {
  }

  public TGetJvmMemoryMetricsResponse(
    List<TJvmMemoryPool> memory_pools,
    long gc_num_warn_threshold_exceeded,
    long gc_num_info_threshold_exceeded,
    long gc_total_extra_sleep_time_millis,
    long gc_count,
    long gc_time_millis)
  {
    this();
    this.memory_pools = memory_pools;
    this.gc_num_warn_threshold_exceeded = gc_num_warn_threshold_exceeded;
    setGc_num_warn_threshold_exceededIsSet(true);
    this.gc_num_info_threshold_exceeded = gc_num_info_threshold_exceeded;
    setGc_num_info_threshold_exceededIsSet(true);
    this.gc_total_extra_sleep_time_millis = gc_total_extra_sleep_time_millis;
    setGc_total_extra_sleep_time_millisIsSet(true);
    this.gc_count = gc_count;
    setGc_countIsSet(true);
    this.gc_time_millis = gc_time_millis;
    setGc_time_millisIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetJvmMemoryMetricsResponse(TGetJvmMemoryMetricsResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMemory_pools()) {
      List<TJvmMemoryPool> __this__memory_pools = new ArrayList<TJvmMemoryPool>(other.memory_pools.size());
      for (TJvmMemoryPool other_element : other.memory_pools) {
        __this__memory_pools.add(new TJvmMemoryPool(other_element));
      }
      this.memory_pools = __this__memory_pools;
    }
    this.gc_num_warn_threshold_exceeded = other.gc_num_warn_threshold_exceeded;
    this.gc_num_info_threshold_exceeded = other.gc_num_info_threshold_exceeded;
    this.gc_total_extra_sleep_time_millis = other.gc_total_extra_sleep_time_millis;
    this.gc_count = other.gc_count;
    this.gc_time_millis = other.gc_time_millis;
  }

  public TGetJvmMemoryMetricsResponse deepCopy() {
    return new TGetJvmMemoryMetricsResponse(this);
  }

  @Override
  public void clear() {
    this.memory_pools = null;
    setGc_num_warn_threshold_exceededIsSet(false);
    this.gc_num_warn_threshold_exceeded = 0;
    setGc_num_info_threshold_exceededIsSet(false);
    this.gc_num_info_threshold_exceeded = 0;
    setGc_total_extra_sleep_time_millisIsSet(false);
    this.gc_total_extra_sleep_time_millis = 0;
    setGc_countIsSet(false);
    this.gc_count = 0;
    setGc_time_millisIsSet(false);
    this.gc_time_millis = 0;
  }

  public int getMemory_poolsSize() {
    return (this.memory_pools == null) ? 0 : this.memory_pools.size();
  }

  public java.util.Iterator<TJvmMemoryPool> getMemory_poolsIterator() {
    return (this.memory_pools == null) ? null : this.memory_pools.iterator();
  }

  public void addToMemory_pools(TJvmMemoryPool elem) {
    if (this.memory_pools == null) {
      this.memory_pools = new ArrayList<TJvmMemoryPool>();
    }
    this.memory_pools.add(elem);
  }

  public List<TJvmMemoryPool> getMemory_pools() {
    return this.memory_pools;
  }

  public TGetJvmMemoryMetricsResponse setMemory_pools(List<TJvmMemoryPool> memory_pools) {
    this.memory_pools = memory_pools;
    return this;
  }

  public void unsetMemory_pools() {
    this.memory_pools = null;
  }

  /** Returns true if field memory_pools is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory_pools() {
    return this.memory_pools != null;
  }

  public void setMemory_poolsIsSet(boolean value) {
    if (!value) {
      this.memory_pools = null;
    }
  }

  public long getGc_num_warn_threshold_exceeded() {
    return this.gc_num_warn_threshold_exceeded;
  }

  public TGetJvmMemoryMetricsResponse setGc_num_warn_threshold_exceeded(long gc_num_warn_threshold_exceeded) {
    this.gc_num_warn_threshold_exceeded = gc_num_warn_threshold_exceeded;
    setGc_num_warn_threshold_exceededIsSet(true);
    return this;
  }

  public void unsetGc_num_warn_threshold_exceeded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GC_NUM_WARN_THRESHOLD_EXCEEDED_ISSET_ID);
  }

  /** Returns true if field gc_num_warn_threshold_exceeded is set (has been assigned a value) and false otherwise */
  public boolean isSetGc_num_warn_threshold_exceeded() {
    return EncodingUtils.testBit(__isset_bitfield, __GC_NUM_WARN_THRESHOLD_EXCEEDED_ISSET_ID);
  }

  public void setGc_num_warn_threshold_exceededIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GC_NUM_WARN_THRESHOLD_EXCEEDED_ISSET_ID, value);
  }

  public long getGc_num_info_threshold_exceeded() {
    return this.gc_num_info_threshold_exceeded;
  }

  public TGetJvmMemoryMetricsResponse setGc_num_info_threshold_exceeded(long gc_num_info_threshold_exceeded) {
    this.gc_num_info_threshold_exceeded = gc_num_info_threshold_exceeded;
    setGc_num_info_threshold_exceededIsSet(true);
    return this;
  }

  public void unsetGc_num_info_threshold_exceeded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GC_NUM_INFO_THRESHOLD_EXCEEDED_ISSET_ID);
  }

  /** Returns true if field gc_num_info_threshold_exceeded is set (has been assigned a value) and false otherwise */
  public boolean isSetGc_num_info_threshold_exceeded() {
    return EncodingUtils.testBit(__isset_bitfield, __GC_NUM_INFO_THRESHOLD_EXCEEDED_ISSET_ID);
  }

  public void setGc_num_info_threshold_exceededIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GC_NUM_INFO_THRESHOLD_EXCEEDED_ISSET_ID, value);
  }

  public long getGc_total_extra_sleep_time_millis() {
    return this.gc_total_extra_sleep_time_millis;
  }

  public TGetJvmMemoryMetricsResponse setGc_total_extra_sleep_time_millis(long gc_total_extra_sleep_time_millis) {
    this.gc_total_extra_sleep_time_millis = gc_total_extra_sleep_time_millis;
    setGc_total_extra_sleep_time_millisIsSet(true);
    return this;
  }

  public void unsetGc_total_extra_sleep_time_millis() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS_ISSET_ID);
  }

  /** Returns true if field gc_total_extra_sleep_time_millis is set (has been assigned a value) and false otherwise */
  public boolean isSetGc_total_extra_sleep_time_millis() {
    return EncodingUtils.testBit(__isset_bitfield, __GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS_ISSET_ID);
  }

  public void setGc_total_extra_sleep_time_millisIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS_ISSET_ID, value);
  }

  public long getGc_count() {
    return this.gc_count;
  }

  public TGetJvmMemoryMetricsResponse setGc_count(long gc_count) {
    this.gc_count = gc_count;
    setGc_countIsSet(true);
    return this;
  }

  public void unsetGc_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GC_COUNT_ISSET_ID);
  }

  /** Returns true if field gc_count is set (has been assigned a value) and false otherwise */
  public boolean isSetGc_count() {
    return EncodingUtils.testBit(__isset_bitfield, __GC_COUNT_ISSET_ID);
  }

  public void setGc_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GC_COUNT_ISSET_ID, value);
  }

  public long getGc_time_millis() {
    return this.gc_time_millis;
  }

  public TGetJvmMemoryMetricsResponse setGc_time_millis(long gc_time_millis) {
    this.gc_time_millis = gc_time_millis;
    setGc_time_millisIsSet(true);
    return this;
  }

  public void unsetGc_time_millis() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GC_TIME_MILLIS_ISSET_ID);
  }

  /** Returns true if field gc_time_millis is set (has been assigned a value) and false otherwise */
  public boolean isSetGc_time_millis() {
    return EncodingUtils.testBit(__isset_bitfield, __GC_TIME_MILLIS_ISSET_ID);
  }

  public void setGc_time_millisIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GC_TIME_MILLIS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMORY_POOLS:
      if (value == null) {
        unsetMemory_pools();
      } else {
        setMemory_pools((List<TJvmMemoryPool>)value);
      }
      break;

    case GC_NUM_WARN_THRESHOLD_EXCEEDED:
      if (value == null) {
        unsetGc_num_warn_threshold_exceeded();
      } else {
        setGc_num_warn_threshold_exceeded((Long)value);
      }
      break;

    case GC_NUM_INFO_THRESHOLD_EXCEEDED:
      if (value == null) {
        unsetGc_num_info_threshold_exceeded();
      } else {
        setGc_num_info_threshold_exceeded((Long)value);
      }
      break;

    case GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS:
      if (value == null) {
        unsetGc_total_extra_sleep_time_millis();
      } else {
        setGc_total_extra_sleep_time_millis((Long)value);
      }
      break;

    case GC_COUNT:
      if (value == null) {
        unsetGc_count();
      } else {
        setGc_count((Long)value);
      }
      break;

    case GC_TIME_MILLIS:
      if (value == null) {
        unsetGc_time_millis();
      } else {
        setGc_time_millis((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMORY_POOLS:
      return getMemory_pools();

    case GC_NUM_WARN_THRESHOLD_EXCEEDED:
      return getGc_num_warn_threshold_exceeded();

    case GC_NUM_INFO_THRESHOLD_EXCEEDED:
      return getGc_num_info_threshold_exceeded();

    case GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS:
      return getGc_total_extra_sleep_time_millis();

    case GC_COUNT:
      return getGc_count();

    case GC_TIME_MILLIS:
      return getGc_time_millis();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMORY_POOLS:
      return isSetMemory_pools();
    case GC_NUM_WARN_THRESHOLD_EXCEEDED:
      return isSetGc_num_warn_threshold_exceeded();
    case GC_NUM_INFO_THRESHOLD_EXCEEDED:
      return isSetGc_num_info_threshold_exceeded();
    case GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS:
      return isSetGc_total_extra_sleep_time_millis();
    case GC_COUNT:
      return isSetGc_count();
    case GC_TIME_MILLIS:
      return isSetGc_time_millis();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGetJvmMemoryMetricsResponse)
      return this.equals((TGetJvmMemoryMetricsResponse)that);
    return false;
  }

  public boolean equals(TGetJvmMemoryMetricsResponse that) {
    if (that == null)
      return false;

    boolean this_present_memory_pools = true && this.isSetMemory_pools();
    boolean that_present_memory_pools = true && that.isSetMemory_pools();
    if (this_present_memory_pools || that_present_memory_pools) {
      if (!(this_present_memory_pools && that_present_memory_pools))
        return false;
      if (!this.memory_pools.equals(that.memory_pools))
        return false;
    }

    boolean this_present_gc_num_warn_threshold_exceeded = true;
    boolean that_present_gc_num_warn_threshold_exceeded = true;
    if (this_present_gc_num_warn_threshold_exceeded || that_present_gc_num_warn_threshold_exceeded) {
      if (!(this_present_gc_num_warn_threshold_exceeded && that_present_gc_num_warn_threshold_exceeded))
        return false;
      if (this.gc_num_warn_threshold_exceeded != that.gc_num_warn_threshold_exceeded)
        return false;
    }

    boolean this_present_gc_num_info_threshold_exceeded = true;
    boolean that_present_gc_num_info_threshold_exceeded = true;
    if (this_present_gc_num_info_threshold_exceeded || that_present_gc_num_info_threshold_exceeded) {
      if (!(this_present_gc_num_info_threshold_exceeded && that_present_gc_num_info_threshold_exceeded))
        return false;
      if (this.gc_num_info_threshold_exceeded != that.gc_num_info_threshold_exceeded)
        return false;
    }

    boolean this_present_gc_total_extra_sleep_time_millis = true;
    boolean that_present_gc_total_extra_sleep_time_millis = true;
    if (this_present_gc_total_extra_sleep_time_millis || that_present_gc_total_extra_sleep_time_millis) {
      if (!(this_present_gc_total_extra_sleep_time_millis && that_present_gc_total_extra_sleep_time_millis))
        return false;
      if (this.gc_total_extra_sleep_time_millis != that.gc_total_extra_sleep_time_millis)
        return false;
    }

    boolean this_present_gc_count = true;
    boolean that_present_gc_count = true;
    if (this_present_gc_count || that_present_gc_count) {
      if (!(this_present_gc_count && that_present_gc_count))
        return false;
      if (this.gc_count != that.gc_count)
        return false;
    }

    boolean this_present_gc_time_millis = true;
    boolean that_present_gc_time_millis = true;
    if (this_present_gc_time_millis || that_present_gc_time_millis) {
      if (!(this_present_gc_time_millis && that_present_gc_time_millis))
        return false;
      if (this.gc_time_millis != that.gc_time_millis)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_memory_pools = true && (isSetMemory_pools());
    list.add(present_memory_pools);
    if (present_memory_pools)
      list.add(memory_pools);

    boolean present_gc_num_warn_threshold_exceeded = true;
    list.add(present_gc_num_warn_threshold_exceeded);
    if (present_gc_num_warn_threshold_exceeded)
      list.add(gc_num_warn_threshold_exceeded);

    boolean present_gc_num_info_threshold_exceeded = true;
    list.add(present_gc_num_info_threshold_exceeded);
    if (present_gc_num_info_threshold_exceeded)
      list.add(gc_num_info_threshold_exceeded);

    boolean present_gc_total_extra_sleep_time_millis = true;
    list.add(present_gc_total_extra_sleep_time_millis);
    if (present_gc_total_extra_sleep_time_millis)
      list.add(gc_total_extra_sleep_time_millis);

    boolean present_gc_count = true;
    list.add(present_gc_count);
    if (present_gc_count)
      list.add(gc_count);

    boolean present_gc_time_millis = true;
    list.add(present_gc_time_millis);
    if (present_gc_time_millis)
      list.add(gc_time_millis);

    return list.hashCode();
  }

  @Override
  public int compareTo(TGetJvmMemoryMetricsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMemory_pools()).compareTo(other.isSetMemory_pools());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory_pools()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory_pools, other.memory_pools);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc_num_warn_threshold_exceeded()).compareTo(other.isSetGc_num_warn_threshold_exceeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc_num_warn_threshold_exceeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc_num_warn_threshold_exceeded, other.gc_num_warn_threshold_exceeded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc_num_info_threshold_exceeded()).compareTo(other.isSetGc_num_info_threshold_exceeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc_num_info_threshold_exceeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc_num_info_threshold_exceeded, other.gc_num_info_threshold_exceeded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc_total_extra_sleep_time_millis()).compareTo(other.isSetGc_total_extra_sleep_time_millis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc_total_extra_sleep_time_millis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc_total_extra_sleep_time_millis, other.gc_total_extra_sleep_time_millis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc_count()).compareTo(other.isSetGc_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc_count, other.gc_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGc_time_millis()).compareTo(other.isSetGc_time_millis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGc_time_millis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gc_time_millis, other.gc_time_millis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGetJvmMemoryMetricsResponse(");
    boolean first = true;

    sb.append("memory_pools:");
    if (this.memory_pools == null) {
      sb.append("null");
    } else {
      sb.append(this.memory_pools);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gc_num_warn_threshold_exceeded:");
    sb.append(this.gc_num_warn_threshold_exceeded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gc_num_info_threshold_exceeded:");
    sb.append(this.gc_num_info_threshold_exceeded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gc_total_extra_sleep_time_millis:");
    sb.append(this.gc_total_extra_sleep_time_millis);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gc_count:");
    sb.append(this.gc_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gc_time_millis:");
    sb.append(this.gc_time_millis);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (memory_pools == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'memory_pools' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'gc_num_warn_threshold_exceeded' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gc_num_info_threshold_exceeded' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gc_total_extra_sleep_time_millis' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gc_count' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gc_time_millis' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetJvmMemoryMetricsResponseStandardSchemeFactory implements SchemeFactory {
    public TGetJvmMemoryMetricsResponseStandardScheme getScheme() {
      return new TGetJvmMemoryMetricsResponseStandardScheme();
    }
  }

  private static class TGetJvmMemoryMetricsResponseStandardScheme extends StandardScheme<TGetJvmMemoryMetricsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetJvmMemoryMetricsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEMORY_POOLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                struct.memory_pools = new ArrayList<TJvmMemoryPool>(_list192.size);
                TJvmMemoryPool _elem193;
                for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                {
                  _elem193 = new TJvmMemoryPool();
                  _elem193.read(iprot);
                  struct.memory_pools.add(_elem193);
                }
                iprot.readListEnd();
              }
              struct.setMemory_poolsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GC_NUM_WARN_THRESHOLD_EXCEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gc_num_warn_threshold_exceeded = iprot.readI64();
              struct.setGc_num_warn_threshold_exceededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GC_NUM_INFO_THRESHOLD_EXCEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gc_num_info_threshold_exceeded = iprot.readI64();
              struct.setGc_num_info_threshold_exceededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gc_total_extra_sleep_time_millis = iprot.readI64();
              struct.setGc_total_extra_sleep_time_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GC_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gc_count = iprot.readI64();
              struct.setGc_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GC_TIME_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gc_time_millis = iprot.readI64();
              struct.setGc_time_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetGc_num_warn_threshold_exceeded()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gc_num_warn_threshold_exceeded' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGc_num_info_threshold_exceeded()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gc_num_info_threshold_exceeded' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGc_total_extra_sleep_time_millis()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gc_total_extra_sleep_time_millis' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGc_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gc_count' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGc_time_millis()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gc_time_millis' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetJvmMemoryMetricsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.memory_pools != null) {
        oprot.writeFieldBegin(MEMORY_POOLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.memory_pools.size()));
          for (TJvmMemoryPool _iter195 : struct.memory_pools)
          {
            _iter195.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GC_NUM_WARN_THRESHOLD_EXCEEDED_FIELD_DESC);
      oprot.writeI64(struct.gc_num_warn_threshold_exceeded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GC_NUM_INFO_THRESHOLD_EXCEEDED_FIELD_DESC);
      oprot.writeI64(struct.gc_num_info_threshold_exceeded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GC_TOTAL_EXTRA_SLEEP_TIME_MILLIS_FIELD_DESC);
      oprot.writeI64(struct.gc_total_extra_sleep_time_millis);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GC_COUNT_FIELD_DESC);
      oprot.writeI64(struct.gc_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GC_TIME_MILLIS_FIELD_DESC);
      oprot.writeI64(struct.gc_time_millis);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetJvmMemoryMetricsResponseTupleSchemeFactory implements SchemeFactory {
    public TGetJvmMemoryMetricsResponseTupleScheme getScheme() {
      return new TGetJvmMemoryMetricsResponseTupleScheme();
    }
  }

  private static class TGetJvmMemoryMetricsResponseTupleScheme extends TupleScheme<TGetJvmMemoryMetricsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetJvmMemoryMetricsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.memory_pools.size());
        for (TJvmMemoryPool _iter196 : struct.memory_pools)
        {
          _iter196.write(oprot);
        }
      }
      oprot.writeI64(struct.gc_num_warn_threshold_exceeded);
      oprot.writeI64(struct.gc_num_info_threshold_exceeded);
      oprot.writeI64(struct.gc_total_extra_sleep_time_millis);
      oprot.writeI64(struct.gc_count);
      oprot.writeI64(struct.gc_time_millis);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetJvmMemoryMetricsResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.memory_pools = new ArrayList<TJvmMemoryPool>(_list197.size);
        TJvmMemoryPool _elem198;
        for (int _i199 = 0; _i199 < _list197.size; ++_i199)
        {
          _elem198 = new TJvmMemoryPool();
          _elem198.read(iprot);
          struct.memory_pools.add(_elem198);
        }
      }
      struct.setMemory_poolsIsSet(true);
      struct.gc_num_warn_threshold_exceeded = iprot.readI64();
      struct.setGc_num_warn_threshold_exceededIsSet(true);
      struct.gc_num_info_threshold_exceeded = iprot.readI64();
      struct.setGc_num_info_threshold_exceededIsSet(true);
      struct.gc_total_extra_sleep_time_millis = iprot.readI64();
      struct.setGc_total_extra_sleep_time_millisIsSet(true);
      struct.gc_count = iprot.readI64();
      struct.setGc_countIsSet(true);
      struct.gc_time_millis = iprot.readI64();
      struct.setGc_time_millisIsSet(true);
    }
  }

}

