/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class THdfsPartition implements org.apache.thrift.TBase<THdfsPartition, THdfsPartition._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsPartition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsPartition");

  private static final org.apache.thrift.protocol.TField LINE_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("lineDelim", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldDelim", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField COLLECTION_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("collectionDelim", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField MAP_KEY_DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("mapKeyDelim", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField ESCAPE_CHAR_FIELD_DESC = new org.apache.thrift.protocol.TField("escapeChar", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("fileFormat", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PARTITION_KEY_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitionKeyExprs", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("blockSize", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("file_desc", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ACCESS_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("access_level", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField IS_MARKED_CACHED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_marked_cached", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField HMS_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("hms_parameters", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField NUM_BLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_blocks", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField TOTAL_FILE_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("total_file_size_bytes", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField PARTITION_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_stats", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField HAS_INCREMENTAL_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("has_incremental_stats", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField WRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("write_id", org.apache.thrift.protocol.TType.I64, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THdfsPartitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THdfsPartitionTupleSchemeFactory());
  }

  public byte lineDelim; // required
  public byte fieldDelim; // required
  public byte collectionDelim; // required
  public byte mapKeyDelim; // required
  public byte escapeChar; // required
  /**
   * 
   * @see THdfsFileFormat
   */
  public THdfsFileFormat fileFormat; // required
  public List<org.apache.impala.thrift.TExpr> partitionKeyExprs; // required
  public int blockSize; // required
  public THdfsPartitionLocation location; // optional
  public long id; // optional
  public List<THdfsFileDesc> file_desc; // optional
  /**
   * 
   * @see TAccessLevel
   */
  public TAccessLevel access_level; // optional
  public TTableStats stats; // optional
  public boolean is_marked_cached; // optional
  public Map<String,String> hms_parameters; // optional
  public long num_blocks; // optional
  public long total_file_size_bytes; // optional
  public ByteBuffer partition_stats; // optional
  public boolean has_incremental_stats; // optional
  public long write_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LINE_DELIM((short)1, "lineDelim"),
    FIELD_DELIM((short)2, "fieldDelim"),
    COLLECTION_DELIM((short)3, "collectionDelim"),
    MAP_KEY_DELIM((short)4, "mapKeyDelim"),
    ESCAPE_CHAR((short)5, "escapeChar"),
    /**
     * 
     * @see THdfsFileFormat
     */
    FILE_FORMAT((short)6, "fileFormat"),
    PARTITION_KEY_EXPRS((short)7, "partitionKeyExprs"),
    BLOCK_SIZE((short)8, "blockSize"),
    LOCATION((short)10, "location"),
    ID((short)14, "id"),
    FILE_DESC((short)9, "file_desc"),
    /**
     * 
     * @see TAccessLevel
     */
    ACCESS_LEVEL((short)11, "access_level"),
    STATS((short)12, "stats"),
    IS_MARKED_CACHED((short)13, "is_marked_cached"),
    HMS_PARAMETERS((short)15, "hms_parameters"),
    NUM_BLOCKS((short)16, "num_blocks"),
    TOTAL_FILE_SIZE_BYTES((short)17, "total_file_size_bytes"),
    PARTITION_STATS((short)18, "partition_stats"),
    HAS_INCREMENTAL_STATS((short)19, "has_incremental_stats"),
    WRITE_ID((short)20, "write_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINE_DELIM
          return LINE_DELIM;
        case 2: // FIELD_DELIM
          return FIELD_DELIM;
        case 3: // COLLECTION_DELIM
          return COLLECTION_DELIM;
        case 4: // MAP_KEY_DELIM
          return MAP_KEY_DELIM;
        case 5: // ESCAPE_CHAR
          return ESCAPE_CHAR;
        case 6: // FILE_FORMAT
          return FILE_FORMAT;
        case 7: // PARTITION_KEY_EXPRS
          return PARTITION_KEY_EXPRS;
        case 8: // BLOCK_SIZE
          return BLOCK_SIZE;
        case 10: // LOCATION
          return LOCATION;
        case 14: // ID
          return ID;
        case 9: // FILE_DESC
          return FILE_DESC;
        case 11: // ACCESS_LEVEL
          return ACCESS_LEVEL;
        case 12: // STATS
          return STATS;
        case 13: // IS_MARKED_CACHED
          return IS_MARKED_CACHED;
        case 15: // HMS_PARAMETERS
          return HMS_PARAMETERS;
        case 16: // NUM_BLOCKS
          return NUM_BLOCKS;
        case 17: // TOTAL_FILE_SIZE_BYTES
          return TOTAL_FILE_SIZE_BYTES;
        case 18: // PARTITION_STATS
          return PARTITION_STATS;
        case 19: // HAS_INCREMENTAL_STATS
          return HAS_INCREMENTAL_STATS;
        case 20: // WRITE_ID
          return WRITE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LINEDELIM_ISSET_ID = 0;
  private static final int __FIELDDELIM_ISSET_ID = 1;
  private static final int __COLLECTIONDELIM_ISSET_ID = 2;
  private static final int __MAPKEYDELIM_ISSET_ID = 3;
  private static final int __ESCAPECHAR_ISSET_ID = 4;
  private static final int __BLOCKSIZE_ISSET_ID = 5;
  private static final int __ID_ISSET_ID = 6;
  private static final int __IS_MARKED_CACHED_ISSET_ID = 7;
  private static final int __NUM_BLOCKS_ISSET_ID = 8;
  private static final int __TOTAL_FILE_SIZE_BYTES_ISSET_ID = 9;
  private static final int __HAS_INCREMENTAL_STATS_ISSET_ID = 10;
  private static final int __WRITE_ID_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOCATION,_Fields.ID,_Fields.FILE_DESC,_Fields.ACCESS_LEVEL,_Fields.STATS,_Fields.IS_MARKED_CACHED,_Fields.HMS_PARAMETERS,_Fields.NUM_BLOCKS,_Fields.TOTAL_FILE_SIZE_BYTES,_Fields.PARTITION_STATS,_Fields.HAS_INCREMENTAL_STATS,_Fields.WRITE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINE_DELIM, new org.apache.thrift.meta_data.FieldMetaData("lineDelim", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FIELD_DELIM, new org.apache.thrift.meta_data.FieldMetaData("fieldDelim", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.COLLECTION_DELIM, new org.apache.thrift.meta_data.FieldMetaData("collectionDelim", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MAP_KEY_DELIM, new org.apache.thrift.meta_data.FieldMetaData("mapKeyDelim", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ESCAPE_CHAR, new org.apache.thrift.meta_data.FieldMetaData("escapeChar", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("fileFormat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, THdfsFileFormat.class)));
    tmpMap.put(_Fields.PARTITION_KEY_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partitionKeyExprs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("blockSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsPartitionLocation.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("file_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsFileDesc.class))));
    tmpMap.put(_Fields.ACCESS_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("access_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TAccessLevel.class)));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableStats.class)));
    tmpMap.put(_Fields.IS_MARKED_CACHED, new org.apache.thrift.meta_data.FieldMetaData("is_marked_cached", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HMS_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("hms_parameters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NUM_BLOCKS, new org.apache.thrift.meta_data.FieldMetaData("num_blocks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_FILE_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("total_file_size_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_STATS, new org.apache.thrift.meta_data.FieldMetaData("partition_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.HAS_INCREMENTAL_STATS, new org.apache.thrift.meta_data.FieldMetaData("has_incremental_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WRITE_ID, new org.apache.thrift.meta_data.FieldMetaData("write_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsPartition.class, metaDataMap);
  }

  public THdfsPartition() {
  }

  public THdfsPartition(
    byte lineDelim,
    byte fieldDelim,
    byte collectionDelim,
    byte mapKeyDelim,
    byte escapeChar,
    THdfsFileFormat fileFormat,
    List<org.apache.impala.thrift.TExpr> partitionKeyExprs,
    int blockSize)
  {
    this();
    this.lineDelim = lineDelim;
    setLineDelimIsSet(true);
    this.fieldDelim = fieldDelim;
    setFieldDelimIsSet(true);
    this.collectionDelim = collectionDelim;
    setCollectionDelimIsSet(true);
    this.mapKeyDelim = mapKeyDelim;
    setMapKeyDelimIsSet(true);
    this.escapeChar = escapeChar;
    setEscapeCharIsSet(true);
    this.fileFormat = fileFormat;
    this.partitionKeyExprs = partitionKeyExprs;
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsPartition(THdfsPartition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.lineDelim = other.lineDelim;
    this.fieldDelim = other.fieldDelim;
    this.collectionDelim = other.collectionDelim;
    this.mapKeyDelim = other.mapKeyDelim;
    this.escapeChar = other.escapeChar;
    if (other.isSetFileFormat()) {
      this.fileFormat = other.fileFormat;
    }
    if (other.isSetPartitionKeyExprs()) {
      List<org.apache.impala.thrift.TExpr> __this__partitionKeyExprs = new ArrayList<org.apache.impala.thrift.TExpr>(other.partitionKeyExprs.size());
      for (org.apache.impala.thrift.TExpr other_element : other.partitionKeyExprs) {
        __this__partitionKeyExprs.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.partitionKeyExprs = __this__partitionKeyExprs;
    }
    this.blockSize = other.blockSize;
    if (other.isSetLocation()) {
      this.location = new THdfsPartitionLocation(other.location);
    }
    this.id = other.id;
    if (other.isSetFile_desc()) {
      List<THdfsFileDesc> __this__file_desc = new ArrayList<THdfsFileDesc>(other.file_desc.size());
      for (THdfsFileDesc other_element : other.file_desc) {
        __this__file_desc.add(new THdfsFileDesc(other_element));
      }
      this.file_desc = __this__file_desc;
    }
    if (other.isSetAccess_level()) {
      this.access_level = other.access_level;
    }
    if (other.isSetStats()) {
      this.stats = new TTableStats(other.stats);
    }
    this.is_marked_cached = other.is_marked_cached;
    if (other.isSetHms_parameters()) {
      Map<String,String> __this__hms_parameters = new HashMap<String,String>(other.hms_parameters);
      this.hms_parameters = __this__hms_parameters;
    }
    this.num_blocks = other.num_blocks;
    this.total_file_size_bytes = other.total_file_size_bytes;
    if (other.isSetPartition_stats()) {
      this.partition_stats = org.apache.thrift.TBaseHelper.copyBinary(other.partition_stats);
    }
    this.has_incremental_stats = other.has_incremental_stats;
    this.write_id = other.write_id;
  }

  public THdfsPartition deepCopy() {
    return new THdfsPartition(this);
  }

  @Override
  public void clear() {
    setLineDelimIsSet(false);
    this.lineDelim = 0;
    setFieldDelimIsSet(false);
    this.fieldDelim = 0;
    setCollectionDelimIsSet(false);
    this.collectionDelim = 0;
    setMapKeyDelimIsSet(false);
    this.mapKeyDelim = 0;
    setEscapeCharIsSet(false);
    this.escapeChar = 0;
    this.fileFormat = null;
    this.partitionKeyExprs = null;
    setBlockSizeIsSet(false);
    this.blockSize = 0;
    this.location = null;
    setIdIsSet(false);
    this.id = 0;
    this.file_desc = null;
    this.access_level = null;
    this.stats = null;
    setIs_marked_cachedIsSet(false);
    this.is_marked_cached = false;
    this.hms_parameters = null;
    setNum_blocksIsSet(false);
    this.num_blocks = 0;
    setTotal_file_size_bytesIsSet(false);
    this.total_file_size_bytes = 0;
    this.partition_stats = null;
    setHas_incremental_statsIsSet(false);
    this.has_incremental_stats = false;
    setWrite_idIsSet(false);
    this.write_id = 0;
  }

  public byte getLineDelim() {
    return this.lineDelim;
  }

  public THdfsPartition setLineDelim(byte lineDelim) {
    this.lineDelim = lineDelim;
    setLineDelimIsSet(true);
    return this;
  }

  public void unsetLineDelim() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINEDELIM_ISSET_ID);
  }

  /** Returns true if field lineDelim is set (has been assigned a value) and false otherwise */
  public boolean isSetLineDelim() {
    return EncodingUtils.testBit(__isset_bitfield, __LINEDELIM_ISSET_ID);
  }

  public void setLineDelimIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINEDELIM_ISSET_ID, value);
  }

  public byte getFieldDelim() {
    return this.fieldDelim;
  }

  public THdfsPartition setFieldDelim(byte fieldDelim) {
    this.fieldDelim = fieldDelim;
    setFieldDelimIsSet(true);
    return this;
  }

  public void unsetFieldDelim() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIELDDELIM_ISSET_ID);
  }

  /** Returns true if field fieldDelim is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldDelim() {
    return EncodingUtils.testBit(__isset_bitfield, __FIELDDELIM_ISSET_ID);
  }

  public void setFieldDelimIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIELDDELIM_ISSET_ID, value);
  }

  public byte getCollectionDelim() {
    return this.collectionDelim;
  }

  public THdfsPartition setCollectionDelim(byte collectionDelim) {
    this.collectionDelim = collectionDelim;
    setCollectionDelimIsSet(true);
    return this;
  }

  public void unsetCollectionDelim() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLLECTIONDELIM_ISSET_ID);
  }

  /** Returns true if field collectionDelim is set (has been assigned a value) and false otherwise */
  public boolean isSetCollectionDelim() {
    return EncodingUtils.testBit(__isset_bitfield, __COLLECTIONDELIM_ISSET_ID);
  }

  public void setCollectionDelimIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLLECTIONDELIM_ISSET_ID, value);
  }

  public byte getMapKeyDelim() {
    return this.mapKeyDelim;
  }

  public THdfsPartition setMapKeyDelim(byte mapKeyDelim) {
    this.mapKeyDelim = mapKeyDelim;
    setMapKeyDelimIsSet(true);
    return this;
  }

  public void unsetMapKeyDelim() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAPKEYDELIM_ISSET_ID);
  }

  /** Returns true if field mapKeyDelim is set (has been assigned a value) and false otherwise */
  public boolean isSetMapKeyDelim() {
    return EncodingUtils.testBit(__isset_bitfield, __MAPKEYDELIM_ISSET_ID);
  }

  public void setMapKeyDelimIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAPKEYDELIM_ISSET_ID, value);
  }

  public byte getEscapeChar() {
    return this.escapeChar;
  }

  public THdfsPartition setEscapeChar(byte escapeChar) {
    this.escapeChar = escapeChar;
    setEscapeCharIsSet(true);
    return this;
  }

  public void unsetEscapeChar() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESCAPECHAR_ISSET_ID);
  }

  /** Returns true if field escapeChar is set (has been assigned a value) and false otherwise */
  public boolean isSetEscapeChar() {
    return EncodingUtils.testBit(__isset_bitfield, __ESCAPECHAR_ISSET_ID);
  }

  public void setEscapeCharIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESCAPECHAR_ISSET_ID, value);
  }

  /**
   * 
   * @see THdfsFileFormat
   */
  public THdfsFileFormat getFileFormat() {
    return this.fileFormat;
  }

  /**
   * 
   * @see THdfsFileFormat
   */
  public THdfsPartition setFileFormat(THdfsFileFormat fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

  public void unsetFileFormat() {
    this.fileFormat = null;
  }

  /** Returns true if field fileFormat is set (has been assigned a value) and false otherwise */
  public boolean isSetFileFormat() {
    return this.fileFormat != null;
  }

  public void setFileFormatIsSet(boolean value) {
    if (!value) {
      this.fileFormat = null;
    }
  }

  public int getPartitionKeyExprsSize() {
    return (this.partitionKeyExprs == null) ? 0 : this.partitionKeyExprs.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getPartitionKeyExprsIterator() {
    return (this.partitionKeyExprs == null) ? null : this.partitionKeyExprs.iterator();
  }

  public void addToPartitionKeyExprs(org.apache.impala.thrift.TExpr elem) {
    if (this.partitionKeyExprs == null) {
      this.partitionKeyExprs = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.partitionKeyExprs.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getPartitionKeyExprs() {
    return this.partitionKeyExprs;
  }

  public THdfsPartition setPartitionKeyExprs(List<org.apache.impala.thrift.TExpr> partitionKeyExprs) {
    this.partitionKeyExprs = partitionKeyExprs;
    return this;
  }

  public void unsetPartitionKeyExprs() {
    this.partitionKeyExprs = null;
  }

  /** Returns true if field partitionKeyExprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionKeyExprs() {
    return this.partitionKeyExprs != null;
  }

  public void setPartitionKeyExprsIsSet(boolean value) {
    if (!value) {
      this.partitionKeyExprs = null;
    }
  }

  public int getBlockSize() {
    return this.blockSize;
  }

  public THdfsPartition setBlockSize(int blockSize) {
    this.blockSize = blockSize;
    setBlockSizeIsSet(true);
    return this;
  }

  public void unsetBlockSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  /** Returns true if field blockSize is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockSize() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
  }

  public void setBlockSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID, value);
  }

  public THdfsPartitionLocation getLocation() {
    return this.location;
  }

  public THdfsPartition setLocation(THdfsPartitionLocation location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public long getId() {
    return this.id;
  }

  public THdfsPartition setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getFile_descSize() {
    return (this.file_desc == null) ? 0 : this.file_desc.size();
  }

  public java.util.Iterator<THdfsFileDesc> getFile_descIterator() {
    return (this.file_desc == null) ? null : this.file_desc.iterator();
  }

  public void addToFile_desc(THdfsFileDesc elem) {
    if (this.file_desc == null) {
      this.file_desc = new ArrayList<THdfsFileDesc>();
    }
    this.file_desc.add(elem);
  }

  public List<THdfsFileDesc> getFile_desc() {
    return this.file_desc;
  }

  public THdfsPartition setFile_desc(List<THdfsFileDesc> file_desc) {
    this.file_desc = file_desc;
    return this;
  }

  public void unsetFile_desc() {
    this.file_desc = null;
  }

  /** Returns true if field file_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_desc() {
    return this.file_desc != null;
  }

  public void setFile_descIsSet(boolean value) {
    if (!value) {
      this.file_desc = null;
    }
  }

  /**
   * 
   * @see TAccessLevel
   */
  public TAccessLevel getAccess_level() {
    return this.access_level;
  }

  /**
   * 
   * @see TAccessLevel
   */
  public THdfsPartition setAccess_level(TAccessLevel access_level) {
    this.access_level = access_level;
    return this;
  }

  public void unsetAccess_level() {
    this.access_level = null;
  }

  /** Returns true if field access_level is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_level() {
    return this.access_level != null;
  }

  public void setAccess_levelIsSet(boolean value) {
    if (!value) {
      this.access_level = null;
    }
  }

  public TTableStats getStats() {
    return this.stats;
  }

  public THdfsPartition setStats(TTableStats stats) {
    this.stats = stats;
    return this;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public boolean isIs_marked_cached() {
    return this.is_marked_cached;
  }

  public THdfsPartition setIs_marked_cached(boolean is_marked_cached) {
    this.is_marked_cached = is_marked_cached;
    setIs_marked_cachedIsSet(true);
    return this;
  }

  public void unsetIs_marked_cached() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_MARKED_CACHED_ISSET_ID);
  }

  /** Returns true if field is_marked_cached is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_marked_cached() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_MARKED_CACHED_ISSET_ID);
  }

  public void setIs_marked_cachedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_MARKED_CACHED_ISSET_ID, value);
  }

  public int getHms_parametersSize() {
    return (this.hms_parameters == null) ? 0 : this.hms_parameters.size();
  }

  public void putToHms_parameters(String key, String val) {
    if (this.hms_parameters == null) {
      this.hms_parameters = new HashMap<String,String>();
    }
    this.hms_parameters.put(key, val);
  }

  public Map<String,String> getHms_parameters() {
    return this.hms_parameters;
  }

  public THdfsPartition setHms_parameters(Map<String,String> hms_parameters) {
    this.hms_parameters = hms_parameters;
    return this;
  }

  public void unsetHms_parameters() {
    this.hms_parameters = null;
  }

  /** Returns true if field hms_parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetHms_parameters() {
    return this.hms_parameters != null;
  }

  public void setHms_parametersIsSet(boolean value) {
    if (!value) {
      this.hms_parameters = null;
    }
  }

  public long getNum_blocks() {
    return this.num_blocks;
  }

  public THdfsPartition setNum_blocks(long num_blocks) {
    this.num_blocks = num_blocks;
    setNum_blocksIsSet(true);
    return this;
  }

  public void unsetNum_blocks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_BLOCKS_ISSET_ID);
  }

  /** Returns true if field num_blocks is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_blocks() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_BLOCKS_ISSET_ID);
  }

  public void setNum_blocksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_BLOCKS_ISSET_ID, value);
  }

  public long getTotal_file_size_bytes() {
    return this.total_file_size_bytes;
  }

  public THdfsPartition setTotal_file_size_bytes(long total_file_size_bytes) {
    this.total_file_size_bytes = total_file_size_bytes;
    setTotal_file_size_bytesIsSet(true);
    return this;
  }

  public void unsetTotal_file_size_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_FILE_SIZE_BYTES_ISSET_ID);
  }

  /** Returns true if field total_file_size_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_file_size_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_FILE_SIZE_BYTES_ISSET_ID);
  }

  public void setTotal_file_size_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_FILE_SIZE_BYTES_ISSET_ID, value);
  }

  public byte[] getPartition_stats() {
    setPartition_stats(org.apache.thrift.TBaseHelper.rightSize(partition_stats));
    return partition_stats == null ? null : partition_stats.array();
  }

  public ByteBuffer bufferForPartition_stats() {
    return org.apache.thrift.TBaseHelper.copyBinary(partition_stats);
  }

  public THdfsPartition setPartition_stats(byte[] partition_stats) {
    this.partition_stats = partition_stats == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(partition_stats, partition_stats.length));
    return this;
  }

  public THdfsPartition setPartition_stats(ByteBuffer partition_stats) {
    this.partition_stats = org.apache.thrift.TBaseHelper.copyBinary(partition_stats);
    return this;
  }

  public void unsetPartition_stats() {
    this.partition_stats = null;
  }

  /** Returns true if field partition_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_stats() {
    return this.partition_stats != null;
  }

  public void setPartition_statsIsSet(boolean value) {
    if (!value) {
      this.partition_stats = null;
    }
  }

  public boolean isHas_incremental_stats() {
    return this.has_incremental_stats;
  }

  public THdfsPartition setHas_incremental_stats(boolean has_incremental_stats) {
    this.has_incremental_stats = has_incremental_stats;
    setHas_incremental_statsIsSet(true);
    return this;
  }

  public void unsetHas_incremental_stats() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAS_INCREMENTAL_STATS_ISSET_ID);
  }

  /** Returns true if field has_incremental_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_incremental_stats() {
    return EncodingUtils.testBit(__isset_bitfield, __HAS_INCREMENTAL_STATS_ISSET_ID);
  }

  public void setHas_incremental_statsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAS_INCREMENTAL_STATS_ISSET_ID, value);
  }

  public long getWrite_id() {
    return this.write_id;
  }

  public THdfsPartition setWrite_id(long write_id) {
    this.write_id = write_id;
    setWrite_idIsSet(true);
    return this;
  }

  public void unsetWrite_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITE_ID_ISSET_ID);
  }

  /** Returns true if field write_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWrite_id() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITE_ID_ISSET_ID);
  }

  public void setWrite_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITE_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LINE_DELIM:
      if (value == null) {
        unsetLineDelim();
      } else {
        setLineDelim((Byte)value);
      }
      break;

    case FIELD_DELIM:
      if (value == null) {
        unsetFieldDelim();
      } else {
        setFieldDelim((Byte)value);
      }
      break;

    case COLLECTION_DELIM:
      if (value == null) {
        unsetCollectionDelim();
      } else {
        setCollectionDelim((Byte)value);
      }
      break;

    case MAP_KEY_DELIM:
      if (value == null) {
        unsetMapKeyDelim();
      } else {
        setMapKeyDelim((Byte)value);
      }
      break;

    case ESCAPE_CHAR:
      if (value == null) {
        unsetEscapeChar();
      } else {
        setEscapeChar((Byte)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFileFormat();
      } else {
        setFileFormat((THdfsFileFormat)value);
      }
      break;

    case PARTITION_KEY_EXPRS:
      if (value == null) {
        unsetPartitionKeyExprs();
      } else {
        setPartitionKeyExprs((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case BLOCK_SIZE:
      if (value == null) {
        unsetBlockSize();
      } else {
        setBlockSize((Integer)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((THdfsPartitionLocation)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case FILE_DESC:
      if (value == null) {
        unsetFile_desc();
      } else {
        setFile_desc((List<THdfsFileDesc>)value);
      }
      break;

    case ACCESS_LEVEL:
      if (value == null) {
        unsetAccess_level();
      } else {
        setAccess_level((TAccessLevel)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((TTableStats)value);
      }
      break;

    case IS_MARKED_CACHED:
      if (value == null) {
        unsetIs_marked_cached();
      } else {
        setIs_marked_cached((Boolean)value);
      }
      break;

    case HMS_PARAMETERS:
      if (value == null) {
        unsetHms_parameters();
      } else {
        setHms_parameters((Map<String,String>)value);
      }
      break;

    case NUM_BLOCKS:
      if (value == null) {
        unsetNum_blocks();
      } else {
        setNum_blocks((Long)value);
      }
      break;

    case TOTAL_FILE_SIZE_BYTES:
      if (value == null) {
        unsetTotal_file_size_bytes();
      } else {
        setTotal_file_size_bytes((Long)value);
      }
      break;

    case PARTITION_STATS:
      if (value == null) {
        unsetPartition_stats();
      } else {
        setPartition_stats((ByteBuffer)value);
      }
      break;

    case HAS_INCREMENTAL_STATS:
      if (value == null) {
        unsetHas_incremental_stats();
      } else {
        setHas_incremental_stats((Boolean)value);
      }
      break;

    case WRITE_ID:
      if (value == null) {
        unsetWrite_id();
      } else {
        setWrite_id((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LINE_DELIM:
      return getLineDelim();

    case FIELD_DELIM:
      return getFieldDelim();

    case COLLECTION_DELIM:
      return getCollectionDelim();

    case MAP_KEY_DELIM:
      return getMapKeyDelim();

    case ESCAPE_CHAR:
      return getEscapeChar();

    case FILE_FORMAT:
      return getFileFormat();

    case PARTITION_KEY_EXPRS:
      return getPartitionKeyExprs();

    case BLOCK_SIZE:
      return getBlockSize();

    case LOCATION:
      return getLocation();

    case ID:
      return getId();

    case FILE_DESC:
      return getFile_desc();

    case ACCESS_LEVEL:
      return getAccess_level();

    case STATS:
      return getStats();

    case IS_MARKED_CACHED:
      return isIs_marked_cached();

    case HMS_PARAMETERS:
      return getHms_parameters();

    case NUM_BLOCKS:
      return getNum_blocks();

    case TOTAL_FILE_SIZE_BYTES:
      return getTotal_file_size_bytes();

    case PARTITION_STATS:
      return getPartition_stats();

    case HAS_INCREMENTAL_STATS:
      return isHas_incremental_stats();

    case WRITE_ID:
      return getWrite_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LINE_DELIM:
      return isSetLineDelim();
    case FIELD_DELIM:
      return isSetFieldDelim();
    case COLLECTION_DELIM:
      return isSetCollectionDelim();
    case MAP_KEY_DELIM:
      return isSetMapKeyDelim();
    case ESCAPE_CHAR:
      return isSetEscapeChar();
    case FILE_FORMAT:
      return isSetFileFormat();
    case PARTITION_KEY_EXPRS:
      return isSetPartitionKeyExprs();
    case BLOCK_SIZE:
      return isSetBlockSize();
    case LOCATION:
      return isSetLocation();
    case ID:
      return isSetId();
    case FILE_DESC:
      return isSetFile_desc();
    case ACCESS_LEVEL:
      return isSetAccess_level();
    case STATS:
      return isSetStats();
    case IS_MARKED_CACHED:
      return isSetIs_marked_cached();
    case HMS_PARAMETERS:
      return isSetHms_parameters();
    case NUM_BLOCKS:
      return isSetNum_blocks();
    case TOTAL_FILE_SIZE_BYTES:
      return isSetTotal_file_size_bytes();
    case PARTITION_STATS:
      return isSetPartition_stats();
    case HAS_INCREMENTAL_STATS:
      return isSetHas_incremental_stats();
    case WRITE_ID:
      return isSetWrite_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THdfsPartition)
      return this.equals((THdfsPartition)that);
    return false;
  }

  public boolean equals(THdfsPartition that) {
    if (that == null)
      return false;

    boolean this_present_lineDelim = true;
    boolean that_present_lineDelim = true;
    if (this_present_lineDelim || that_present_lineDelim) {
      if (!(this_present_lineDelim && that_present_lineDelim))
        return false;
      if (this.lineDelim != that.lineDelim)
        return false;
    }

    boolean this_present_fieldDelim = true;
    boolean that_present_fieldDelim = true;
    if (this_present_fieldDelim || that_present_fieldDelim) {
      if (!(this_present_fieldDelim && that_present_fieldDelim))
        return false;
      if (this.fieldDelim != that.fieldDelim)
        return false;
    }

    boolean this_present_collectionDelim = true;
    boolean that_present_collectionDelim = true;
    if (this_present_collectionDelim || that_present_collectionDelim) {
      if (!(this_present_collectionDelim && that_present_collectionDelim))
        return false;
      if (this.collectionDelim != that.collectionDelim)
        return false;
    }

    boolean this_present_mapKeyDelim = true;
    boolean that_present_mapKeyDelim = true;
    if (this_present_mapKeyDelim || that_present_mapKeyDelim) {
      if (!(this_present_mapKeyDelim && that_present_mapKeyDelim))
        return false;
      if (this.mapKeyDelim != that.mapKeyDelim)
        return false;
    }

    boolean this_present_escapeChar = true;
    boolean that_present_escapeChar = true;
    if (this_present_escapeChar || that_present_escapeChar) {
      if (!(this_present_escapeChar && that_present_escapeChar))
        return false;
      if (this.escapeChar != that.escapeChar)
        return false;
    }

    boolean this_present_fileFormat = true && this.isSetFileFormat();
    boolean that_present_fileFormat = true && that.isSetFileFormat();
    if (this_present_fileFormat || that_present_fileFormat) {
      if (!(this_present_fileFormat && that_present_fileFormat))
        return false;
      if (!this.fileFormat.equals(that.fileFormat))
        return false;
    }

    boolean this_present_partitionKeyExprs = true && this.isSetPartitionKeyExprs();
    boolean that_present_partitionKeyExprs = true && that.isSetPartitionKeyExprs();
    if (this_present_partitionKeyExprs || that_present_partitionKeyExprs) {
      if (!(this_present_partitionKeyExprs && that_present_partitionKeyExprs))
        return false;
      if (!this.partitionKeyExprs.equals(that.partitionKeyExprs))
        return false;
    }

    boolean this_present_blockSize = true;
    boolean that_present_blockSize = true;
    if (this_present_blockSize || that_present_blockSize) {
      if (!(this_present_blockSize && that_present_blockSize))
        return false;
      if (this.blockSize != that.blockSize)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_file_desc = true && this.isSetFile_desc();
    boolean that_present_file_desc = true && that.isSetFile_desc();
    if (this_present_file_desc || that_present_file_desc) {
      if (!(this_present_file_desc && that_present_file_desc))
        return false;
      if (!this.file_desc.equals(that.file_desc))
        return false;
    }

    boolean this_present_access_level = true && this.isSetAccess_level();
    boolean that_present_access_level = true && that.isSetAccess_level();
    if (this_present_access_level || that_present_access_level) {
      if (!(this_present_access_level && that_present_access_level))
        return false;
      if (!this.access_level.equals(that.access_level))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_is_marked_cached = true && this.isSetIs_marked_cached();
    boolean that_present_is_marked_cached = true && that.isSetIs_marked_cached();
    if (this_present_is_marked_cached || that_present_is_marked_cached) {
      if (!(this_present_is_marked_cached && that_present_is_marked_cached))
        return false;
      if (this.is_marked_cached != that.is_marked_cached)
        return false;
    }

    boolean this_present_hms_parameters = true && this.isSetHms_parameters();
    boolean that_present_hms_parameters = true && that.isSetHms_parameters();
    if (this_present_hms_parameters || that_present_hms_parameters) {
      if (!(this_present_hms_parameters && that_present_hms_parameters))
        return false;
      if (!this.hms_parameters.equals(that.hms_parameters))
        return false;
    }

    boolean this_present_num_blocks = true && this.isSetNum_blocks();
    boolean that_present_num_blocks = true && that.isSetNum_blocks();
    if (this_present_num_blocks || that_present_num_blocks) {
      if (!(this_present_num_blocks && that_present_num_blocks))
        return false;
      if (this.num_blocks != that.num_blocks)
        return false;
    }

    boolean this_present_total_file_size_bytes = true && this.isSetTotal_file_size_bytes();
    boolean that_present_total_file_size_bytes = true && that.isSetTotal_file_size_bytes();
    if (this_present_total_file_size_bytes || that_present_total_file_size_bytes) {
      if (!(this_present_total_file_size_bytes && that_present_total_file_size_bytes))
        return false;
      if (this.total_file_size_bytes != that.total_file_size_bytes)
        return false;
    }

    boolean this_present_partition_stats = true && this.isSetPartition_stats();
    boolean that_present_partition_stats = true && that.isSetPartition_stats();
    if (this_present_partition_stats || that_present_partition_stats) {
      if (!(this_present_partition_stats && that_present_partition_stats))
        return false;
      if (!this.partition_stats.equals(that.partition_stats))
        return false;
    }

    boolean this_present_has_incremental_stats = true && this.isSetHas_incremental_stats();
    boolean that_present_has_incremental_stats = true && that.isSetHas_incremental_stats();
    if (this_present_has_incremental_stats || that_present_has_incremental_stats) {
      if (!(this_present_has_incremental_stats && that_present_has_incremental_stats))
        return false;
      if (this.has_incremental_stats != that.has_incremental_stats)
        return false;
    }

    boolean this_present_write_id = true && this.isSetWrite_id();
    boolean that_present_write_id = true && that.isSetWrite_id();
    if (this_present_write_id || that_present_write_id) {
      if (!(this_present_write_id && that_present_write_id))
        return false;
      if (this.write_id != that.write_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lineDelim = true;
    list.add(present_lineDelim);
    if (present_lineDelim)
      list.add(lineDelim);

    boolean present_fieldDelim = true;
    list.add(present_fieldDelim);
    if (present_fieldDelim)
      list.add(fieldDelim);

    boolean present_collectionDelim = true;
    list.add(present_collectionDelim);
    if (present_collectionDelim)
      list.add(collectionDelim);

    boolean present_mapKeyDelim = true;
    list.add(present_mapKeyDelim);
    if (present_mapKeyDelim)
      list.add(mapKeyDelim);

    boolean present_escapeChar = true;
    list.add(present_escapeChar);
    if (present_escapeChar)
      list.add(escapeChar);

    boolean present_fileFormat = true && (isSetFileFormat());
    list.add(present_fileFormat);
    if (present_fileFormat)
      list.add(fileFormat.getValue());

    boolean present_partitionKeyExprs = true && (isSetPartitionKeyExprs());
    list.add(present_partitionKeyExprs);
    if (present_partitionKeyExprs)
      list.add(partitionKeyExprs);

    boolean present_blockSize = true;
    list.add(present_blockSize);
    if (present_blockSize)
      list.add(blockSize);

    boolean present_location = true && (isSetLocation());
    list.add(present_location);
    if (present_location)
      list.add(location);

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_file_desc = true && (isSetFile_desc());
    list.add(present_file_desc);
    if (present_file_desc)
      list.add(file_desc);

    boolean present_access_level = true && (isSetAccess_level());
    list.add(present_access_level);
    if (present_access_level)
      list.add(access_level.getValue());

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_is_marked_cached = true && (isSetIs_marked_cached());
    list.add(present_is_marked_cached);
    if (present_is_marked_cached)
      list.add(is_marked_cached);

    boolean present_hms_parameters = true && (isSetHms_parameters());
    list.add(present_hms_parameters);
    if (present_hms_parameters)
      list.add(hms_parameters);

    boolean present_num_blocks = true && (isSetNum_blocks());
    list.add(present_num_blocks);
    if (present_num_blocks)
      list.add(num_blocks);

    boolean present_total_file_size_bytes = true && (isSetTotal_file_size_bytes());
    list.add(present_total_file_size_bytes);
    if (present_total_file_size_bytes)
      list.add(total_file_size_bytes);

    boolean present_partition_stats = true && (isSetPartition_stats());
    list.add(present_partition_stats);
    if (present_partition_stats)
      list.add(partition_stats);

    boolean present_has_incremental_stats = true && (isSetHas_incremental_stats());
    list.add(present_has_incremental_stats);
    if (present_has_incremental_stats)
      list.add(has_incremental_stats);

    boolean present_write_id = true && (isSetWrite_id());
    list.add(present_write_id);
    if (present_write_id)
      list.add(write_id);

    return list.hashCode();
  }

  @Override
  public int compareTo(THdfsPartition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLineDelim()).compareTo(other.isSetLineDelim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineDelim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineDelim, other.lineDelim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldDelim()).compareTo(other.isSetFieldDelim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldDelim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldDelim, other.fieldDelim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollectionDelim()).compareTo(other.isSetCollectionDelim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollectionDelim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collectionDelim, other.collectionDelim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapKeyDelim()).compareTo(other.isSetMapKeyDelim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapKeyDelim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapKeyDelim, other.mapKeyDelim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEscapeChar()).compareTo(other.isSetEscapeChar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEscapeChar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.escapeChar, other.escapeChar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileFormat()).compareTo(other.isSetFileFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileFormat, other.fileFormat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitionKeyExprs()).compareTo(other.isSetPartitionKeyExprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionKeyExprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitionKeyExprs, other.partitionKeyExprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlockSize()).compareTo(other.isSetBlockSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockSize, other.blockSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_desc()).compareTo(other.isSetFile_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_desc, other.file_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccess_level()).compareTo(other.isSetAccess_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_level, other.access_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_marked_cached()).compareTo(other.isSetIs_marked_cached());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_marked_cached()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_marked_cached, other.is_marked_cached);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHms_parameters()).compareTo(other.isSetHms_parameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHms_parameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hms_parameters, other.hms_parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_blocks()).compareTo(other.isSetNum_blocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_blocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_blocks, other.num_blocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_file_size_bytes()).compareTo(other.isSetTotal_file_size_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_file_size_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_file_size_bytes, other.total_file_size_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_stats()).compareTo(other.isSetPartition_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_stats, other.partition_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_incremental_stats()).compareTo(other.isSetHas_incremental_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_incremental_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_incremental_stats, other.has_incremental_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrite_id()).compareTo(other.isSetWrite_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrite_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.write_id, other.write_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THdfsPartition(");
    boolean first = true;

    sb.append("lineDelim:");
    sb.append(this.lineDelim);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fieldDelim:");
    sb.append(this.fieldDelim);
    first = false;
    if (!first) sb.append(", ");
    sb.append("collectionDelim:");
    sb.append(this.collectionDelim);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapKeyDelim:");
    sb.append(this.mapKeyDelim);
    first = false;
    if (!first) sb.append(", ");
    sb.append("escapeChar:");
    sb.append(this.escapeChar);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileFormat:");
    if (this.fileFormat == null) {
      sb.append("null");
    } else {
      sb.append(this.fileFormat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partitionKeyExprs:");
    if (this.partitionKeyExprs == null) {
      sb.append("null");
    } else {
      sb.append(this.partitionKeyExprs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockSize:");
    sb.append(this.blockSize);
    first = false;
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetFile_desc()) {
      if (!first) sb.append(", ");
      sb.append("file_desc:");
      if (this.file_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.file_desc);
      }
      first = false;
    }
    if (isSetAccess_level()) {
      if (!first) sb.append(", ");
      sb.append("access_level:");
      if (this.access_level == null) {
        sb.append("null");
      } else {
        sb.append(this.access_level);
      }
      first = false;
    }
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetIs_marked_cached()) {
      if (!first) sb.append(", ");
      sb.append("is_marked_cached:");
      sb.append(this.is_marked_cached);
      first = false;
    }
    if (isSetHms_parameters()) {
      if (!first) sb.append(", ");
      sb.append("hms_parameters:");
      if (this.hms_parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.hms_parameters);
      }
      first = false;
    }
    if (isSetNum_blocks()) {
      if (!first) sb.append(", ");
      sb.append("num_blocks:");
      sb.append(this.num_blocks);
      first = false;
    }
    if (isSetTotal_file_size_bytes()) {
      if (!first) sb.append(", ");
      sb.append("total_file_size_bytes:");
      sb.append(this.total_file_size_bytes);
      first = false;
    }
    if (isSetPartition_stats()) {
      if (!first) sb.append(", ");
      sb.append("partition_stats:");
      if (this.partition_stats == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.partition_stats, sb);
      }
      first = false;
    }
    if (isSetHas_incremental_stats()) {
      if (!first) sb.append(", ");
      sb.append("has_incremental_stats:");
      sb.append(this.has_incremental_stats);
      first = false;
    }
    if (isSetWrite_id()) {
      if (!first) sb.append(", ");
      sb.append("write_id:");
      sb.append(this.write_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'lineDelim' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'fieldDelim' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'collectionDelim' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'mapKeyDelim' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'escapeChar' because it's a primitive and you chose the non-beans generator.
    if (fileFormat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileFormat' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'blockSize' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (location != null) {
      location.validate();
    }
    if (stats != null) {
      stats.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsPartitionStandardSchemeFactory implements SchemeFactory {
    public THdfsPartitionStandardScheme getScheme() {
      return new THdfsPartitionStandardScheme();
    }
  }

  private static class THdfsPartitionStandardScheme extends StandardScheme<THdfsPartition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsPartition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINE_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.lineDelim = iprot.readByte();
              struct.setLineDelimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.fieldDelim = iprot.readByte();
              struct.setFieldDelimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLLECTION_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.collectionDelim = iprot.readByte();
              struct.setCollectionDelimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAP_KEY_DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mapKeyDelim = iprot.readByte();
              struct.setMapKeyDelimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ESCAPE_CHAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.escapeChar = iprot.readByte();
              struct.setEscapeCharIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileFormat = org.apache.impala.thrift.THdfsFileFormat.findByValue(iprot.readI32());
              struct.setFileFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARTITION_KEY_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.partitionKeyExprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list10.size);
                org.apache.impala.thrift.TExpr _elem11;
                for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                {
                  _elem11 = new org.apache.impala.thrift.TExpr();
                  _elem11.read(iprot);
                  struct.partitionKeyExprs.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setPartitionKeyExprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BLOCK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.blockSize = iprot.readI32();
              struct.setBlockSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new THdfsPartitionLocation();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct.file_desc = new ArrayList<THdfsFileDesc>(_list13.size);
                THdfsFileDesc _elem14;
                for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                {
                  _elem14 = new THdfsFileDesc();
                  _elem14.read(iprot);
                  struct.file_desc.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setFile_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACCESS_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.access_level = org.apache.impala.thrift.TAccessLevel.findByValue(iprot.readI32());
              struct.setAccess_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stats = new TTableStats();
              struct.stats.read(iprot);
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_MARKED_CACHED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_marked_cached = iprot.readBool();
              struct.setIs_marked_cachedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HMS_PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.hms_parameters = new HashMap<String,String>(2*_map16.size);
                String _key17;
                String _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readString();
                  _val18 = iprot.readString();
                  struct.hms_parameters.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setHms_parametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NUM_BLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_blocks = iprot.readI64();
              struct.setNum_blocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TOTAL_FILE_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_file_size_bytes = iprot.readI64();
              struct.setTotal_file_size_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PARTITION_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_stats = iprot.readBinary();
              struct.setPartition_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // HAS_INCREMENTAL_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_incremental_stats = iprot.readBool();
              struct.setHas_incremental_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // WRITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.write_id = iprot.readI64();
              struct.setWrite_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLineDelim()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lineDelim' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFieldDelim()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fieldDelim' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCollectionDelim()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'collectionDelim' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMapKeyDelim()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'mapKeyDelim' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEscapeChar()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'escapeChar' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBlockSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'blockSize' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsPartition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LINE_DELIM_FIELD_DESC);
      oprot.writeByte(struct.lineDelim);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIELD_DELIM_FIELD_DESC);
      oprot.writeByte(struct.fieldDelim);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COLLECTION_DELIM_FIELD_DESC);
      oprot.writeByte(struct.collectionDelim);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAP_KEY_DELIM_FIELD_DESC);
      oprot.writeByte(struct.mapKeyDelim);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ESCAPE_CHAR_FIELD_DESC);
      oprot.writeByte(struct.escapeChar);
      oprot.writeFieldEnd();
      if (struct.fileFormat != null) {
        oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
        oprot.writeI32(struct.fileFormat.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.partitionKeyExprs != null) {
        oprot.writeFieldBegin(PARTITION_KEY_EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partitionKeyExprs.size()));
          for (org.apache.impala.thrift.TExpr _iter20 : struct.partitionKeyExprs)
          {
            _iter20.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BLOCK_SIZE_FIELD_DESC);
      oprot.writeI32(struct.blockSize);
      oprot.writeFieldEnd();
      if (struct.file_desc != null) {
        if (struct.isSetFile_desc()) {
          oprot.writeFieldBegin(FILE_DESC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.file_desc.size()));
            for (THdfsFileDesc _iter21 : struct.file_desc)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.access_level != null) {
        if (struct.isSetAccess_level()) {
          oprot.writeFieldBegin(ACCESS_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.access_level.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          struct.stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_marked_cached()) {
        oprot.writeFieldBegin(IS_MARKED_CACHED_FIELD_DESC);
        oprot.writeBool(struct.is_marked_cached);
        oprot.writeFieldEnd();
      }
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.hms_parameters != null) {
        if (struct.isSetHms_parameters()) {
          oprot.writeFieldBegin(HMS_PARAMETERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.hms_parameters.size()));
            for (Map.Entry<String, String> _iter22 : struct.hms_parameters.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_blocks()) {
        oprot.writeFieldBegin(NUM_BLOCKS_FIELD_DESC);
        oprot.writeI64(struct.num_blocks);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal_file_size_bytes()) {
        oprot.writeFieldBegin(TOTAL_FILE_SIZE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.total_file_size_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.partition_stats != null) {
        if (struct.isSetPartition_stats()) {
          oprot.writeFieldBegin(PARTITION_STATS_FIELD_DESC);
          oprot.writeBinary(struct.partition_stats);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHas_incremental_stats()) {
        oprot.writeFieldBegin(HAS_INCREMENTAL_STATS_FIELD_DESC);
        oprot.writeBool(struct.has_incremental_stats);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWrite_id()) {
        oprot.writeFieldBegin(WRITE_ID_FIELD_DESC);
        oprot.writeI64(struct.write_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsPartitionTupleSchemeFactory implements SchemeFactory {
    public THdfsPartitionTupleScheme getScheme() {
      return new THdfsPartitionTupleScheme();
    }
  }

  private static class THdfsPartitionTupleScheme extends TupleScheme<THdfsPartition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsPartition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeByte(struct.lineDelim);
      oprot.writeByte(struct.fieldDelim);
      oprot.writeByte(struct.collectionDelim);
      oprot.writeByte(struct.mapKeyDelim);
      oprot.writeByte(struct.escapeChar);
      oprot.writeI32(struct.fileFormat.getValue());
      oprot.writeI32(struct.blockSize);
      BitSet optionals = new BitSet();
      if (struct.isSetPartitionKeyExprs()) {
        optionals.set(0);
      }
      if (struct.isSetLocation()) {
        optionals.set(1);
      }
      if (struct.isSetId()) {
        optionals.set(2);
      }
      if (struct.isSetFile_desc()) {
        optionals.set(3);
      }
      if (struct.isSetAccess_level()) {
        optionals.set(4);
      }
      if (struct.isSetStats()) {
        optionals.set(5);
      }
      if (struct.isSetIs_marked_cached()) {
        optionals.set(6);
      }
      if (struct.isSetHms_parameters()) {
        optionals.set(7);
      }
      if (struct.isSetNum_blocks()) {
        optionals.set(8);
      }
      if (struct.isSetTotal_file_size_bytes()) {
        optionals.set(9);
      }
      if (struct.isSetPartition_stats()) {
        optionals.set(10);
      }
      if (struct.isSetHas_incremental_stats()) {
        optionals.set(11);
      }
      if (struct.isSetWrite_id()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetPartitionKeyExprs()) {
        {
          oprot.writeI32(struct.partitionKeyExprs.size());
          for (org.apache.impala.thrift.TExpr _iter23 : struct.partitionKeyExprs)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetLocation()) {
        struct.location.write(oprot);
      }
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetFile_desc()) {
        {
          oprot.writeI32(struct.file_desc.size());
          for (THdfsFileDesc _iter24 : struct.file_desc)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetAccess_level()) {
        oprot.writeI32(struct.access_level.getValue());
      }
      if (struct.isSetStats()) {
        struct.stats.write(oprot);
      }
      if (struct.isSetIs_marked_cached()) {
        oprot.writeBool(struct.is_marked_cached);
      }
      if (struct.isSetHms_parameters()) {
        {
          oprot.writeI32(struct.hms_parameters.size());
          for (Map.Entry<String, String> _iter25 : struct.hms_parameters.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            oprot.writeString(_iter25.getValue());
          }
        }
      }
      if (struct.isSetNum_blocks()) {
        oprot.writeI64(struct.num_blocks);
      }
      if (struct.isSetTotal_file_size_bytes()) {
        oprot.writeI64(struct.total_file_size_bytes);
      }
      if (struct.isSetPartition_stats()) {
        oprot.writeBinary(struct.partition_stats);
      }
      if (struct.isSetHas_incremental_stats()) {
        oprot.writeBool(struct.has_incremental_stats);
      }
      if (struct.isSetWrite_id()) {
        oprot.writeI64(struct.write_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsPartition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.lineDelim = iprot.readByte();
      struct.setLineDelimIsSet(true);
      struct.fieldDelim = iprot.readByte();
      struct.setFieldDelimIsSet(true);
      struct.collectionDelim = iprot.readByte();
      struct.setCollectionDelimIsSet(true);
      struct.mapKeyDelim = iprot.readByte();
      struct.setMapKeyDelimIsSet(true);
      struct.escapeChar = iprot.readByte();
      struct.setEscapeCharIsSet(true);
      struct.fileFormat = org.apache.impala.thrift.THdfsFileFormat.findByValue(iprot.readI32());
      struct.setFileFormatIsSet(true);
      struct.blockSize = iprot.readI32();
      struct.setBlockSizeIsSet(true);
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partitionKeyExprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list26.size);
          org.apache.impala.thrift.TExpr _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new org.apache.impala.thrift.TExpr();
            _elem27.read(iprot);
            struct.partitionKeyExprs.add(_elem27);
          }
        }
        struct.setPartitionKeyExprsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.location = new THdfsPartitionLocation();
        struct.location.read(iprot);
        struct.setLocationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.file_desc = new ArrayList<THdfsFileDesc>(_list29.size);
          THdfsFileDesc _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new THdfsFileDesc();
            _elem30.read(iprot);
            struct.file_desc.add(_elem30);
          }
        }
        struct.setFile_descIsSet(true);
      }
      if (incoming.get(4)) {
        struct.access_level = org.apache.impala.thrift.TAccessLevel.findByValue(iprot.readI32());
        struct.setAccess_levelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stats = new TTableStats();
        struct.stats.read(iprot);
        struct.setStatsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.is_marked_cached = iprot.readBool();
        struct.setIs_marked_cachedIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.hms_parameters = new HashMap<String,String>(2*_map32.size);
          String _key33;
          String _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = iprot.readString();
            _val34 = iprot.readString();
            struct.hms_parameters.put(_key33, _val34);
          }
        }
        struct.setHms_parametersIsSet(true);
      }
      if (incoming.get(8)) {
        struct.num_blocks = iprot.readI64();
        struct.setNum_blocksIsSet(true);
      }
      if (incoming.get(9)) {
        struct.total_file_size_bytes = iprot.readI64();
        struct.setTotal_file_size_bytesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.partition_stats = iprot.readBinary();
        struct.setPartition_statsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.has_incremental_stats = iprot.readBool();
        struct.setHas_incremental_statsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.write_id = iprot.readI64();
        struct.setWrite_idIsSet(true);
      }
    }
  }

}

