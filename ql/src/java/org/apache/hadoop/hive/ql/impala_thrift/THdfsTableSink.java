/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class THdfsTableSink implements org.apache.thrift.TBase<THdfsTableSink, THdfsTableSink._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsTableSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsTableSink");

  private static final org.apache.thrift.protocol.TField PARTITION_KEY_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_key_exprs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OVERWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("overwrite", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField SKIP_HEADER_LINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("skip_header_line_count", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INPUT_IS_CLUSTERED_FIELD_DESC = new org.apache.thrift.protocol.TField("input_is_clustered", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SORT_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_columns", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField WRITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("write_id", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SORTING_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sorting_order", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THdfsTableSinkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THdfsTableSinkTupleSchemeFactory());
  }

  public List<org.apache.impala.thrift.TExpr> partition_key_exprs; // required
  public boolean overwrite; // required
  public int skip_header_line_count; // optional
  public boolean input_is_clustered; // required
  public List<Integer> sort_columns; // optional
  public long write_id; // optional
  /**
   * 
   * @see org.apache.impala.thrift.TSortingOrder
   */
  public org.apache.impala.thrift.TSortingOrder sorting_order; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_KEY_EXPRS((short)1, "partition_key_exprs"),
    OVERWRITE((short)2, "overwrite"),
    SKIP_HEADER_LINE_COUNT((short)3, "skip_header_line_count"),
    INPUT_IS_CLUSTERED((short)4, "input_is_clustered"),
    SORT_COLUMNS((short)5, "sort_columns"),
    WRITE_ID((short)6, "write_id"),
    /**
     * 
     * @see org.apache.impala.thrift.TSortingOrder
     */
    SORTING_ORDER((short)7, "sorting_order");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_KEY_EXPRS
          return PARTITION_KEY_EXPRS;
        case 2: // OVERWRITE
          return OVERWRITE;
        case 3: // SKIP_HEADER_LINE_COUNT
          return SKIP_HEADER_LINE_COUNT;
        case 4: // INPUT_IS_CLUSTERED
          return INPUT_IS_CLUSTERED;
        case 5: // SORT_COLUMNS
          return SORT_COLUMNS;
        case 6: // WRITE_ID
          return WRITE_ID;
        case 7: // SORTING_ORDER
          return SORTING_ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OVERWRITE_ISSET_ID = 0;
  private static final int __SKIP_HEADER_LINE_COUNT_ISSET_ID = 1;
  private static final int __INPUT_IS_CLUSTERED_ISSET_ID = 2;
  private static final int __WRITE_ID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SKIP_HEADER_LINE_COUNT,_Fields.SORT_COLUMNS,_Fields.WRITE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_KEY_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("partition_key_exprs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.OVERWRITE, new org.apache.thrift.meta_data.FieldMetaData("overwrite", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SKIP_HEADER_LINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("skip_header_line_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INPUT_IS_CLUSTERED, new org.apache.thrift.meta_data.FieldMetaData("input_is_clustered", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SORT_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("sort_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.WRITE_ID, new org.apache.thrift.meta_data.FieldMetaData("write_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SORTING_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sorting_order", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TSortingOrder.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsTableSink.class, metaDataMap);
  }

  public THdfsTableSink() {
  }

  public THdfsTableSink(
    List<org.apache.impala.thrift.TExpr> partition_key_exprs,
    boolean overwrite,
    boolean input_is_clustered,
    org.apache.impala.thrift.TSortingOrder sorting_order)
  {
    this();
    this.partition_key_exprs = partition_key_exprs;
    this.overwrite = overwrite;
    setOverwriteIsSet(true);
    this.input_is_clustered = input_is_clustered;
    setInput_is_clusteredIsSet(true);
    this.sorting_order = sorting_order;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsTableSink(THdfsTableSink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartition_key_exprs()) {
      List<org.apache.impala.thrift.TExpr> __this__partition_key_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(other.partition_key_exprs.size());
      for (org.apache.impala.thrift.TExpr other_element : other.partition_key_exprs) {
        __this__partition_key_exprs.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.partition_key_exprs = __this__partition_key_exprs;
    }
    this.overwrite = other.overwrite;
    this.skip_header_line_count = other.skip_header_line_count;
    this.input_is_clustered = other.input_is_clustered;
    if (other.isSetSort_columns()) {
      List<Integer> __this__sort_columns = new ArrayList<Integer>(other.sort_columns);
      this.sort_columns = __this__sort_columns;
    }
    this.write_id = other.write_id;
    if (other.isSetSorting_order()) {
      this.sorting_order = other.sorting_order;
    }
  }

  public THdfsTableSink deepCopy() {
    return new THdfsTableSink(this);
  }

  @Override
  public void clear() {
    this.partition_key_exprs = null;
    setOverwriteIsSet(false);
    this.overwrite = false;
    setSkip_header_line_countIsSet(false);
    this.skip_header_line_count = 0;
    setInput_is_clusteredIsSet(false);
    this.input_is_clustered = false;
    this.sort_columns = null;
    setWrite_idIsSet(false);
    this.write_id = 0;
    this.sorting_order = null;
  }

  public int getPartition_key_exprsSize() {
    return (this.partition_key_exprs == null) ? 0 : this.partition_key_exprs.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getPartition_key_exprsIterator() {
    return (this.partition_key_exprs == null) ? null : this.partition_key_exprs.iterator();
  }

  public void addToPartition_key_exprs(org.apache.impala.thrift.TExpr elem) {
    if (this.partition_key_exprs == null) {
      this.partition_key_exprs = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.partition_key_exprs.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getPartition_key_exprs() {
    return this.partition_key_exprs;
  }

  public THdfsTableSink setPartition_key_exprs(List<org.apache.impala.thrift.TExpr> partition_key_exprs) {
    this.partition_key_exprs = partition_key_exprs;
    return this;
  }

  public void unsetPartition_key_exprs() {
    this.partition_key_exprs = null;
  }

  /** Returns true if field partition_key_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_key_exprs() {
    return this.partition_key_exprs != null;
  }

  public void setPartition_key_exprsIsSet(boolean value) {
    if (!value) {
      this.partition_key_exprs = null;
    }
  }

  public boolean isOverwrite() {
    return this.overwrite;
  }

  public THdfsTableSink setOverwrite(boolean overwrite) {
    this.overwrite = overwrite;
    setOverwriteIsSet(true);
    return this;
  }

  public void unsetOverwrite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
  }

  /** Returns true if field overwrite is set (has been assigned a value) and false otherwise */
  public boolean isSetOverwrite() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
  }

  public void setOverwriteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERWRITE_ISSET_ID, value);
  }

  public int getSkip_header_line_count() {
    return this.skip_header_line_count;
  }

  public THdfsTableSink setSkip_header_line_count(int skip_header_line_count) {
    this.skip_header_line_count = skip_header_line_count;
    setSkip_header_line_countIsSet(true);
    return this;
  }

  public void unsetSkip_header_line_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SKIP_HEADER_LINE_COUNT_ISSET_ID);
  }

  /** Returns true if field skip_header_line_count is set (has been assigned a value) and false otherwise */
  public boolean isSetSkip_header_line_count() {
    return EncodingUtils.testBit(__isset_bitfield, __SKIP_HEADER_LINE_COUNT_ISSET_ID);
  }

  public void setSkip_header_line_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SKIP_HEADER_LINE_COUNT_ISSET_ID, value);
  }

  public boolean isInput_is_clustered() {
    return this.input_is_clustered;
  }

  public THdfsTableSink setInput_is_clustered(boolean input_is_clustered) {
    this.input_is_clustered = input_is_clustered;
    setInput_is_clusteredIsSet(true);
    return this;
  }

  public void unsetInput_is_clustered() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUT_IS_CLUSTERED_ISSET_ID);
  }

  /** Returns true if field input_is_clustered is set (has been assigned a value) and false otherwise */
  public boolean isSetInput_is_clustered() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUT_IS_CLUSTERED_ISSET_ID);
  }

  public void setInput_is_clusteredIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUT_IS_CLUSTERED_ISSET_ID, value);
  }

  public int getSort_columnsSize() {
    return (this.sort_columns == null) ? 0 : this.sort_columns.size();
  }

  public java.util.Iterator<Integer> getSort_columnsIterator() {
    return (this.sort_columns == null) ? null : this.sort_columns.iterator();
  }

  public void addToSort_columns(int elem) {
    if (this.sort_columns == null) {
      this.sort_columns = new ArrayList<Integer>();
    }
    this.sort_columns.add(elem);
  }

  public List<Integer> getSort_columns() {
    return this.sort_columns;
  }

  public THdfsTableSink setSort_columns(List<Integer> sort_columns) {
    this.sort_columns = sort_columns;
    return this;
  }

  public void unsetSort_columns() {
    this.sort_columns = null;
  }

  /** Returns true if field sort_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_columns() {
    return this.sort_columns != null;
  }

  public void setSort_columnsIsSet(boolean value) {
    if (!value) {
      this.sort_columns = null;
    }
  }

  public long getWrite_id() {
    return this.write_id;
  }

  public THdfsTableSink setWrite_id(long write_id) {
    this.write_id = write_id;
    setWrite_idIsSet(true);
    return this;
  }

  public void unsetWrite_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITE_ID_ISSET_ID);
  }

  /** Returns true if field write_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWrite_id() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITE_ID_ISSET_ID);
  }

  public void setWrite_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITE_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.impala.thrift.TSortingOrder
   */
  public org.apache.impala.thrift.TSortingOrder getSorting_order() {
    return this.sorting_order;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TSortingOrder
   */
  public THdfsTableSink setSorting_order(org.apache.impala.thrift.TSortingOrder sorting_order) {
    this.sorting_order = sorting_order;
    return this;
  }

  public void unsetSorting_order() {
    this.sorting_order = null;
  }

  /** Returns true if field sorting_order is set (has been assigned a value) and false otherwise */
  public boolean isSetSorting_order() {
    return this.sorting_order != null;
  }

  public void setSorting_orderIsSet(boolean value) {
    if (!value) {
      this.sorting_order = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION_KEY_EXPRS:
      if (value == null) {
        unsetPartition_key_exprs();
      } else {
        setPartition_key_exprs((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case OVERWRITE:
      if (value == null) {
        unsetOverwrite();
      } else {
        setOverwrite((Boolean)value);
      }
      break;

    case SKIP_HEADER_LINE_COUNT:
      if (value == null) {
        unsetSkip_header_line_count();
      } else {
        setSkip_header_line_count((Integer)value);
      }
      break;

    case INPUT_IS_CLUSTERED:
      if (value == null) {
        unsetInput_is_clustered();
      } else {
        setInput_is_clustered((Boolean)value);
      }
      break;

    case SORT_COLUMNS:
      if (value == null) {
        unsetSort_columns();
      } else {
        setSort_columns((List<Integer>)value);
      }
      break;

    case WRITE_ID:
      if (value == null) {
        unsetWrite_id();
      } else {
        setWrite_id((Long)value);
      }
      break;

    case SORTING_ORDER:
      if (value == null) {
        unsetSorting_order();
      } else {
        setSorting_order((org.apache.impala.thrift.TSortingOrder)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_KEY_EXPRS:
      return getPartition_key_exprs();

    case OVERWRITE:
      return isOverwrite();

    case SKIP_HEADER_LINE_COUNT:
      return getSkip_header_line_count();

    case INPUT_IS_CLUSTERED:
      return isInput_is_clustered();

    case SORT_COLUMNS:
      return getSort_columns();

    case WRITE_ID:
      return getWrite_id();

    case SORTING_ORDER:
      return getSorting_order();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_KEY_EXPRS:
      return isSetPartition_key_exprs();
    case OVERWRITE:
      return isSetOverwrite();
    case SKIP_HEADER_LINE_COUNT:
      return isSetSkip_header_line_count();
    case INPUT_IS_CLUSTERED:
      return isSetInput_is_clustered();
    case SORT_COLUMNS:
      return isSetSort_columns();
    case WRITE_ID:
      return isSetWrite_id();
    case SORTING_ORDER:
      return isSetSorting_order();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THdfsTableSink)
      return this.equals((THdfsTableSink)that);
    return false;
  }

  public boolean equals(THdfsTableSink that) {
    if (that == null)
      return false;

    boolean this_present_partition_key_exprs = true && this.isSetPartition_key_exprs();
    boolean that_present_partition_key_exprs = true && that.isSetPartition_key_exprs();
    if (this_present_partition_key_exprs || that_present_partition_key_exprs) {
      if (!(this_present_partition_key_exprs && that_present_partition_key_exprs))
        return false;
      if (!this.partition_key_exprs.equals(that.partition_key_exprs))
        return false;
    }

    boolean this_present_overwrite = true;
    boolean that_present_overwrite = true;
    if (this_present_overwrite || that_present_overwrite) {
      if (!(this_present_overwrite && that_present_overwrite))
        return false;
      if (this.overwrite != that.overwrite)
        return false;
    }

    boolean this_present_skip_header_line_count = true && this.isSetSkip_header_line_count();
    boolean that_present_skip_header_line_count = true && that.isSetSkip_header_line_count();
    if (this_present_skip_header_line_count || that_present_skip_header_line_count) {
      if (!(this_present_skip_header_line_count && that_present_skip_header_line_count))
        return false;
      if (this.skip_header_line_count != that.skip_header_line_count)
        return false;
    }

    boolean this_present_input_is_clustered = true;
    boolean that_present_input_is_clustered = true;
    if (this_present_input_is_clustered || that_present_input_is_clustered) {
      if (!(this_present_input_is_clustered && that_present_input_is_clustered))
        return false;
      if (this.input_is_clustered != that.input_is_clustered)
        return false;
    }

    boolean this_present_sort_columns = true && this.isSetSort_columns();
    boolean that_present_sort_columns = true && that.isSetSort_columns();
    if (this_present_sort_columns || that_present_sort_columns) {
      if (!(this_present_sort_columns && that_present_sort_columns))
        return false;
      if (!this.sort_columns.equals(that.sort_columns))
        return false;
    }

    boolean this_present_write_id = true && this.isSetWrite_id();
    boolean that_present_write_id = true && that.isSetWrite_id();
    if (this_present_write_id || that_present_write_id) {
      if (!(this_present_write_id && that_present_write_id))
        return false;
      if (this.write_id != that.write_id)
        return false;
    }

    boolean this_present_sorting_order = true && this.isSetSorting_order();
    boolean that_present_sorting_order = true && that.isSetSorting_order();
    if (this_present_sorting_order || that_present_sorting_order) {
      if (!(this_present_sorting_order && that_present_sorting_order))
        return false;
      if (!this.sorting_order.equals(that.sorting_order))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_partition_key_exprs = true && (isSetPartition_key_exprs());
    list.add(present_partition_key_exprs);
    if (present_partition_key_exprs)
      list.add(partition_key_exprs);

    boolean present_overwrite = true;
    list.add(present_overwrite);
    if (present_overwrite)
      list.add(overwrite);

    boolean present_skip_header_line_count = true && (isSetSkip_header_line_count());
    list.add(present_skip_header_line_count);
    if (present_skip_header_line_count)
      list.add(skip_header_line_count);

    boolean present_input_is_clustered = true;
    list.add(present_input_is_clustered);
    if (present_input_is_clustered)
      list.add(input_is_clustered);

    boolean present_sort_columns = true && (isSetSort_columns());
    list.add(present_sort_columns);
    if (present_sort_columns)
      list.add(sort_columns);

    boolean present_write_id = true && (isSetWrite_id());
    list.add(present_write_id);
    if (present_write_id)
      list.add(write_id);

    boolean present_sorting_order = true && (isSetSorting_order());
    list.add(present_sorting_order);
    if (present_sorting_order)
      list.add(sorting_order.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(THdfsTableSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartition_key_exprs()).compareTo(other.isSetPartition_key_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_key_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_key_exprs, other.partition_key_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverwrite()).compareTo(other.isSetOverwrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverwrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overwrite, other.overwrite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkip_header_line_count()).compareTo(other.isSetSkip_header_line_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkip_header_line_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip_header_line_count, other.skip_header_line_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInput_is_clustered()).compareTo(other.isSetInput_is_clustered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput_is_clustered()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input_is_clustered, other.input_is_clustered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_columns()).compareTo(other.isSetSort_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_columns, other.sort_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWrite_id()).compareTo(other.isSetWrite_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrite_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.write_id, other.write_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSorting_order()).compareTo(other.isSetSorting_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSorting_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sorting_order, other.sorting_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THdfsTableSink(");
    boolean first = true;

    sb.append("partition_key_exprs:");
    if (this.partition_key_exprs == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_key_exprs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overwrite:");
    sb.append(this.overwrite);
    first = false;
    if (isSetSkip_header_line_count()) {
      if (!first) sb.append(", ");
      sb.append("skip_header_line_count:");
      sb.append(this.skip_header_line_count);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("input_is_clustered:");
    sb.append(this.input_is_clustered);
    first = false;
    if (isSetSort_columns()) {
      if (!first) sb.append(", ");
      sb.append("sort_columns:");
      if (this.sort_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_columns);
      }
      first = false;
    }
    if (isSetWrite_id()) {
      if (!first) sb.append(", ");
      sb.append("write_id:");
      sb.append(this.write_id);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sorting_order:");
    if (this.sorting_order == null) {
      sb.append("null");
    } else {
      sb.append(this.sorting_order);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (partition_key_exprs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_key_exprs' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'overwrite' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'input_is_clustered' because it's a primitive and you chose the non-beans generator.
    if (sorting_order == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sorting_order' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsTableSinkStandardSchemeFactory implements SchemeFactory {
    public THdfsTableSinkStandardScheme getScheme() {
      return new THdfsTableSinkStandardScheme();
    }
  }

  private static class THdfsTableSinkStandardScheme extends StandardScheme<THdfsTableSink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_KEY_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.partition_key_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list0.size);
                org.apache.impala.thrift.TExpr _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new org.apache.impala.thrift.TExpr();
                  _elem1.read(iprot);
                  struct.partition_key_exprs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPartition_key_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OVERWRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.overwrite = iprot.readBool();
              struct.setOverwriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SKIP_HEADER_LINE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skip_header_line_count = iprot.readI32();
              struct.setSkip_header_line_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INPUT_IS_CLUSTERED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.input_is_clustered = iprot.readBool();
              struct.setInput_is_clusteredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SORT_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.sort_columns = new ArrayList<Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.sort_columns.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSort_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WRITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.write_id = iprot.readI64();
              struct.setWrite_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SORTING_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sorting_order = org.apache.impala.thrift.TSortingOrder.findByValue(iprot.readI32());
              struct.setSorting_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOverwrite()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'overwrite' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInput_is_clustered()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'input_is_clustered' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsTableSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partition_key_exprs != null) {
        oprot.writeFieldBegin(PARTITION_KEY_EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_key_exprs.size()));
          for (org.apache.impala.thrift.TExpr _iter6 : struct.partition_key_exprs)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERWRITE_FIELD_DESC);
      oprot.writeBool(struct.overwrite);
      oprot.writeFieldEnd();
      if (struct.isSetSkip_header_line_count()) {
        oprot.writeFieldBegin(SKIP_HEADER_LINE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.skip_header_line_count);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INPUT_IS_CLUSTERED_FIELD_DESC);
      oprot.writeBool(struct.input_is_clustered);
      oprot.writeFieldEnd();
      if (struct.sort_columns != null) {
        if (struct.isSetSort_columns()) {
          oprot.writeFieldBegin(SORT_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sort_columns.size()));
            for (int _iter7 : struct.sort_columns)
            {
              oprot.writeI32(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWrite_id()) {
        oprot.writeFieldBegin(WRITE_ID_FIELD_DESC);
        oprot.writeI64(struct.write_id);
        oprot.writeFieldEnd();
      }
      if (struct.sorting_order != null) {
        oprot.writeFieldBegin(SORTING_ORDER_FIELD_DESC);
        oprot.writeI32(struct.sorting_order.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsTableSinkTupleSchemeFactory implements SchemeFactory {
    public THdfsTableSinkTupleScheme getScheme() {
      return new THdfsTableSinkTupleScheme();
    }
  }

  private static class THdfsTableSinkTupleScheme extends TupleScheme<THdfsTableSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsTableSink struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.partition_key_exprs.size());
        for (org.apache.impala.thrift.TExpr _iter8 : struct.partition_key_exprs)
        {
          _iter8.write(oprot);
        }
      }
      oprot.writeBool(struct.overwrite);
      oprot.writeBool(struct.input_is_clustered);
      oprot.writeI32(struct.sorting_order.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetSkip_header_line_count()) {
        optionals.set(0);
      }
      if (struct.isSetSort_columns()) {
        optionals.set(1);
      }
      if (struct.isSetWrite_id()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSkip_header_line_count()) {
        oprot.writeI32(struct.skip_header_line_count);
      }
      if (struct.isSetSort_columns()) {
        {
          oprot.writeI32(struct.sort_columns.size());
          for (int _iter9 : struct.sort_columns)
          {
            oprot.writeI32(_iter9);
          }
        }
      }
      if (struct.isSetWrite_id()) {
        oprot.writeI64(struct.write_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsTableSink struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.partition_key_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list10.size);
        org.apache.impala.thrift.TExpr _elem11;
        for (int _i12 = 0; _i12 < _list10.size; ++_i12)
        {
          _elem11 = new org.apache.impala.thrift.TExpr();
          _elem11.read(iprot);
          struct.partition_key_exprs.add(_elem11);
        }
      }
      struct.setPartition_key_exprsIsSet(true);
      struct.overwrite = iprot.readBool();
      struct.setOverwriteIsSet(true);
      struct.input_is_clustered = iprot.readBool();
      struct.setInput_is_clusteredIsSet(true);
      struct.sorting_order = org.apache.impala.thrift.TSortingOrder.findByValue(iprot.readI32());
      struct.setSorting_orderIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.skip_header_line_count = iprot.readI32();
        struct.setSkip_header_line_countIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sort_columns = new ArrayList<Integer>(_list13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.sort_columns.add(_elem14);
          }
        }
        struct.setSort_columnsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.write_id = iprot.readI64();
        struct.setWrite_idIsSet(true);
      }
    }
  }

}

