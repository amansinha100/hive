/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TAlterTableDropPartitionParams implements org.apache.thrift.TBase<TAlterTableDropPartitionParams, TAlterTableDropPartitionParams._Fields>, java.io.Serializable, Cloneable, Comparable<TAlterTableDropPartitionParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlterTableDropPartitionParams");

  private static final org.apache.thrift.protocol.TField PARTITION_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_set", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IF_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_exists", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField PURGE_FIELD_DESC = new org.apache.thrift.protocol.TField("purge", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAlterTableDropPartitionParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAlterTableDropPartitionParamsTupleSchemeFactory());
  }

  public List<List<org.apache.impala.thrift.TPartitionKeyValue>> partition_set; // required
  public boolean if_exists; // required
  public boolean purge; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARTITION_SET((short)1, "partition_set"),
    IF_EXISTS((short)2, "if_exists"),
    PURGE((short)3, "purge");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITION_SET
          return PARTITION_SET;
        case 2: // IF_EXISTS
          return IF_EXISTS;
        case 3: // PURGE
          return PURGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IF_EXISTS_ISSET_ID = 0;
  private static final int __PURGE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION_SET, new org.apache.thrift.meta_data.FieldMetaData("partition_set", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TPartitionKeyValue.class)))));
    tmpMap.put(_Fields.IF_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_exists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PURGE, new org.apache.thrift.meta_data.FieldMetaData("purge", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlterTableDropPartitionParams.class, metaDataMap);
  }

  public TAlterTableDropPartitionParams() {
  }

  public TAlterTableDropPartitionParams(
    List<List<org.apache.impala.thrift.TPartitionKeyValue>> partition_set,
    boolean if_exists,
    boolean purge)
  {
    this();
    this.partition_set = partition_set;
    this.if_exists = if_exists;
    setIf_existsIsSet(true);
    this.purge = purge;
    setPurgeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlterTableDropPartitionParams(TAlterTableDropPartitionParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartition_set()) {
      List<List<org.apache.impala.thrift.TPartitionKeyValue>> __this__partition_set = new ArrayList<List<org.apache.impala.thrift.TPartitionKeyValue>>(other.partition_set.size());
      for (List<org.apache.impala.thrift.TPartitionKeyValue> other_element : other.partition_set) {
        List<org.apache.impala.thrift.TPartitionKeyValue> __this__partition_set_copy = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>(other_element.size());
        for (org.apache.impala.thrift.TPartitionKeyValue other_element_element : other_element) {
          __this__partition_set_copy.add(new org.apache.impala.thrift.TPartitionKeyValue(other_element_element));
        }
        __this__partition_set.add(__this__partition_set_copy);
      }
      this.partition_set = __this__partition_set;
    }
    this.if_exists = other.if_exists;
    this.purge = other.purge;
  }

  public TAlterTableDropPartitionParams deepCopy() {
    return new TAlterTableDropPartitionParams(this);
  }

  @Override
  public void clear() {
    this.partition_set = null;
    setIf_existsIsSet(false);
    this.if_exists = false;
    setPurgeIsSet(false);
    this.purge = false;
  }

  public int getPartition_setSize() {
    return (this.partition_set == null) ? 0 : this.partition_set.size();
  }

  public java.util.Iterator<List<org.apache.impala.thrift.TPartitionKeyValue>> getPartition_setIterator() {
    return (this.partition_set == null) ? null : this.partition_set.iterator();
  }

  public void addToPartition_set(List<org.apache.impala.thrift.TPartitionKeyValue> elem) {
    if (this.partition_set == null) {
      this.partition_set = new ArrayList<List<org.apache.impala.thrift.TPartitionKeyValue>>();
    }
    this.partition_set.add(elem);
  }

  public List<List<org.apache.impala.thrift.TPartitionKeyValue>> getPartition_set() {
    return this.partition_set;
  }

  public TAlterTableDropPartitionParams setPartition_set(List<List<org.apache.impala.thrift.TPartitionKeyValue>> partition_set) {
    this.partition_set = partition_set;
    return this;
  }

  public void unsetPartition_set() {
    this.partition_set = null;
  }

  /** Returns true if field partition_set is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_set() {
    return this.partition_set != null;
  }

  public void setPartition_setIsSet(boolean value) {
    if (!value) {
      this.partition_set = null;
    }
  }

  public boolean isIf_exists() {
    return this.if_exists;
  }

  public TAlterTableDropPartitionParams setIf_exists(boolean if_exists) {
    this.if_exists = if_exists;
    setIf_existsIsSet(true);
    return this;
  }

  public void unsetIf_exists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IF_EXISTS_ISSET_ID);
  }

  /** Returns true if field if_exists is set (has been assigned a value) and false otherwise */
  public boolean isSetIf_exists() {
    return EncodingUtils.testBit(__isset_bitfield, __IF_EXISTS_ISSET_ID);
  }

  public void setIf_existsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IF_EXISTS_ISSET_ID, value);
  }

  public boolean isPurge() {
    return this.purge;
  }

  public TAlterTableDropPartitionParams setPurge(boolean purge) {
    this.purge = purge;
    setPurgeIsSet(true);
    return this;
  }

  public void unsetPurge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGE_ISSET_ID);
  }

  /** Returns true if field purge is set (has been assigned a value) and false otherwise */
  public boolean isSetPurge() {
    return EncodingUtils.testBit(__isset_bitfield, __PURGE_ISSET_ID);
  }

  public void setPurgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITION_SET:
      if (value == null) {
        unsetPartition_set();
      } else {
        setPartition_set((List<List<org.apache.impala.thrift.TPartitionKeyValue>>)value);
      }
      break;

    case IF_EXISTS:
      if (value == null) {
        unsetIf_exists();
      } else {
        setIf_exists((Boolean)value);
      }
      break;

    case PURGE:
      if (value == null) {
        unsetPurge();
      } else {
        setPurge((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITION_SET:
      return getPartition_set();

    case IF_EXISTS:
      return isIf_exists();

    case PURGE:
      return isPurge();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITION_SET:
      return isSetPartition_set();
    case IF_EXISTS:
      return isSetIf_exists();
    case PURGE:
      return isSetPurge();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAlterTableDropPartitionParams)
      return this.equals((TAlterTableDropPartitionParams)that);
    return false;
  }

  public boolean equals(TAlterTableDropPartitionParams that) {
    if (that == null)
      return false;

    boolean this_present_partition_set = true && this.isSetPartition_set();
    boolean that_present_partition_set = true && that.isSetPartition_set();
    if (this_present_partition_set || that_present_partition_set) {
      if (!(this_present_partition_set && that_present_partition_set))
        return false;
      if (!this.partition_set.equals(that.partition_set))
        return false;
    }

    boolean this_present_if_exists = true;
    boolean that_present_if_exists = true;
    if (this_present_if_exists || that_present_if_exists) {
      if (!(this_present_if_exists && that_present_if_exists))
        return false;
      if (this.if_exists != that.if_exists)
        return false;
    }

    boolean this_present_purge = true;
    boolean that_present_purge = true;
    if (this_present_purge || that_present_purge) {
      if (!(this_present_purge && that_present_purge))
        return false;
      if (this.purge != that.purge)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_partition_set = true && (isSetPartition_set());
    list.add(present_partition_set);
    if (present_partition_set)
      list.add(partition_set);

    boolean present_if_exists = true;
    list.add(present_if_exists);
    if (present_if_exists)
      list.add(if_exists);

    boolean present_purge = true;
    list.add(present_purge);
    if (present_purge)
      list.add(purge);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAlterTableDropPartitionParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPartition_set()).compareTo(other.isSetPartition_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_set, other.partition_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIf_exists()).compareTo(other.isSetIf_exists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIf_exists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_exists, other.if_exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurge()).compareTo(other.isSetPurge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purge, other.purge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAlterTableDropPartitionParams(");
    boolean first = true;

    sb.append("partition_set:");
    if (this.partition_set == null) {
      sb.append("null");
    } else {
      sb.append(this.partition_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("if_exists:");
    sb.append(this.if_exists);
    first = false;
    if (!first) sb.append(", ");
    sb.append("purge:");
    sb.append(this.purge);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (partition_set == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_set' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'if_exists' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'purge' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlterTableDropPartitionParamsStandardSchemeFactory implements SchemeFactory {
    public TAlterTableDropPartitionParamsStandardScheme getScheme() {
      return new TAlterTableDropPartitionParamsStandardScheme();
    }
  }

  private static class TAlterTableDropPartitionParamsStandardScheme extends StandardScheme<TAlterTableDropPartitionParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlterTableDropPartitionParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITION_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.partition_set = new ArrayList<List<org.apache.impala.thrift.TPartitionKeyValue>>(_list48.size);
                List<org.apache.impala.thrift.TPartitionKeyValue> _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  {
                    org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                    _elem49 = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>(_list51.size);
                    org.apache.impala.thrift.TPartitionKeyValue _elem52;
                    for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                    {
                      _elem52 = new org.apache.impala.thrift.TPartitionKeyValue();
                      _elem52.read(iprot);
                      _elem49.add(_elem52);
                    }
                    iprot.readListEnd();
                  }
                  struct.partition_set.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setPartition_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IF_EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.if_exists = iprot.readBool();
              struct.setIf_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PURGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.purge = iprot.readBool();
              struct.setPurgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIf_exists()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'if_exists' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPurge()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'purge' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlterTableDropPartitionParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partition_set != null) {
        oprot.writeFieldBegin(PARTITION_SET_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.partition_set.size()));
          for (List<org.apache.impala.thrift.TPartitionKeyValue> _iter54 : struct.partition_set)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter54.size()));
              for (org.apache.impala.thrift.TPartitionKeyValue _iter55 : _iter54)
              {
                _iter55.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IF_EXISTS_FIELD_DESC);
      oprot.writeBool(struct.if_exists);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PURGE_FIELD_DESC);
      oprot.writeBool(struct.purge);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlterTableDropPartitionParamsTupleSchemeFactory implements SchemeFactory {
    public TAlterTableDropPartitionParamsTupleScheme getScheme() {
      return new TAlterTableDropPartitionParamsTupleScheme();
    }
  }

  private static class TAlterTableDropPartitionParamsTupleScheme extends TupleScheme<TAlterTableDropPartitionParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlterTableDropPartitionParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.partition_set.size());
        for (List<org.apache.impala.thrift.TPartitionKeyValue> _iter56 : struct.partition_set)
        {
          {
            oprot.writeI32(_iter56.size());
            for (org.apache.impala.thrift.TPartitionKeyValue _iter57 : _iter56)
            {
              _iter57.write(oprot);
            }
          }
        }
      }
      oprot.writeBool(struct.if_exists);
      oprot.writeBool(struct.purge);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlterTableDropPartitionParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.partition_set = new ArrayList<List<org.apache.impala.thrift.TPartitionKeyValue>>(_list58.size);
        List<org.apache.impala.thrift.TPartitionKeyValue> _elem59;
        for (int _i60 = 0; _i60 < _list58.size; ++_i60)
        {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _elem59 = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>(_list61.size);
            org.apache.impala.thrift.TPartitionKeyValue _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new org.apache.impala.thrift.TPartitionKeyValue();
              _elem62.read(iprot);
              _elem59.add(_elem62);
            }
          }
          struct.partition_set.add(_elem59);
        }
      }
      struct.setPartition_setIsSet(true);
      struct.if_exists = iprot.readBool();
      struct.setIf_existsIsSet(true);
      struct.purge = iprot.readBool();
      struct.setPurgeIsSet(true);
    }
  }

}

