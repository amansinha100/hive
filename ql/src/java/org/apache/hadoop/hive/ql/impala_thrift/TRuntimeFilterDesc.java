/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TRuntimeFilterDesc implements org.apache.thrift.TBase<TRuntimeFilterDesc, TRuntimeFilterDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TRuntimeFilterDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeFilterDesc");

  private static final org.apache.thrift.protocol.TField FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("src_expr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("targets", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PLANID_TO_TARGET_NDX_FIELD_DESC = new org.apache.thrift.protocol.TField("planid_to_target_ndx", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField IS_BROADCAST_JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_broadcast_join", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField HAS_LOCAL_TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("has_local_targets", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_REMOTE_TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("has_remote_targets", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField APPLIED_ON_PARTITION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("applied_on_partition_columns", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField NDV_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ndv_estimate", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField FILTER_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_size_bytes", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRuntimeFilterDescStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRuntimeFilterDescTupleSchemeFactory());
  }

  private int filter_id; // required
  private org.apache.impala.thrift.TExpr src_expr; // required
  private List<TRuntimeFilterTargetDesc> targets; // required
  private Map<Integer,Integer> planid_to_target_ndx; // required
  private boolean is_broadcast_join; // required
  private boolean has_local_targets; // required
  private boolean has_remote_targets; // required
  private boolean applied_on_partition_columns; // required
  private long ndv_estimate; // optional
  private TRuntimeFilterType type; // required
  private long filter_size_bytes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILTER_ID((short)1, "filter_id"),
    SRC_EXPR((short)2, "src_expr"),
    TARGETS((short)3, "targets"),
    PLANID_TO_TARGET_NDX((short)4, "planid_to_target_ndx"),
    IS_BROADCAST_JOIN((short)5, "is_broadcast_join"),
    HAS_LOCAL_TARGETS((short)6, "has_local_targets"),
    HAS_REMOTE_TARGETS((short)7, "has_remote_targets"),
    APPLIED_ON_PARTITION_COLUMNS((short)8, "applied_on_partition_columns"),
    NDV_ESTIMATE((short)9, "ndv_estimate"),
    /**
     * 
     * @see TRuntimeFilterType
     */
    TYPE((short)10, "type"),
    FILTER_SIZE_BYTES((short)11, "filter_size_bytes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILTER_ID
          return FILTER_ID;
        case 2: // SRC_EXPR
          return SRC_EXPR;
        case 3: // TARGETS
          return TARGETS;
        case 4: // PLANID_TO_TARGET_NDX
          return PLANID_TO_TARGET_NDX;
        case 5: // IS_BROADCAST_JOIN
          return IS_BROADCAST_JOIN;
        case 6: // HAS_LOCAL_TARGETS
          return HAS_LOCAL_TARGETS;
        case 7: // HAS_REMOTE_TARGETS
          return HAS_REMOTE_TARGETS;
        case 8: // APPLIED_ON_PARTITION_COLUMNS
          return APPLIED_ON_PARTITION_COLUMNS;
        case 9: // NDV_ESTIMATE
          return NDV_ESTIMATE;
        case 10: // TYPE
          return TYPE;
        case 11: // FILTER_SIZE_BYTES
          return FILTER_SIZE_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILTER_ID_ISSET_ID = 0;
  private static final int __IS_BROADCAST_JOIN_ISSET_ID = 1;
  private static final int __HAS_LOCAL_TARGETS_ISSET_ID = 2;
  private static final int __HAS_REMOTE_TARGETS_ISSET_ID = 3;
  private static final int __APPLIED_ON_PARTITION_COLUMNS_ISSET_ID = 4;
  private static final int __NDV_ESTIMATE_ISSET_ID = 5;
  private static final int __FILTER_SIZE_BYTES_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NDV_ESTIMATE,_Fields.FILTER_SIZE_BYTES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("filter_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SRC_EXPR, new org.apache.thrift.meta_data.FieldMetaData("src_expr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class)));
    tmpMap.put(_Fields.TARGETS, new org.apache.thrift.meta_data.FieldMetaData("targets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRuntimeFilterTargetDesc.class))));
    tmpMap.put(_Fields.PLANID_TO_TARGET_NDX, new org.apache.thrift.meta_data.FieldMetaData("planid_to_target_ndx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_BROADCAST_JOIN, new org.apache.thrift.meta_data.FieldMetaData("is_broadcast_join", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_LOCAL_TARGETS, new org.apache.thrift.meta_data.FieldMetaData("has_local_targets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_REMOTE_TARGETS, new org.apache.thrift.meta_data.FieldMetaData("has_remote_targets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.APPLIED_ON_PARTITION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("applied_on_partition_columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NDV_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("ndv_estimate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TRuntimeFilterType.class)));
    tmpMap.put(_Fields.FILTER_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("filter_size_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeFilterDesc.class, metaDataMap);
  }

  public TRuntimeFilterDesc() {
  }

  public TRuntimeFilterDesc(
    int filter_id,
    org.apache.impala.thrift.TExpr src_expr,
    List<TRuntimeFilterTargetDesc> targets,
    Map<Integer,Integer> planid_to_target_ndx,
    boolean is_broadcast_join,
    boolean has_local_targets,
    boolean has_remote_targets,
    boolean applied_on_partition_columns,
    TRuntimeFilterType type)
  {
    this();
    this.filter_id = filter_id;
    setFilter_idIsSet(true);
    this.src_expr = src_expr;
    this.targets = targets;
    this.planid_to_target_ndx = planid_to_target_ndx;
    this.is_broadcast_join = is_broadcast_join;
    setIs_broadcast_joinIsSet(true);
    this.has_local_targets = has_local_targets;
    setHas_local_targetsIsSet(true);
    this.has_remote_targets = has_remote_targets;
    setHas_remote_targetsIsSet(true);
    this.applied_on_partition_columns = applied_on_partition_columns;
    setApplied_on_partition_columnsIsSet(true);
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeFilterDesc(TRuntimeFilterDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    this.filter_id = other.filter_id;
    if (other.isSetSrc_expr()) {
      this.src_expr = new org.apache.impala.thrift.TExpr(other.src_expr);
    }
    if (other.isSetTargets()) {
      List<TRuntimeFilterTargetDesc> __this__targets = new ArrayList<TRuntimeFilterTargetDesc>(other.targets.size());
      for (TRuntimeFilterTargetDesc other_element : other.targets) {
        __this__targets.add(new TRuntimeFilterTargetDesc(other_element));
      }
      this.targets = __this__targets;
    }
    if (other.isSetPlanid_to_target_ndx()) {
      Map<Integer,Integer> __this__planid_to_target_ndx = new HashMap<Integer,Integer>(other.planid_to_target_ndx.size());
      for (Map.Entry<Integer, Integer> other_element : other.planid_to_target_ndx.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Integer __this__planid_to_target_ndx_copy_key = other_element_key;

        Integer __this__planid_to_target_ndx_copy_value = other_element_value;

        __this__planid_to_target_ndx.put(__this__planid_to_target_ndx_copy_key, __this__planid_to_target_ndx_copy_value);
      }
      this.planid_to_target_ndx = __this__planid_to_target_ndx;
    }
    this.is_broadcast_join = other.is_broadcast_join;
    this.has_local_targets = other.has_local_targets;
    this.has_remote_targets = other.has_remote_targets;
    this.applied_on_partition_columns = other.applied_on_partition_columns;
    this.ndv_estimate = other.ndv_estimate;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.filter_size_bytes = other.filter_size_bytes;
  }

  public TRuntimeFilterDesc deepCopy() {
    return new TRuntimeFilterDesc(this);
  }

  @Override
  public void clear() {
    setFilter_idIsSet(false);
    this.filter_id = 0;
    this.src_expr = null;
    this.targets = null;
    this.planid_to_target_ndx = null;
    setIs_broadcast_joinIsSet(false);
    this.is_broadcast_join = false;
    setHas_local_targetsIsSet(false);
    this.has_local_targets = false;
    setHas_remote_targetsIsSet(false);
    this.has_remote_targets = false;
    setApplied_on_partition_columnsIsSet(false);
    this.applied_on_partition_columns = false;
    setNdv_estimateIsSet(false);
    this.ndv_estimate = 0;
    this.type = null;
    setFilter_size_bytesIsSet(false);
    this.filter_size_bytes = 0;
  }

  public int getFilter_id() {
    return this.filter_id;
  }

  public void setFilter_id(int filter_id) {
    this.filter_id = filter_id;
    setFilter_idIsSet(true);
  }

  public void unsetFilter_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  /** Returns true if field filter_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_id() {
    return EncodingUtils.testBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  public void setFilter_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILTER_ID_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TExpr getSrc_expr() {
    return this.src_expr;
  }

  public void setSrc_expr(org.apache.impala.thrift.TExpr src_expr) {
    this.src_expr = src_expr;
  }

  public void unsetSrc_expr() {
    this.src_expr = null;
  }

  /** Returns true if field src_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc_expr() {
    return this.src_expr != null;
  }

  public void setSrc_exprIsSet(boolean value) {
    if (!value) {
      this.src_expr = null;
    }
  }

  public int getTargetsSize() {
    return (this.targets == null) ? 0 : this.targets.size();
  }

  public java.util.Iterator<TRuntimeFilterTargetDesc> getTargetsIterator() {
    return (this.targets == null) ? null : this.targets.iterator();
  }

  public void addToTargets(TRuntimeFilterTargetDesc elem) {
    if (this.targets == null) {
      this.targets = new ArrayList<TRuntimeFilterTargetDesc>();
    }
    this.targets.add(elem);
  }

  public List<TRuntimeFilterTargetDesc> getTargets() {
    return this.targets;
  }

  public void setTargets(List<TRuntimeFilterTargetDesc> targets) {
    this.targets = targets;
  }

  public void unsetTargets() {
    this.targets = null;
  }

  /** Returns true if field targets is set (has been assigned a value) and false otherwise */
  public boolean isSetTargets() {
    return this.targets != null;
  }

  public void setTargetsIsSet(boolean value) {
    if (!value) {
      this.targets = null;
    }
  }

  public int getPlanid_to_target_ndxSize() {
    return (this.planid_to_target_ndx == null) ? 0 : this.planid_to_target_ndx.size();
  }

  public void putToPlanid_to_target_ndx(int key, int val) {
    if (this.planid_to_target_ndx == null) {
      this.planid_to_target_ndx = new HashMap<Integer,Integer>();
    }
    this.planid_to_target_ndx.put(key, val);
  }

  public Map<Integer,Integer> getPlanid_to_target_ndx() {
    return this.planid_to_target_ndx;
  }

  public void setPlanid_to_target_ndx(Map<Integer,Integer> planid_to_target_ndx) {
    this.planid_to_target_ndx = planid_to_target_ndx;
  }

  public void unsetPlanid_to_target_ndx() {
    this.planid_to_target_ndx = null;
  }

  /** Returns true if field planid_to_target_ndx is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanid_to_target_ndx() {
    return this.planid_to_target_ndx != null;
  }

  public void setPlanid_to_target_ndxIsSet(boolean value) {
    if (!value) {
      this.planid_to_target_ndx = null;
    }
  }

  public boolean isIs_broadcast_join() {
    return this.is_broadcast_join;
  }

  public void setIs_broadcast_join(boolean is_broadcast_join) {
    this.is_broadcast_join = is_broadcast_join;
    setIs_broadcast_joinIsSet(true);
  }

  public void unsetIs_broadcast_join() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_BROADCAST_JOIN_ISSET_ID);
  }

  /** Returns true if field is_broadcast_join is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_broadcast_join() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_BROADCAST_JOIN_ISSET_ID);
  }

  public void setIs_broadcast_joinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_BROADCAST_JOIN_ISSET_ID, value);
  }

  public boolean isHas_local_targets() {
    return this.has_local_targets;
  }

  public void setHas_local_targets(boolean has_local_targets) {
    this.has_local_targets = has_local_targets;
    setHas_local_targetsIsSet(true);
  }

  public void unsetHas_local_targets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAS_LOCAL_TARGETS_ISSET_ID);
  }

  /** Returns true if field has_local_targets is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_local_targets() {
    return EncodingUtils.testBit(__isset_bitfield, __HAS_LOCAL_TARGETS_ISSET_ID);
  }

  public void setHas_local_targetsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAS_LOCAL_TARGETS_ISSET_ID, value);
  }

  public boolean isHas_remote_targets() {
    return this.has_remote_targets;
  }

  public void setHas_remote_targets(boolean has_remote_targets) {
    this.has_remote_targets = has_remote_targets;
    setHas_remote_targetsIsSet(true);
  }

  public void unsetHas_remote_targets() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAS_REMOTE_TARGETS_ISSET_ID);
  }

  /** Returns true if field has_remote_targets is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_remote_targets() {
    return EncodingUtils.testBit(__isset_bitfield, __HAS_REMOTE_TARGETS_ISSET_ID);
  }

  public void setHas_remote_targetsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAS_REMOTE_TARGETS_ISSET_ID, value);
  }

  public boolean isApplied_on_partition_columns() {
    return this.applied_on_partition_columns;
  }

  public void setApplied_on_partition_columns(boolean applied_on_partition_columns) {
    this.applied_on_partition_columns = applied_on_partition_columns;
    setApplied_on_partition_columnsIsSet(true);
  }

  public void unsetApplied_on_partition_columns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLIED_ON_PARTITION_COLUMNS_ISSET_ID);
  }

  /** Returns true if field applied_on_partition_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetApplied_on_partition_columns() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLIED_ON_PARTITION_COLUMNS_ISSET_ID);
  }

  public void setApplied_on_partition_columnsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLIED_ON_PARTITION_COLUMNS_ISSET_ID, value);
  }

  public long getNdv_estimate() {
    return this.ndv_estimate;
  }

  public void setNdv_estimate(long ndv_estimate) {
    this.ndv_estimate = ndv_estimate;
    setNdv_estimateIsSet(true);
  }

  public void unsetNdv_estimate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NDV_ESTIMATE_ISSET_ID);
  }

  /** Returns true if field ndv_estimate is set (has been assigned a value) and false otherwise */
  public boolean isSetNdv_estimate() {
    return EncodingUtils.testBit(__isset_bitfield, __NDV_ESTIMATE_ISSET_ID);
  }

  public void setNdv_estimateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NDV_ESTIMATE_ISSET_ID, value);
  }

  /**
   * 
   * @see TRuntimeFilterType
   */
  public TRuntimeFilterType getType() {
    return this.type;
  }

  /**
   * 
   * @see TRuntimeFilterType
   */
  public void setType(TRuntimeFilterType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getFilter_size_bytes() {
    return this.filter_size_bytes;
  }

  public void setFilter_size_bytes(long filter_size_bytes) {
    this.filter_size_bytes = filter_size_bytes;
    setFilter_size_bytesIsSet(true);
  }

  public void unsetFilter_size_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILTER_SIZE_BYTES_ISSET_ID);
  }

  /** Returns true if field filter_size_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter_size_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __FILTER_SIZE_BYTES_ISSET_ID);
  }

  public void setFilter_size_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILTER_SIZE_BYTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FILTER_ID:
      if (value == null) {
        unsetFilter_id();
      } else {
        setFilter_id((Integer)value);
      }
      break;

    case SRC_EXPR:
      if (value == null) {
        unsetSrc_expr();
      } else {
        setSrc_expr((org.apache.impala.thrift.TExpr)value);
      }
      break;

    case TARGETS:
      if (value == null) {
        unsetTargets();
      } else {
        setTargets((List<TRuntimeFilterTargetDesc>)value);
      }
      break;

    case PLANID_TO_TARGET_NDX:
      if (value == null) {
        unsetPlanid_to_target_ndx();
      } else {
        setPlanid_to_target_ndx((Map<Integer,Integer>)value);
      }
      break;

    case IS_BROADCAST_JOIN:
      if (value == null) {
        unsetIs_broadcast_join();
      } else {
        setIs_broadcast_join((Boolean)value);
      }
      break;

    case HAS_LOCAL_TARGETS:
      if (value == null) {
        unsetHas_local_targets();
      } else {
        setHas_local_targets((Boolean)value);
      }
      break;

    case HAS_REMOTE_TARGETS:
      if (value == null) {
        unsetHas_remote_targets();
      } else {
        setHas_remote_targets((Boolean)value);
      }
      break;

    case APPLIED_ON_PARTITION_COLUMNS:
      if (value == null) {
        unsetApplied_on_partition_columns();
      } else {
        setApplied_on_partition_columns((Boolean)value);
      }
      break;

    case NDV_ESTIMATE:
      if (value == null) {
        unsetNdv_estimate();
      } else {
        setNdv_estimate((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TRuntimeFilterType)value);
      }
      break;

    case FILTER_SIZE_BYTES:
      if (value == null) {
        unsetFilter_size_bytes();
      } else {
        setFilter_size_bytes((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FILTER_ID:
      return getFilter_id();

    case SRC_EXPR:
      return getSrc_expr();

    case TARGETS:
      return getTargets();

    case PLANID_TO_TARGET_NDX:
      return getPlanid_to_target_ndx();

    case IS_BROADCAST_JOIN:
      return isIs_broadcast_join();

    case HAS_LOCAL_TARGETS:
      return isHas_local_targets();

    case HAS_REMOTE_TARGETS:
      return isHas_remote_targets();

    case APPLIED_ON_PARTITION_COLUMNS:
      return isApplied_on_partition_columns();

    case NDV_ESTIMATE:
      return getNdv_estimate();

    case TYPE:
      return getType();

    case FILTER_SIZE_BYTES:
      return getFilter_size_bytes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FILTER_ID:
      return isSetFilter_id();
    case SRC_EXPR:
      return isSetSrc_expr();
    case TARGETS:
      return isSetTargets();
    case PLANID_TO_TARGET_NDX:
      return isSetPlanid_to_target_ndx();
    case IS_BROADCAST_JOIN:
      return isSetIs_broadcast_join();
    case HAS_LOCAL_TARGETS:
      return isSetHas_local_targets();
    case HAS_REMOTE_TARGETS:
      return isSetHas_remote_targets();
    case APPLIED_ON_PARTITION_COLUMNS:
      return isSetApplied_on_partition_columns();
    case NDV_ESTIMATE:
      return isSetNdv_estimate();
    case TYPE:
      return isSetType();
    case FILTER_SIZE_BYTES:
      return isSetFilter_size_bytes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRuntimeFilterDesc)
      return this.equals((TRuntimeFilterDesc)that);
    return false;
  }

  public boolean equals(TRuntimeFilterDesc that) {
    if (that == null)
      return false;

    boolean this_present_filter_id = true;
    boolean that_present_filter_id = true;
    if (this_present_filter_id || that_present_filter_id) {
      if (!(this_present_filter_id && that_present_filter_id))
        return false;
      if (this.filter_id != that.filter_id)
        return false;
    }

    boolean this_present_src_expr = true && this.isSetSrc_expr();
    boolean that_present_src_expr = true && that.isSetSrc_expr();
    if (this_present_src_expr || that_present_src_expr) {
      if (!(this_present_src_expr && that_present_src_expr))
        return false;
      if (!this.src_expr.equals(that.src_expr))
        return false;
    }

    boolean this_present_targets = true && this.isSetTargets();
    boolean that_present_targets = true && that.isSetTargets();
    if (this_present_targets || that_present_targets) {
      if (!(this_present_targets && that_present_targets))
        return false;
      if (!this.targets.equals(that.targets))
        return false;
    }

    boolean this_present_planid_to_target_ndx = true && this.isSetPlanid_to_target_ndx();
    boolean that_present_planid_to_target_ndx = true && that.isSetPlanid_to_target_ndx();
    if (this_present_planid_to_target_ndx || that_present_planid_to_target_ndx) {
      if (!(this_present_planid_to_target_ndx && that_present_planid_to_target_ndx))
        return false;
      if (!this.planid_to_target_ndx.equals(that.planid_to_target_ndx))
        return false;
    }

    boolean this_present_is_broadcast_join = true;
    boolean that_present_is_broadcast_join = true;
    if (this_present_is_broadcast_join || that_present_is_broadcast_join) {
      if (!(this_present_is_broadcast_join && that_present_is_broadcast_join))
        return false;
      if (this.is_broadcast_join != that.is_broadcast_join)
        return false;
    }

    boolean this_present_has_local_targets = true;
    boolean that_present_has_local_targets = true;
    if (this_present_has_local_targets || that_present_has_local_targets) {
      if (!(this_present_has_local_targets && that_present_has_local_targets))
        return false;
      if (this.has_local_targets != that.has_local_targets)
        return false;
    }

    boolean this_present_has_remote_targets = true;
    boolean that_present_has_remote_targets = true;
    if (this_present_has_remote_targets || that_present_has_remote_targets) {
      if (!(this_present_has_remote_targets && that_present_has_remote_targets))
        return false;
      if (this.has_remote_targets != that.has_remote_targets)
        return false;
    }

    boolean this_present_applied_on_partition_columns = true;
    boolean that_present_applied_on_partition_columns = true;
    if (this_present_applied_on_partition_columns || that_present_applied_on_partition_columns) {
      if (!(this_present_applied_on_partition_columns && that_present_applied_on_partition_columns))
        return false;
      if (this.applied_on_partition_columns != that.applied_on_partition_columns)
        return false;
    }

    boolean this_present_ndv_estimate = true && this.isSetNdv_estimate();
    boolean that_present_ndv_estimate = true && that.isSetNdv_estimate();
    if (this_present_ndv_estimate || that_present_ndv_estimate) {
      if (!(this_present_ndv_estimate && that_present_ndv_estimate))
        return false;
      if (this.ndv_estimate != that.ndv_estimate)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_filter_size_bytes = true && this.isSetFilter_size_bytes();
    boolean that_present_filter_size_bytes = true && that.isSetFilter_size_bytes();
    if (this_present_filter_size_bytes || that_present_filter_size_bytes) {
      if (!(this_present_filter_size_bytes && that_present_filter_size_bytes))
        return false;
      if (this.filter_size_bytes != that.filter_size_bytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_filter_id = true;
    list.add(present_filter_id);
    if (present_filter_id)
      list.add(filter_id);

    boolean present_src_expr = true && (isSetSrc_expr());
    list.add(present_src_expr);
    if (present_src_expr)
      list.add(src_expr);

    boolean present_targets = true && (isSetTargets());
    list.add(present_targets);
    if (present_targets)
      list.add(targets);

    boolean present_planid_to_target_ndx = true && (isSetPlanid_to_target_ndx());
    list.add(present_planid_to_target_ndx);
    if (present_planid_to_target_ndx)
      list.add(planid_to_target_ndx);

    boolean present_is_broadcast_join = true;
    list.add(present_is_broadcast_join);
    if (present_is_broadcast_join)
      list.add(is_broadcast_join);

    boolean present_has_local_targets = true;
    list.add(present_has_local_targets);
    if (present_has_local_targets)
      list.add(has_local_targets);

    boolean present_has_remote_targets = true;
    list.add(present_has_remote_targets);
    if (present_has_remote_targets)
      list.add(has_remote_targets);

    boolean present_applied_on_partition_columns = true;
    list.add(present_applied_on_partition_columns);
    if (present_applied_on_partition_columns)
      list.add(applied_on_partition_columns);

    boolean present_ndv_estimate = true && (isSetNdv_estimate());
    list.add(present_ndv_estimate);
    if (present_ndv_estimate)
      list.add(ndv_estimate);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_filter_size_bytes = true && (isSetFilter_size_bytes());
    list.add(present_filter_size_bytes);
    if (present_filter_size_bytes)
      list.add(filter_size_bytes);

    return list.hashCode();
  }

  @Override
  public int compareTo(TRuntimeFilterDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFilter_id()).compareTo(other.isSetFilter_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_id, other.filter_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc_expr()).compareTo(other.isSetSrc_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_expr, other.src_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargets()).compareTo(other.isSetTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targets, other.targets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanid_to_target_ndx()).compareTo(other.isSetPlanid_to_target_ndx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanid_to_target_ndx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planid_to_target_ndx, other.planid_to_target_ndx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_broadcast_join()).compareTo(other.isSetIs_broadcast_join());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_broadcast_join()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_broadcast_join, other.is_broadcast_join);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_local_targets()).compareTo(other.isSetHas_local_targets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_local_targets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_local_targets, other.has_local_targets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_remote_targets()).compareTo(other.isSetHas_remote_targets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_remote_targets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_remote_targets, other.has_remote_targets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplied_on_partition_columns()).compareTo(other.isSetApplied_on_partition_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplied_on_partition_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applied_on_partition_columns, other.applied_on_partition_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNdv_estimate()).compareTo(other.isSetNdv_estimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNdv_estimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ndv_estimate, other.ndv_estimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter_size_bytes()).compareTo(other.isSetFilter_size_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter_size_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_size_bytes, other.filter_size_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRuntimeFilterDesc(");
    boolean first = true;

    sb.append("filter_id:");
    sb.append(this.filter_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_expr:");
    if (this.src_expr == null) {
      sb.append("null");
    } else {
      sb.append(this.src_expr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targets:");
    if (this.targets == null) {
      sb.append("null");
    } else {
      sb.append(this.targets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planid_to_target_ndx:");
    if (this.planid_to_target_ndx == null) {
      sb.append("null");
    } else {
      sb.append(this.planid_to_target_ndx);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_broadcast_join:");
    sb.append(this.is_broadcast_join);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_local_targets:");
    sb.append(this.has_local_targets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_remote_targets:");
    sb.append(this.has_remote_targets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applied_on_partition_columns:");
    sb.append(this.applied_on_partition_columns);
    first = false;
    if (isSetNdv_estimate()) {
      if (!first) sb.append(", ");
      sb.append("ndv_estimate:");
      sb.append(this.ndv_estimate);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetFilter_size_bytes()) {
      if (!first) sb.append(", ");
      sb.append("filter_size_bytes:");
      sb.append(this.filter_size_bytes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetFilter_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'filter_id' is unset! Struct:" + toString());
    }

    if (!isSetSrc_expr()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'src_expr' is unset! Struct:" + toString());
    }

    if (!isSetTargets()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'targets' is unset! Struct:" + toString());
    }

    if (!isSetPlanid_to_target_ndx()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'planid_to_target_ndx' is unset! Struct:" + toString());
    }

    if (!isSetIs_broadcast_join()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_broadcast_join' is unset! Struct:" + toString());
    }

    if (!isSetHas_local_targets()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'has_local_targets' is unset! Struct:" + toString());
    }

    if (!isSetHas_remote_targets()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'has_remote_targets' is unset! Struct:" + toString());
    }

    if (!isSetApplied_on_partition_columns()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applied_on_partition_columns' is unset! Struct:" + toString());
    }

    if (!isSetType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (src_expr != null) {
      src_expr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeFilterDescStandardSchemeFactory implements SchemeFactory {
    public TRuntimeFilterDescStandardScheme getScheme() {
      return new TRuntimeFilterDescStandardScheme();
    }
  }

  private static class TRuntimeFilterDescStandardScheme extends StandardScheme<TRuntimeFilterDesc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeFilterDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filter_id = iprot.readI32();
              struct.setFilter_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.src_expr = new org.apache.impala.thrift.TExpr();
              struct.src_expr.read(iprot);
              struct.setSrc_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.targets = new ArrayList<TRuntimeFilterTargetDesc>(_list8.size);
                TRuntimeFilterTargetDesc _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TRuntimeFilterTargetDesc();
                  _elem9.read(iprot);
                  struct.targets.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setTargetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLANID_TO_TARGET_NDX
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
                struct.planid_to_target_ndx = new HashMap<Integer,Integer>(2*_map11.size);
                int _key12;
                int _val13;
                for (int _i14 = 0; _i14 < _map11.size; ++_i14)
                {
                  _key12 = iprot.readI32();
                  _val13 = iprot.readI32();
                  struct.planid_to_target_ndx.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setPlanid_to_target_ndxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_BROADCAST_JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_broadcast_join = iprot.readBool();
              struct.setIs_broadcast_joinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HAS_LOCAL_TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_local_targets = iprot.readBool();
              struct.setHas_local_targetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAS_REMOTE_TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_remote_targets = iprot.readBool();
              struct.setHas_remote_targetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // APPLIED_ON_PARTITION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.applied_on_partition_columns = iprot.readBool();
              struct.setApplied_on_partition_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NDV_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ndv_estimate = iprot.readI64();
              struct.setNdv_estimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.impala.thrift.TRuntimeFilterType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILTER_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.filter_size_bytes = iprot.readI64();
              struct.setFilter_size_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeFilterDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FILTER_ID_FIELD_DESC);
      oprot.writeI32(struct.filter_id);
      oprot.writeFieldEnd();
      if (struct.src_expr != null) {
        oprot.writeFieldBegin(SRC_EXPR_FIELD_DESC);
        struct.src_expr.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.targets != null) {
        oprot.writeFieldBegin(TARGETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.targets.size()));
          for (TRuntimeFilterTargetDesc _iter15 : struct.targets)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.planid_to_target_ndx != null) {
        oprot.writeFieldBegin(PLANID_TO_TARGET_NDX_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.planid_to_target_ndx.size()));
          for (Map.Entry<Integer, Integer> _iter16 : struct.planid_to_target_ndx.entrySet())
          {
            oprot.writeI32(_iter16.getKey());
            oprot.writeI32(_iter16.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_BROADCAST_JOIN_FIELD_DESC);
      oprot.writeBool(struct.is_broadcast_join);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_LOCAL_TARGETS_FIELD_DESC);
      oprot.writeBool(struct.has_local_targets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_REMOTE_TARGETS_FIELD_DESC);
      oprot.writeBool(struct.has_remote_targets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLIED_ON_PARTITION_COLUMNS_FIELD_DESC);
      oprot.writeBool(struct.applied_on_partition_columns);
      oprot.writeFieldEnd();
      if (struct.isSetNdv_estimate()) {
        oprot.writeFieldBegin(NDV_ESTIMATE_FIELD_DESC);
        oprot.writeI64(struct.ndv_estimate);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetFilter_size_bytes()) {
        oprot.writeFieldBegin(FILTER_SIZE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.filter_size_bytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeFilterDescTupleSchemeFactory implements SchemeFactory {
    public TRuntimeFilterDescTupleScheme getScheme() {
      return new TRuntimeFilterDescTupleScheme();
    }
  }

  private static class TRuntimeFilterDescTupleScheme extends TupleScheme<TRuntimeFilterDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.filter_id);
      struct.src_expr.write(oprot);
      {
        oprot.writeI32(struct.targets.size());
        for (TRuntimeFilterTargetDesc _iter17 : struct.targets)
        {
          _iter17.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.planid_to_target_ndx.size());
        for (Map.Entry<Integer, Integer> _iter18 : struct.planid_to_target_ndx.entrySet())
        {
          oprot.writeI32(_iter18.getKey());
          oprot.writeI32(_iter18.getValue());
        }
      }
      oprot.writeBool(struct.is_broadcast_join);
      oprot.writeBool(struct.has_local_targets);
      oprot.writeBool(struct.has_remote_targets);
      oprot.writeBool(struct.applied_on_partition_columns);
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetNdv_estimate()) {
        optionals.set(0);
      }
      if (struct.isSetFilter_size_bytes()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNdv_estimate()) {
        oprot.writeI64(struct.ndv_estimate);
      }
      if (struct.isSetFilter_size_bytes()) {
        oprot.writeI64(struct.filter_size_bytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.filter_id = iprot.readI32();
      struct.setFilter_idIsSet(true);
      struct.src_expr = new org.apache.impala.thrift.TExpr();
      struct.src_expr.read(iprot);
      struct.setSrc_exprIsSet(true);
      {
        org.apache.thrift.protocol.TList _list19 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.targets = new ArrayList<TRuntimeFilterTargetDesc>(_list19.size);
        TRuntimeFilterTargetDesc _elem20;
        for (int _i21 = 0; _i21 < _list19.size; ++_i21)
        {
          _elem20 = new TRuntimeFilterTargetDesc();
          _elem20.read(iprot);
          struct.targets.add(_elem20);
        }
      }
      struct.setTargetsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.planid_to_target_ndx = new HashMap<Integer,Integer>(2*_map22.size);
        int _key23;
        int _val24;
        for (int _i25 = 0; _i25 < _map22.size; ++_i25)
        {
          _key23 = iprot.readI32();
          _val24 = iprot.readI32();
          struct.planid_to_target_ndx.put(_key23, _val24);
        }
      }
      struct.setPlanid_to_target_ndxIsSet(true);
      struct.is_broadcast_join = iprot.readBool();
      struct.setIs_broadcast_joinIsSet(true);
      struct.has_local_targets = iprot.readBool();
      struct.setHas_local_targetsIsSet(true);
      struct.has_remote_targets = iprot.readBool();
      struct.setHas_remote_targetsIsSet(true);
      struct.applied_on_partition_columns = iprot.readBool();
      struct.setApplied_on_partition_columnsIsSet(true);
      struct.type = org.apache.impala.thrift.TRuntimeFilterType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.ndv_estimate = iprot.readI64();
        struct.setNdv_estimateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.filter_size_bytes = iprot.readI64();
        struct.setFilter_size_bytesIsSet(true);
      }
    }
  }

}

