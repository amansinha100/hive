/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TNestedLoopJoinNode implements org.apache.thrift.TBase<TNestedLoopJoinNode, TNestedLoopJoinNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNestedLoopJoinNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNestedLoopJoinNode");

  private static final org.apache.thrift.protocol.TField JOIN_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("join_op", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TNestedLoopJoinNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TNestedLoopJoinNodeTupleSchemeFactory());
  }

  private TJoinOp join_op; // required
  private List<org.apache.impala.thrift.TExpr> join_conjuncts; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TJoinOp
     */
    JOIN_OP((short)1, "join_op"),
    JOIN_CONJUNCTS((short)2, "join_conjuncts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOIN_OP
          return JOIN_OP;
        case 2: // JOIN_CONJUNCTS
          return JOIN_CONJUNCTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.JOIN_CONJUNCTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOIN_OP, new org.apache.thrift.meta_data.FieldMetaData("join_op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJoinOp.class)));
    tmpMap.put(_Fields.JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("join_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNestedLoopJoinNode.class, metaDataMap);
  }

  public TNestedLoopJoinNode() {
  }

  public TNestedLoopJoinNode(
    TJoinOp join_op)
  {
    this();
    this.join_op = join_op;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNestedLoopJoinNode(TNestedLoopJoinNode other) {
    if (other.isSetJoin_op()) {
      this.join_op = other.join_op;
    }
    if (other.isSetJoin_conjuncts()) {
      List<org.apache.impala.thrift.TExpr> __this__join_conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>(other.join_conjuncts.size());
      for (org.apache.impala.thrift.TExpr other_element : other.join_conjuncts) {
        __this__join_conjuncts.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.join_conjuncts = __this__join_conjuncts;
    }
  }

  public TNestedLoopJoinNode deepCopy() {
    return new TNestedLoopJoinNode(this);
  }

  @Override
  public void clear() {
    this.join_op = null;
    this.join_conjuncts = null;
  }

  /**
   * 
   * @see TJoinOp
   */
  public TJoinOp getJoin_op() {
    return this.join_op;
  }

  /**
   * 
   * @see TJoinOp
   */
  public void setJoin_op(TJoinOp join_op) {
    this.join_op = join_op;
  }

  public void unsetJoin_op() {
    this.join_op = null;
  }

  /** Returns true if field join_op is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_op() {
    return this.join_op != null;
  }

  public void setJoin_opIsSet(boolean value) {
    if (!value) {
      this.join_op = null;
    }
  }

  public int getJoin_conjunctsSize() {
    return (this.join_conjuncts == null) ? 0 : this.join_conjuncts.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getJoin_conjunctsIterator() {
    return (this.join_conjuncts == null) ? null : this.join_conjuncts.iterator();
  }

  public void addToJoin_conjuncts(org.apache.impala.thrift.TExpr elem) {
    if (this.join_conjuncts == null) {
      this.join_conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.join_conjuncts.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getJoin_conjuncts() {
    return this.join_conjuncts;
  }

  public void setJoin_conjuncts(List<org.apache.impala.thrift.TExpr> join_conjuncts) {
    this.join_conjuncts = join_conjuncts;
  }

  public void unsetJoin_conjuncts() {
    this.join_conjuncts = null;
  }

  /** Returns true if field join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_conjuncts() {
    return this.join_conjuncts != null;
  }

  public void setJoin_conjunctsIsSet(boolean value) {
    if (!value) {
      this.join_conjuncts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOIN_OP:
      if (value == null) {
        unsetJoin_op();
      } else {
        setJoin_op((TJoinOp)value);
      }
      break;

    case JOIN_CONJUNCTS:
      if (value == null) {
        unsetJoin_conjuncts();
      } else {
        setJoin_conjuncts((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOIN_OP:
      return getJoin_op();

    case JOIN_CONJUNCTS:
      return getJoin_conjuncts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOIN_OP:
      return isSetJoin_op();
    case JOIN_CONJUNCTS:
      return isSetJoin_conjuncts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TNestedLoopJoinNode)
      return this.equals((TNestedLoopJoinNode)that);
    return false;
  }

  public boolean equals(TNestedLoopJoinNode that) {
    if (that == null)
      return false;

    boolean this_present_join_op = true && this.isSetJoin_op();
    boolean that_present_join_op = true && that.isSetJoin_op();
    if (this_present_join_op || that_present_join_op) {
      if (!(this_present_join_op && that_present_join_op))
        return false;
      if (!this.join_op.equals(that.join_op))
        return false;
    }

    boolean this_present_join_conjuncts = true && this.isSetJoin_conjuncts();
    boolean that_present_join_conjuncts = true && that.isSetJoin_conjuncts();
    if (this_present_join_conjuncts || that_present_join_conjuncts) {
      if (!(this_present_join_conjuncts && that_present_join_conjuncts))
        return false;
      if (!this.join_conjuncts.equals(that.join_conjuncts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_join_op = true && (isSetJoin_op());
    list.add(present_join_op);
    if (present_join_op)
      list.add(join_op.getValue());

    boolean present_join_conjuncts = true && (isSetJoin_conjuncts());
    list.add(present_join_conjuncts);
    if (present_join_conjuncts)
      list.add(join_conjuncts);

    return list.hashCode();
  }

  @Override
  public int compareTo(TNestedLoopJoinNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJoin_op()).compareTo(other.isSetJoin_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_op, other.join_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJoin_conjuncts()).compareTo(other.isSetJoin_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_conjuncts, other.join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TNestedLoopJoinNode(");
    boolean first = true;

    sb.append("join_op:");
    if (this.join_op == null) {
      sb.append("null");
    } else {
      sb.append(this.join_op);
    }
    first = false;
    if (isSetJoin_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("join_conjuncts:");
      if (this.join_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.join_conjuncts);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetJoin_op()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'join_op' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNestedLoopJoinNodeStandardSchemeFactory implements SchemeFactory {
    public TNestedLoopJoinNodeStandardScheme getScheme() {
      return new TNestedLoopJoinNodeStandardScheme();
    }
  }

  private static class TNestedLoopJoinNodeStandardScheme extends StandardScheme<TNestedLoopJoinNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TNestedLoopJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOIN_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.join_op = org.apache.impala.thrift.TJoinOp.findByValue(iprot.readI32());
              struct.setJoin_opIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.join_conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>(_list110.size);
                org.apache.impala.thrift.TExpr _elem111;
                for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                {
                  _elem111 = new org.apache.impala.thrift.TExpr();
                  _elem111.read(iprot);
                  struct.join_conjuncts.add(_elem111);
                }
                iprot.readListEnd();
              }
              struct.setJoin_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TNestedLoopJoinNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.join_op != null) {
        oprot.writeFieldBegin(JOIN_OP_FIELD_DESC);
        oprot.writeI32(struct.join_op.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.join_conjuncts != null) {
        if (struct.isSetJoin_conjuncts()) {
          oprot.writeFieldBegin(JOIN_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.join_conjuncts.size()));
            for (org.apache.impala.thrift.TExpr _iter113 : struct.join_conjuncts)
            {
              _iter113.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNestedLoopJoinNodeTupleSchemeFactory implements SchemeFactory {
    public TNestedLoopJoinNodeTupleScheme getScheme() {
      return new TNestedLoopJoinNodeTupleScheme();
    }
  }

  private static class TNestedLoopJoinNodeTupleScheme extends TupleScheme<TNestedLoopJoinNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNestedLoopJoinNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.join_op.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetJoin_conjuncts()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetJoin_conjuncts()) {
        {
          oprot.writeI32(struct.join_conjuncts.size());
          for (org.apache.impala.thrift.TExpr _iter114 : struct.join_conjuncts)
          {
            _iter114.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNestedLoopJoinNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.join_op = org.apache.impala.thrift.TJoinOp.findByValue(iprot.readI32());
      struct.setJoin_opIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.join_conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>(_list115.size);
          org.apache.impala.thrift.TExpr _elem116;
          for (int _i117 = 0; _i117 < _list115.size; ++_i117)
          {
            _elem116 = new org.apache.impala.thrift.TExpr();
            _elem116.read(iprot);
            struct.join_conjuncts.add(_elem116);
          }
        }
        struct.setJoin_conjunctsIsSet(true);
      }
    }
  }

}

