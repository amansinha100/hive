/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TKuduPartitionParam implements org.apache.thrift.TBase<TKuduPartitionParam, TKuduPartitionParam._Fields>, java.io.Serializable, Cloneable, Comparable<TKuduPartitionParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TKuduPartitionParam");

  private static final org.apache.thrift.protocol.TField BY_HASH_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("by_hash_param", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BY_RANGE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("by_range_param", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TKuduPartitionParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TKuduPartitionParamTupleSchemeFactory());
  }

  public TKuduPartitionByHashParam by_hash_param; // optional
  public TKuduPartitionByRangeParam by_range_param; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BY_HASH_PARAM((short)1, "by_hash_param"),
    BY_RANGE_PARAM((short)2, "by_range_param");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BY_HASH_PARAM
          return BY_HASH_PARAM;
        case 2: // BY_RANGE_PARAM
          return BY_RANGE_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BY_HASH_PARAM,_Fields.BY_RANGE_PARAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BY_HASH_PARAM, new org.apache.thrift.meta_data.FieldMetaData("by_hash_param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKuduPartitionByHashParam.class)));
    tmpMap.put(_Fields.BY_RANGE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("by_range_param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKuduPartitionByRangeParam.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TKuduPartitionParam.class, metaDataMap);
  }

  public TKuduPartitionParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TKuduPartitionParam(TKuduPartitionParam other) {
    if (other.isSetBy_hash_param()) {
      this.by_hash_param = new TKuduPartitionByHashParam(other.by_hash_param);
    }
    if (other.isSetBy_range_param()) {
      this.by_range_param = new TKuduPartitionByRangeParam(other.by_range_param);
    }
  }

  public TKuduPartitionParam deepCopy() {
    return new TKuduPartitionParam(this);
  }

  @Override
  public void clear() {
    this.by_hash_param = null;
    this.by_range_param = null;
  }

  public TKuduPartitionByHashParam getBy_hash_param() {
    return this.by_hash_param;
  }

  public TKuduPartitionParam setBy_hash_param(TKuduPartitionByHashParam by_hash_param) {
    this.by_hash_param = by_hash_param;
    return this;
  }

  public void unsetBy_hash_param() {
    this.by_hash_param = null;
  }

  /** Returns true if field by_hash_param is set (has been assigned a value) and false otherwise */
  public boolean isSetBy_hash_param() {
    return this.by_hash_param != null;
  }

  public void setBy_hash_paramIsSet(boolean value) {
    if (!value) {
      this.by_hash_param = null;
    }
  }

  public TKuduPartitionByRangeParam getBy_range_param() {
    return this.by_range_param;
  }

  public TKuduPartitionParam setBy_range_param(TKuduPartitionByRangeParam by_range_param) {
    this.by_range_param = by_range_param;
    return this;
  }

  public void unsetBy_range_param() {
    this.by_range_param = null;
  }

  /** Returns true if field by_range_param is set (has been assigned a value) and false otherwise */
  public boolean isSetBy_range_param() {
    return this.by_range_param != null;
  }

  public void setBy_range_paramIsSet(boolean value) {
    if (!value) {
      this.by_range_param = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BY_HASH_PARAM:
      if (value == null) {
        unsetBy_hash_param();
      } else {
        setBy_hash_param((TKuduPartitionByHashParam)value);
      }
      break;

    case BY_RANGE_PARAM:
      if (value == null) {
        unsetBy_range_param();
      } else {
        setBy_range_param((TKuduPartitionByRangeParam)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BY_HASH_PARAM:
      return getBy_hash_param();

    case BY_RANGE_PARAM:
      return getBy_range_param();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BY_HASH_PARAM:
      return isSetBy_hash_param();
    case BY_RANGE_PARAM:
      return isSetBy_range_param();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TKuduPartitionParam)
      return this.equals((TKuduPartitionParam)that);
    return false;
  }

  public boolean equals(TKuduPartitionParam that) {
    if (that == null)
      return false;

    boolean this_present_by_hash_param = true && this.isSetBy_hash_param();
    boolean that_present_by_hash_param = true && that.isSetBy_hash_param();
    if (this_present_by_hash_param || that_present_by_hash_param) {
      if (!(this_present_by_hash_param && that_present_by_hash_param))
        return false;
      if (!this.by_hash_param.equals(that.by_hash_param))
        return false;
    }

    boolean this_present_by_range_param = true && this.isSetBy_range_param();
    boolean that_present_by_range_param = true && that.isSetBy_range_param();
    if (this_present_by_range_param || that_present_by_range_param) {
      if (!(this_present_by_range_param && that_present_by_range_param))
        return false;
      if (!this.by_range_param.equals(that.by_range_param))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_by_hash_param = true && (isSetBy_hash_param());
    list.add(present_by_hash_param);
    if (present_by_hash_param)
      list.add(by_hash_param);

    boolean present_by_range_param = true && (isSetBy_range_param());
    list.add(present_by_range_param);
    if (present_by_range_param)
      list.add(by_range_param);

    return list.hashCode();
  }

  @Override
  public int compareTo(TKuduPartitionParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBy_hash_param()).compareTo(other.isSetBy_hash_param());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBy_hash_param()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.by_hash_param, other.by_hash_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBy_range_param()).compareTo(other.isSetBy_range_param());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBy_range_param()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.by_range_param, other.by_range_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TKuduPartitionParam(");
    boolean first = true;

    if (isSetBy_hash_param()) {
      sb.append("by_hash_param:");
      if (this.by_hash_param == null) {
        sb.append("null");
      } else {
        sb.append(this.by_hash_param);
      }
      first = false;
    }
    if (isSetBy_range_param()) {
      if (!first) sb.append(", ");
      sb.append("by_range_param:");
      if (this.by_range_param == null) {
        sb.append("null");
      } else {
        sb.append(this.by_range_param);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (by_hash_param != null) {
      by_hash_param.validate();
    }
    if (by_range_param != null) {
      by_range_param.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TKuduPartitionParamStandardSchemeFactory implements SchemeFactory {
    public TKuduPartitionParamStandardScheme getScheme() {
      return new TKuduPartitionParamStandardScheme();
    }
  }

  private static class TKuduPartitionParamStandardScheme extends StandardScheme<TKuduPartitionParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TKuduPartitionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BY_HASH_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.by_hash_param = new TKuduPartitionByHashParam();
              struct.by_hash_param.read(iprot);
              struct.setBy_hash_paramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BY_RANGE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.by_range_param = new TKuduPartitionByRangeParam();
              struct.by_range_param.read(iprot);
              struct.setBy_range_paramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TKuduPartitionParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.by_hash_param != null) {
        if (struct.isSetBy_hash_param()) {
          oprot.writeFieldBegin(BY_HASH_PARAM_FIELD_DESC);
          struct.by_hash_param.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.by_range_param != null) {
        if (struct.isSetBy_range_param()) {
          oprot.writeFieldBegin(BY_RANGE_PARAM_FIELD_DESC);
          struct.by_range_param.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TKuduPartitionParamTupleSchemeFactory implements SchemeFactory {
    public TKuduPartitionParamTupleScheme getScheme() {
      return new TKuduPartitionParamTupleScheme();
    }
  }

  private static class TKuduPartitionParamTupleScheme extends TupleScheme<TKuduPartitionParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TKuduPartitionParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBy_hash_param()) {
        optionals.set(0);
      }
      if (struct.isSetBy_range_param()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBy_hash_param()) {
        struct.by_hash_param.write(oprot);
      }
      if (struct.isSetBy_range_param()) {
        struct.by_range_param.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TKuduPartitionParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.by_hash_param = new TKuduPartitionByHashParam();
        struct.by_hash_param.read(iprot);
        struct.setBy_hash_paramIsSet(true);
      }
      if (incoming.get(1)) {
        struct.by_range_param = new TKuduPartitionByRangeParam();
        struct.by_range_param.read(iprot);
        struct.setBy_range_paramIsSet(true);
      }
    }
  }

}

