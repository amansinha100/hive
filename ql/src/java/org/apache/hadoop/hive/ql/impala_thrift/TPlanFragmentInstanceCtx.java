/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TPlanFragmentInstanceCtx implements org.apache.thrift.TBase<TPlanFragmentInstanceCtx, TPlanFragmentInstanceCtx._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragmentInstanceCtx> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragmentInstanceCtx");

  private static final org.apache.thrift.protocol.TField FRAGMENT_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_idx", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PER_FRAGMENT_INSTANCE_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("per_fragment_instance_idx", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PER_NODE_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("per_node_scan_ranges", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField PER_EXCH_NUM_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("per_exch_num_senders", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sender_id", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DEBUG_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_options", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField FILTERS_PRODUCED_FIELD_DESC = new org.apache.thrift.protocol.TField("filters_produced", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanFragmentInstanceCtxStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanFragmentInstanceCtxTupleSchemeFactory());
  }

  public int fragment_idx; // required
  public org.apache.impala.thrift.TUniqueId fragment_instance_id; // required
  public int per_fragment_instance_idx; // required
  public Map<Integer,List<TScanRangeParams>> per_node_scan_ranges; // required
  public Map<Integer,Integer> per_exch_num_senders; // required
  public int sender_id; // optional
  public TDebugOptions debug_options; // optional
  public List<TRuntimeFilterSource> filters_produced; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAGMENT_IDX((short)1, "fragment_idx"),
    FRAGMENT_INSTANCE_ID((short)2, "fragment_instance_id"),
    PER_FRAGMENT_INSTANCE_IDX((short)3, "per_fragment_instance_idx"),
    PER_NODE_SCAN_RANGES((short)4, "per_node_scan_ranges"),
    PER_EXCH_NUM_SENDERS((short)5, "per_exch_num_senders"),
    SENDER_ID((short)6, "sender_id"),
    DEBUG_OPTIONS((short)7, "debug_options"),
    FILTERS_PRODUCED((short)8, "filters_produced");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRAGMENT_IDX
          return FRAGMENT_IDX;
        case 2: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 3: // PER_FRAGMENT_INSTANCE_IDX
          return PER_FRAGMENT_INSTANCE_IDX;
        case 4: // PER_NODE_SCAN_RANGES
          return PER_NODE_SCAN_RANGES;
        case 5: // PER_EXCH_NUM_SENDERS
          return PER_EXCH_NUM_SENDERS;
        case 6: // SENDER_ID
          return SENDER_ID;
        case 7: // DEBUG_OPTIONS
          return DEBUG_OPTIONS;
        case 8: // FILTERS_PRODUCED
          return FILTERS_PRODUCED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRAGMENT_IDX_ISSET_ID = 0;
  private static final int __PER_FRAGMENT_INSTANCE_IDX_ISSET_ID = 1;
  private static final int __SENDER_ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SENDER_ID,_Fields.DEBUG_OPTIONS,_Fields.FILTERS_PRODUCED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAGMENT_IDX, new org.apache.thrift.meta_data.FieldMetaData("fragment_idx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TFragmentIdx")));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.PER_FRAGMENT_INSTANCE_IDX, new org.apache.thrift.meta_data.FieldMetaData("per_fragment_instance_idx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PER_NODE_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("per_node_scan_ranges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TScanRangeParams.class)))));
    tmpMap.put(_Fields.PER_EXCH_NUM_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("per_exch_num_senders", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("sender_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEBUG_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("debug_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDebugOptions.class)));
    tmpMap.put(_Fields.FILTERS_PRODUCED, new org.apache.thrift.meta_data.FieldMetaData("filters_produced", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRuntimeFilterSource.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragmentInstanceCtx.class, metaDataMap);
  }

  public TPlanFragmentInstanceCtx() {
  }

  public TPlanFragmentInstanceCtx(
    int fragment_idx,
    org.apache.impala.thrift.TUniqueId fragment_instance_id,
    int per_fragment_instance_idx,
    Map<Integer,List<TScanRangeParams>> per_node_scan_ranges,
    Map<Integer,Integer> per_exch_num_senders)
  {
    this();
    this.fragment_idx = fragment_idx;
    setFragment_idxIsSet(true);
    this.fragment_instance_id = fragment_instance_id;
    this.per_fragment_instance_idx = per_fragment_instance_idx;
    setPer_fragment_instance_idxIsSet(true);
    this.per_node_scan_ranges = per_node_scan_ranges;
    this.per_exch_num_senders = per_exch_num_senders;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragmentInstanceCtx(TPlanFragmentInstanceCtx other) {
    __isset_bitfield = other.__isset_bitfield;
    this.fragment_idx = other.fragment_idx;
    if (other.isSetFragment_instance_id()) {
      this.fragment_instance_id = new org.apache.impala.thrift.TUniqueId(other.fragment_instance_id);
    }
    this.per_fragment_instance_idx = other.per_fragment_instance_idx;
    if (other.isSetPer_node_scan_ranges()) {
      Map<Integer,List<TScanRangeParams>> __this__per_node_scan_ranges = new HashMap<Integer,List<TScanRangeParams>>(other.per_node_scan_ranges.size());
      for (Map.Entry<Integer, List<TScanRangeParams>> other_element : other.per_node_scan_ranges.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<TScanRangeParams> other_element_value = other_element.getValue();

        Integer __this__per_node_scan_ranges_copy_key = other_element_key;

        List<TScanRangeParams> __this__per_node_scan_ranges_copy_value = new ArrayList<TScanRangeParams>(other_element_value.size());
        for (TScanRangeParams other_element_value_element : other_element_value) {
          __this__per_node_scan_ranges_copy_value.add(new TScanRangeParams(other_element_value_element));
        }

        __this__per_node_scan_ranges.put(__this__per_node_scan_ranges_copy_key, __this__per_node_scan_ranges_copy_value);
      }
      this.per_node_scan_ranges = __this__per_node_scan_ranges;
    }
    if (other.isSetPer_exch_num_senders()) {
      Map<Integer,Integer> __this__per_exch_num_senders = new HashMap<Integer,Integer>(other.per_exch_num_senders.size());
      for (Map.Entry<Integer, Integer> other_element : other.per_exch_num_senders.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Integer __this__per_exch_num_senders_copy_key = other_element_key;

        Integer __this__per_exch_num_senders_copy_value = other_element_value;

        __this__per_exch_num_senders.put(__this__per_exch_num_senders_copy_key, __this__per_exch_num_senders_copy_value);
      }
      this.per_exch_num_senders = __this__per_exch_num_senders;
    }
    this.sender_id = other.sender_id;
    if (other.isSetDebug_options()) {
      this.debug_options = new TDebugOptions(other.debug_options);
    }
    if (other.isSetFilters_produced()) {
      List<TRuntimeFilterSource> __this__filters_produced = new ArrayList<TRuntimeFilterSource>(other.filters_produced.size());
      for (TRuntimeFilterSource other_element : other.filters_produced) {
        __this__filters_produced.add(new TRuntimeFilterSource(other_element));
      }
      this.filters_produced = __this__filters_produced;
    }
  }

  public TPlanFragmentInstanceCtx deepCopy() {
    return new TPlanFragmentInstanceCtx(this);
  }

  @Override
  public void clear() {
    setFragment_idxIsSet(false);
    this.fragment_idx = 0;
    this.fragment_instance_id = null;
    setPer_fragment_instance_idxIsSet(false);
    this.per_fragment_instance_idx = 0;
    this.per_node_scan_ranges = null;
    this.per_exch_num_senders = null;
    setSender_idIsSet(false);
    this.sender_id = 0;
    this.debug_options = null;
    this.filters_produced = null;
  }

  public int getFragment_idx() {
    return this.fragment_idx;
  }

  public TPlanFragmentInstanceCtx setFragment_idx(int fragment_idx) {
    this.fragment_idx = fragment_idx;
    setFragment_idxIsSet(true);
    return this;
  }

  public void unsetFragment_idx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAGMENT_IDX_ISSET_ID);
  }

  /** Returns true if field fragment_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_idx() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAGMENT_IDX_ISSET_ID);
  }

  public void setFragment_idxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAGMENT_IDX_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TUniqueId getFragment_instance_id() {
    return this.fragment_instance_id;
  }

  public TPlanFragmentInstanceCtx setFragment_instance_id(org.apache.impala.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragment_instance_id() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_id() {
    return this.fragment_instance_id != null;
  }

  public void setFragment_instance_idIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  public int getPer_fragment_instance_idx() {
    return this.per_fragment_instance_idx;
  }

  public TPlanFragmentInstanceCtx setPer_fragment_instance_idx(int per_fragment_instance_idx) {
    this.per_fragment_instance_idx = per_fragment_instance_idx;
    setPer_fragment_instance_idxIsSet(true);
    return this;
  }

  public void unsetPer_fragment_instance_idx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PER_FRAGMENT_INSTANCE_IDX_ISSET_ID);
  }

  /** Returns true if field per_fragment_instance_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_fragment_instance_idx() {
    return EncodingUtils.testBit(__isset_bitfield, __PER_FRAGMENT_INSTANCE_IDX_ISSET_ID);
  }

  public void setPer_fragment_instance_idxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PER_FRAGMENT_INSTANCE_IDX_ISSET_ID, value);
  }

  public int getPer_node_scan_rangesSize() {
    return (this.per_node_scan_ranges == null) ? 0 : this.per_node_scan_ranges.size();
  }

  public void putToPer_node_scan_ranges(int key, List<TScanRangeParams> val) {
    if (this.per_node_scan_ranges == null) {
      this.per_node_scan_ranges = new HashMap<Integer,List<TScanRangeParams>>();
    }
    this.per_node_scan_ranges.put(key, val);
  }

  public Map<Integer,List<TScanRangeParams>> getPer_node_scan_ranges() {
    return this.per_node_scan_ranges;
  }

  public TPlanFragmentInstanceCtx setPer_node_scan_ranges(Map<Integer,List<TScanRangeParams>> per_node_scan_ranges) {
    this.per_node_scan_ranges = per_node_scan_ranges;
    return this;
  }

  public void unsetPer_node_scan_ranges() {
    this.per_node_scan_ranges = null;
  }

  /** Returns true if field per_node_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_node_scan_ranges() {
    return this.per_node_scan_ranges != null;
  }

  public void setPer_node_scan_rangesIsSet(boolean value) {
    if (!value) {
      this.per_node_scan_ranges = null;
    }
  }

  public int getPer_exch_num_sendersSize() {
    return (this.per_exch_num_senders == null) ? 0 : this.per_exch_num_senders.size();
  }

  public void putToPer_exch_num_senders(int key, int val) {
    if (this.per_exch_num_senders == null) {
      this.per_exch_num_senders = new HashMap<Integer,Integer>();
    }
    this.per_exch_num_senders.put(key, val);
  }

  public Map<Integer,Integer> getPer_exch_num_senders() {
    return this.per_exch_num_senders;
  }

  public TPlanFragmentInstanceCtx setPer_exch_num_senders(Map<Integer,Integer> per_exch_num_senders) {
    this.per_exch_num_senders = per_exch_num_senders;
    return this;
  }

  public void unsetPer_exch_num_senders() {
    this.per_exch_num_senders = null;
  }

  /** Returns true if field per_exch_num_senders is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_exch_num_senders() {
    return this.per_exch_num_senders != null;
  }

  public void setPer_exch_num_sendersIsSet(boolean value) {
    if (!value) {
      this.per_exch_num_senders = null;
    }
  }

  public int getSender_id() {
    return this.sender_id;
  }

  public TPlanFragmentInstanceCtx setSender_id(int sender_id) {
    this.sender_id = sender_id;
    setSender_idIsSet(true);
    return this;
  }

  public void unsetSender_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENDER_ID_ISSET_ID);
  }

  /** Returns true if field sender_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSender_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SENDER_ID_ISSET_ID);
  }

  public void setSender_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENDER_ID_ISSET_ID, value);
  }

  public TDebugOptions getDebug_options() {
    return this.debug_options;
  }

  public TPlanFragmentInstanceCtx setDebug_options(TDebugOptions debug_options) {
    this.debug_options = debug_options;
    return this;
  }

  public void unsetDebug_options() {
    this.debug_options = null;
  }

  /** Returns true if field debug_options is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_options() {
    return this.debug_options != null;
  }

  public void setDebug_optionsIsSet(boolean value) {
    if (!value) {
      this.debug_options = null;
    }
  }

  public int getFilters_producedSize() {
    return (this.filters_produced == null) ? 0 : this.filters_produced.size();
  }

  public java.util.Iterator<TRuntimeFilterSource> getFilters_producedIterator() {
    return (this.filters_produced == null) ? null : this.filters_produced.iterator();
  }

  public void addToFilters_produced(TRuntimeFilterSource elem) {
    if (this.filters_produced == null) {
      this.filters_produced = new ArrayList<TRuntimeFilterSource>();
    }
    this.filters_produced.add(elem);
  }

  public List<TRuntimeFilterSource> getFilters_produced() {
    return this.filters_produced;
  }

  public TPlanFragmentInstanceCtx setFilters_produced(List<TRuntimeFilterSource> filters_produced) {
    this.filters_produced = filters_produced;
    return this;
  }

  public void unsetFilters_produced() {
    this.filters_produced = null;
  }

  /** Returns true if field filters_produced is set (has been assigned a value) and false otherwise */
  public boolean isSetFilters_produced() {
    return this.filters_produced != null;
  }

  public void setFilters_producedIsSet(boolean value) {
    if (!value) {
      this.filters_produced = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRAGMENT_IDX:
      if (value == null) {
        unsetFragment_idx();
      } else {
        setFragment_idx((Integer)value);
      }
      break;

    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragment_instance_id();
      } else {
        setFragment_instance_id((org.apache.impala.thrift.TUniqueId)value);
      }
      break;

    case PER_FRAGMENT_INSTANCE_IDX:
      if (value == null) {
        unsetPer_fragment_instance_idx();
      } else {
        setPer_fragment_instance_idx((Integer)value);
      }
      break;

    case PER_NODE_SCAN_RANGES:
      if (value == null) {
        unsetPer_node_scan_ranges();
      } else {
        setPer_node_scan_ranges((Map<Integer,List<TScanRangeParams>>)value);
      }
      break;

    case PER_EXCH_NUM_SENDERS:
      if (value == null) {
        unsetPer_exch_num_senders();
      } else {
        setPer_exch_num_senders((Map<Integer,Integer>)value);
      }
      break;

    case SENDER_ID:
      if (value == null) {
        unsetSender_id();
      } else {
        setSender_id((Integer)value);
      }
      break;

    case DEBUG_OPTIONS:
      if (value == null) {
        unsetDebug_options();
      } else {
        setDebug_options((TDebugOptions)value);
      }
      break;

    case FILTERS_PRODUCED:
      if (value == null) {
        unsetFilters_produced();
      } else {
        setFilters_produced((List<TRuntimeFilterSource>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAGMENT_IDX:
      return getFragment_idx();

    case FRAGMENT_INSTANCE_ID:
      return getFragment_instance_id();

    case PER_FRAGMENT_INSTANCE_IDX:
      return getPer_fragment_instance_idx();

    case PER_NODE_SCAN_RANGES:
      return getPer_node_scan_ranges();

    case PER_EXCH_NUM_SENDERS:
      return getPer_exch_num_senders();

    case SENDER_ID:
      return getSender_id();

    case DEBUG_OPTIONS:
      return getDebug_options();

    case FILTERS_PRODUCED:
      return getFilters_produced();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRAGMENT_IDX:
      return isSetFragment_idx();
    case FRAGMENT_INSTANCE_ID:
      return isSetFragment_instance_id();
    case PER_FRAGMENT_INSTANCE_IDX:
      return isSetPer_fragment_instance_idx();
    case PER_NODE_SCAN_RANGES:
      return isSetPer_node_scan_ranges();
    case PER_EXCH_NUM_SENDERS:
      return isSetPer_exch_num_senders();
    case SENDER_ID:
      return isSetSender_id();
    case DEBUG_OPTIONS:
      return isSetDebug_options();
    case FILTERS_PRODUCED:
      return isSetFilters_produced();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanFragmentInstanceCtx)
      return this.equals((TPlanFragmentInstanceCtx)that);
    return false;
  }

  public boolean equals(TPlanFragmentInstanceCtx that) {
    if (that == null)
      return false;

    boolean this_present_fragment_idx = true;
    boolean that_present_fragment_idx = true;
    if (this_present_fragment_idx || that_present_fragment_idx) {
      if (!(this_present_fragment_idx && that_present_fragment_idx))
        return false;
      if (this.fragment_idx != that.fragment_idx)
        return false;
    }

    boolean this_present_fragment_instance_id = true && this.isSetFragment_instance_id();
    boolean that_present_fragment_instance_id = true && that.isSetFragment_instance_id();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_per_fragment_instance_idx = true;
    boolean that_present_per_fragment_instance_idx = true;
    if (this_present_per_fragment_instance_idx || that_present_per_fragment_instance_idx) {
      if (!(this_present_per_fragment_instance_idx && that_present_per_fragment_instance_idx))
        return false;
      if (this.per_fragment_instance_idx != that.per_fragment_instance_idx)
        return false;
    }

    boolean this_present_per_node_scan_ranges = true && this.isSetPer_node_scan_ranges();
    boolean that_present_per_node_scan_ranges = true && that.isSetPer_node_scan_ranges();
    if (this_present_per_node_scan_ranges || that_present_per_node_scan_ranges) {
      if (!(this_present_per_node_scan_ranges && that_present_per_node_scan_ranges))
        return false;
      if (!this.per_node_scan_ranges.equals(that.per_node_scan_ranges))
        return false;
    }

    boolean this_present_per_exch_num_senders = true && this.isSetPer_exch_num_senders();
    boolean that_present_per_exch_num_senders = true && that.isSetPer_exch_num_senders();
    if (this_present_per_exch_num_senders || that_present_per_exch_num_senders) {
      if (!(this_present_per_exch_num_senders && that_present_per_exch_num_senders))
        return false;
      if (!this.per_exch_num_senders.equals(that.per_exch_num_senders))
        return false;
    }

    boolean this_present_sender_id = true && this.isSetSender_id();
    boolean that_present_sender_id = true && that.isSetSender_id();
    if (this_present_sender_id || that_present_sender_id) {
      if (!(this_present_sender_id && that_present_sender_id))
        return false;
      if (this.sender_id != that.sender_id)
        return false;
    }

    boolean this_present_debug_options = true && this.isSetDebug_options();
    boolean that_present_debug_options = true && that.isSetDebug_options();
    if (this_present_debug_options || that_present_debug_options) {
      if (!(this_present_debug_options && that_present_debug_options))
        return false;
      if (!this.debug_options.equals(that.debug_options))
        return false;
    }

    boolean this_present_filters_produced = true && this.isSetFilters_produced();
    boolean that_present_filters_produced = true && that.isSetFilters_produced();
    if (this_present_filters_produced || that_present_filters_produced) {
      if (!(this_present_filters_produced && that_present_filters_produced))
        return false;
      if (!this.filters_produced.equals(that.filters_produced))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fragment_idx = true;
    list.add(present_fragment_idx);
    if (present_fragment_idx)
      list.add(fragment_idx);

    boolean present_fragment_instance_id = true && (isSetFragment_instance_id());
    list.add(present_fragment_instance_id);
    if (present_fragment_instance_id)
      list.add(fragment_instance_id);

    boolean present_per_fragment_instance_idx = true;
    list.add(present_per_fragment_instance_idx);
    if (present_per_fragment_instance_idx)
      list.add(per_fragment_instance_idx);

    boolean present_per_node_scan_ranges = true && (isSetPer_node_scan_ranges());
    list.add(present_per_node_scan_ranges);
    if (present_per_node_scan_ranges)
      list.add(per_node_scan_ranges);

    boolean present_per_exch_num_senders = true && (isSetPer_exch_num_senders());
    list.add(present_per_exch_num_senders);
    if (present_per_exch_num_senders)
      list.add(per_exch_num_senders);

    boolean present_sender_id = true && (isSetSender_id());
    list.add(present_sender_id);
    if (present_sender_id)
      list.add(sender_id);

    boolean present_debug_options = true && (isSetDebug_options());
    list.add(present_debug_options);
    if (present_debug_options)
      list.add(debug_options);

    boolean present_filters_produced = true && (isSetFilters_produced());
    list.add(present_filters_produced);
    if (present_filters_produced)
      list.add(filters_produced);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlanFragmentInstanceCtx other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFragment_idx()).compareTo(other.isSetFragment_idx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_idx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_idx, other.fragment_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment_instance_id()).compareTo(other.isSetFragment_instance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, other.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPer_fragment_instance_idx()).compareTo(other.isSetPer_fragment_instance_idx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_fragment_instance_idx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_fragment_instance_idx, other.per_fragment_instance_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPer_node_scan_ranges()).compareTo(other.isSetPer_node_scan_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_node_scan_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_node_scan_ranges, other.per_node_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPer_exch_num_senders()).compareTo(other.isSetPer_exch_num_senders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_exch_num_senders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_exch_num_senders, other.per_exch_num_senders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSender_id()).compareTo(other.isSetSender_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender_id, other.sender_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_options()).compareTo(other.isSetDebug_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_options, other.debug_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilters_produced()).compareTo(other.isSetFilters_produced());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilters_produced()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filters_produced, other.filters_produced);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanFragmentInstanceCtx(");
    boolean first = true;

    sb.append("fragment_idx:");
    sb.append(this.fragment_idx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragment_instance_id:");
    if (this.fragment_instance_id == null) {
      sb.append("null");
    } else {
      sb.append(this.fragment_instance_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("per_fragment_instance_idx:");
    sb.append(this.per_fragment_instance_idx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("per_node_scan_ranges:");
    if (this.per_node_scan_ranges == null) {
      sb.append("null");
    } else {
      sb.append(this.per_node_scan_ranges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("per_exch_num_senders:");
    if (this.per_exch_num_senders == null) {
      sb.append("null");
    } else {
      sb.append(this.per_exch_num_senders);
    }
    first = false;
    if (isSetSender_id()) {
      if (!first) sb.append(", ");
      sb.append("sender_id:");
      sb.append(this.sender_id);
      first = false;
    }
    if (isSetDebug_options()) {
      if (!first) sb.append(", ");
      sb.append("debug_options:");
      if (this.debug_options == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_options);
      }
      first = false;
    }
    if (isSetFilters_produced()) {
      if (!first) sb.append(", ");
      sb.append("filters_produced:");
      if (this.filters_produced == null) {
        sb.append("null");
      } else {
        sb.append(this.filters_produced);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'fragment_idx' because it's a primitive and you chose the non-beans generator.
    if (fragment_instance_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment_instance_id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'per_fragment_instance_idx' because it's a primitive and you chose the non-beans generator.
    if (per_node_scan_ranges == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'per_node_scan_ranges' was not present! Struct: " + toString());
    }
    if (per_exch_num_senders == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'per_exch_num_senders' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
    if (debug_options != null) {
      debug_options.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentInstanceCtxStandardSchemeFactory implements SchemeFactory {
    public TPlanFragmentInstanceCtxStandardScheme getScheme() {
      return new TPlanFragmentInstanceCtxStandardScheme();
    }
  }

  private static class TPlanFragmentInstanceCtxStandardScheme extends StandardScheme<TPlanFragmentInstanceCtx> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragmentInstanceCtx struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRAGMENT_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fragment_idx = iprot.readI32();
              struct.setFragment_idxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new org.apache.impala.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragment_instance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PER_FRAGMENT_INSTANCE_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.per_fragment_instance_idx = iprot.readI32();
              struct.setPer_fragment_instance_idxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PER_NODE_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.per_node_scan_ranges = new HashMap<Integer,List<TScanRangeParams>>(2*_map8.size);
                int _key9;
                List<TScanRangeParams> _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                    _val10 = new ArrayList<TScanRangeParams>(_list12.size);
                    TScanRangeParams _elem13;
                    for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                    {
                      _elem13 = new TScanRangeParams();
                      _elem13.read(iprot);
                      _val10.add(_elem13);
                    }
                    iprot.readListEnd();
                  }
                  struct.per_node_scan_ranges.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setPer_node_scan_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PER_EXCH_NUM_SENDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
                struct.per_exch_num_senders = new HashMap<Integer,Integer>(2*_map15.size);
                int _key16;
                int _val17;
                for (int _i18 = 0; _i18 < _map15.size; ++_i18)
                {
                  _key16 = iprot.readI32();
                  _val17 = iprot.readI32();
                  struct.per_exch_num_senders.put(_key16, _val17);
                }
                iprot.readMapEnd();
              }
              struct.setPer_exch_num_sendersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SENDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sender_id = iprot.readI32();
              struct.setSender_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEBUG_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.debug_options = new TDebugOptions();
              struct.debug_options.read(iprot);
              struct.setDebug_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILTERS_PRODUCED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.filters_produced = new ArrayList<TRuntimeFilterSource>(_list19.size);
                TRuntimeFilterSource _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new TRuntimeFilterSource();
                  _elem20.read(iprot);
                  struct.filters_produced.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setFilters_producedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFragment_idx()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment_idx' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPer_fragment_instance_idx()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'per_fragment_instance_idx' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragmentInstanceCtx struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FRAGMENT_IDX_FIELD_DESC);
      oprot.writeI32(struct.fragment_idx);
      oprot.writeFieldEnd();
      if (struct.fragment_instance_id != null) {
        oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
        struct.fragment_instance_id.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PER_FRAGMENT_INSTANCE_IDX_FIELD_DESC);
      oprot.writeI32(struct.per_fragment_instance_idx);
      oprot.writeFieldEnd();
      if (struct.per_node_scan_ranges != null) {
        oprot.writeFieldBegin(PER_NODE_SCAN_RANGES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.per_node_scan_ranges.size()));
          for (Map.Entry<Integer, List<TScanRangeParams>> _iter22 : struct.per_node_scan_ranges.entrySet())
          {
            oprot.writeI32(_iter22.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter22.getValue().size()));
              for (TScanRangeParams _iter23 : _iter22.getValue())
              {
                _iter23.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.per_exch_num_senders != null) {
        oprot.writeFieldBegin(PER_EXCH_NUM_SENDERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.per_exch_num_senders.size()));
          for (Map.Entry<Integer, Integer> _iter24 : struct.per_exch_num_senders.entrySet())
          {
            oprot.writeI32(_iter24.getKey());
            oprot.writeI32(_iter24.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetSender_id()) {
        oprot.writeFieldBegin(SENDER_ID_FIELD_DESC);
        oprot.writeI32(struct.sender_id);
        oprot.writeFieldEnd();
      }
      if (struct.debug_options != null) {
        if (struct.isSetDebug_options()) {
          oprot.writeFieldBegin(DEBUG_OPTIONS_FIELD_DESC);
          struct.debug_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.filters_produced != null) {
        if (struct.isSetFilters_produced()) {
          oprot.writeFieldBegin(FILTERS_PRODUCED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filters_produced.size()));
            for (TRuntimeFilterSource _iter25 : struct.filters_produced)
            {
              _iter25.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentInstanceCtxTupleSchemeFactory implements SchemeFactory {
    public TPlanFragmentInstanceCtxTupleScheme getScheme() {
      return new TPlanFragmentInstanceCtxTupleScheme();
    }
  }

  private static class TPlanFragmentInstanceCtxTupleScheme extends TupleScheme<TPlanFragmentInstanceCtx> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentInstanceCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.fragment_idx);
      struct.fragment_instance_id.write(oprot);
      oprot.writeI32(struct.per_fragment_instance_idx);
      {
        oprot.writeI32(struct.per_node_scan_ranges.size());
        for (Map.Entry<Integer, List<TScanRangeParams>> _iter26 : struct.per_node_scan_ranges.entrySet())
        {
          oprot.writeI32(_iter26.getKey());
          {
            oprot.writeI32(_iter26.getValue().size());
            for (TScanRangeParams _iter27 : _iter26.getValue())
            {
              _iter27.write(oprot);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.per_exch_num_senders.size());
        for (Map.Entry<Integer, Integer> _iter28 : struct.per_exch_num_senders.entrySet())
        {
          oprot.writeI32(_iter28.getKey());
          oprot.writeI32(_iter28.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetSender_id()) {
        optionals.set(0);
      }
      if (struct.isSetDebug_options()) {
        optionals.set(1);
      }
      if (struct.isSetFilters_produced()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSender_id()) {
        oprot.writeI32(struct.sender_id);
      }
      if (struct.isSetDebug_options()) {
        struct.debug_options.write(oprot);
      }
      if (struct.isSetFilters_produced()) {
        {
          oprot.writeI32(struct.filters_produced.size());
          for (TRuntimeFilterSource _iter29 : struct.filters_produced)
          {
            _iter29.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentInstanceCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fragment_idx = iprot.readI32();
      struct.setFragment_idxIsSet(true);
      struct.fragment_instance_id = new org.apache.impala.thrift.TUniqueId();
      struct.fragment_instance_id.read(iprot);
      struct.setFragment_instance_idIsSet(true);
      struct.per_fragment_instance_idx = iprot.readI32();
      struct.setPer_fragment_instance_idxIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.per_node_scan_ranges = new HashMap<Integer,List<TScanRangeParams>>(2*_map30.size);
        int _key31;
        List<TScanRangeParams> _val32;
        for (int _i33 = 0; _i33 < _map30.size; ++_i33)
        {
          _key31 = iprot.readI32();
          {
            org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _val32 = new ArrayList<TScanRangeParams>(_list34.size);
            TScanRangeParams _elem35;
            for (int _i36 = 0; _i36 < _list34.size; ++_i36)
            {
              _elem35 = new TScanRangeParams();
              _elem35.read(iprot);
              _val32.add(_elem35);
            }
          }
          struct.per_node_scan_ranges.put(_key31, _val32);
        }
      }
      struct.setPer_node_scan_rangesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map37 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.per_exch_num_senders = new HashMap<Integer,Integer>(2*_map37.size);
        int _key38;
        int _val39;
        for (int _i40 = 0; _i40 < _map37.size; ++_i40)
        {
          _key38 = iprot.readI32();
          _val39 = iprot.readI32();
          struct.per_exch_num_senders.put(_key38, _val39);
        }
      }
      struct.setPer_exch_num_sendersIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.sender_id = iprot.readI32();
        struct.setSender_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.debug_options = new TDebugOptions();
        struct.debug_options.read(iprot);
        struct.setDebug_optionsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.filters_produced = new ArrayList<TRuntimeFilterSource>(_list41.size);
          TRuntimeFilterSource _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = new TRuntimeFilterSource();
            _elem42.read(iprot);
            struct.filters_produced.add(_elem42);
          }
        }
        struct.setFilters_producedIsSet(true);
      }
    }
  }

}

