/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TSessionState implements org.apache.thrift.TBase<TSessionState, TSessionState._Fields>, java.io.Serializable, Cloneable, Comparable<TSessionState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSessionState");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("session_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONNECTED_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("connected_user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DELEGATED_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("delegated_user", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NETWORK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("network_address", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField KUDU_LATEST_OBSERVED_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_latest_observed_ts", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSessionStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSessionStateTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TUniqueId session_id; // required
  private TSessionType session_type; // required
  private String database; // required
  private String connected_user; // required
  private String delegated_user; // optional
  private org.apache.impala.thrift.TNetworkAddress network_address; // required
  private long kudu_latest_observed_ts; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)3, "session_id"),
    /**
     * 
     * @see TSessionType
     */
    SESSION_TYPE((short)5, "session_type"),
    DATABASE((short)1, "database"),
    CONNECTED_USER((short)2, "connected_user"),
    DELEGATED_USER((short)6, "delegated_user"),
    NETWORK_ADDRESS((short)4, "network_address"),
    KUDU_LATEST_OBSERVED_TS((short)7, "kudu_latest_observed_ts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 3: // SESSION_ID
          return SESSION_ID;
        case 5: // SESSION_TYPE
          return SESSION_TYPE;
        case 1: // DATABASE
          return DATABASE;
        case 2: // CONNECTED_USER
          return CONNECTED_USER;
        case 6: // DELEGATED_USER
          return DELEGATED_USER;
        case 4: // NETWORK_ADDRESS
          return NETWORK_ADDRESS;
        case 7: // KUDU_LATEST_OBSERVED_TS
          return KUDU_LATEST_OBSERVED_TS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __KUDU_LATEST_OBSERVED_TS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DELEGATED_USER,_Fields.KUDU_LATEST_OBSERVED_TS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.SESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("session_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TSessionType.class)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONNECTED_USER, new org.apache.thrift.meta_data.FieldMetaData("connected_user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELEGATED_USER, new org.apache.thrift.meta_data.FieldMetaData("delegated_user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NETWORK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("network_address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.KUDU_LATEST_OBSERVED_TS, new org.apache.thrift.meta_data.FieldMetaData("kudu_latest_observed_ts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSessionState.class, metaDataMap);
  }

  public TSessionState() {
  }

  public TSessionState(
    org.apache.impala.thrift.TUniqueId session_id,
    TSessionType session_type,
    String database,
    String connected_user,
    org.apache.impala.thrift.TNetworkAddress network_address)
  {
    this();
    this.session_id = session_id;
    this.session_type = session_type;
    this.database = database;
    this.connected_user = connected_user;
    this.network_address = network_address;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSessionState(TSessionState other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSession_id()) {
      this.session_id = new org.apache.impala.thrift.TUniqueId(other.session_id);
    }
    if (other.isSetSession_type()) {
      this.session_type = other.session_type;
    }
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    if (other.isSetConnected_user()) {
      this.connected_user = other.connected_user;
    }
    if (other.isSetDelegated_user()) {
      this.delegated_user = other.delegated_user;
    }
    if (other.isSetNetwork_address()) {
      this.network_address = new org.apache.impala.thrift.TNetworkAddress(other.network_address);
    }
    this.kudu_latest_observed_ts = other.kudu_latest_observed_ts;
  }

  public TSessionState deepCopy() {
    return new TSessionState(this);
  }

  @Override
  public void clear() {
    this.session_id = null;
    this.session_type = null;
    this.database = null;
    this.connected_user = null;
    this.delegated_user = null;
    this.network_address = null;
    setKudu_latest_observed_tsIsSet(false);
    this.kudu_latest_observed_ts = 0;
  }

  public org.apache.impala.thrift.TUniqueId getSession_id() {
    return this.session_id;
  }

  public void setSession_id(org.apache.impala.thrift.TUniqueId session_id) {
    this.session_id = session_id;
  }

  public void unsetSession_id() {
    this.session_id = null;
  }

  /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSession_id() {
    return this.session_id != null;
  }

  public void setSession_idIsSet(boolean value) {
    if (!value) {
      this.session_id = null;
    }
  }

  /**
   * 
   * @see TSessionType
   */
  public TSessionType getSession_type() {
    return this.session_type;
  }

  /**
   * 
   * @see TSessionType
   */
  public void setSession_type(TSessionType session_type) {
    this.session_type = session_type;
  }

  public void unsetSession_type() {
    this.session_type = null;
  }

  /** Returns true if field session_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSession_type() {
    return this.session_type != null;
  }

  public void setSession_typeIsSet(boolean value) {
    if (!value) {
      this.session_type = null;
    }
  }

  public String getDatabase() {
    return this.database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  public String getConnected_user() {
    return this.connected_user;
  }

  public void setConnected_user(String connected_user) {
    this.connected_user = connected_user;
  }

  public void unsetConnected_user() {
    this.connected_user = null;
  }

  /** Returns true if field connected_user is set (has been assigned a value) and false otherwise */
  public boolean isSetConnected_user() {
    return this.connected_user != null;
  }

  public void setConnected_userIsSet(boolean value) {
    if (!value) {
      this.connected_user = null;
    }
  }

  public String getDelegated_user() {
    return this.delegated_user;
  }

  public void setDelegated_user(String delegated_user) {
    this.delegated_user = delegated_user;
  }

  public void unsetDelegated_user() {
    this.delegated_user = null;
  }

  /** Returns true if field delegated_user is set (has been assigned a value) and false otherwise */
  public boolean isSetDelegated_user() {
    return this.delegated_user != null;
  }

  public void setDelegated_userIsSet(boolean value) {
    if (!value) {
      this.delegated_user = null;
    }
  }

  public org.apache.impala.thrift.TNetworkAddress getNetwork_address() {
    return this.network_address;
  }

  public void setNetwork_address(org.apache.impala.thrift.TNetworkAddress network_address) {
    this.network_address = network_address;
  }

  public void unsetNetwork_address() {
    this.network_address = null;
  }

  /** Returns true if field network_address is set (has been assigned a value) and false otherwise */
  public boolean isSetNetwork_address() {
    return this.network_address != null;
  }

  public void setNetwork_addressIsSet(boolean value) {
    if (!value) {
      this.network_address = null;
    }
  }

  public long getKudu_latest_observed_ts() {
    return this.kudu_latest_observed_ts;
  }

  public void setKudu_latest_observed_ts(long kudu_latest_observed_ts) {
    this.kudu_latest_observed_ts = kudu_latest_observed_ts;
    setKudu_latest_observed_tsIsSet(true);
  }

  public void unsetKudu_latest_observed_ts() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KUDU_LATEST_OBSERVED_TS_ISSET_ID);
  }

  /** Returns true if field kudu_latest_observed_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_latest_observed_ts() {
    return EncodingUtils.testBit(__isset_bitfield, __KUDU_LATEST_OBSERVED_TS_ISSET_ID);
  }

  public void setKudu_latest_observed_tsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KUDU_LATEST_OBSERVED_TS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSession_id();
      } else {
        setSession_id((org.apache.impala.thrift.TUniqueId)value);
      }
      break;

    case SESSION_TYPE:
      if (value == null) {
        unsetSession_type();
      } else {
        setSession_type((TSessionType)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((String)value);
      }
      break;

    case CONNECTED_USER:
      if (value == null) {
        unsetConnected_user();
      } else {
        setConnected_user((String)value);
      }
      break;

    case DELEGATED_USER:
      if (value == null) {
        unsetDelegated_user();
      } else {
        setDelegated_user((String)value);
      }
      break;

    case NETWORK_ADDRESS:
      if (value == null) {
        unsetNetwork_address();
      } else {
        setNetwork_address((org.apache.impala.thrift.TNetworkAddress)value);
      }
      break;

    case KUDU_LATEST_OBSERVED_TS:
      if (value == null) {
        unsetKudu_latest_observed_ts();
      } else {
        setKudu_latest_observed_ts((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSession_id();

    case SESSION_TYPE:
      return getSession_type();

    case DATABASE:
      return getDatabase();

    case CONNECTED_USER:
      return getConnected_user();

    case DELEGATED_USER:
      return getDelegated_user();

    case NETWORK_ADDRESS:
      return getNetwork_address();

    case KUDU_LATEST_OBSERVED_TS:
      return getKudu_latest_observed_ts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSession_id();
    case SESSION_TYPE:
      return isSetSession_type();
    case DATABASE:
      return isSetDatabase();
    case CONNECTED_USER:
      return isSetConnected_user();
    case DELEGATED_USER:
      return isSetDelegated_user();
    case NETWORK_ADDRESS:
      return isSetNetwork_address();
    case KUDU_LATEST_OBSERVED_TS:
      return isSetKudu_latest_observed_ts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSessionState)
      return this.equals((TSessionState)that);
    return false;
  }

  public boolean equals(TSessionState that) {
    if (that == null)
      return false;

    boolean this_present_session_id = true && this.isSetSession_id();
    boolean that_present_session_id = true && that.isSetSession_id();
    if (this_present_session_id || that_present_session_id) {
      if (!(this_present_session_id && that_present_session_id))
        return false;
      if (!this.session_id.equals(that.session_id))
        return false;
    }

    boolean this_present_session_type = true && this.isSetSession_type();
    boolean that_present_session_type = true && that.isSetSession_type();
    if (this_present_session_type || that_present_session_type) {
      if (!(this_present_session_type && that_present_session_type))
        return false;
      if (!this.session_type.equals(that.session_type))
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_connected_user = true && this.isSetConnected_user();
    boolean that_present_connected_user = true && that.isSetConnected_user();
    if (this_present_connected_user || that_present_connected_user) {
      if (!(this_present_connected_user && that_present_connected_user))
        return false;
      if (!this.connected_user.equals(that.connected_user))
        return false;
    }

    boolean this_present_delegated_user = true && this.isSetDelegated_user();
    boolean that_present_delegated_user = true && that.isSetDelegated_user();
    if (this_present_delegated_user || that_present_delegated_user) {
      if (!(this_present_delegated_user && that_present_delegated_user))
        return false;
      if (!this.delegated_user.equals(that.delegated_user))
        return false;
    }

    boolean this_present_network_address = true && this.isSetNetwork_address();
    boolean that_present_network_address = true && that.isSetNetwork_address();
    if (this_present_network_address || that_present_network_address) {
      if (!(this_present_network_address && that_present_network_address))
        return false;
      if (!this.network_address.equals(that.network_address))
        return false;
    }

    boolean this_present_kudu_latest_observed_ts = true && this.isSetKudu_latest_observed_ts();
    boolean that_present_kudu_latest_observed_ts = true && that.isSetKudu_latest_observed_ts();
    if (this_present_kudu_latest_observed_ts || that_present_kudu_latest_observed_ts) {
      if (!(this_present_kudu_latest_observed_ts && that_present_kudu_latest_observed_ts))
        return false;
      if (this.kudu_latest_observed_ts != that.kudu_latest_observed_ts)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_session_id = true && (isSetSession_id());
    list.add(present_session_id);
    if (present_session_id)
      list.add(session_id);

    boolean present_session_type = true && (isSetSession_type());
    list.add(present_session_type);
    if (present_session_type)
      list.add(session_type.getValue());

    boolean present_database = true && (isSetDatabase());
    list.add(present_database);
    if (present_database)
      list.add(database);

    boolean present_connected_user = true && (isSetConnected_user());
    list.add(present_connected_user);
    if (present_connected_user)
      list.add(connected_user);

    boolean present_delegated_user = true && (isSetDelegated_user());
    list.add(present_delegated_user);
    if (present_delegated_user)
      list.add(delegated_user);

    boolean present_network_address = true && (isSetNetwork_address());
    list.add(present_network_address);
    if (present_network_address)
      list.add(network_address);

    boolean present_kudu_latest_observed_ts = true && (isSetKudu_latest_observed_ts());
    list.add(present_kudu_latest_observed_ts);
    if (present_kudu_latest_observed_ts)
      list.add(kudu_latest_observed_ts);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSessionState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSession_type()).compareTo(other.isSetSession_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_type, other.session_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnected_user()).compareTo(other.isSetConnected_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnected_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connected_user, other.connected_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDelegated_user()).compareTo(other.isSetDelegated_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelegated_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delegated_user, other.delegated_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetwork_address()).compareTo(other.isSetNetwork_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetwork_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.network_address, other.network_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_latest_observed_ts()).compareTo(other.isSetKudu_latest_observed_ts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_latest_observed_ts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_latest_observed_ts, other.kudu_latest_observed_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSessionState(");
    boolean first = true;

    sb.append("session_id:");
    if (this.session_id == null) {
      sb.append("null");
    } else {
      sb.append(this.session_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("session_type:");
    if (this.session_type == null) {
      sb.append("null");
    } else {
      sb.append(this.session_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("database:");
    if (this.database == null) {
      sb.append("null");
    } else {
      sb.append(this.database);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("connected_user:");
    if (this.connected_user == null) {
      sb.append("null");
    } else {
      sb.append(this.connected_user);
    }
    first = false;
    if (isSetDelegated_user()) {
      if (!first) sb.append(", ");
      sb.append("delegated_user:");
      if (this.delegated_user == null) {
        sb.append("null");
      } else {
        sb.append(this.delegated_user);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("network_address:");
    if (this.network_address == null) {
      sb.append("null");
    } else {
      sb.append(this.network_address);
    }
    first = false;
    if (isSetKudu_latest_observed_ts()) {
      if (!first) sb.append(", ");
      sb.append("kudu_latest_observed_ts:");
      sb.append(this.kudu_latest_observed_ts);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetSession_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'session_id' is unset! Struct:" + toString());
    }

    if (!isSetSession_type()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'session_type' is unset! Struct:" + toString());
    }

    if (!isSetDatabase()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'database' is unset! Struct:" + toString());
    }

    if (!isSetConnected_user()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'connected_user' is unset! Struct:" + toString());
    }

    if (!isSetNetwork_address()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'network_address' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (session_id != null) {
      session_id.validate();
    }
    if (network_address != null) {
      network_address.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSessionStateStandardSchemeFactory implements SchemeFactory {
    public TSessionStateStandardScheme getScheme() {
      return new TSessionStateStandardScheme();
    }
  }

  private static class TSessionStateStandardScheme extends StandardScheme<TSessionState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSessionState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 3: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.session_id = new org.apache.impala.thrift.TUniqueId();
              struct.session_id.read(iprot);
              struct.setSession_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.session_type = org.apache.impala.thrift.TSessionType.findByValue(iprot.readI32());
              struct.setSession_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONNECTED_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connected_user = iprot.readString();
              struct.setConnected_userIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DELEGATED_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.delegated_user = iprot.readString();
              struct.setDelegated_userIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NETWORK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.network_address = new org.apache.impala.thrift.TNetworkAddress();
              struct.network_address.read(iprot);
              struct.setNetwork_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KUDU_LATEST_OBSERVED_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.kudu_latest_observed_ts = iprot.readI64();
              struct.setKudu_latest_observed_tsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSessionState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.database != null) {
        oprot.writeFieldBegin(DATABASE_FIELD_DESC);
        oprot.writeString(struct.database);
        oprot.writeFieldEnd();
      }
      if (struct.connected_user != null) {
        oprot.writeFieldBegin(CONNECTED_USER_FIELD_DESC);
        oprot.writeString(struct.connected_user);
        oprot.writeFieldEnd();
      }
      if (struct.session_id != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        struct.session_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.network_address != null) {
        oprot.writeFieldBegin(NETWORK_ADDRESS_FIELD_DESC);
        struct.network_address.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.session_type != null) {
        oprot.writeFieldBegin(SESSION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.session_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.delegated_user != null) {
        if (struct.isSetDelegated_user()) {
          oprot.writeFieldBegin(DELEGATED_USER_FIELD_DESC);
          oprot.writeString(struct.delegated_user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetKudu_latest_observed_ts()) {
        oprot.writeFieldBegin(KUDU_LATEST_OBSERVED_TS_FIELD_DESC);
        oprot.writeI64(struct.kudu_latest_observed_ts);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSessionStateTupleSchemeFactory implements SchemeFactory {
    public TSessionStateTupleScheme getScheme() {
      return new TSessionStateTupleScheme();
    }
  }

  private static class TSessionStateTupleScheme extends TupleScheme<TSessionState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSessionState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.session_id.write(oprot);
      oprot.writeI32(struct.session_type.getValue());
      oprot.writeString(struct.database);
      oprot.writeString(struct.connected_user);
      struct.network_address.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetDelegated_user()) {
        optionals.set(0);
      }
      if (struct.isSetKudu_latest_observed_ts()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDelegated_user()) {
        oprot.writeString(struct.delegated_user);
      }
      if (struct.isSetKudu_latest_observed_ts()) {
        oprot.writeI64(struct.kudu_latest_observed_ts);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSessionState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.session_id = new org.apache.impala.thrift.TUniqueId();
      struct.session_id.read(iprot);
      struct.setSession_idIsSet(true);
      struct.session_type = org.apache.impala.thrift.TSessionType.findByValue(iprot.readI32());
      struct.setSession_typeIsSet(true);
      struct.database = iprot.readString();
      struct.setDatabaseIsSet(true);
      struct.connected_user = iprot.readString();
      struct.setConnected_userIsSet(true);
      struct.network_address = new org.apache.impala.thrift.TNetworkAddress();
      struct.network_address.read(iprot);
      struct.setNetwork_addressIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.delegated_user = iprot.readString();
        struct.setDelegated_userIsSet(true);
      }
      if (incoming.get(1)) {
        struct.kudu_latest_observed_ts = iprot.readI64();
        struct.setKudu_latest_observed_tsIsSet(true);
      }
    }
  }

}

