/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TBackendResourceProfile implements org.apache.thrift.TBase<TBackendResourceProfile, TBackendResourceProfile._Fields>, java.io.Serializable, Cloneable, Comparable<TBackendResourceProfile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBackendResourceProfile");

  private static final org.apache.thrift.protocol.TField MIN_RESERVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("min_reservation", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_RESERVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_reservation", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SPILLABLE_BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("spillable_buffer_size", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_ROW_BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_row_buffer_size", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBackendResourceProfileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBackendResourceProfileTupleSchemeFactory());
  }

  private long min_reservation; // required
  private long max_reservation; // required
  private long spillable_buffer_size; // optional
  private long max_row_buffer_size; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MIN_RESERVATION((short)1, "min_reservation"),
    MAX_RESERVATION((short)2, "max_reservation"),
    SPILLABLE_BUFFER_SIZE((short)3, "spillable_buffer_size"),
    MAX_ROW_BUFFER_SIZE((short)4, "max_row_buffer_size");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MIN_RESERVATION
          return MIN_RESERVATION;
        case 2: // MAX_RESERVATION
          return MAX_RESERVATION;
        case 3: // SPILLABLE_BUFFER_SIZE
          return SPILLABLE_BUFFER_SIZE;
        case 4: // MAX_ROW_BUFFER_SIZE
          return MAX_ROW_BUFFER_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MIN_RESERVATION_ISSET_ID = 0;
  private static final int __MAX_RESERVATION_ISSET_ID = 1;
  private static final int __SPILLABLE_BUFFER_SIZE_ISSET_ID = 2;
  private static final int __MAX_ROW_BUFFER_SIZE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SPILLABLE_BUFFER_SIZE,_Fields.MAX_ROW_BUFFER_SIZE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MIN_RESERVATION, new org.apache.thrift.meta_data.FieldMetaData("min_reservation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_RESERVATION, new org.apache.thrift.meta_data.FieldMetaData("max_reservation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILLABLE_BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("spillable_buffer_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_ROW_BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("max_row_buffer_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBackendResourceProfile.class, metaDataMap);
  }

  public TBackendResourceProfile() {
  }

  public TBackendResourceProfile(
    long min_reservation,
    long max_reservation)
  {
    this();
    this.min_reservation = min_reservation;
    setMin_reservationIsSet(true);
    this.max_reservation = max_reservation;
    setMax_reservationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBackendResourceProfile(TBackendResourceProfile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.min_reservation = other.min_reservation;
    this.max_reservation = other.max_reservation;
    this.spillable_buffer_size = other.spillable_buffer_size;
    this.max_row_buffer_size = other.max_row_buffer_size;
  }

  public TBackendResourceProfile deepCopy() {
    return new TBackendResourceProfile(this);
  }

  @Override
  public void clear() {
    setMin_reservationIsSet(false);
    this.min_reservation = 0;
    setMax_reservationIsSet(false);
    this.max_reservation = 0;
    setSpillable_buffer_sizeIsSet(false);
    this.spillable_buffer_size = 0;
    setMax_row_buffer_sizeIsSet(false);
    this.max_row_buffer_size = 0;
  }

  public long getMin_reservation() {
    return this.min_reservation;
  }

  public void setMin_reservation(long min_reservation) {
    this.min_reservation = min_reservation;
    setMin_reservationIsSet(true);
  }

  public void unsetMin_reservation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_RESERVATION_ISSET_ID);
  }

  /** Returns true if field min_reservation is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_reservation() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_RESERVATION_ISSET_ID);
  }

  public void setMin_reservationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_RESERVATION_ISSET_ID, value);
  }

  public long getMax_reservation() {
    return this.max_reservation;
  }

  public void setMax_reservation(long max_reservation) {
    this.max_reservation = max_reservation;
    setMax_reservationIsSet(true);
  }

  public void unsetMax_reservation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_RESERVATION_ISSET_ID);
  }

  /** Returns true if field max_reservation is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_reservation() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_RESERVATION_ISSET_ID);
  }

  public void setMax_reservationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_RESERVATION_ISSET_ID, value);
  }

  public long getSpillable_buffer_size() {
    return this.spillable_buffer_size;
  }

  public void setSpillable_buffer_size(long spillable_buffer_size) {
    this.spillable_buffer_size = spillable_buffer_size;
    setSpillable_buffer_sizeIsSet(true);
  }

  public void unsetSpillable_buffer_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  /** Returns true if field spillable_buffer_size is set (has been assigned a value) and false otherwise */
  public boolean isSetSpillable_buffer_size() {
    return EncodingUtils.testBit(__isset_bitfield, __SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  public void setSpillable_buffer_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPILLABLE_BUFFER_SIZE_ISSET_ID, value);
  }

  public long getMax_row_buffer_size() {
    return this.max_row_buffer_size;
  }

  public void setMax_row_buffer_size(long max_row_buffer_size) {
    this.max_row_buffer_size = max_row_buffer_size;
    setMax_row_buffer_sizeIsSet(true);
  }

  public void unsetMax_row_buffer_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ROW_BUFFER_SIZE_ISSET_ID);
  }

  /** Returns true if field max_row_buffer_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_row_buffer_size() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ROW_BUFFER_SIZE_ISSET_ID);
  }

  public void setMax_row_buffer_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ROW_BUFFER_SIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MIN_RESERVATION:
      if (value == null) {
        unsetMin_reservation();
      } else {
        setMin_reservation((Long)value);
      }
      break;

    case MAX_RESERVATION:
      if (value == null) {
        unsetMax_reservation();
      } else {
        setMax_reservation((Long)value);
      }
      break;

    case SPILLABLE_BUFFER_SIZE:
      if (value == null) {
        unsetSpillable_buffer_size();
      } else {
        setSpillable_buffer_size((Long)value);
      }
      break;

    case MAX_ROW_BUFFER_SIZE:
      if (value == null) {
        unsetMax_row_buffer_size();
      } else {
        setMax_row_buffer_size((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MIN_RESERVATION:
      return getMin_reservation();

    case MAX_RESERVATION:
      return getMax_reservation();

    case SPILLABLE_BUFFER_SIZE:
      return getSpillable_buffer_size();

    case MAX_ROW_BUFFER_SIZE:
      return getMax_row_buffer_size();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MIN_RESERVATION:
      return isSetMin_reservation();
    case MAX_RESERVATION:
      return isSetMax_reservation();
    case SPILLABLE_BUFFER_SIZE:
      return isSetSpillable_buffer_size();
    case MAX_ROW_BUFFER_SIZE:
      return isSetMax_row_buffer_size();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBackendResourceProfile)
      return this.equals((TBackendResourceProfile)that);
    return false;
  }

  public boolean equals(TBackendResourceProfile that) {
    if (that == null)
      return false;

    boolean this_present_min_reservation = true;
    boolean that_present_min_reservation = true;
    if (this_present_min_reservation || that_present_min_reservation) {
      if (!(this_present_min_reservation && that_present_min_reservation))
        return false;
      if (this.min_reservation != that.min_reservation)
        return false;
    }

    boolean this_present_max_reservation = true;
    boolean that_present_max_reservation = true;
    if (this_present_max_reservation || that_present_max_reservation) {
      if (!(this_present_max_reservation && that_present_max_reservation))
        return false;
      if (this.max_reservation != that.max_reservation)
        return false;
    }

    boolean this_present_spillable_buffer_size = true && this.isSetSpillable_buffer_size();
    boolean that_present_spillable_buffer_size = true && that.isSetSpillable_buffer_size();
    if (this_present_spillable_buffer_size || that_present_spillable_buffer_size) {
      if (!(this_present_spillable_buffer_size && that_present_spillable_buffer_size))
        return false;
      if (this.spillable_buffer_size != that.spillable_buffer_size)
        return false;
    }

    boolean this_present_max_row_buffer_size = true && this.isSetMax_row_buffer_size();
    boolean that_present_max_row_buffer_size = true && that.isSetMax_row_buffer_size();
    if (this_present_max_row_buffer_size || that_present_max_row_buffer_size) {
      if (!(this_present_max_row_buffer_size && that_present_max_row_buffer_size))
        return false;
      if (this.max_row_buffer_size != that.max_row_buffer_size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_min_reservation = true;
    list.add(present_min_reservation);
    if (present_min_reservation)
      list.add(min_reservation);

    boolean present_max_reservation = true;
    list.add(present_max_reservation);
    if (present_max_reservation)
      list.add(max_reservation);

    boolean present_spillable_buffer_size = true && (isSetSpillable_buffer_size());
    list.add(present_spillable_buffer_size);
    if (present_spillable_buffer_size)
      list.add(spillable_buffer_size);

    boolean present_max_row_buffer_size = true && (isSetMax_row_buffer_size());
    list.add(present_max_row_buffer_size);
    if (present_max_row_buffer_size)
      list.add(max_row_buffer_size);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBackendResourceProfile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMin_reservation()).compareTo(other.isSetMin_reservation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_reservation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_reservation, other.min_reservation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_reservation()).compareTo(other.isSetMax_reservation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_reservation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_reservation, other.max_reservation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpillable_buffer_size()).compareTo(other.isSetSpillable_buffer_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpillable_buffer_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spillable_buffer_size, other.spillable_buffer_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_row_buffer_size()).compareTo(other.isSetMax_row_buffer_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_row_buffer_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_row_buffer_size, other.max_row_buffer_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBackendResourceProfile(");
    boolean first = true;

    sb.append("min_reservation:");
    sb.append(this.min_reservation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_reservation:");
    sb.append(this.max_reservation);
    first = false;
    if (isSetSpillable_buffer_size()) {
      if (!first) sb.append(", ");
      sb.append("spillable_buffer_size:");
      sb.append(this.spillable_buffer_size);
      first = false;
    }
    if (isSetMax_row_buffer_size()) {
      if (!first) sb.append(", ");
      sb.append("max_row_buffer_size:");
      sb.append(this.max_row_buffer_size);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetMin_reservation()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'min_reservation' is unset! Struct:" + toString());
    }

    if (!isSetMax_reservation()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_reservation' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBackendResourceProfileStandardSchemeFactory implements SchemeFactory {
    public TBackendResourceProfileStandardScheme getScheme() {
      return new TBackendResourceProfileStandardScheme();
    }
  }

  private static class TBackendResourceProfileStandardScheme extends StandardScheme<TBackendResourceProfile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBackendResourceProfile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MIN_RESERVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_reservation = iprot.readI64();
              struct.setMin_reservationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_RESERVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_reservation = iprot.readI64();
              struct.setMax_reservationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPILLABLE_BUFFER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spillable_buffer_size = iprot.readI64();
              struct.setSpillable_buffer_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_ROW_BUFFER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_row_buffer_size = iprot.readI64();
              struct.setMax_row_buffer_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBackendResourceProfile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MIN_RESERVATION_FIELD_DESC);
      oprot.writeI64(struct.min_reservation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RESERVATION_FIELD_DESC);
      oprot.writeI64(struct.max_reservation);
      oprot.writeFieldEnd();
      if (struct.isSetSpillable_buffer_size()) {
        oprot.writeFieldBegin(SPILLABLE_BUFFER_SIZE_FIELD_DESC);
        oprot.writeI64(struct.spillable_buffer_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_row_buffer_size()) {
        oprot.writeFieldBegin(MAX_ROW_BUFFER_SIZE_FIELD_DESC);
        oprot.writeI64(struct.max_row_buffer_size);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBackendResourceProfileTupleSchemeFactory implements SchemeFactory {
    public TBackendResourceProfileTupleScheme getScheme() {
      return new TBackendResourceProfileTupleScheme();
    }
  }

  private static class TBackendResourceProfileTupleScheme extends TupleScheme<TBackendResourceProfile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBackendResourceProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.min_reservation);
      oprot.writeI64(struct.max_reservation);
      BitSet optionals = new BitSet();
      if (struct.isSetSpillable_buffer_size()) {
        optionals.set(0);
      }
      if (struct.isSetMax_row_buffer_size()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSpillable_buffer_size()) {
        oprot.writeI64(struct.spillable_buffer_size);
      }
      if (struct.isSetMax_row_buffer_size()) {
        oprot.writeI64(struct.max_row_buffer_size);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBackendResourceProfile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.min_reservation = iprot.readI64();
      struct.setMin_reservationIsSet(true);
      struct.max_reservation = iprot.readI64();
      struct.setMax_reservationIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.spillable_buffer_size = iprot.readI64();
        struct.setSpillable_buffer_sizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.max_row_buffer_size = iprot.readI64();
        struct.setMax_row_buffer_sizeIsSet(true);
      }
    }
  }

}

