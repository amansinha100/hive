/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TRuntimeFilterTargetDesc implements org.apache.thrift.TBase<TRuntimeFilterTargetDesc, TRuntimeFilterTargetDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TRuntimeFilterTargetDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeFilterTargetDesc");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("node_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("target_expr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IS_BOUND_BY_PARTITION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("is_bound_by_partition_columns", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField TARGET_EXPR_SLOTIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("target_expr_slotids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IS_LOCAL_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("is_local_target", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField KUDU_COL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_col_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField KUDU_COL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_col_type", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRuntimeFilterTargetDescStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRuntimeFilterTargetDescTupleSchemeFactory());
  }

  public int node_id; // required
  public org.apache.impala.thrift.TExpr target_expr; // required
  public boolean is_bound_by_partition_columns; // required
  public List<Integer> target_expr_slotids; // required
  public boolean is_local_target; // required
  public String kudu_col_name; // optional
  public org.apache.impala.thrift.TColumnType kudu_col_type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "node_id"),
    TARGET_EXPR((short)2, "target_expr"),
    IS_BOUND_BY_PARTITION_COLUMNS((short)3, "is_bound_by_partition_columns"),
    TARGET_EXPR_SLOTIDS((short)4, "target_expr_slotids"),
    IS_LOCAL_TARGET((short)5, "is_local_target"),
    KUDU_COL_NAME((short)6, "kudu_col_name"),
    KUDU_COL_TYPE((short)7, "kudu_col_type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // TARGET_EXPR
          return TARGET_EXPR;
        case 3: // IS_BOUND_BY_PARTITION_COLUMNS
          return IS_BOUND_BY_PARTITION_COLUMNS;
        case 4: // TARGET_EXPR_SLOTIDS
          return TARGET_EXPR_SLOTIDS;
        case 5: // IS_LOCAL_TARGET
          return IS_LOCAL_TARGET;
        case 6: // KUDU_COL_NAME
          return KUDU_COL_NAME;
        case 7: // KUDU_COL_TYPE
          return KUDU_COL_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODE_ID_ISSET_ID = 0;
  private static final int __IS_BOUND_BY_PARTITION_COLUMNS_ISSET_ID = 1;
  private static final int __IS_LOCAL_TARGET_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.KUDU_COL_NAME,_Fields.KUDU_COL_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("node_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.TARGET_EXPR, new org.apache.thrift.meta_data.FieldMetaData("target_expr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class)));
    tmpMap.put(_Fields.IS_BOUND_BY_PARTITION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("is_bound_by_partition_columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TARGET_EXPR_SLOTIDS, new org.apache.thrift.meta_data.FieldMetaData("target_expr_slotids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.IS_LOCAL_TARGET, new org.apache.thrift.meta_data.FieldMetaData("is_local_target", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KUDU_COL_NAME, new org.apache.thrift.meta_data.FieldMetaData("kudu_col_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KUDU_COL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("kudu_col_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumnType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeFilterTargetDesc.class, metaDataMap);
  }

  public TRuntimeFilterTargetDesc() {
  }

  public TRuntimeFilterTargetDesc(
    int node_id,
    org.apache.impala.thrift.TExpr target_expr,
    boolean is_bound_by_partition_columns,
    List<Integer> target_expr_slotids,
    boolean is_local_target)
  {
    this();
    this.node_id = node_id;
    setNode_idIsSet(true);
    this.target_expr = target_expr;
    this.is_bound_by_partition_columns = is_bound_by_partition_columns;
    setIs_bound_by_partition_columnsIsSet(true);
    this.target_expr_slotids = target_expr_slotids;
    this.is_local_target = is_local_target;
    setIs_local_targetIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeFilterTargetDesc(TRuntimeFilterTargetDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    this.node_id = other.node_id;
    if (other.isSetTarget_expr()) {
      this.target_expr = new org.apache.impala.thrift.TExpr(other.target_expr);
    }
    this.is_bound_by_partition_columns = other.is_bound_by_partition_columns;
    if (other.isSetTarget_expr_slotids()) {
      List<Integer> __this__target_expr_slotids = new ArrayList<Integer>(other.target_expr_slotids.size());
      for (Integer other_element : other.target_expr_slotids) {
        __this__target_expr_slotids.add(other_element);
      }
      this.target_expr_slotids = __this__target_expr_slotids;
    }
    this.is_local_target = other.is_local_target;
    if (other.isSetKudu_col_name()) {
      this.kudu_col_name = other.kudu_col_name;
    }
    if (other.isSetKudu_col_type()) {
      this.kudu_col_type = new org.apache.impala.thrift.TColumnType(other.kudu_col_type);
    }
  }

  public TRuntimeFilterTargetDesc deepCopy() {
    return new TRuntimeFilterTargetDesc(this);
  }

  @Override
  public void clear() {
    setNode_idIsSet(false);
    this.node_id = 0;
    this.target_expr = null;
    setIs_bound_by_partition_columnsIsSet(false);
    this.is_bound_by_partition_columns = false;
    this.target_expr_slotids = null;
    setIs_local_targetIsSet(false);
    this.is_local_target = false;
    this.kudu_col_name = null;
    this.kudu_col_type = null;
  }

  public int getNode_id() {
    return this.node_id;
  }

  public TRuntimeFilterTargetDesc setNode_id(int node_id) {
    this.node_id = node_id;
    setNode_idIsSet(true);
    return this;
  }

  public void unsetNode_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  /** Returns true if field node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_id() {
    return EncodingUtils.testBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  public void setNode_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODE_ID_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TExpr getTarget_expr() {
    return this.target_expr;
  }

  public TRuntimeFilterTargetDesc setTarget_expr(org.apache.impala.thrift.TExpr target_expr) {
    this.target_expr = target_expr;
    return this;
  }

  public void unsetTarget_expr() {
    this.target_expr = null;
  }

  /** Returns true if field target_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_expr() {
    return this.target_expr != null;
  }

  public void setTarget_exprIsSet(boolean value) {
    if (!value) {
      this.target_expr = null;
    }
  }

  public boolean isIs_bound_by_partition_columns() {
    return this.is_bound_by_partition_columns;
  }

  public TRuntimeFilterTargetDesc setIs_bound_by_partition_columns(boolean is_bound_by_partition_columns) {
    this.is_bound_by_partition_columns = is_bound_by_partition_columns;
    setIs_bound_by_partition_columnsIsSet(true);
    return this;
  }

  public void unsetIs_bound_by_partition_columns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_BOUND_BY_PARTITION_COLUMNS_ISSET_ID);
  }

  /** Returns true if field is_bound_by_partition_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_bound_by_partition_columns() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_BOUND_BY_PARTITION_COLUMNS_ISSET_ID);
  }

  public void setIs_bound_by_partition_columnsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_BOUND_BY_PARTITION_COLUMNS_ISSET_ID, value);
  }

  public int getTarget_expr_slotidsSize() {
    return (this.target_expr_slotids == null) ? 0 : this.target_expr_slotids.size();
  }

  public java.util.Iterator<Integer> getTarget_expr_slotidsIterator() {
    return (this.target_expr_slotids == null) ? null : this.target_expr_slotids.iterator();
  }

  public void addToTarget_expr_slotids(int elem) {
    if (this.target_expr_slotids == null) {
      this.target_expr_slotids = new ArrayList<Integer>();
    }
    this.target_expr_slotids.add(elem);
  }

  public List<Integer> getTarget_expr_slotids() {
    return this.target_expr_slotids;
  }

  public TRuntimeFilterTargetDesc setTarget_expr_slotids(List<Integer> target_expr_slotids) {
    this.target_expr_slotids = target_expr_slotids;
    return this;
  }

  public void unsetTarget_expr_slotids() {
    this.target_expr_slotids = null;
  }

  /** Returns true if field target_expr_slotids is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_expr_slotids() {
    return this.target_expr_slotids != null;
  }

  public void setTarget_expr_slotidsIsSet(boolean value) {
    if (!value) {
      this.target_expr_slotids = null;
    }
  }

  public boolean isIs_local_target() {
    return this.is_local_target;
  }

  public TRuntimeFilterTargetDesc setIs_local_target(boolean is_local_target) {
    this.is_local_target = is_local_target;
    setIs_local_targetIsSet(true);
    return this;
  }

  public void unsetIs_local_target() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_LOCAL_TARGET_ISSET_ID);
  }

  /** Returns true if field is_local_target is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_local_target() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_LOCAL_TARGET_ISSET_ID);
  }

  public void setIs_local_targetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_LOCAL_TARGET_ISSET_ID, value);
  }

  public String getKudu_col_name() {
    return this.kudu_col_name;
  }

  public TRuntimeFilterTargetDesc setKudu_col_name(String kudu_col_name) {
    this.kudu_col_name = kudu_col_name;
    return this;
  }

  public void unsetKudu_col_name() {
    this.kudu_col_name = null;
  }

  /** Returns true if field kudu_col_name is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_col_name() {
    return this.kudu_col_name != null;
  }

  public void setKudu_col_nameIsSet(boolean value) {
    if (!value) {
      this.kudu_col_name = null;
    }
  }

  public org.apache.impala.thrift.TColumnType getKudu_col_type() {
    return this.kudu_col_type;
  }

  public TRuntimeFilterTargetDesc setKudu_col_type(org.apache.impala.thrift.TColumnType kudu_col_type) {
    this.kudu_col_type = kudu_col_type;
    return this;
  }

  public void unsetKudu_col_type() {
    this.kudu_col_type = null;
  }

  /** Returns true if field kudu_col_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_col_type() {
    return this.kudu_col_type != null;
  }

  public void setKudu_col_typeIsSet(boolean value) {
    if (!value) {
      this.kudu_col_type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNode_id();
      } else {
        setNode_id((Integer)value);
      }
      break;

    case TARGET_EXPR:
      if (value == null) {
        unsetTarget_expr();
      } else {
        setTarget_expr((org.apache.impala.thrift.TExpr)value);
      }
      break;

    case IS_BOUND_BY_PARTITION_COLUMNS:
      if (value == null) {
        unsetIs_bound_by_partition_columns();
      } else {
        setIs_bound_by_partition_columns((Boolean)value);
      }
      break;

    case TARGET_EXPR_SLOTIDS:
      if (value == null) {
        unsetTarget_expr_slotids();
      } else {
        setTarget_expr_slotids((List<Integer>)value);
      }
      break;

    case IS_LOCAL_TARGET:
      if (value == null) {
        unsetIs_local_target();
      } else {
        setIs_local_target((Boolean)value);
      }
      break;

    case KUDU_COL_NAME:
      if (value == null) {
        unsetKudu_col_name();
      } else {
        setKudu_col_name((String)value);
      }
      break;

    case KUDU_COL_TYPE:
      if (value == null) {
        unsetKudu_col_type();
      } else {
        setKudu_col_type((org.apache.impala.thrift.TColumnType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNode_id();

    case TARGET_EXPR:
      return getTarget_expr();

    case IS_BOUND_BY_PARTITION_COLUMNS:
      return isIs_bound_by_partition_columns();

    case TARGET_EXPR_SLOTIDS:
      return getTarget_expr_slotids();

    case IS_LOCAL_TARGET:
      return isIs_local_target();

    case KUDU_COL_NAME:
      return getKudu_col_name();

    case KUDU_COL_TYPE:
      return getKudu_col_type();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNode_id();
    case TARGET_EXPR:
      return isSetTarget_expr();
    case IS_BOUND_BY_PARTITION_COLUMNS:
      return isSetIs_bound_by_partition_columns();
    case TARGET_EXPR_SLOTIDS:
      return isSetTarget_expr_slotids();
    case IS_LOCAL_TARGET:
      return isSetIs_local_target();
    case KUDU_COL_NAME:
      return isSetKudu_col_name();
    case KUDU_COL_TYPE:
      return isSetKudu_col_type();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRuntimeFilterTargetDesc)
      return this.equals((TRuntimeFilterTargetDesc)that);
    return false;
  }

  public boolean equals(TRuntimeFilterTargetDesc that) {
    if (that == null)
      return false;

    boolean this_present_node_id = true;
    boolean that_present_node_id = true;
    if (this_present_node_id || that_present_node_id) {
      if (!(this_present_node_id && that_present_node_id))
        return false;
      if (this.node_id != that.node_id)
        return false;
    }

    boolean this_present_target_expr = true && this.isSetTarget_expr();
    boolean that_present_target_expr = true && that.isSetTarget_expr();
    if (this_present_target_expr || that_present_target_expr) {
      if (!(this_present_target_expr && that_present_target_expr))
        return false;
      if (!this.target_expr.equals(that.target_expr))
        return false;
    }

    boolean this_present_is_bound_by_partition_columns = true;
    boolean that_present_is_bound_by_partition_columns = true;
    if (this_present_is_bound_by_partition_columns || that_present_is_bound_by_partition_columns) {
      if (!(this_present_is_bound_by_partition_columns && that_present_is_bound_by_partition_columns))
        return false;
      if (this.is_bound_by_partition_columns != that.is_bound_by_partition_columns)
        return false;
    }

    boolean this_present_target_expr_slotids = true && this.isSetTarget_expr_slotids();
    boolean that_present_target_expr_slotids = true && that.isSetTarget_expr_slotids();
    if (this_present_target_expr_slotids || that_present_target_expr_slotids) {
      if (!(this_present_target_expr_slotids && that_present_target_expr_slotids))
        return false;
      if (!this.target_expr_slotids.equals(that.target_expr_slotids))
        return false;
    }

    boolean this_present_is_local_target = true;
    boolean that_present_is_local_target = true;
    if (this_present_is_local_target || that_present_is_local_target) {
      if (!(this_present_is_local_target && that_present_is_local_target))
        return false;
      if (this.is_local_target != that.is_local_target)
        return false;
    }

    boolean this_present_kudu_col_name = true && this.isSetKudu_col_name();
    boolean that_present_kudu_col_name = true && that.isSetKudu_col_name();
    if (this_present_kudu_col_name || that_present_kudu_col_name) {
      if (!(this_present_kudu_col_name && that_present_kudu_col_name))
        return false;
      if (!this.kudu_col_name.equals(that.kudu_col_name))
        return false;
    }

    boolean this_present_kudu_col_type = true && this.isSetKudu_col_type();
    boolean that_present_kudu_col_type = true && that.isSetKudu_col_type();
    if (this_present_kudu_col_type || that_present_kudu_col_type) {
      if (!(this_present_kudu_col_type && that_present_kudu_col_type))
        return false;
      if (!this.kudu_col_type.equals(that.kudu_col_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_node_id = true;
    list.add(present_node_id);
    if (present_node_id)
      list.add(node_id);

    boolean present_target_expr = true && (isSetTarget_expr());
    list.add(present_target_expr);
    if (present_target_expr)
      list.add(target_expr);

    boolean present_is_bound_by_partition_columns = true;
    list.add(present_is_bound_by_partition_columns);
    if (present_is_bound_by_partition_columns)
      list.add(is_bound_by_partition_columns);

    boolean present_target_expr_slotids = true && (isSetTarget_expr_slotids());
    list.add(present_target_expr_slotids);
    if (present_target_expr_slotids)
      list.add(target_expr_slotids);

    boolean present_is_local_target = true;
    list.add(present_is_local_target);
    if (present_is_local_target)
      list.add(is_local_target);

    boolean present_kudu_col_name = true && (isSetKudu_col_name());
    list.add(present_kudu_col_name);
    if (present_kudu_col_name)
      list.add(kudu_col_name);

    boolean present_kudu_col_type = true && (isSetKudu_col_type());
    list.add(present_kudu_col_type);
    if (present_kudu_col_type)
      list.add(kudu_col_type);

    return list.hashCode();
  }

  @Override
  public int compareTo(TRuntimeFilterTargetDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNode_id()).compareTo(other.isSetNode_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_id, other.node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget_expr()).compareTo(other.isSetTarget_expr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_expr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_expr, other.target_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_bound_by_partition_columns()).compareTo(other.isSetIs_bound_by_partition_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_bound_by_partition_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_bound_by_partition_columns, other.is_bound_by_partition_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget_expr_slotids()).compareTo(other.isSetTarget_expr_slotids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_expr_slotids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_expr_slotids, other.target_expr_slotids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_local_target()).compareTo(other.isSetIs_local_target());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_local_target()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_local_target, other.is_local_target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_col_name()).compareTo(other.isSetKudu_col_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_col_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_col_name, other.kudu_col_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_col_type()).compareTo(other.isSetKudu_col_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_col_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_col_type, other.kudu_col_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRuntimeFilterTargetDesc(");
    boolean first = true;

    sb.append("node_id:");
    sb.append(this.node_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("target_expr:");
    if (this.target_expr == null) {
      sb.append("null");
    } else {
      sb.append(this.target_expr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_bound_by_partition_columns:");
    sb.append(this.is_bound_by_partition_columns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("target_expr_slotids:");
    if (this.target_expr_slotids == null) {
      sb.append("null");
    } else {
      sb.append(this.target_expr_slotids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_local_target:");
    sb.append(this.is_local_target);
    first = false;
    if (isSetKudu_col_name()) {
      if (!first) sb.append(", ");
      sb.append("kudu_col_name:");
      if (this.kudu_col_name == null) {
        sb.append("null");
      } else {
        sb.append(this.kudu_col_name);
      }
      first = false;
    }
    if (isSetKudu_col_type()) {
      if (!first) sb.append(", ");
      sb.append("kudu_col_type:");
      if (this.kudu_col_type == null) {
        sb.append("null");
      } else {
        sb.append(this.kudu_col_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (target_expr == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'target_expr' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_bound_by_partition_columns' because it's a primitive and you chose the non-beans generator.
    if (target_expr_slotids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'target_expr_slotids' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_local_target' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (target_expr != null) {
      target_expr.validate();
    }
    if (kudu_col_type != null) {
      kudu_col_type.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeFilterTargetDescStandardSchemeFactory implements SchemeFactory {
    public TRuntimeFilterTargetDescStandardScheme getScheme() {
      return new TRuntimeFilterTargetDescStandardScheme();
    }
  }

  private static class TRuntimeFilterTargetDescStandardScheme extends StandardScheme<TRuntimeFilterTargetDesc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeFilterTargetDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_id = iprot.readI32();
              struct.setNode_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.target_expr = new org.apache.impala.thrift.TExpr();
              struct.target_expr.read(iprot);
              struct.setTarget_exprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_BOUND_BY_PARTITION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_bound_by_partition_columns = iprot.readBool();
              struct.setIs_bound_by_partition_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TARGET_EXPR_SLOTIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.target_expr_slotids = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.target_expr_slotids.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTarget_expr_slotidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_LOCAL_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_local_target = iprot.readBool();
              struct.setIs_local_targetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KUDU_COL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kudu_col_name = iprot.readString();
              struct.setKudu_col_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KUDU_COL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.kudu_col_type = new org.apache.impala.thrift.TColumnType();
              struct.kudu_col_type.read(iprot);
              struct.setKudu_col_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIs_bound_by_partition_columns()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_bound_by_partition_columns' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIs_local_target()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_local_target' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeFilterTargetDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.node_id);
      oprot.writeFieldEnd();
      if (struct.target_expr != null) {
        oprot.writeFieldBegin(TARGET_EXPR_FIELD_DESC);
        struct.target_expr.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_BOUND_BY_PARTITION_COLUMNS_FIELD_DESC);
      oprot.writeBool(struct.is_bound_by_partition_columns);
      oprot.writeFieldEnd();
      if (struct.target_expr_slotids != null) {
        oprot.writeFieldBegin(TARGET_EXPR_SLOTIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.target_expr_slotids.size()));
          for (int _iter3 : struct.target_expr_slotids)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_LOCAL_TARGET_FIELD_DESC);
      oprot.writeBool(struct.is_local_target);
      oprot.writeFieldEnd();
      if (struct.kudu_col_name != null) {
        if (struct.isSetKudu_col_name()) {
          oprot.writeFieldBegin(KUDU_COL_NAME_FIELD_DESC);
          oprot.writeString(struct.kudu_col_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kudu_col_type != null) {
        if (struct.isSetKudu_col_type()) {
          oprot.writeFieldBegin(KUDU_COL_TYPE_FIELD_DESC);
          struct.kudu_col_type.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeFilterTargetDescTupleSchemeFactory implements SchemeFactory {
    public TRuntimeFilterTargetDescTupleScheme getScheme() {
      return new TRuntimeFilterTargetDescTupleScheme();
    }
  }

  private static class TRuntimeFilterTargetDescTupleScheme extends TupleScheme<TRuntimeFilterTargetDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterTargetDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.target_expr.write(oprot);
      oprot.writeBool(struct.is_bound_by_partition_columns);
      {
        oprot.writeI32(struct.target_expr_slotids.size());
        for (int _iter4 : struct.target_expr_slotids)
        {
          oprot.writeI32(_iter4);
        }
      }
      oprot.writeBool(struct.is_local_target);
      BitSet optionals = new BitSet();
      if (struct.isSetNode_id()) {
        optionals.set(0);
      }
      if (struct.isSetKudu_col_name()) {
        optionals.set(1);
      }
      if (struct.isSetKudu_col_type()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNode_id()) {
        oprot.writeI32(struct.node_id);
      }
      if (struct.isSetKudu_col_name()) {
        oprot.writeString(struct.kudu_col_name);
      }
      if (struct.isSetKudu_col_type()) {
        struct.kudu_col_type.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterTargetDesc struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.target_expr = new org.apache.impala.thrift.TExpr();
      struct.target_expr.read(iprot);
      struct.setTarget_exprIsSet(true);
      struct.is_bound_by_partition_columns = iprot.readBool();
      struct.setIs_bound_by_partition_columnsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.target_expr_slotids = new ArrayList<Integer>(_list5.size);
        int _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readI32();
          struct.target_expr_slotids.add(_elem6);
        }
      }
      struct.setTarget_expr_slotidsIsSet(true);
      struct.is_local_target = iprot.readBool();
      struct.setIs_local_targetIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.node_id = iprot.readI32();
        struct.setNode_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.kudu_col_name = iprot.readString();
        struct.setKudu_col_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.kudu_col_type = new org.apache.impala.thrift.TColumnType();
        struct.kudu_col_type.read(iprot);
        struct.setKudu_col_typeIsSet(true);
      }
    }
  }

}

