/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TTableInfoSelector implements org.apache.thrift.TBase<TTableInfoSelector, TTableInfoSelector._Fields>, java.io.Serializable, Cloneable, Comparable<TTableInfoSelector> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableInfoSelector");

  private static final org.apache.thrift.protocol.TField WANT_HMS_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("want_hms_table", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_ids", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField WANT_PARTITION_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("want_partition_names", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField WANT_PARTITION_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("want_partition_metadata", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField WANT_PARTITION_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("want_partition_files", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField WANT_STATS_FOR_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("want_stats_for_column_names", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField WANT_PARTITION_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("want_partition_stats", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTableInfoSelectorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTableInfoSelectorTupleSchemeFactory());
  }

  private boolean want_hms_table; // required
  private List<Long> partition_ids; // optional
  private boolean want_partition_names; // required
  private boolean want_partition_metadata; // required
  private boolean want_partition_files; // required
  private List<String> want_stats_for_column_names; // optional
  private boolean want_partition_stats; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WANT_HMS_TABLE((short)1, "want_hms_table"),
    PARTITION_IDS((short)2, "partition_ids"),
    WANT_PARTITION_NAMES((short)3, "want_partition_names"),
    WANT_PARTITION_METADATA((short)4, "want_partition_metadata"),
    WANT_PARTITION_FILES((short)5, "want_partition_files"),
    WANT_STATS_FOR_COLUMN_NAMES((short)6, "want_stats_for_column_names"),
    WANT_PARTITION_STATS((short)7, "want_partition_stats");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WANT_HMS_TABLE
          return WANT_HMS_TABLE;
        case 2: // PARTITION_IDS
          return PARTITION_IDS;
        case 3: // WANT_PARTITION_NAMES
          return WANT_PARTITION_NAMES;
        case 4: // WANT_PARTITION_METADATA
          return WANT_PARTITION_METADATA;
        case 5: // WANT_PARTITION_FILES
          return WANT_PARTITION_FILES;
        case 6: // WANT_STATS_FOR_COLUMN_NAMES
          return WANT_STATS_FOR_COLUMN_NAMES;
        case 7: // WANT_PARTITION_STATS
          return WANT_PARTITION_STATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WANT_HMS_TABLE_ISSET_ID = 0;
  private static final int __WANT_PARTITION_NAMES_ISSET_ID = 1;
  private static final int __WANT_PARTITION_METADATA_ISSET_ID = 2;
  private static final int __WANT_PARTITION_FILES_ISSET_ID = 3;
  private static final int __WANT_PARTITION_STATS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITION_IDS,_Fields.WANT_STATS_FOR_COLUMN_NAMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WANT_HMS_TABLE, new org.apache.thrift.meta_data.FieldMetaData("want_hms_table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARTITION_IDS, new org.apache.thrift.meta_data.FieldMetaData("partition_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.WANT_PARTITION_NAMES, new org.apache.thrift.meta_data.FieldMetaData("want_partition_names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WANT_PARTITION_METADATA, new org.apache.thrift.meta_data.FieldMetaData("want_partition_metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WANT_PARTITION_FILES, new org.apache.thrift.meta_data.FieldMetaData("want_partition_files", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WANT_STATS_FOR_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("want_stats_for_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WANT_PARTITION_STATS, new org.apache.thrift.meta_data.FieldMetaData("want_partition_stats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableInfoSelector.class, metaDataMap);
  }

  public TTableInfoSelector() {
  }

  public TTableInfoSelector(
    boolean want_hms_table,
    boolean want_partition_names,
    boolean want_partition_metadata,
    boolean want_partition_files,
    boolean want_partition_stats)
  {
    this();
    this.want_hms_table = want_hms_table;
    setWant_hms_tableIsSet(true);
    this.want_partition_names = want_partition_names;
    setWant_partition_namesIsSet(true);
    this.want_partition_metadata = want_partition_metadata;
    setWant_partition_metadataIsSet(true);
    this.want_partition_files = want_partition_files;
    setWant_partition_filesIsSet(true);
    this.want_partition_stats = want_partition_stats;
    setWant_partition_statsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableInfoSelector(TTableInfoSelector other) {
    __isset_bitfield = other.__isset_bitfield;
    this.want_hms_table = other.want_hms_table;
    if (other.isSetPartition_ids()) {
      List<Long> __this__partition_ids = new ArrayList<Long>(other.partition_ids);
      this.partition_ids = __this__partition_ids;
    }
    this.want_partition_names = other.want_partition_names;
    this.want_partition_metadata = other.want_partition_metadata;
    this.want_partition_files = other.want_partition_files;
    if (other.isSetWant_stats_for_column_names()) {
      List<String> __this__want_stats_for_column_names = new ArrayList<String>(other.want_stats_for_column_names);
      this.want_stats_for_column_names = __this__want_stats_for_column_names;
    }
    this.want_partition_stats = other.want_partition_stats;
  }

  public TTableInfoSelector deepCopy() {
    return new TTableInfoSelector(this);
  }

  @Override
  public void clear() {
    setWant_hms_tableIsSet(false);
    this.want_hms_table = false;
    this.partition_ids = null;
    setWant_partition_namesIsSet(false);
    this.want_partition_names = false;
    setWant_partition_metadataIsSet(false);
    this.want_partition_metadata = false;
    setWant_partition_filesIsSet(false);
    this.want_partition_files = false;
    this.want_stats_for_column_names = null;
    setWant_partition_statsIsSet(false);
    this.want_partition_stats = false;
  }

  public boolean isWant_hms_table() {
    return this.want_hms_table;
  }

  public void setWant_hms_table(boolean want_hms_table) {
    this.want_hms_table = want_hms_table;
    setWant_hms_tableIsSet(true);
  }

  public void unsetWant_hms_table() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WANT_HMS_TABLE_ISSET_ID);
  }

  /** Returns true if field want_hms_table is set (has been assigned a value) and false otherwise */
  public boolean isSetWant_hms_table() {
    return EncodingUtils.testBit(__isset_bitfield, __WANT_HMS_TABLE_ISSET_ID);
  }

  public void setWant_hms_tableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WANT_HMS_TABLE_ISSET_ID, value);
  }

  public int getPartition_idsSize() {
    return (this.partition_ids == null) ? 0 : this.partition_ids.size();
  }

  public java.util.Iterator<Long> getPartition_idsIterator() {
    return (this.partition_ids == null) ? null : this.partition_ids.iterator();
  }

  public void addToPartition_ids(long elem) {
    if (this.partition_ids == null) {
      this.partition_ids = new ArrayList<Long>();
    }
    this.partition_ids.add(elem);
  }

  public List<Long> getPartition_ids() {
    return this.partition_ids;
  }

  public void setPartition_ids(List<Long> partition_ids) {
    this.partition_ids = partition_ids;
  }

  public void unsetPartition_ids() {
    this.partition_ids = null;
  }

  /** Returns true if field partition_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_ids() {
    return this.partition_ids != null;
  }

  public void setPartition_idsIsSet(boolean value) {
    if (!value) {
      this.partition_ids = null;
    }
  }

  public boolean isWant_partition_names() {
    return this.want_partition_names;
  }

  public void setWant_partition_names(boolean want_partition_names) {
    this.want_partition_names = want_partition_names;
    setWant_partition_namesIsSet(true);
  }

  public void unsetWant_partition_names() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WANT_PARTITION_NAMES_ISSET_ID);
  }

  /** Returns true if field want_partition_names is set (has been assigned a value) and false otherwise */
  public boolean isSetWant_partition_names() {
    return EncodingUtils.testBit(__isset_bitfield, __WANT_PARTITION_NAMES_ISSET_ID);
  }

  public void setWant_partition_namesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WANT_PARTITION_NAMES_ISSET_ID, value);
  }

  public boolean isWant_partition_metadata() {
    return this.want_partition_metadata;
  }

  public void setWant_partition_metadata(boolean want_partition_metadata) {
    this.want_partition_metadata = want_partition_metadata;
    setWant_partition_metadataIsSet(true);
  }

  public void unsetWant_partition_metadata() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WANT_PARTITION_METADATA_ISSET_ID);
  }

  /** Returns true if field want_partition_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetWant_partition_metadata() {
    return EncodingUtils.testBit(__isset_bitfield, __WANT_PARTITION_METADATA_ISSET_ID);
  }

  public void setWant_partition_metadataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WANT_PARTITION_METADATA_ISSET_ID, value);
  }

  public boolean isWant_partition_files() {
    return this.want_partition_files;
  }

  public void setWant_partition_files(boolean want_partition_files) {
    this.want_partition_files = want_partition_files;
    setWant_partition_filesIsSet(true);
  }

  public void unsetWant_partition_files() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WANT_PARTITION_FILES_ISSET_ID);
  }

  /** Returns true if field want_partition_files is set (has been assigned a value) and false otherwise */
  public boolean isSetWant_partition_files() {
    return EncodingUtils.testBit(__isset_bitfield, __WANT_PARTITION_FILES_ISSET_ID);
  }

  public void setWant_partition_filesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WANT_PARTITION_FILES_ISSET_ID, value);
  }

  public int getWant_stats_for_column_namesSize() {
    return (this.want_stats_for_column_names == null) ? 0 : this.want_stats_for_column_names.size();
  }

  public java.util.Iterator<String> getWant_stats_for_column_namesIterator() {
    return (this.want_stats_for_column_names == null) ? null : this.want_stats_for_column_names.iterator();
  }

  public void addToWant_stats_for_column_names(String elem) {
    if (this.want_stats_for_column_names == null) {
      this.want_stats_for_column_names = new ArrayList<String>();
    }
    this.want_stats_for_column_names.add(elem);
  }

  public List<String> getWant_stats_for_column_names() {
    return this.want_stats_for_column_names;
  }

  public void setWant_stats_for_column_names(List<String> want_stats_for_column_names) {
    this.want_stats_for_column_names = want_stats_for_column_names;
  }

  public void unsetWant_stats_for_column_names() {
    this.want_stats_for_column_names = null;
  }

  /** Returns true if field want_stats_for_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetWant_stats_for_column_names() {
    return this.want_stats_for_column_names != null;
  }

  public void setWant_stats_for_column_namesIsSet(boolean value) {
    if (!value) {
      this.want_stats_for_column_names = null;
    }
  }

  public boolean isWant_partition_stats() {
    return this.want_partition_stats;
  }

  public void setWant_partition_stats(boolean want_partition_stats) {
    this.want_partition_stats = want_partition_stats;
    setWant_partition_statsIsSet(true);
  }

  public void unsetWant_partition_stats() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WANT_PARTITION_STATS_ISSET_ID);
  }

  /** Returns true if field want_partition_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetWant_partition_stats() {
    return EncodingUtils.testBit(__isset_bitfield, __WANT_PARTITION_STATS_ISSET_ID);
  }

  public void setWant_partition_statsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WANT_PARTITION_STATS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WANT_HMS_TABLE:
      if (value == null) {
        unsetWant_hms_table();
      } else {
        setWant_hms_table((Boolean)value);
      }
      break;

    case PARTITION_IDS:
      if (value == null) {
        unsetPartition_ids();
      } else {
        setPartition_ids((List<Long>)value);
      }
      break;

    case WANT_PARTITION_NAMES:
      if (value == null) {
        unsetWant_partition_names();
      } else {
        setWant_partition_names((Boolean)value);
      }
      break;

    case WANT_PARTITION_METADATA:
      if (value == null) {
        unsetWant_partition_metadata();
      } else {
        setWant_partition_metadata((Boolean)value);
      }
      break;

    case WANT_PARTITION_FILES:
      if (value == null) {
        unsetWant_partition_files();
      } else {
        setWant_partition_files((Boolean)value);
      }
      break;

    case WANT_STATS_FOR_COLUMN_NAMES:
      if (value == null) {
        unsetWant_stats_for_column_names();
      } else {
        setWant_stats_for_column_names((List<String>)value);
      }
      break;

    case WANT_PARTITION_STATS:
      if (value == null) {
        unsetWant_partition_stats();
      } else {
        setWant_partition_stats((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WANT_HMS_TABLE:
      return isWant_hms_table();

    case PARTITION_IDS:
      return getPartition_ids();

    case WANT_PARTITION_NAMES:
      return isWant_partition_names();

    case WANT_PARTITION_METADATA:
      return isWant_partition_metadata();

    case WANT_PARTITION_FILES:
      return isWant_partition_files();

    case WANT_STATS_FOR_COLUMN_NAMES:
      return getWant_stats_for_column_names();

    case WANT_PARTITION_STATS:
      return isWant_partition_stats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WANT_HMS_TABLE:
      return isSetWant_hms_table();
    case PARTITION_IDS:
      return isSetPartition_ids();
    case WANT_PARTITION_NAMES:
      return isSetWant_partition_names();
    case WANT_PARTITION_METADATA:
      return isSetWant_partition_metadata();
    case WANT_PARTITION_FILES:
      return isSetWant_partition_files();
    case WANT_STATS_FOR_COLUMN_NAMES:
      return isSetWant_stats_for_column_names();
    case WANT_PARTITION_STATS:
      return isSetWant_partition_stats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTableInfoSelector)
      return this.equals((TTableInfoSelector)that);
    return false;
  }

  public boolean equals(TTableInfoSelector that) {
    if (that == null)
      return false;

    boolean this_present_want_hms_table = true;
    boolean that_present_want_hms_table = true;
    if (this_present_want_hms_table || that_present_want_hms_table) {
      if (!(this_present_want_hms_table && that_present_want_hms_table))
        return false;
      if (this.want_hms_table != that.want_hms_table)
        return false;
    }

    boolean this_present_partition_ids = true && this.isSetPartition_ids();
    boolean that_present_partition_ids = true && that.isSetPartition_ids();
    if (this_present_partition_ids || that_present_partition_ids) {
      if (!(this_present_partition_ids && that_present_partition_ids))
        return false;
      if (!this.partition_ids.equals(that.partition_ids))
        return false;
    }

    boolean this_present_want_partition_names = true;
    boolean that_present_want_partition_names = true;
    if (this_present_want_partition_names || that_present_want_partition_names) {
      if (!(this_present_want_partition_names && that_present_want_partition_names))
        return false;
      if (this.want_partition_names != that.want_partition_names)
        return false;
    }

    boolean this_present_want_partition_metadata = true;
    boolean that_present_want_partition_metadata = true;
    if (this_present_want_partition_metadata || that_present_want_partition_metadata) {
      if (!(this_present_want_partition_metadata && that_present_want_partition_metadata))
        return false;
      if (this.want_partition_metadata != that.want_partition_metadata)
        return false;
    }

    boolean this_present_want_partition_files = true;
    boolean that_present_want_partition_files = true;
    if (this_present_want_partition_files || that_present_want_partition_files) {
      if (!(this_present_want_partition_files && that_present_want_partition_files))
        return false;
      if (this.want_partition_files != that.want_partition_files)
        return false;
    }

    boolean this_present_want_stats_for_column_names = true && this.isSetWant_stats_for_column_names();
    boolean that_present_want_stats_for_column_names = true && that.isSetWant_stats_for_column_names();
    if (this_present_want_stats_for_column_names || that_present_want_stats_for_column_names) {
      if (!(this_present_want_stats_for_column_names && that_present_want_stats_for_column_names))
        return false;
      if (!this.want_stats_for_column_names.equals(that.want_stats_for_column_names))
        return false;
    }

    boolean this_present_want_partition_stats = true;
    boolean that_present_want_partition_stats = true;
    if (this_present_want_partition_stats || that_present_want_partition_stats) {
      if (!(this_present_want_partition_stats && that_present_want_partition_stats))
        return false;
      if (this.want_partition_stats != that.want_partition_stats)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_want_hms_table = true;
    list.add(present_want_hms_table);
    if (present_want_hms_table)
      list.add(want_hms_table);

    boolean present_partition_ids = true && (isSetPartition_ids());
    list.add(present_partition_ids);
    if (present_partition_ids)
      list.add(partition_ids);

    boolean present_want_partition_names = true;
    list.add(present_want_partition_names);
    if (present_want_partition_names)
      list.add(want_partition_names);

    boolean present_want_partition_metadata = true;
    list.add(present_want_partition_metadata);
    if (present_want_partition_metadata)
      list.add(want_partition_metadata);

    boolean present_want_partition_files = true;
    list.add(present_want_partition_files);
    if (present_want_partition_files)
      list.add(want_partition_files);

    boolean present_want_stats_for_column_names = true && (isSetWant_stats_for_column_names());
    list.add(present_want_stats_for_column_names);
    if (present_want_stats_for_column_names)
      list.add(want_stats_for_column_names);

    boolean present_want_partition_stats = true;
    list.add(present_want_partition_stats);
    if (present_want_partition_stats)
      list.add(want_partition_stats);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTableInfoSelector other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWant_hms_table()).compareTo(other.isSetWant_hms_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWant_hms_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.want_hms_table, other.want_hms_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_ids()).compareTo(other.isSetPartition_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_ids, other.partition_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWant_partition_names()).compareTo(other.isSetWant_partition_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWant_partition_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.want_partition_names, other.want_partition_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWant_partition_metadata()).compareTo(other.isSetWant_partition_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWant_partition_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.want_partition_metadata, other.want_partition_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWant_partition_files()).compareTo(other.isSetWant_partition_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWant_partition_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.want_partition_files, other.want_partition_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWant_stats_for_column_names()).compareTo(other.isSetWant_stats_for_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWant_stats_for_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.want_stats_for_column_names, other.want_stats_for_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWant_partition_stats()).compareTo(other.isSetWant_partition_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWant_partition_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.want_partition_stats, other.want_partition_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTableInfoSelector(");
    boolean first = true;

    sb.append("want_hms_table:");
    sb.append(this.want_hms_table);
    first = false;
    if (isSetPartition_ids()) {
      if (!first) sb.append(", ");
      sb.append("partition_ids:");
      if (this.partition_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_ids);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("want_partition_names:");
    sb.append(this.want_partition_names);
    first = false;
    if (!first) sb.append(", ");
    sb.append("want_partition_metadata:");
    sb.append(this.want_partition_metadata);
    first = false;
    if (!first) sb.append(", ");
    sb.append("want_partition_files:");
    sb.append(this.want_partition_files);
    first = false;
    if (isSetWant_stats_for_column_names()) {
      if (!first) sb.append(", ");
      sb.append("want_stats_for_column_names:");
      if (this.want_stats_for_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.want_stats_for_column_names);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("want_partition_stats:");
    sb.append(this.want_partition_stats);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableInfoSelectorStandardSchemeFactory implements SchemeFactory {
    public TTableInfoSelectorStandardScheme getScheme() {
      return new TTableInfoSelectorStandardScheme();
    }
  }

  private static class TTableInfoSelectorStandardScheme extends StandardScheme<TTableInfoSelector> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableInfoSelector struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WANT_HMS_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.want_hms_table = iprot.readBool();
              struct.setWant_hms_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.partition_ids = new ArrayList<Long>(_list48.size);
                long _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readI64();
                  struct.partition_ids.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setPartition_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WANT_PARTITION_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.want_partition_names = iprot.readBool();
              struct.setWant_partition_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WANT_PARTITION_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.want_partition_metadata = iprot.readBool();
              struct.setWant_partition_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WANT_PARTITION_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.want_partition_files = iprot.readBool();
              struct.setWant_partition_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WANT_STATS_FOR_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.want_stats_for_column_names = new ArrayList<String>(_list51.size);
                String _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = iprot.readString();
                  struct.want_stats_for_column_names.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setWant_stats_for_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WANT_PARTITION_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.want_partition_stats = iprot.readBool();
              struct.setWant_partition_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableInfoSelector struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WANT_HMS_TABLE_FIELD_DESC);
      oprot.writeBool(struct.want_hms_table);
      oprot.writeFieldEnd();
      if (struct.partition_ids != null) {
        if (struct.isSetPartition_ids()) {
          oprot.writeFieldBegin(PARTITION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.partition_ids.size()));
            for (long _iter54 : struct.partition_ids)
            {
              oprot.writeI64(_iter54);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(WANT_PARTITION_NAMES_FIELD_DESC);
      oprot.writeBool(struct.want_partition_names);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WANT_PARTITION_METADATA_FIELD_DESC);
      oprot.writeBool(struct.want_partition_metadata);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WANT_PARTITION_FILES_FIELD_DESC);
      oprot.writeBool(struct.want_partition_files);
      oprot.writeFieldEnd();
      if (struct.want_stats_for_column_names != null) {
        if (struct.isSetWant_stats_for_column_names()) {
          oprot.writeFieldBegin(WANT_STATS_FOR_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.want_stats_for_column_names.size()));
            for (String _iter55 : struct.want_stats_for_column_names)
            {
              oprot.writeString(_iter55);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(WANT_PARTITION_STATS_FIELD_DESC);
      oprot.writeBool(struct.want_partition_stats);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableInfoSelectorTupleSchemeFactory implements SchemeFactory {
    public TTableInfoSelectorTupleScheme getScheme() {
      return new TTableInfoSelectorTupleScheme();
    }
  }

  private static class TTableInfoSelectorTupleScheme extends TupleScheme<TTableInfoSelector> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableInfoSelector struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWant_hms_table()) {
        optionals.set(0);
      }
      if (struct.isSetPartition_ids()) {
        optionals.set(1);
      }
      if (struct.isSetWant_partition_names()) {
        optionals.set(2);
      }
      if (struct.isSetWant_partition_metadata()) {
        optionals.set(3);
      }
      if (struct.isSetWant_partition_files()) {
        optionals.set(4);
      }
      if (struct.isSetWant_stats_for_column_names()) {
        optionals.set(5);
      }
      if (struct.isSetWant_partition_stats()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetWant_hms_table()) {
        oprot.writeBool(struct.want_hms_table);
      }
      if (struct.isSetPartition_ids()) {
        {
          oprot.writeI32(struct.partition_ids.size());
          for (long _iter56 : struct.partition_ids)
          {
            oprot.writeI64(_iter56);
          }
        }
      }
      if (struct.isSetWant_partition_names()) {
        oprot.writeBool(struct.want_partition_names);
      }
      if (struct.isSetWant_partition_metadata()) {
        oprot.writeBool(struct.want_partition_metadata);
      }
      if (struct.isSetWant_partition_files()) {
        oprot.writeBool(struct.want_partition_files);
      }
      if (struct.isSetWant_stats_for_column_names()) {
        {
          oprot.writeI32(struct.want_stats_for_column_names.size());
          for (String _iter57 : struct.want_stats_for_column_names)
          {
            oprot.writeString(_iter57);
          }
        }
      }
      if (struct.isSetWant_partition_stats()) {
        oprot.writeBool(struct.want_partition_stats);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableInfoSelector struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.want_hms_table = iprot.readBool();
        struct.setWant_hms_tableIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.partition_ids = new ArrayList<Long>(_list58.size);
          long _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = iprot.readI64();
            struct.partition_ids.add(_elem59);
          }
        }
        struct.setPartition_idsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.want_partition_names = iprot.readBool();
        struct.setWant_partition_namesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.want_partition_metadata = iprot.readBool();
        struct.setWant_partition_metadataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.want_partition_files = iprot.readBool();
        struct.setWant_partition_filesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.want_stats_for_column_names = new ArrayList<String>(_list61.size);
          String _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readString();
            struct.want_stats_for_column_names.add(_elem62);
          }
        }
        struct.setWant_stats_for_column_namesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.want_partition_stats = iprot.readBool();
        struct.setWant_partition_statsIsSet(true);
      }
    }
  }

}

