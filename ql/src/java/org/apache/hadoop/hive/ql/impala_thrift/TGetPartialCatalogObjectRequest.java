/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TGetPartialCatalogObjectRequest implements org.apache.thrift.TBase<TGetPartialCatalogObjectRequest, TGetPartialCatalogObjectRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TGetPartialCatalogObjectRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetPartialCatalogObjectRequest");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OBJECT_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("object_desc", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_INFO_SELECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("table_info_selector", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DB_INFO_SELECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("db_info_selector", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CATALOG_INFO_SELECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog_info_selector", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGetPartialCatalogObjectRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGetPartialCatalogObjectRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public CatalogServiceVersion protocol_version; // required
  public org.apache.impala.thrift.TCatalogObject object_desc; // required
  public TTableInfoSelector table_info_selector; // optional
  public TDbInfoSelector db_info_selector; // optional
  public TCatalogInfoSelector catalog_info_selector; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see CatalogServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    OBJECT_DESC((short)2, "object_desc"),
    TABLE_INFO_SELECTOR((short)3, "table_info_selector"),
    DB_INFO_SELECTOR((short)4, "db_info_selector"),
    CATALOG_INFO_SELECTOR((short)5, "catalog_info_selector");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // OBJECT_DESC
          return OBJECT_DESC;
        case 3: // TABLE_INFO_SELECTOR
          return TABLE_INFO_SELECTOR;
        case 4: // DB_INFO_SELECTOR
          return DB_INFO_SELECTOR;
        case 5: // CATALOG_INFO_SELECTOR
          return CATALOG_INFO_SELECTOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TABLE_INFO_SELECTOR,_Fields.DB_INFO_SELECTOR,_Fields.CATALOG_INFO_SELECTOR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CatalogServiceVersion.class)));
    tmpMap.put(_Fields.OBJECT_DESC, new org.apache.thrift.meta_data.FieldMetaData("object_desc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCatalogObject.class)));
    tmpMap.put(_Fields.TABLE_INFO_SELECTOR, new org.apache.thrift.meta_data.FieldMetaData("table_info_selector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableInfoSelector.class)));
    tmpMap.put(_Fields.DB_INFO_SELECTOR, new org.apache.thrift.meta_data.FieldMetaData("db_info_selector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDbInfoSelector.class)));
    tmpMap.put(_Fields.CATALOG_INFO_SELECTOR, new org.apache.thrift.meta_data.FieldMetaData("catalog_info_selector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCatalogInfoSelector.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetPartialCatalogObjectRequest.class, metaDataMap);
  }

  public TGetPartialCatalogObjectRequest() {
    this.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.V1;

  }

  public TGetPartialCatalogObjectRequest(
    CatalogServiceVersion protocol_version,
    org.apache.impala.thrift.TCatalogObject object_desc)
  {
    this();
    this.protocol_version = protocol_version;
    this.object_desc = object_desc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetPartialCatalogObjectRequest(TGetPartialCatalogObjectRequest other) {
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetObject_desc()) {
      this.object_desc = new org.apache.impala.thrift.TCatalogObject(other.object_desc);
    }
    if (other.isSetTable_info_selector()) {
      this.table_info_selector = new TTableInfoSelector(other.table_info_selector);
    }
    if (other.isSetDb_info_selector()) {
      this.db_info_selector = new TDbInfoSelector(other.db_info_selector);
    }
    if (other.isSetCatalog_info_selector()) {
      this.catalog_info_selector = new TCatalogInfoSelector(other.catalog_info_selector);
    }
  }

  public TGetPartialCatalogObjectRequest deepCopy() {
    return new TGetPartialCatalogObjectRequest(this);
  }

  @Override
  public void clear() {
    this.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.V1;

    this.object_desc = null;
    this.table_info_selector = null;
    this.db_info_selector = null;
    this.catalog_info_selector = null;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public CatalogServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public TGetPartialCatalogObjectRequest setProtocol_version(CatalogServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public org.apache.impala.thrift.TCatalogObject getObject_desc() {
    return this.object_desc;
  }

  public TGetPartialCatalogObjectRequest setObject_desc(org.apache.impala.thrift.TCatalogObject object_desc) {
    this.object_desc = object_desc;
    return this;
  }

  public void unsetObject_desc() {
    this.object_desc = null;
  }

  /** Returns true if field object_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_desc() {
    return this.object_desc != null;
  }

  public void setObject_descIsSet(boolean value) {
    if (!value) {
      this.object_desc = null;
    }
  }

  public TTableInfoSelector getTable_info_selector() {
    return this.table_info_selector;
  }

  public TGetPartialCatalogObjectRequest setTable_info_selector(TTableInfoSelector table_info_selector) {
    this.table_info_selector = table_info_selector;
    return this;
  }

  public void unsetTable_info_selector() {
    this.table_info_selector = null;
  }

  /** Returns true if field table_info_selector is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_info_selector() {
    return this.table_info_selector != null;
  }

  public void setTable_info_selectorIsSet(boolean value) {
    if (!value) {
      this.table_info_selector = null;
    }
  }

  public TDbInfoSelector getDb_info_selector() {
    return this.db_info_selector;
  }

  public TGetPartialCatalogObjectRequest setDb_info_selector(TDbInfoSelector db_info_selector) {
    this.db_info_selector = db_info_selector;
    return this;
  }

  public void unsetDb_info_selector() {
    this.db_info_selector = null;
  }

  /** Returns true if field db_info_selector is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_info_selector() {
    return this.db_info_selector != null;
  }

  public void setDb_info_selectorIsSet(boolean value) {
    if (!value) {
      this.db_info_selector = null;
    }
  }

  public TCatalogInfoSelector getCatalog_info_selector() {
    return this.catalog_info_selector;
  }

  public TGetPartialCatalogObjectRequest setCatalog_info_selector(TCatalogInfoSelector catalog_info_selector) {
    this.catalog_info_selector = catalog_info_selector;
    return this;
  }

  public void unsetCatalog_info_selector() {
    this.catalog_info_selector = null;
  }

  /** Returns true if field catalog_info_selector is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog_info_selector() {
    return this.catalog_info_selector != null;
  }

  public void setCatalog_info_selectorIsSet(boolean value) {
    if (!value) {
      this.catalog_info_selector = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((CatalogServiceVersion)value);
      }
      break;

    case OBJECT_DESC:
      if (value == null) {
        unsetObject_desc();
      } else {
        setObject_desc((org.apache.impala.thrift.TCatalogObject)value);
      }
      break;

    case TABLE_INFO_SELECTOR:
      if (value == null) {
        unsetTable_info_selector();
      } else {
        setTable_info_selector((TTableInfoSelector)value);
      }
      break;

    case DB_INFO_SELECTOR:
      if (value == null) {
        unsetDb_info_selector();
      } else {
        setDb_info_selector((TDbInfoSelector)value);
      }
      break;

    case CATALOG_INFO_SELECTOR:
      if (value == null) {
        unsetCatalog_info_selector();
      } else {
        setCatalog_info_selector((TCatalogInfoSelector)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case OBJECT_DESC:
      return getObject_desc();

    case TABLE_INFO_SELECTOR:
      return getTable_info_selector();

    case DB_INFO_SELECTOR:
      return getDb_info_selector();

    case CATALOG_INFO_SELECTOR:
      return getCatalog_info_selector();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case OBJECT_DESC:
      return isSetObject_desc();
    case TABLE_INFO_SELECTOR:
      return isSetTable_info_selector();
    case DB_INFO_SELECTOR:
      return isSetDb_info_selector();
    case CATALOG_INFO_SELECTOR:
      return isSetCatalog_info_selector();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGetPartialCatalogObjectRequest)
      return this.equals((TGetPartialCatalogObjectRequest)that);
    return false;
  }

  public boolean equals(TGetPartialCatalogObjectRequest that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_object_desc = true && this.isSetObject_desc();
    boolean that_present_object_desc = true && that.isSetObject_desc();
    if (this_present_object_desc || that_present_object_desc) {
      if (!(this_present_object_desc && that_present_object_desc))
        return false;
      if (!this.object_desc.equals(that.object_desc))
        return false;
    }

    boolean this_present_table_info_selector = true && this.isSetTable_info_selector();
    boolean that_present_table_info_selector = true && that.isSetTable_info_selector();
    if (this_present_table_info_selector || that_present_table_info_selector) {
      if (!(this_present_table_info_selector && that_present_table_info_selector))
        return false;
      if (!this.table_info_selector.equals(that.table_info_selector))
        return false;
    }

    boolean this_present_db_info_selector = true && this.isSetDb_info_selector();
    boolean that_present_db_info_selector = true && that.isSetDb_info_selector();
    if (this_present_db_info_selector || that_present_db_info_selector) {
      if (!(this_present_db_info_selector && that_present_db_info_selector))
        return false;
      if (!this.db_info_selector.equals(that.db_info_selector))
        return false;
    }

    boolean this_present_catalog_info_selector = true && this.isSetCatalog_info_selector();
    boolean that_present_catalog_info_selector = true && that.isSetCatalog_info_selector();
    if (this_present_catalog_info_selector || that_present_catalog_info_selector) {
      if (!(this_present_catalog_info_selector && that_present_catalog_info_selector))
        return false;
      if (!this.catalog_info_selector.equals(that.catalog_info_selector))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocol_version = true && (isSetProtocol_version());
    list.add(present_protocol_version);
    if (present_protocol_version)
      list.add(protocol_version.getValue());

    boolean present_object_desc = true && (isSetObject_desc());
    list.add(present_object_desc);
    if (present_object_desc)
      list.add(object_desc);

    boolean present_table_info_selector = true && (isSetTable_info_selector());
    list.add(present_table_info_selector);
    if (present_table_info_selector)
      list.add(table_info_selector);

    boolean present_db_info_selector = true && (isSetDb_info_selector());
    list.add(present_db_info_selector);
    if (present_db_info_selector)
      list.add(db_info_selector);

    boolean present_catalog_info_selector = true && (isSetCatalog_info_selector());
    list.add(present_catalog_info_selector);
    if (present_catalog_info_selector)
      list.add(catalog_info_selector);

    return list.hashCode();
  }

  @Override
  public int compareTo(TGetPartialCatalogObjectRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObject_desc()).compareTo(other.isSetObject_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_desc, other.object_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_info_selector()).compareTo(other.isSetTable_info_selector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_info_selector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_info_selector, other.table_info_selector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb_info_selector()).compareTo(other.isSetDb_info_selector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_info_selector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_info_selector, other.db_info_selector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog_info_selector()).compareTo(other.isSetCatalog_info_selector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog_info_selector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog_info_selector, other.catalog_info_selector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGetPartialCatalogObjectRequest(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("object_desc:");
    if (this.object_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.object_desc);
    }
    first = false;
    if (isSetTable_info_selector()) {
      if (!first) sb.append(", ");
      sb.append("table_info_selector:");
      if (this.table_info_selector == null) {
        sb.append("null");
      } else {
        sb.append(this.table_info_selector);
      }
      first = false;
    }
    if (isSetDb_info_selector()) {
      if (!first) sb.append(", ");
      sb.append("db_info_selector:");
      if (this.db_info_selector == null) {
        sb.append("null");
      } else {
        sb.append(this.db_info_selector);
      }
      first = false;
    }
    if (isSetCatalog_info_selector()) {
      if (!first) sb.append(", ");
      sb.append("catalog_info_selector:");
      if (this.catalog_info_selector == null) {
        sb.append("null");
      } else {
        sb.append(this.catalog_info_selector);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    if (object_desc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'object_desc' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (object_desc != null) {
      object_desc.validate();
    }
    if (table_info_selector != null) {
      table_info_selector.validate();
    }
    if (db_info_selector != null) {
      db_info_selector.validate();
    }
    if (catalog_info_selector != null) {
      catalog_info_selector.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetPartialCatalogObjectRequestStandardSchemeFactory implements SchemeFactory {
    public TGetPartialCatalogObjectRequestStandardScheme getScheme() {
      return new TGetPartialCatalogObjectRequestStandardScheme();
    }
  }

  private static class TGetPartialCatalogObjectRequestStandardScheme extends StandardScheme<TGetPartialCatalogObjectRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetPartialCatalogObjectRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OBJECT_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.object_desc = new org.apache.impala.thrift.TCatalogObject();
              struct.object_desc.read(iprot);
              struct.setObject_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_INFO_SELECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_info_selector = new TTableInfoSelector();
              struct.table_info_selector.read(iprot);
              struct.setTable_info_selectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB_INFO_SELECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.db_info_selector = new TDbInfoSelector();
              struct.db_info_selector.read(iprot);
              struct.setDb_info_selectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CATALOG_INFO_SELECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.catalog_info_selector = new TCatalogInfoSelector();
              struct.catalog_info_selector.read(iprot);
              struct.setCatalog_info_selectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetPartialCatalogObjectRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.object_desc != null) {
        oprot.writeFieldBegin(OBJECT_DESC_FIELD_DESC);
        struct.object_desc.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.table_info_selector != null) {
        if (struct.isSetTable_info_selector()) {
          oprot.writeFieldBegin(TABLE_INFO_SELECTOR_FIELD_DESC);
          struct.table_info_selector.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_info_selector != null) {
        if (struct.isSetDb_info_selector()) {
          oprot.writeFieldBegin(DB_INFO_SELECTOR_FIELD_DESC);
          struct.db_info_selector.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.catalog_info_selector != null) {
        if (struct.isSetCatalog_info_selector()) {
          oprot.writeFieldBegin(CATALOG_INFO_SELECTOR_FIELD_DESC);
          struct.catalog_info_selector.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetPartialCatalogObjectRequestTupleSchemeFactory implements SchemeFactory {
    public TGetPartialCatalogObjectRequestTupleScheme getScheme() {
      return new TGetPartialCatalogObjectRequestTupleScheme();
    }
  }

  private static class TGetPartialCatalogObjectRequestTupleScheme extends TupleScheme<TGetPartialCatalogObjectRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetPartialCatalogObjectRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      struct.object_desc.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetTable_info_selector()) {
        optionals.set(0);
      }
      if (struct.isSetDb_info_selector()) {
        optionals.set(1);
      }
      if (struct.isSetCatalog_info_selector()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTable_info_selector()) {
        struct.table_info_selector.write(oprot);
      }
      if (struct.isSetDb_info_selector()) {
        struct.db_info_selector.write(oprot);
      }
      if (struct.isSetCatalog_info_selector()) {
        struct.catalog_info_selector.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetPartialCatalogObjectRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      struct.object_desc = new org.apache.impala.thrift.TCatalogObject();
      struct.object_desc.read(iprot);
      struct.setObject_descIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.table_info_selector = new TTableInfoSelector();
        struct.table_info_selector.read(iprot);
        struct.setTable_info_selectorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.db_info_selector = new TDbInfoSelector();
        struct.db_info_selector.read(iprot);
        struct.setDb_info_selectorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.catalog_info_selector = new TCatalogInfoSelector();
        struct.catalog_info_selector.read(iprot);
        struct.setCatalog_info_selectorIsSet(true);
      }
    }
  }

}

