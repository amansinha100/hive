/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class MetricDefsConstants {

  public static final Map<String,TMetricDef> TMetricDefs = new HashMap<String,TMetricDef>();
  static {
    TMetricDef tmp8 = new TMetricDef();
    List<String> tmp9 = new ArrayList<String>();
    tmp9.add("RESOURCE_POOL");

    tmp8.setContexts(tmp9);
    tmp8.setDescription("Resource Pool $0 Aggregate Mem Reserved");
    tmp8.setKey("admission-controller.agg-mem-reserved.$0");
    tmp8.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp8.setLabel("Resource Pool $0 Aggregate Mem Reserved");
    tmp8.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.agg-mem-reserved.$0", tmp8);
    TMetricDef tmp10 = new TMetricDef();
    List<String> tmp11 = new ArrayList<String>();
    tmp11.add("RESOURCE_POOL");

    tmp10.setContexts(tmp11);
    tmp10.setDescription("Resource Pool $0 Aggregate Queue Size");
    tmp10.setKey("admission-controller.agg-num-queued.$0");
    tmp10.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp10.setLabel("Resource Pool $0 Aggregate Queue Size");
    tmp10.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.agg-num-queued.$0", tmp10);
    TMetricDef tmp12 = new TMetricDef();
    List<String> tmp13 = new ArrayList<String>();
    tmp13.add("RESOURCE_POOL");

    tmp12.setContexts(tmp13);
    tmp12.setDescription("Resource Pool $0 Aggregate Num Running");
    tmp12.setKey("admission-controller.agg-num-running.$0");
    tmp12.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp12.setLabel("Resource Pool $0 Aggregate Num Running");
    tmp12.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.agg-num-running.$0", tmp12);
    TMetricDef tmp14 = new TMetricDef();
    List<String> tmp15 = new ArrayList<String>();
    tmp15.add("IMPALAD");

    tmp14.setContexts(tmp15);
    tmp14.setDescription("Total number of queries running on executor group: $0");
    tmp14.setKey("admission-controller.executor-group.num-queries-executing.$0");
    tmp14.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp14.setLabel("Total number of queries running on executor group: $0");
    tmp14.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.executor-group.num-queries-executing.$0", tmp14);
    TMetricDef tmp16 = new TMetricDef();
    List<String> tmp17 = new ArrayList<String>();
    tmp17.add("RESOURCE_POOL");

    tmp16.setContexts(tmp17);
    tmp16.setDescription("Resource Pool $0 Mem Reserved by the backend coordinator");
    tmp16.setKey("admission-controller.local-backend-mem-reserved.$0");
    tmp16.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp16.setLabel("Resource Pool $0 Coordinator Backend Mem Reserved");
    tmp16.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.local-backend-mem-reserved.$0", tmp16);
    TMetricDef tmp18 = new TMetricDef();
    List<String> tmp19 = new ArrayList<String>();
    tmp19.add("RESOURCE_POOL");

    tmp18.setContexts(tmp19);
    tmp18.setDescription("Resource Pool $0 Coordinator Backend Mem Usage");
    tmp18.setKey("admission-controller.local-backend-mem-usage.$0");
    tmp18.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp18.setLabel("Resource Pool $0 Coordinator Backend Mem Usage");
    tmp18.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.local-backend-mem-usage.$0", tmp18);
    TMetricDef tmp20 = new TMetricDef();
    List<String> tmp21 = new ArrayList<String>();
    tmp21.add("RESOURCE_POOL");

    tmp20.setContexts(tmp21);
    tmp20.setDescription("Resource Pool $0 Local Mem Admitted");
    tmp20.setKey("admission-controller.local-mem-admitted.$0");
    tmp20.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp20.setLabel("Resource Pool $0 Local Mem Admitted");
    tmp20.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.local-mem-admitted.$0", tmp20);
    TMetricDef tmp22 = new TMetricDef();
    List<String> tmp23 = new ArrayList<String>();
    tmp23.add("RESOURCE_POOL");

    tmp22.setContexts(tmp23);
    tmp22.setDescription("Resource Pool $0 Coordinator Backend Num Running");
    tmp22.setKey("admission-controller.local-num-admitted-running.$0");
    tmp22.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp22.setLabel("Resource Pool $0 Coordinator Backend Num Running");
    tmp22.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.local-num-admitted-running.$0", tmp22);
    TMetricDef tmp24 = new TMetricDef();
    List<String> tmp25 = new ArrayList<String>();
    tmp25.add("RESOURCE_POOL");

    tmp24.setContexts(tmp25);
    tmp24.setDescription("Resource Pool $0 Queue Size on the coordinator");
    tmp24.setKey("admission-controller.local-num-queued.$0");
    tmp24.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp24.setLabel("Resource Pool $0 Coordinator Backend Queue Size");
    tmp24.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.local-num-queued.$0", tmp24);
    TMetricDef tmp26 = new TMetricDef();
    List<String> tmp27 = new ArrayList<String>();
    tmp27.add("RESOURCE_POOL");

    tmp26.setContexts(tmp27);
    tmp26.setDescription("The maximum memory available across the cluster for the pool. If pool-max-memory-multiple is set then the metric is derived by multiplying that value by the current total number of executors.");
    tmp26.setKey("admission-controller.max-memory-derived.$0");
    tmp26.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp26.setLabel("Resource Pool $0 Max Memory Derived");
    tmp26.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("admission-controller.max-memory-derived.$0", tmp26);
    TMetricDef tmp28 = new TMetricDef();
    List<String> tmp29 = new ArrayList<String>();
    tmp29.add("RESOURCE_POOL");

    tmp28.setContexts(tmp29);
    tmp28.setDescription("The maximum number of queries that can be queued in the pool. If pool-max-queued-queries-multiple is set then the metric is derived by multiplying that value by the current total number of executors.");
    tmp28.setKey("admission-controller.max-queued-queries-derived.$0");
    tmp28.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp28.setLabel("Resource Pool $0 Max Queued Queries Derived");
    tmp28.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.max-queued-queries-derived.$0", tmp28);
    TMetricDef tmp30 = new TMetricDef();
    List<String> tmp31 = new ArrayList<String>();
    tmp31.add("RESOURCE_POOL");

    tmp30.setContexts(tmp31);
    tmp30.setDescription("If false, the mem_limit query option will not be bounded by the max/min query mem limits specified for the pool");
    tmp30.setKey("admission-controller.pool-clamp-mem-limit-query-option.$0");
    tmp30.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp30.setLabel("Resource Pool $0 Clamp 'MEM_LIMIT' Query Option Flag");
    tmp30.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.pool-clamp-mem-limit-query-option.$0", tmp30);
    TMetricDef tmp32 = new TMetricDef();
    List<String> tmp33 = new ArrayList<String>();
    tmp33.add("RESOURCE_POOL");

    tmp32.setContexts(tmp33);
    tmp32.setDescription("Resource Pool $0 Configured Max Mem Resources");
    tmp32.setKey("admission-controller.pool-max-mem-resources.$0");
    tmp32.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp32.setLabel("Resource Pool $0 Configured Max Mem Resources");
    tmp32.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.pool-max-mem-resources.$0", tmp32);
    TMetricDef tmp34 = new TMetricDef();
    List<String> tmp35 = new ArrayList<String>();
    tmp35.add("RESOURCE_POOL");

    tmp34.setContexts(tmp35);
    tmp34.setDescription("This number of bytes is multiplied by the current total number of executors at runtime to give the maximum memory available across the cluster for the pool.");
    tmp34.setKey("admission-controller.pool-max-memory-multiple.$0");
    tmp34.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp34.setLabel("Resource Pool $0 Max Memory Multiple");
    tmp34.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("admission-controller.pool-max-memory-multiple.$0", tmp34);
    TMetricDef tmp36 = new TMetricDef();
    List<String> tmp37 = new ArrayList<String>();
    tmp37.add("RESOURCE_POOL");

    tmp36.setContexts(tmp37);
    tmp36.setDescription("Resource Pool $0 Max Query Memory Limit");
    tmp36.setKey("admission-controller.pool-max-query-mem-limit.$0");
    tmp36.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp36.setLabel("Resource Pool $0 Max Query Memory Limit");
    tmp36.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("admission-controller.pool-max-query-mem-limit.$0", tmp36);
    TMetricDef tmp38 = new TMetricDef();
    List<String> tmp39 = new ArrayList<String>();
    tmp39.add("RESOURCE_POOL");

    tmp38.setContexts(tmp39);
    tmp38.setDescription("This floating point number is multiplied by the current total number of executors at runtime to give the maximum number of queries that can be queued in the pool.");
    tmp38.setKey("admission-controller.pool-max-queued-queries-multiple.$0");
    tmp38.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp38.setLabel("Resource Pool $0 Max Queued Queries Multiple");
    tmp38.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.pool-max-queued-queries-multiple.$0", tmp38);
    TMetricDef tmp40 = new TMetricDef();
    List<String> tmp41 = new ArrayList<String>();
    tmp41.add("RESOURCE_POOL");

    tmp40.setContexts(tmp41);
    tmp40.setDescription("Resource Pool $0 Configured Max Queued");
    tmp40.setKey("admission-controller.pool-max-queued.$0");
    tmp40.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp40.setLabel("Resource Pool $0 Configured Max Queued");
    tmp40.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.pool-max-queued.$0", tmp40);
    TMetricDef tmp42 = new TMetricDef();
    List<String> tmp43 = new ArrayList<String>();
    tmp43.add("RESOURCE_POOL");

    tmp42.setContexts(tmp43);
    tmp42.setDescription("Resource Pool $0 Configured Max Requests");
    tmp42.setKey("admission-controller.pool-max-requests.$0");
    tmp42.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp42.setLabel("Resource Pool $0 Configured Max Requests");
    tmp42.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("admission-controller.pool-max-requests.$0", tmp42);
    TMetricDef tmp44 = new TMetricDef();
    List<String> tmp45 = new ArrayList<String>();
    tmp45.add("RESOURCE_POOL");

    tmp44.setContexts(tmp45);
    tmp44.setDescription("The maximum number of concurrently running queries allowed in the pool. If pool-max-running-queries-multiple is set then the metric is derived by multiplying that value by the current total number of executors.");
    tmp44.setKey("admission-controller.pool-max-running-queries-derived.$0");
    tmp44.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp44.setLabel("Resource Pool $0 Max Running Queries Derived");
    tmp44.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.pool-max-running-queries-derived.$0", tmp44);
    TMetricDef tmp46 = new TMetricDef();
    List<String> tmp47 = new ArrayList<String>();
    tmp47.add("RESOURCE_POOL");

    tmp46.setContexts(tmp47);
    tmp46.setDescription("This floating point number is multiplied by the current total number of executors at runtime to give the maximum number of concurrently running queries allowed in the pool.");
    tmp46.setKey("admission-controller.pool-max-running-queries-multiple.$0");
    tmp46.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp46.setLabel("Resource Pool $0 Max Running Queries Multiple");
    tmp46.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.pool-max-running-queries-multiple.$0", tmp46);
    TMetricDef tmp48 = new TMetricDef();
    List<String> tmp49 = new ArrayList<String>();
    tmp49.add("RESOURCE_POOL");

    tmp48.setContexts(tmp49);
    tmp48.setDescription("Resource Pool $0 Min Query Memory Limit");
    tmp48.setKey("admission-controller.pool-min-query-mem-limit.$0");
    tmp48.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp48.setLabel("Resource Pool $0 Min Query Memory Limit");
    tmp48.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("admission-controller.pool-min-query-mem-limit.$0", tmp48);
    TMetricDef tmp50 = new TMetricDef();
    List<String> tmp51 = new ArrayList<String>();
    tmp51.add("RESOURCE_POOL");

    tmp50.setContexts(tmp51);
    tmp50.setDescription("Resource Pool $0 Queue Timeout");
    tmp50.setKey("admission-controller.pool-queue-timeout.$0");
    tmp50.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp50.setLabel("Resource Pool $0 Queue Timeout");
    tmp50.setUnits(org.apache.impala.thrift.TUnit.TIME_MS);

    TMetricDefs.put("admission-controller.pool-queue-timeout.$0", tmp50);
    TMetricDef tmp52 = new TMetricDef();
    List<String> tmp53 = new ArrayList<String>();
    tmp53.add("RESOURCE_POOL");

    tmp52.setContexts(tmp53);
    tmp52.setDescription("Resource Pool $0 Time in Queue");
    tmp52.setKey("admission-controller.time-in-queue-ms.$0");
    tmp52.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp52.setLabel("Resource Pool $0 Time in Queue");
    tmp52.setUnits(org.apache.impala.thrift.TUnit.TIME_MS);

    TMetricDefs.put("admission-controller.time-in-queue-ms.$0", tmp52);
    TMetricDef tmp54 = new TMetricDef();
    List<String> tmp55 = new ArrayList<String>();
    tmp55.add("RESOURCE_POOL");

    tmp54.setContexts(tmp55);
    tmp54.setDescription("Total number of requests admitted to pool $0");
    tmp54.setKey("admission-controller.total-admitted.$0");
    tmp54.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp54.setLabel("Resource Pool $0 Total Admitted");
    tmp54.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.total-admitted.$0", tmp54);
    TMetricDef tmp56 = new TMetricDef();
    List<String> tmp57 = new ArrayList<String>();
    tmp57.add("RESOURCE_POOL");

    tmp56.setContexts(tmp57);
    tmp56.setDescription("Total number of requests dequeued in pool $0");
    tmp56.setKey("admission-controller.total-dequeued.$0");
    tmp56.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp56.setLabel("Resource Pool $0 Total Dequeued");
    tmp56.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.total-dequeued.$0", tmp56);
    TMetricDef tmp58 = new TMetricDef();
    List<String> tmp59 = new ArrayList<String>();
    tmp59.add("RESOURCE_POOL");

    tmp58.setContexts(tmp59);
    tmp58.setDescription("Total number of requests queued in pool $0");
    tmp58.setKey("admission-controller.total-queued.$0");
    tmp58.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp58.setLabel("Resource Pool $0 Total Queued");
    tmp58.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.total-queued.$0", tmp58);
    TMetricDef tmp60 = new TMetricDef();
    List<String> tmp61 = new ArrayList<String>();
    tmp61.add("RESOURCE_POOL");

    tmp60.setContexts(tmp61);
    tmp60.setDescription("Total number of requests rejected in pool $0");
    tmp60.setKey("admission-controller.total-rejected.$0");
    tmp60.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp60.setLabel("Resource Pool $0 Total Rejected");
    tmp60.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.total-rejected.$0", tmp60);
    TMetricDef tmp62 = new TMetricDef();
    List<String> tmp63 = new ArrayList<String>();
    tmp63.add("RESOURCE_POOL");

    tmp62.setContexts(tmp63);
    tmp62.setDescription("Total number of requests that have completed and released resources in pool $0");
    tmp62.setKey("admission-controller.total-released.$0");
    tmp62.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp62.setLabel("Resource Pool $0 Total Released");
    tmp62.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.total-released.$0", tmp62);
    TMetricDef tmp64 = new TMetricDef();
    List<String> tmp65 = new ArrayList<String>();
    tmp65.add("RESOURCE_POOL");

    tmp64.setContexts(tmp65);
    tmp64.setDescription("Total number of requests timed out waiting while queued in pool $0");
    tmp64.setKey("admission-controller.total-timed-out.$0");
    tmp64.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp64.setLabel("Resource Pool $0 Total Timed Out");
    tmp64.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("admission-controller.total-timed-out.$0", tmp64);
    TMetricDef tmp66 = new TMetricDef();
    List<String> tmp67 = new ArrayList<String>();
    tmp67.add("IMPALAD");

    tmp66.setContexts(tmp67);
    tmp66.setDescription("Statistics for buffer sizes allocated from the system. Only a subset of allocations are counted in this metric to reduce overhead.");
    tmp66.setKey("buffer-pool.$0.allocated-buffer-sizes");
    tmp66.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp66.setLabel("Buffer Pool Allocated Buffer Sizes.");
    tmp66.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("buffer-pool.$0.allocated-buffer-sizes", tmp66);
    TMetricDef tmp68 = new TMetricDef();
    List<String> tmp69 = new ArrayList<String>();
    tmp69.add("IMPALAD");

    tmp68.setContexts(tmp69);
    tmp68.setDescription("Number of times a clean page was evicted to fulfil an allocation.");
    tmp68.setKey("buffer-pool.$0.clean-page-hits");
    tmp68.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp68.setLabel("Buffer Pool Clean Page Hits.");
    tmp68.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("buffer-pool.$0.clean-page-hits", tmp68);
    TMetricDef tmp70 = new TMetricDef();
    List<String> tmp71 = new ArrayList<String>();
    tmp71.add("IMPALAD");

    tmp70.setContexts(tmp71);
    tmp70.setDescription("Number of times a new buffer was directly allocated from the system allocator to fulfil an allocation.");
    tmp70.setKey("buffer-pool.$0.direct-alloc-count");
    tmp70.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp70.setLabel("Buffer Pool Direct Allocation Count.");
    tmp70.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("buffer-pool.$0.direct-alloc-count", tmp70);
    TMetricDef tmp72 = new TMetricDef();
    List<String> tmp73 = new ArrayList<String>();
    tmp73.add("IMPALAD");

    tmp72.setContexts(tmp73);
    tmp72.setDescription("Number of times a free buffer was recycled from this core's arena to fulfil an allocation.");
    tmp72.setKey("buffer-pool.$0.local-arena-free-buffer-hits");
    tmp72.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp72.setLabel("Buffer Pool Local Arena Free Buffer Hit Count.");
    tmp72.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("buffer-pool.$0.local-arena-free-buffer-hits", tmp72);
    TMetricDef tmp74 = new TMetricDef();
    List<String> tmp75 = new ArrayList<String>();
    tmp75.add("IMPALAD");

    tmp74.setContexts(tmp75);
    tmp74.setDescription("Number of times the allocator had to lock all arenas and scavenge to fulfil an allocation.");
    tmp74.setKey("buffer-pool.$0.num-final-scavenges");
    tmp74.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp74.setLabel("Buffer Pool Final Scavenge Count.");
    tmp74.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("buffer-pool.$0.num-final-scavenges", tmp74);
    TMetricDef tmp76 = new TMetricDef();
    List<String> tmp77 = new ArrayList<String>();
    tmp77.add("IMPALAD");

    tmp76.setContexts(tmp77);
    tmp76.setDescription("Number of times the allocator had to scavenge to fulfil an allocation.");
    tmp76.setKey("buffer-pool.$0.num-scavenges");
    tmp76.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp76.setLabel("Buffer Pool Scavenge Count.");
    tmp76.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("buffer-pool.$0.num-scavenges", tmp76);
    TMetricDef tmp78 = new TMetricDef();
    List<String> tmp79 = new ArrayList<String>();
    tmp79.add("IMPALAD");

    tmp78.setContexts(tmp79);
    tmp78.setDescription("Number of times that a recycled buffer within the same NUMA node was used to fulfil an allocation.");
    tmp78.setKey("buffer-pool.$0.numa-arena-free-buffer-hits");
    tmp78.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp78.setLabel("Buffer Pool Numa Free Buffer Hits.");
    tmp78.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("buffer-pool.$0.numa-arena-free-buffer-hits", tmp78);
    TMetricDef tmp80 = new TMetricDef();
    List<String> tmp81 = new ArrayList<String>();
    tmp81.add("IMPALAD");

    tmp80.setContexts(tmp81);
    tmp80.setDescription("Total time the buffer pool spent in the system allocator for this arena.");
    tmp80.setKey("buffer-pool.$0.system-alloc-time");
    tmp80.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp80.setLabel("Buffer Pool System Allocation Time.");
    tmp80.setUnits(org.apache.impala.thrift.TUnit.TIME_NS);

    TMetricDefs.put("buffer-pool.$0.system-alloc-time", tmp80);
    TMetricDef tmp82 = new TMetricDef();
    List<String> tmp83 = new ArrayList<String>();
    tmp83.add("IMPALAD");

    tmp82.setContexts(tmp83);
    tmp82.setDescription("Total bytes of clean page memory cached in the buffer pool.");
    tmp82.setKey("buffer-pool.clean-page-bytes");
    tmp82.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp82.setLabel("Buffer Pool Clean Page Bytes.");
    tmp82.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("buffer-pool.clean-page-bytes", tmp82);
    TMetricDef tmp84 = new TMetricDef();
    List<String> tmp85 = new ArrayList<String>();
    tmp85.add("IMPALAD");

    tmp84.setContexts(tmp85);
    tmp84.setDescription("Total number of clean pages cached in the buffer pool.");
    tmp84.setKey("buffer-pool.clean-pages");
    tmp84.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp84.setLabel("Buffer Pool Clean Pages.");
    tmp84.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("buffer-pool.clean-pages", tmp84);
    TMetricDef tmp86 = new TMetricDef();
    List<String> tmp87 = new ArrayList<String>();
    tmp87.add("IMPALAD");

    tmp86.setContexts(tmp87);
    tmp86.setDescription("Limit on number of clean pages cached in the buffer pool.");
    tmp86.setKey("buffer-pool.clean-pages-limit");
    tmp86.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp86.setLabel("Buffer Pool Clean Pages Limit.");
    tmp86.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("buffer-pool.clean-pages-limit", tmp86);
    TMetricDef tmp88 = new TMetricDef();
    List<String> tmp89 = new ArrayList<String>();
    tmp89.add("IMPALAD");

    tmp88.setContexts(tmp89);
    tmp88.setDescription("Total bytes of free buffer memory cached in the buffer pool.");
    tmp88.setKey("buffer-pool.free-buffer-bytes");
    tmp88.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp88.setLabel("Buffer Pool Free Buffer Bytes.");
    tmp88.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("buffer-pool.free-buffer-bytes", tmp88);
    TMetricDef tmp90 = new TMetricDef();
    List<String> tmp91 = new ArrayList<String>();
    tmp91.add("IMPALAD");

    tmp90.setContexts(tmp91);
    tmp90.setDescription("Total number of free buffers cached in the buffer pool.");
    tmp90.setKey("buffer-pool.free-buffers");
    tmp90.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp90.setLabel("Buffer Pool Free Buffers.");
    tmp90.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("buffer-pool.free-buffers", tmp90);
    TMetricDef tmp92 = new TMetricDef();
    List<String> tmp93 = new ArrayList<String>();
    tmp93.add("IMPALAD");

    tmp92.setContexts(tmp93);
    tmp92.setDescription("Maximum allowed bytes allocated by the buffer pool.");
    tmp92.setKey("buffer-pool.limit");
    tmp92.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp92.setLabel("Buffer Pool Allocated Memory Limit.");
    tmp92.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("buffer-pool.limit", tmp92);
    TMetricDef tmp94 = new TMetricDef();
    List<String> tmp95 = new ArrayList<String>();
    tmp95.add("IMPALAD");

    tmp94.setContexts(tmp95);
    tmp94.setDescription("Total bytes of buffers reserved by Impala subsystems");
    tmp94.setKey("buffer-pool.reserved");
    tmp94.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp94.setLabel("Buffer Pool Total Reserved Memory.");
    tmp94.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("buffer-pool.reserved", tmp94);
    TMetricDef tmp96 = new TMetricDef();
    List<String> tmp97 = new ArrayList<String>();
    tmp97.add("IMPALAD");

    tmp96.setContexts(tmp97);
    tmp96.setDescription("Total buffer memory currently allocated by the buffer pool.");
    tmp96.setKey("buffer-pool.system-allocated");
    tmp96.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp96.setLabel("Buffer Pool Total Allocated Memory.");
    tmp96.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("buffer-pool.system-allocated", tmp96);
    TMetricDef tmp98 = new TMetricDef();
    List<String> tmp99 = new ArrayList<String>();
    tmp99.add("IMPALAD");

    tmp98.setContexts(tmp99);
    tmp98.setDescription("Total bytes of buffer reservations by Impala subsystems that are currently unused");
    tmp98.setKey("buffer-pool.unused-reservation-bytes");
    tmp98.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp98.setLabel("Buffer Pool Unused Reservation Bytes.");
    tmp98.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("buffer-pool.unused-reservation-bytes", tmp98);
    TMetricDef tmp100 = new TMetricDef();
    List<String> tmp101 = new ArrayList<String>();
    tmp101.add("CATALOGSERVER");

    tmp100.setContexts(tmp101);
    tmp100.setDescription("Catalog Server Topic Processing Time");
    tmp100.setKey("catalog-server.topic-processing-time-s");
    tmp100.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp100.setLabel("Catalog Server Topic Processing Time");
    tmp100.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("catalog-server.topic-processing-time-s", tmp100);
    TMetricDef tmp102 = new TMetricDef();
    List<String> tmp103 = new ArrayList<String>();
    tmp103.add("IMPALAD");

    tmp102.setContexts(tmp103);
    tmp102.setDescription("Average time spent loading new values into the Impalad Catalog Cache.");
    tmp102.setKey("catalog.cache.average-load-time");
    tmp102.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp102.setLabel("Average Impalad catalog cache load time");
    tmp102.setUnits(org.apache.impala.thrift.TUnit.TIME_NS);

    TMetricDefs.put("catalog.cache.average-load-time", tmp102);
    TMetricDef tmp104 = new TMetricDef();
    List<String> tmp105 = new ArrayList<String>();
    tmp105.add("IMPALAD");

    tmp104.setContexts(tmp105);
    tmp104.setDescription("Total number of evictions from the Impalad Catalog Cache.");
    tmp104.setKey("catalog.cache.eviction-count");
    tmp104.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp104.setLabel("Impalad catalog cache eviction count");
    tmp104.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.eviction-count", tmp104);
    TMetricDef tmp106 = new TMetricDef();
    List<String> tmp107 = new ArrayList<String>();
    tmp107.add("IMPALAD");

    tmp106.setContexts(tmp107);
    tmp106.setDescription("Total number of Impalad Catalog cache hits.");
    tmp106.setKey("catalog.cache.hit-count");
    tmp106.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp106.setLabel("Impalad catalog cache hit count");
    tmp106.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.hit-count", tmp106);
    TMetricDef tmp108 = new TMetricDef();
    List<String> tmp109 = new ArrayList<String>();
    tmp109.add("IMPALAD");

    tmp108.setContexts(tmp109);
    tmp108.setDescription("Ratio of Impalad Catalog cache requests that were hits.");
    tmp108.setKey("catalog.cache.hit-rate");
    tmp108.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp108.setLabel("Impalad catalog cache hit rate");
    tmp108.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.hit-rate", tmp108);
    TMetricDef tmp110 = new TMetricDef();
    List<String> tmp111 = new ArrayList<String>();
    tmp111.add("IMPALAD");

    tmp110.setContexts(tmp111);
    tmp110.setDescription("Total requests to Impalad Catalog cache requests that loaded new values.");
    tmp110.setKey("catalog.cache.load-count");
    tmp110.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp110.setLabel("Impalad catalog cache load count");
    tmp110.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.load-count", tmp110);
    TMetricDef tmp112 = new TMetricDef();
    List<String> tmp113 = new ArrayList<String>();
    tmp113.add("IMPALAD");

    tmp112.setContexts(tmp113);
    tmp112.setDescription("Total requests to Impalad Catalog cache requests that threw exceptions loading new values.");
    tmp112.setKey("catalog.cache.load-exception-count");
    tmp112.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp112.setLabel("Impalad catalog cache load exception count");
    tmp112.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.load-exception-count", tmp112);
    TMetricDef tmp114 = new TMetricDef();
    List<String> tmp115 = new ArrayList<String>();
    tmp115.add("IMPALAD");

    tmp114.setContexts(tmp115);
    tmp114.setDescription("Ratio of Impalad Catalog cache requests that threw exceptions loading new values.");
    tmp114.setKey("catalog.cache.load-exception-rate");
    tmp114.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp114.setLabel("Impalad catalog cache load exception rate");
    tmp114.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.load-exception-rate", tmp114);
    TMetricDef tmp116 = new TMetricDef();
    List<String> tmp117 = new ArrayList<String>();
    tmp117.add("IMPALAD");

    tmp116.setContexts(tmp117);
    tmp116.setDescription("Number of Impalad Catalog cache requests that successfully loaded new values.");
    tmp116.setKey("catalog.cache.load-success-count");
    tmp116.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp116.setLabel("Impalad catalog cache load success count");
    tmp116.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.load-success-count", tmp116);
    TMetricDef tmp118 = new TMetricDef();
    List<String> tmp119 = new ArrayList<String>();
    tmp119.add("IMPALAD");

    tmp118.setContexts(tmp119);
    tmp118.setDescription("Number of Impalad Catalog cache requests that returned uncached values.");
    tmp118.setKey("catalog.cache.miss-count");
    tmp118.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp118.setLabel("Impalad catalog cache load miss count");
    tmp118.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.miss-count", tmp118);
    TMetricDef tmp120 = new TMetricDef();
    List<String> tmp121 = new ArrayList<String>();
    tmp121.add("IMPALAD");

    tmp120.setContexts(tmp121);
    tmp120.setDescription("Ratio of Impalad Catalog cache requests that were misses.");
    tmp120.setKey("catalog.cache.miss-rate");
    tmp120.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp120.setLabel("Impalad catalog cache load miss rate");
    tmp120.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.miss-rate", tmp120);
    TMetricDef tmp122 = new TMetricDef();
    List<String> tmp123 = new ArrayList<String>();
    tmp123.add("IMPALAD");

    tmp122.setContexts(tmp123);
    tmp122.setDescription("Total number of Impalad Catalog cache requests.");
    tmp122.setKey("catalog.cache.request-count");
    tmp122.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp122.setLabel("Impalad catalog cache request count");
    tmp122.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.cache.request-count", tmp122);
    TMetricDef tmp124 = new TMetricDef();
    List<String> tmp125 = new ArrayList<String>();
    tmp125.add("IMPALAD");

    tmp124.setContexts(tmp125);
    tmp124.setDescription("Total time spent in Impalad Catalog cache loading new values.");
    tmp124.setKey("catalog.cache.total-load-time");
    tmp124.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp124.setLabel("Impalad catalog cache time spent in loads");
    tmp124.setUnits(org.apache.impala.thrift.TUnit.TIME_NS);

    TMetricDefs.put("catalog.cache.total-load-time", tmp124);
    TMetricDef tmp126 = new TMetricDef();
    List<String> tmp127 = new ArrayList<String>();
    tmp127.add("IMPALAD");

    tmp126.setContexts(tmp127);
    tmp126.setDescription("Catalog service id.");
    tmp126.setKey("catalog.curr-serviceid");
    tmp126.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp126.setLabel("Catalog service id");
    tmp126.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.curr-serviceid", tmp126);
    TMetricDef tmp128 = new TMetricDef();
    List<String> tmp129 = new ArrayList<String>();
    tmp129.add("IMPALAD");

    tmp128.setContexts(tmp129);
    tmp128.setDescription("Statestore topic update version.");
    tmp128.setKey("catalog.curr-topic");
    tmp128.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp128.setLabel("Statestore topic update version");
    tmp128.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.curr-topic", tmp128);
    TMetricDef tmp130 = new TMetricDef();
    List<String> tmp131 = new ArrayList<String>();
    tmp131.add("IMPALAD");

    tmp130.setContexts(tmp131);
    tmp130.setDescription("Catalog topic update version.");
    tmp130.setKey("catalog.curr-version");
    tmp130.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp130.setLabel("Catalog topic update version");
    tmp130.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.curr-version", tmp130);
    TMetricDef tmp132 = new TMetricDef();
    List<String> tmp133 = new ArrayList<String>();
    tmp133.add("IMPALAD");

    tmp132.setContexts(tmp133);
    tmp132.setDescription("The number of databases in the catalog.");
    tmp132.setKey("catalog.num-databases");
    tmp132.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp132.setLabel("Databases");
    tmp132.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.num-databases", tmp132);
    TMetricDef tmp134 = new TMetricDef();
    List<String> tmp135 = new ArrayList<String>();
    tmp135.add("IMPALAD");

    tmp134.setContexts(tmp135);
    tmp134.setDescription("The number of tables in the catalog.");
    tmp134.setKey("catalog.num-tables");
    tmp134.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp134.setLabel("Tables");
    tmp134.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.num-tables", tmp134);
    TMetricDef tmp136 = new TMetricDef();
    List<String> tmp137 = new ArrayList<String>();
    tmp137.add("CATALOGSERVER");

    tmp136.setContexts(tmp137);
    tmp136.setDescription("RPC queue length for partial object fetches.");
    tmp136.setKey("catalog.partial-fetch-rpc.queue-len");
    tmp136.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp136.setLabel("RPC queue length for partial object fetch requests.");
    tmp136.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.partial-fetch-rpc.queue-len", tmp136);
    TMetricDef tmp138 = new TMetricDef();
    List<String> tmp139 = new ArrayList<String>();
    tmp139.add("IMPALAD");

    tmp138.setContexts(tmp139);
    tmp138.setDescription("Indicates if the catalog is ready.");
    tmp138.setKey("catalog.ready");
    tmp138.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp138.setLabel("Catalog Ready");
    tmp138.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.ready", tmp138);
    TMetricDef tmp140 = new TMetricDef();
    List<String> tmp141 = new ArrayList<String>();
    tmp141.add("IMPALAD");

    tmp140.setContexts(tmp141);
    tmp140.setDescription("The number of clients currently in use by the Catalog Server client cache.");
    tmp140.setKey("catalog.server.client-cache.clients-in-use");
    tmp140.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp140.setLabel("Catalog Server Client Cache Clients In Use");
    tmp140.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.server.client-cache.clients-in-use", tmp140);
    TMetricDef tmp142 = new TMetricDef();
    List<String> tmp143 = new ArrayList<String>();
    tmp143.add("IMPALAD");

    tmp142.setContexts(tmp143);
    tmp142.setDescription("The total number of clients in the Catalog Server client cache.");
    tmp142.setKey("catalog.server.client-cache.total-clients");
    tmp142.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp142.setLabel("Catalog Server Client Cache Total Clients");
    tmp142.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.server.client-cache.total-clients", tmp142);
    TMetricDef tmp144 = new TMetricDef();
    List<String> tmp145 = new ArrayList<String>();
    tmp145.add("CATALOGSERVER");

    tmp144.setContexts(tmp145);
    tmp144.setDescription("The full version string of the Catalog Server.");
    tmp144.setKey("catalog.version");
    tmp144.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp144.setLabel("Catalog Version");
    tmp144.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("catalog.version", tmp144);
    TMetricDef tmp146 = new TMetricDef();
    List<String> tmp147 = new ArrayList<String>();
    tmp147.add("IMPALAD");

    tmp146.setContexts(tmp147);
    tmp146.setDescription("The number of cgroups currently registered with the Cgroups Manager");
    tmp146.setKey("cgroups-mgr.active-cgroups");
    tmp146.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp146.setLabel("Cgroups Manager Active Cgroups");
    tmp146.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("cgroups-mgr.active-cgroups", tmp146);
    TMetricDef tmp148 = new TMetricDef();
    List<String> tmp149 = new ArrayList<String>();
    tmp149.add("IMPALAD");

    tmp148.setContexts(tmp149);
    tmp148.setDescription("Total number of backends registered with the statestore");
    tmp148.setKey("cluster-membership.backends.total");
    tmp148.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp148.setLabel("Total number of backends registered with the statestore");
    tmp148.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("cluster-membership.backends.total", tmp148);
    TMetricDef tmp150 = new TMetricDef();
    List<String> tmp151 = new ArrayList<String>();
    tmp151.add("IMPALAD");

    tmp150.setContexts(tmp151);
    tmp150.setDescription("Total number of executor groups that have at least one executor");
    tmp150.setKey("cluster-membership.executor-groups.total");
    tmp150.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp150.setLabel("Total number of executor groups that have at least one executor");
    tmp150.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("cluster-membership.executor-groups.total", tmp150);
    TMetricDef tmp152 = new TMetricDef();
    List<String> tmp153 = new ArrayList<String>();
    tmp153.add("IMPALAD");

    tmp152.setContexts(tmp153);
    tmp152.setDescription("Total number of executor groups that are in a healthy state, that is, have at least the configured minimum number of executors to be considered for admission");
    tmp152.setKey("cluster-membership.executor-groups.total-healthy");
    tmp152.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp152.setLabel("Total number of executor groups that are in a healthy state");
    tmp152.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("cluster-membership.executor-groups.total-healthy", tmp152);
    TMetricDef tmp154 = new TMetricDef();
    List<String> tmp155 = new ArrayList<String>();
    tmp155.add("CATALOGSERVER");

    tmp154.setContexts(tmp155);
    tmp154.setDescription("Average time taken to fetch a batch of metastore events");
    tmp154.setKey("events-processor.avg-events-fetch-duration");
    tmp154.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp154.setLabel("Average duration to fetch metastore events");
    tmp154.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("events-processor.avg-events-fetch-duration", tmp154);
    TMetricDef tmp156 = new TMetricDef();
    List<String> tmp157 = new ArrayList<String>();
    tmp157.add("CATALOGSERVER");

    tmp156.setContexts(tmp157);
    tmp156.setDescription("Average time taken to process a batch of events received from metastore");
    tmp156.setKey("events-processor.avg-events-process-duration");
    tmp156.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp156.setLabel("Average duration to process a batch of metastore events");
    tmp156.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("events-processor.avg-events-process-duration", tmp156);
    TMetricDef tmp158 = new TMetricDef();
    List<String> tmp159 = new ArrayList<String>();
    tmp159.add("CATALOGSERVER");

    tmp158.setContexts(tmp159);
    tmp158.setDescription("Total number of metastore events received");
    tmp158.setKey("events-processor.events-received");
    tmp158.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp158.setLabel("Total number of metastore events received");
    tmp158.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("events-processor.events-received", tmp158);
    TMetricDef tmp160 = new TMetricDef();
    List<String> tmp161 = new ArrayList<String>();
    tmp161.add("CATALOGSERVER");

    tmp160.setContexts(tmp161);
    tmp160.setDescription("Exponentially weighted moving average (EWMA) of number of events received in last 15 min");
    tmp160.setKey("events-processor.events-received-15min-rate");
    tmp160.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp160.setLabel("EWMA of number of events received in last 15 min");
    tmp160.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("events-processor.events-received-15min-rate", tmp160);
    TMetricDef tmp162 = new TMetricDef();
    List<String> tmp163 = new ArrayList<String>();
    tmp163.add("CATALOGSERVER");

    tmp162.setContexts(tmp163);
    tmp162.setDescription("Exponentially weighted moving average (EWMA) of number of events received in last 1 min");
    tmp162.setKey("events-processor.events-received-1min-rate");
    tmp162.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp162.setLabel("EWMA of events received in last 1 min");
    tmp162.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("events-processor.events-received-1min-rate", tmp162);
    TMetricDef tmp164 = new TMetricDef();
    List<String> tmp165 = new ArrayList<String>();
    tmp165.add("CATALOGSERVER");

    tmp164.setContexts(tmp165);
    tmp164.setDescription("Exponentially weighted moving average (EWMA) of number of events received in last 5 min");
    tmp164.setKey("events-processor.events-received-5min-rate");
    tmp164.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp164.setLabel("EWMA of number of events received in last 5 min");
    tmp164.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("events-processor.events-received-5min-rate", tmp164);
    TMetricDef tmp166 = new TMetricDef();
    List<String> tmp167 = new ArrayList<String>();
    tmp167.add("CATALOGSERVER");

    tmp166.setContexts(tmp167);
    tmp166.setDescription("Total number of metastore events skipped");
    tmp166.setKey("events-processor.events-skipped");
    tmp166.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp166.setLabel("Total number of metastore events skipped");
    tmp166.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("events-processor.events-skipped", tmp166);
    TMetricDef tmp168 = new TMetricDef();
    List<String> tmp169 = new ArrayList<String>();
    tmp169.add("CATALOGSERVER");

    tmp168.setContexts(tmp169);
    tmp168.setDescription("Last metastore event id that the catalog server processed and synced to");
    tmp168.setKey("events-processor.last-synced-event-id");
    tmp168.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp168.setLabel("Last Synced Event Id");
    tmp168.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("events-processor.last-synced-event-id", tmp168);
    TMetricDef tmp170 = new TMetricDef();
    List<String> tmp171 = new ArrayList<String>();
    tmp171.add("CATALOGSERVER");

    tmp170.setContexts(tmp171);
    tmp170.setDescription("Metastore event processor status");
    tmp170.setKey("events-processor.status");
    tmp170.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp170.setLabel("The status of Metastore event processor");
    tmp170.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("events-processor.status", tmp170);
    TMetricDef tmp172 = new TMetricDef();
    List<String> tmp173 = new ArrayList<String>();
    tmp173.add("IMPALAD");

    tmp172.setContexts(tmp173);
    tmp172.setDescription("Number of cache hits in the External Data Source Class Cache");
    tmp172.setKey("external-data-source.class-cache.hits");
    tmp172.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp172.setLabel("External Data Source Class Cache Hits");
    tmp172.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("external-data-source.class-cache.hits", tmp172);
    TMetricDef tmp174 = new TMetricDef();
    List<String> tmp175 = new ArrayList<String>();
    tmp175.add("IMPALAD");

    tmp174.setContexts(tmp175);
    tmp174.setDescription("Number of cache misses in the External Data Source Class Cache");
    tmp174.setKey("external-data-source.class-cache.misses");
    tmp174.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp174.setLabel("External Data Source Class Cache Misses");
    tmp174.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("external-data-source.class-cache.misses", tmp174);
    TMetricDef tmp176 = new TMetricDef();
    List<String> tmp177 = new ArrayList<String>();
    tmp177.add("IMPALAD");

    tmp176.setContexts(tmp177);
    tmp176.setDescription("The total number of queries that executed on this backend over the life of the process.");
    tmp176.setKey("impala-server.backend-num-queries-executed");
    tmp176.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp176.setLabel("Queries Executed On Backend");
    tmp176.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.backend-num-queries-executed", tmp176);
    TMetricDef tmp178 = new TMetricDef();
    List<String> tmp179 = new ArrayList<String>();
    tmp179.add("IMPALAD");

    tmp178.setContexts(tmp179);
    tmp178.setDescription("The number of queries currently executing on this backend.");
    tmp178.setKey("impala-server.backend-num-queries-executing");
    tmp178.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp178.setLabel("Queries Executing On Backend");
    tmp178.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.backend-num-queries-executing", tmp178);
    TMetricDef tmp180 = new TMetricDef();
    List<String> tmp181 = new ArrayList<String>();
    tmp181.add("IMPALAD");

    tmp180.setContexts(tmp181);
    tmp180.setDescription("The number of active Impala Backend clients. These clients are for communication with other Impala Daemons.");
    tmp180.setKey("impala-server.backends.client-cache.clients-in-use");
    tmp180.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp180.setLabel("Impala Backend Active Clients");
    tmp180.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.backends.client-cache.clients-in-use", tmp180);
    TMetricDef tmp182 = new TMetricDef();
    List<String> tmp183 = new ArrayList<String>();
    tmp183.add("IMPALAD");

    tmp182.setContexts(tmp183);
    tmp182.setDescription("The total number of Impala Backend clients in this Impala Daemon's client cache. These clients are for communication with other Impala Daemons.");
    tmp182.setKey("impala-server.backends.client-cache.total-clients");
    tmp182.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp182.setLabel("Impala Backend Total Clients");
    tmp182.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.backends.client-cache.total-clients", tmp182);
    TMetricDef tmp184 = new TMetricDef();
    List<String> tmp185 = new ArrayList<String>();
    tmp185.add("IMPALAD");

    tmp184.setContexts(tmp185);
    tmp184.setDescription("Distribution of DDL operation latencies");
    tmp184.setKey("impala-server.ddl-durations-ms");
    tmp184.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp184.setLabel("DDL latency distribution");
    tmp184.setUnits(org.apache.impala.thrift.TUnit.TIME_MS);

    TMetricDefs.put("impala-server.ddl-durations-ms", tmp184);
    TMetricDef tmp186 = new TMetricDef();
    List<String> tmp187 = new ArrayList<String>();
    tmp187.add("IMPALAD");

    tmp186.setContexts(tmp187);
    tmp186.setDescription("The total number of hedged reads attempted over the life of the process");
    tmp186.setKey("impala-server.hedged-read-ops");
    tmp186.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp186.setLabel("Hedged Read Operations");
    tmp186.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.hedged-read-ops", tmp186);
    TMetricDef tmp188 = new TMetricDef();
    List<String> tmp189 = new ArrayList<String>();
    tmp189.add("IMPALAD");

    tmp188.setContexts(tmp189);
    tmp188.setDescription("The total number of times hedged reads were faster than regular read operations");
    tmp188.setKey("impala-server.hedged-read-ops-win");
    tmp188.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp188.setLabel("Hedged Read Operations Won");
    tmp188.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.hedged-read-ops-win", tmp188);
    TMetricDef tmp190 = new TMetricDef();
    List<String> tmp191 = new ArrayList<String>();
    tmp191.add("IMPALAD");

    tmp190.setContexts(tmp191);
    tmp190.setDescription("The total number of bytes read by the IO manager.");
    tmp190.setKey("impala-server.io-mgr.bytes-read");
    tmp190.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp190.setLabel("Impala Server Io Mgr Bytes Read");
    tmp190.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.bytes-read", tmp190);
    TMetricDef tmp192 = new TMetricDef();
    List<String> tmp193 = new ArrayList<String>();
    tmp193.add("IMPALAD");

    tmp192.setContexts(tmp193);
    tmp192.setDescription("Total number of bytes written to disk by the IO manager.");
    tmp192.setKey("impala-server.io-mgr.bytes-written");
    tmp192.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp192.setLabel("Impala Server Io Mgr Bytes Written");
    tmp192.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.bytes-written", tmp192);
    TMetricDef tmp194 = new TMetricDef();
    List<String> tmp195 = new ArrayList<String>();
    tmp195.add("IMPALAD");

    tmp194.setContexts(tmp195);
    tmp194.setDescription("Total number of cached bytes read by the IO manager.");
    tmp194.setKey("impala-server.io-mgr.cached-bytes-read");
    tmp194.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp194.setLabel("Impala Server Io Mgr Cached Bytes Read");
    tmp194.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.cached-bytes-read", tmp194);
    TMetricDef tmp196 = new TMetricDef();
    List<String> tmp197 = new ArrayList<String>();
    tmp197.add("IMPALAD");

    tmp196.setContexts(tmp197);
    tmp196.setDescription("Total number of local bytes read by the IO manager.");
    tmp196.setKey("impala-server.io-mgr.local-bytes-read");
    tmp196.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp196.setLabel("Impala Server Io Mgr Local Bytes Read");
    tmp196.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.local-bytes-read", tmp196);
    TMetricDef tmp198 = new TMetricDef();
    List<String> tmp199 = new ArrayList<String>();
    tmp199.add("IMPALAD");

    tmp198.setContexts(tmp199);
    tmp198.setDescription("The number of allocated IO buffers. IO buffers are shared by all queries.");
    tmp198.setKey("impala-server.io-mgr.num-buffers");
    tmp198.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp198.setLabel("IO Buffers");
    tmp198.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io-mgr.num-buffers", tmp198);
    TMetricDef tmp200 = new TMetricDef();
    List<String> tmp201 = new ArrayList<String>();
    tmp201.add("IMPALAD");

    tmp200.setContexts(tmp201);
    tmp200.setDescription("The current number of files opened by the IO Manager");
    tmp200.setKey("impala-server.io-mgr.num-open-files");
    tmp200.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp200.setLabel("Open Files");
    tmp200.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io-mgr.num-open-files", tmp200);
    TMetricDef tmp202 = new TMetricDef();
    List<String> tmp203 = new ArrayList<String>();
    tmp203.add("IMPALAD");

    tmp202.setContexts(tmp203);
    tmp202.setDescription("The number of unused IO buffers. IO buffers are shared by all queries.");
    tmp202.setKey("impala-server.io-mgr.num-unused-buffers");
    tmp202.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp202.setLabel("Unused IO Buffers");
    tmp202.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io-mgr.num-unused-buffers", tmp202);
    TMetricDef tmp204 = new TMetricDef();
    List<String> tmp205 = new ArrayList<String>();
    tmp205.add("IMPALAD");

    tmp204.setContexts(tmp205);
    tmp204.setDescription("IO Manager device name.");
    tmp204.setKey("impala-server.io-mgr.queue-$0.device-name");
    tmp204.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp204.setLabel("Impala Server Io Mgr Queue Device Name");
    tmp204.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io-mgr.queue-$0.device-name", tmp204);
    TMetricDef tmp206 = new TMetricDef();
    List<String> tmp207 = new ArrayList<String>();
    tmp207.add("IMPALAD");

    tmp206.setContexts(tmp207);
    tmp206.setDescription("Histogram of read operation times on disk.");
    tmp206.setKey("impala-server.io-mgr.queue-$0.read-latency");
    tmp206.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp206.setLabel("Impala Server Io Mgr Read Latency Histogram");
    tmp206.setUnits(org.apache.impala.thrift.TUnit.TIME_NS);

    TMetricDefs.put("impala-server.io-mgr.queue-$0.read-latency", tmp206);
    TMetricDef tmp208 = new TMetricDef();
    List<String> tmp209 = new ArrayList<String>();
    tmp209.add("IMPALAD");

    tmp208.setContexts(tmp209);
    tmp208.setDescription("Histogram of read operation sizes on disk.");
    tmp208.setKey("impala-server.io-mgr.queue-$0.read-size");
    tmp208.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp208.setLabel("Impala Server Io Mgr Read Size Histogram");
    tmp208.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.queue-$0.read-size", tmp208);
    TMetricDef tmp210 = new TMetricDef();
    List<String> tmp211 = new ArrayList<String>();
    tmp211.add("IMPALAD");

    tmp210.setContexts(tmp211);
    tmp210.setDescription("Total number of bytes not inserted in remote data cache due to concurrency limit.");
    tmp210.setKey("impala-server.io-mgr.remote-data-cache-dropped-bytes");
    tmp210.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp210.setLabel("Impala Server Io Mgr Remote Data Cache Bytes Not Inserted Due To Concurrency limit");
    tmp210.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.io-mgr.remote-data-cache-dropped-bytes", tmp210);
    TMetricDef tmp212 = new TMetricDef();
    List<String> tmp213 = new ArrayList<String>();
    tmp213.add("IMPALAD");

    tmp212.setContexts(tmp213);
    tmp212.setDescription("Total number of bytes of hits in the remote data cache.");
    tmp212.setKey("impala-server.io-mgr.remote-data-cache-hit-bytes");
    tmp212.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp212.setLabel("Impala Server Io Mgr Remote Data Cache Hit In Bytes");
    tmp212.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.remote-data-cache-hit-bytes", tmp212);
    TMetricDef tmp214 = new TMetricDef();
    List<String> tmp215 = new ArrayList<String>();
    tmp215.add("IMPALAD");

    tmp214.setContexts(tmp215);
    tmp214.setDescription("Total number of bytes of misses in the remote data cache.");
    tmp214.setKey("impala-server.io-mgr.remote-data-cache-miss-bytes");
    tmp214.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp214.setLabel("Impala Server Io Mgr Remote Data Cache Miss In Bytes");
    tmp214.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.remote-data-cache-miss-bytes", tmp214);
    TMetricDef tmp216 = new TMetricDef();
    List<String> tmp217 = new ArrayList<String>();
    tmp217.add("IMPALAD");

    tmp216.setContexts(tmp217);
    tmp216.setDescription("Current byte size of the remote data cache.");
    tmp216.setKey("impala-server.io-mgr.remote-data-cache-total-bytes");
    tmp216.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp216.setLabel("Impala Server Io Mgr Remote Data Cache Bytes Size");
    tmp216.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.remote-data-cache-total-bytes", tmp216);
    TMetricDef tmp218 = new TMetricDef();
    List<String> tmp219 = new ArrayList<String>();
    tmp219.add("IMPALAD");

    tmp218.setContexts(tmp219);
    tmp218.setDescription("Total number of short-circuit bytes read by the IO manager.");
    tmp218.setKey("impala-server.io-mgr.short-circuit-bytes-read");
    tmp218.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp218.setLabel("Impala Server Io Mgr Short Circuit Bytes Read");
    tmp218.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.short-circuit-bytes-read", tmp218);
    TMetricDef tmp220 = new TMetricDef();
    List<String> tmp221 = new ArrayList<String>();
    tmp221.add("IMPALAD");

    tmp220.setContexts(tmp221);
    tmp220.setDescription("Number of bytes used by IO buffers (used and unused).");
    tmp220.setKey("impala-server.io-mgr.total-bytes");
    tmp220.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp220.setLabel("IO Buffers Total Size");
    tmp220.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("impala-server.io-mgr.total-bytes", tmp220);
    TMetricDef tmp222 = new TMetricDef();
    List<String> tmp223 = new ArrayList<String>();
    tmp223.add("IMPALAD");

    tmp222.setContexts(tmp223);
    tmp222.setDescription("Number of cache hits for cached HDFS file handles");
    tmp222.setKey("impala-server.io.mgr.cached-file-handles-hit-count");
    tmp222.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp222.setLabel("HDFS cached file handles hit count");
    tmp222.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io.mgr.cached-file-handles-hit-count", tmp222);
    TMetricDef tmp224 = new TMetricDef();
    List<String> tmp225 = new ArrayList<String>();
    tmp225.add("IMPALAD");

    tmp224.setContexts(tmp225);
    tmp224.setDescription("HDFS file handle cache hit ratio, between 0 and 1, where 1 means all reads were served from cached file handles.");
    tmp224.setKey("impala-server.io.mgr.cached-file-handles-hit-ratio");
    tmp224.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp224.setLabel("HDFS file handle cache hit ratio");
    tmp224.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io.mgr.cached-file-handles-hit-ratio", tmp224);
    TMetricDef tmp226 = new TMetricDef();
    List<String> tmp227 = new ArrayList<String>();
    tmp227.add("IMPALAD");

    tmp226.setContexts(tmp227);
    tmp226.setDescription("Number of cache misses for cached HDFS file handles");
    tmp226.setKey("impala-server.io.mgr.cached-file-handles-miss-count");
    tmp226.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp226.setLabel("HDFS cached file handles miss count");
    tmp226.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io.mgr.cached-file-handles-miss-count", tmp226);
    TMetricDef tmp228 = new TMetricDef();
    List<String> tmp229 = new ArrayList<String>();
    tmp229.add("IMPALAD");

    tmp228.setContexts(tmp229);
    tmp228.setDescription("Number of cached HDFS file handles reopened");
    tmp228.setKey("impala-server.io.mgr.cached-file-handles-reopened");
    tmp228.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp228.setLabel("HDFS cached file handles reopened");
    tmp228.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io.mgr.cached-file-handles-reopened", tmp228);
    TMetricDef tmp230 = new TMetricDef();
    List<String> tmp231 = new ArrayList<String>();
    tmp231.add("IMPALAD");

    tmp230.setContexts(tmp231);
    tmp230.setDescription("Number of currently cached HDFS file handles in the IO manager.");
    tmp230.setKey("impala-server.io.mgr.num-cached-file-handles");
    tmp230.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp230.setLabel("Number of cached HDFS file handles");
    tmp230.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io.mgr.num-cached-file-handles", tmp230);
    TMetricDef tmp232 = new TMetricDef();
    List<String> tmp233 = new ArrayList<String>();
    tmp233.add("IMPALAD");

    tmp232.setContexts(tmp233);
    tmp232.setDescription("Number of HDFS file handles that are currently in use by readers.");
    tmp232.setKey("impala-server.io.mgr.num-file-handles-outstanding");
    tmp232.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp232.setLabel("Number of outstanding HDFS file handles");
    tmp232.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.io.mgr.num-file-handles-outstanding", tmp232);
    TMetricDef tmp234 = new TMetricDef();
    List<String> tmp235 = new ArrayList<String>();
    tmp235.add("IMPALAD");

    tmp234.setContexts(tmp235);
    tmp234.setDescription("The number of HDFS files currently open for writing.");
    tmp234.setKey("impala-server.num-files-open-for-insert");
    tmp234.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp234.setLabel("Files Open For Insert");
    tmp234.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.num-files-open-for-insert", tmp234);
    TMetricDef tmp236 = new TMetricDef();
    List<String> tmp237 = new ArrayList<String>();
    tmp237.add("IMPALAD");

    tmp236.setContexts(tmp237);
    tmp236.setDescription("The total number of query fragments processed over the life of the process.");
    tmp236.setKey("impala-server.num-fragments");
    tmp236.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp236.setLabel("Query Fragment Instances");
    tmp236.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.num-fragments", tmp236);
    TMetricDef tmp238 = new TMetricDef();
    List<String> tmp239 = new ArrayList<String>();
    tmp239.add("IMPALAD");

    tmp238.setContexts(tmp239);
    tmp238.setDescription("The number of query fragment instances currently executing.");
    tmp238.setKey("impala-server.num-fragments-in-flight");
    tmp238.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp238.setLabel("Query Fragment Instances Executing");
    tmp238.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.num-fragments-in-flight", tmp238);
    TMetricDef tmp240 = new TMetricDef();
    List<String> tmp241 = new ArrayList<String>();
    tmp241.add("IMPALAD");

    tmp240.setContexts(tmp241);
    tmp240.setDescription("The number of open Beeswax sessions.");
    tmp240.setKey("impala-server.num-open-beeswax-sessions");
    tmp240.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp240.setLabel("Beeswax Sessions");
    tmp240.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.num-open-beeswax-sessions", tmp240);
    TMetricDef tmp242 = new TMetricDef();
    List<String> tmp243 = new ArrayList<String>();
    tmp243.add("IMPALAD");

    tmp242.setContexts(tmp243);
    tmp242.setDescription("The number of open HiveServer2 sessions.");
    tmp242.setKey("impala-server.num-open-hiveserver2-sessions");
    tmp242.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp242.setLabel("HiveServer2 Sessions");
    tmp242.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.num-open-hiveserver2-sessions", tmp242);
    TMetricDef tmp244 = new TMetricDef();
    List<String> tmp245 = new ArrayList<String>();
    tmp245.add("IMPALAD");

    tmp244.setContexts(tmp245);
    tmp244.setDescription("The total number of queries processed over the life of the process");
    tmp244.setKey("impala-server.num-queries");
    tmp244.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp244.setLabel("Queries");
    tmp244.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.num-queries", tmp244);
    TMetricDef tmp246 = new TMetricDef();
    List<String> tmp247 = new ArrayList<String>();
    tmp247.add("IMPALAD");

    tmp246.setContexts(tmp247);
    tmp246.setDescription("Number of queries expired due to inactivity.");
    tmp246.setKey("impala-server.num-queries-expired");
    tmp246.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp246.setLabel("Queries Expired");
    tmp246.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.num-queries-expired", tmp246);
    TMetricDef tmp248 = new TMetricDef();
    List<String> tmp249 = new ArrayList<String>();
    tmp249.add("IMPALAD");

    tmp248.setContexts(tmp249);
    tmp248.setDescription("The total number of queries registered on this Impala server instance. Includes queries that are in flight and waiting to be closed");
    tmp248.setKey("impala-server.num-queries-registered");
    tmp248.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp248.setLabel("Queries Registered");
    tmp248.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.num-queries-registered", tmp248);
    TMetricDef tmp250 = new TMetricDef();
    List<String> tmp251 = new ArrayList<String>();
    tmp251.add("IMPALAD");

    tmp250.setContexts(tmp251);
    tmp250.setDescription("Number of queries for which any operator spilled.");
    tmp250.setKey("impala-server.num-queries-spilled");
    tmp250.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp250.setLabel("Impala Server Num Queries Spilled");
    tmp250.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.num-queries-spilled", tmp250);
    TMetricDef tmp252 = new TMetricDef();
    List<String> tmp253 = new ArrayList<String>();
    tmp253.add("IMPALAD");

    tmp252.setContexts(tmp253);
    tmp252.setDescription("Number of sessions expired due to inactivity.");
    tmp252.setKey("impala-server.num-sessions-expired");
    tmp252.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp252.setLabel("Sessions Expired");
    tmp252.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.num-sessions-expired", tmp252);
    TMetricDef tmp254 = new TMetricDef();
    List<String> tmp255 = new ArrayList<String>();
    tmp255.add("IMPALAD");

    tmp254.setContexts(tmp255);
    tmp254.setDescription("Distribution of query latencies");
    tmp254.setKey("impala-server.query-durations-ms");
    tmp254.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp254.setLabel("Query latency distribution");
    tmp254.setUnits(org.apache.impala.thrift.TUnit.TIME_MS);

    TMetricDefs.put("impala-server.query-durations-ms", tmp254);
    TMetricDef tmp256 = new TMetricDef();
    List<String> tmp257 = new ArrayList<String>();
    tmp257.add("IMPALAD");

    tmp256.setContexts(tmp257);
    tmp256.setDescription("Indicates if the Impala Server is ready.");
    tmp256.setKey("impala-server.ready");
    tmp256.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp256.setLabel("Impala Server Ready");
    tmp256.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.ready", tmp256);
    TMetricDef tmp258 = new TMetricDef();
    List<String> tmp259 = new ArrayList<String>();
    tmp259.add("IMPALAD");

    tmp258.setContexts(tmp259);
    tmp258.setDescription("Total number of bytes consumed for rows cached to support HS2 FETCH_FIRST.");
    tmp258.setKey("impala-server.resultset-cache.total-bytes");
    tmp258.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp258.setLabel("Impala Server Resultset Cache Total Bytes");
    tmp258.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.resultset-cache.total-bytes", tmp258);
    TMetricDef tmp260 = new TMetricDef();
    List<String> tmp261 = new ArrayList<String>();
    tmp261.add("IMPALAD");

    tmp260.setContexts(tmp261);
    tmp260.setDescription("Total number of rows cached to support HS2 FETCH_FIRST.");
    tmp260.setKey("impala-server.resultset-cache.total-num-rows");
    tmp260.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp260.setLabel("Impala Server Resultset Cache Total Num Rows");
    tmp260.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.resultset-cache.total-num-rows", tmp260);
    TMetricDef tmp262 = new TMetricDef();
    List<String> tmp263 = new ArrayList<String>();
    tmp263.add("IMPALAD");

    tmp262.setContexts(tmp263);
    tmp262.setDescription("The total number of scan ranges read over the life of the process that did not have volume metadata");
    tmp262.setKey("impala-server.scan-ranges.num-missing-volume-id");
    tmp262.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp262.setLabel("Scan Ranges Missing Volume Information");
    tmp262.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.scan-ranges.num-missing-volume-id", tmp262);
    TMetricDef tmp264 = new TMetricDef();
    List<String> tmp265 = new ArrayList<String>();
    tmp265.add("IMPALAD");

    tmp264.setContexts(tmp265);
    tmp264.setDescription("The total number of scan ranges read over the life of the process");
    tmp264.setKey("impala-server.scan-ranges.total");
    tmp264.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp264.setLabel("Scan Ranges");
    tmp264.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala-server.scan-ranges.total", tmp264);
    TMetricDef tmp266 = new TMetricDef();
    List<String> tmp267 = new ArrayList<String>();
    tmp267.add("IMPALAD");

    tmp266.setContexts(tmp267);
    tmp266.setDescription("The full version string of the Impala Server.");
    tmp266.setKey("impala-server.version");
    tmp266.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp266.setLabel("Impala Server Version");
    tmp266.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala-server.version", tmp266);
    TMetricDef tmp268 = new TMetricDef();
    List<String> tmp269 = new ArrayList<String>();
    tmp269.add("CATALOGSERVER");

    tmp268.setContexts(tmp269);
    tmp268.setDescription("The number of connections to the Catalog Service that have been accepted and are waiting to be setup.");
    tmp268.setKey("impala.thrift-server.CatalogService.connection-setup-queue-size");
    tmp268.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp268.setLabel("Catalog Service Connections Queued for Setup");
    tmp268.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.CatalogService.connection-setup-queue-size", tmp268);
    TMetricDef tmp270 = new TMetricDef();
    List<String> tmp271 = new ArrayList<String>();
    tmp271.add("CATALOGSERVER");

    tmp270.setContexts(tmp271);
    tmp270.setDescription("Amount of time clients of Catalog Service spent waiting for connection to be set up");
    tmp270.setKey("impala.thrift-server.CatalogService.connection-setup-time");
    tmp270.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp270.setLabel("Catalog Service client connection setup time");
    tmp270.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.CatalogService.connection-setup-time", tmp270);
    TMetricDef tmp272 = new TMetricDef();
    List<String> tmp273 = new ArrayList<String>();
    tmp273.add("CATALOGSERVER");

    tmp272.setContexts(tmp273);
    tmp272.setDescription("The number of active catalog service connections to this Catalog Server.");
    tmp272.setKey("impala.thrift-server.CatalogService.connections-in-use");
    tmp272.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp272.setLabel("Catalog Service Active Connections");
    tmp272.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.CatalogService.connections-in-use", tmp272);
    TMetricDef tmp274 = new TMetricDef();
    List<String> tmp275 = new ArrayList<String>();
    tmp275.add("CATALOGSERVER");

    tmp274.setContexts(tmp275);
    tmp274.setDescription("Amount of time clients of Catalog Service spent waiting for service threads");
    tmp274.setKey("impala.thrift-server.CatalogService.svc-thread-wait-time");
    tmp274.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp274.setLabel("Catalog Service clients' wait time for service threads");
    tmp274.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.CatalogService.svc-thread-wait-time", tmp274);
    TMetricDef tmp276 = new TMetricDef();
    List<String> tmp277 = new ArrayList<String>();
    tmp277.add("CATALOGSERVER");

    tmp276.setContexts(tmp277);
    tmp276.setDescription("The number of connection requests to the Catalog Service that have been timed out waiting to be setup.");
    tmp276.setKey("impala.thrift-server.CatalogService.timedout-cnxn-requests");
    tmp276.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp276.setLabel("Catalog Service Connection Requests Timed Out");
    tmp276.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.CatalogService.timedout-cnxn-requests", tmp276);
    TMetricDef tmp278 = new TMetricDef();
    List<String> tmp279 = new ArrayList<String>();
    tmp279.add("CATALOGSERVER");

    tmp278.setContexts(tmp279);
    tmp278.setDescription("The total number of connections made to this Catalog Server's catalog service  over its lifetime.");
    tmp278.setKey("impala.thrift-server.CatalogService.total-connections");
    tmp278.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp278.setLabel("Catalog Service Total Connections");
    tmp278.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala.thrift-server.CatalogService.total-connections", tmp278);
    TMetricDef tmp280 = new TMetricDef();
    List<String> tmp281 = new ArrayList<String>();
    tmp281.add("IMPALAD");

    tmp280.setContexts(tmp281);
    tmp280.setDescription("The number of connections to the Statestore Service that have been accepted and are waiting to be setup.");
    tmp280.setKey("impala.thrift-server.StatestoreService.connection-setup-queue-size");
    tmp280.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp280.setLabel("Statestore Service Connections Queued for Setup");
    tmp280.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.StatestoreService.connection-setup-queue-size", tmp280);
    TMetricDef tmp282 = new TMetricDef();
    List<String> tmp283 = new ArrayList<String>();
    tmp283.add("STATESTORE");

    tmp282.setContexts(tmp283);
    tmp282.setDescription("Amount of time clients of StateStore Service spent waiting for connection to be set up");
    tmp282.setKey("impala.thrift-server.StatestoreService.connection-setup-time");
    tmp282.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp282.setLabel("StateStore Service client connection setup time");
    tmp282.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.StatestoreService.connection-setup-time", tmp282);
    TMetricDef tmp284 = new TMetricDef();
    List<String> tmp285 = new ArrayList<String>();
    tmp285.add("STATESTORE");

    tmp284.setContexts(tmp285);
    tmp284.setDescription("The number of active connections to this StateStore's service.");
    tmp284.setKey("impala.thrift-server.StatestoreService.connections-in-use");
    tmp284.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp284.setLabel("StateStore Service Active Connections");
    tmp284.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.StatestoreService.connections-in-use", tmp284);
    TMetricDef tmp286 = new TMetricDef();
    List<String> tmp287 = new ArrayList<String>();
    tmp287.add("STATESTORE");

    tmp286.setContexts(tmp287);
    tmp286.setDescription("Amount of time clients of StateStore Service spent waiting for service threads");
    tmp286.setKey("impala.thrift-server.StatestoreService.svc-thread-wait-time");
    tmp286.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp286.setLabel("StateStore Service clients' wait time for service threads");
    tmp286.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.StatestoreService.svc-thread-wait-time", tmp286);
    TMetricDef tmp288 = new TMetricDef();
    List<String> tmp289 = new ArrayList<String>();
    tmp289.add("IMPALAD");

    tmp288.setContexts(tmp289);
    tmp288.setDescription("The number of connection requests to the Statestore Service that have been timed out waiting to be setup.");
    tmp288.setKey("impala.thrift-server.StatestoreService.timedout-cnxn-requests");
    tmp288.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp288.setLabel("Statestore Service Connection Requests Timed Out");
    tmp288.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.StatestoreService.timedout-cnxn-requests", tmp288);
    TMetricDef tmp290 = new TMetricDef();
    List<String> tmp291 = new ArrayList<String>();
    tmp291.add("STATESTORE");

    tmp290.setContexts(tmp291);
    tmp290.setDescription("The total number of connections made to this StateStore's StateStore service over its lifetime.");
    tmp290.setKey("impala.thrift-server.StatestoreService.total-connections");
    tmp290.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp290.setLabel("StateStore Service Connections");
    tmp290.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala.thrift-server.StatestoreService.total-connections", tmp290);
    TMetricDef tmp292 = new TMetricDef();
    List<String> tmp293 = new ArrayList<String>();
    tmp293.add("IMPALAD");

    tmp292.setContexts(tmp293);
    tmp292.setDescription("The number of connections to the Impala Backend Server that have been accepted and are waiting to be setup.");
    tmp292.setKey("impala.thrift-server.backend.connection-setup-queue-size");
    tmp292.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp292.setLabel("Impala Backend Server Connections Queued for Setup");
    tmp292.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.backend.connection-setup-queue-size", tmp292);
    TMetricDef tmp294 = new TMetricDef();
    List<String> tmp295 = new ArrayList<String>();
    tmp295.add("IMPALAD");

    tmp294.setContexts(tmp295);
    tmp294.setDescription("Amount of time clients of Impala Backend Server spent waiting for connection to be set up");
    tmp294.setKey("impala.thrift-server.backend.connection-setup-time");
    tmp294.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp294.setLabel("Impala Backend client connections setup time");
    tmp294.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.backend.connection-setup-time", tmp294);
    TMetricDef tmp296 = new TMetricDef();
    List<String> tmp297 = new ArrayList<String>();
    tmp297.add("IMPALAD");

    tmp296.setContexts(tmp297);
    tmp296.setDescription("The number of active Impala Backend client connections to this Impala Daemon.");
    tmp296.setKey("impala.thrift-server.backend.connections-in-use");
    tmp296.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp296.setLabel("Impala Backend Server Active Connections");
    tmp296.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.backend.connections-in-use", tmp296);
    TMetricDef tmp298 = new TMetricDef();
    List<String> tmp299 = new ArrayList<String>();
    tmp299.add("IMPALAD");

    tmp298.setContexts(tmp299);
    tmp298.setDescription("Amount of time clients of Impala Backend Server spent waiting for service threads");
    tmp298.setKey("impala.thrift-server.backend.svc-thread-wait-time");
    tmp298.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp298.setLabel("Impala Backend Server clients' wait time for service threads");
    tmp298.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.backend.svc-thread-wait-time", tmp298);
    TMetricDef tmp300 = new TMetricDef();
    List<String> tmp301 = new ArrayList<String>();
    tmp301.add("IMPALAD");

    tmp300.setContexts(tmp301);
    tmp300.setDescription("The number of connection requests to the Impala Backend Server that have been timed out waiting to be setup.");
    tmp300.setKey("impala.thrift-server.backend.timedout-cnxn-requests");
    tmp300.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp300.setLabel("Impala Backend Server Connection Requests Timed Out");
    tmp300.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.backend.timedout-cnxn-requests", tmp300);
    TMetricDef tmp302 = new TMetricDef();
    List<String> tmp303 = new ArrayList<String>();
    tmp303.add("IMPALAD");

    tmp302.setContexts(tmp303);
    tmp302.setDescription("The total number of Impala Backend client connections made to this Impala Daemon over its lifetime.");
    tmp302.setKey("impala.thrift-server.backend.total-connections");
    tmp302.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp302.setLabel("Impala Backend Server Connections");
    tmp302.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala.thrift-server.backend.total-connections", tmp302);
    TMetricDef tmp304 = new TMetricDef();
    List<String> tmp305 = new ArrayList<String>();
    tmp305.add("IMPALAD");

    tmp304.setContexts(tmp305);
    tmp304.setDescription("The number of Beeswax API connections to this Impala Daemon that have been accepted and are waiting to be setup.");
    tmp304.setKey("impala.thrift-server.beeswax-frontend.connection-setup-queue-size");
    tmp304.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp304.setLabel("Beeswax API Connections Queued for Setup");
    tmp304.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.beeswax-frontend.connection-setup-queue-size", tmp304);
    TMetricDef tmp306 = new TMetricDef();
    List<String> tmp307 = new ArrayList<String>();
    tmp307.add("IMPALAD");

    tmp306.setContexts(tmp307);
    tmp306.setDescription("Amount of time clients of Beeswax API spent waiting for connection to be set up");
    tmp306.setKey("impala.thrift-server.beeswax-frontend.connection-setup-time");
    tmp306.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp306.setLabel("Beeswax API client connection setup time");
    tmp306.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.beeswax-frontend.connection-setup-time", tmp306);
    TMetricDef tmp308 = new TMetricDef();
    List<String> tmp309 = new ArrayList<String>();
    tmp309.add("IMPALAD");

    tmp308.setContexts(tmp309);
    tmp308.setDescription("The number of active Beeswax API connections to this Impala Daemon.");
    tmp308.setKey("impala.thrift-server.beeswax-frontend.connections-in-use");
    tmp308.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp308.setLabel("Beeswax API Active Connections");
    tmp308.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.beeswax-frontend.connections-in-use", tmp308);
    TMetricDef tmp310 = new TMetricDef();
    List<String> tmp311 = new ArrayList<String>();
    tmp311.add("IMPALAD");

    tmp310.setContexts(tmp311);
    tmp310.setDescription("Amount of time clients of Beeswax API spent waiting for service threads");
    tmp310.setKey("impala.thrift-server.beeswax-frontend.svc-thread-wait-time");
    tmp310.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp310.setLabel("Beeswax API clients' wait time for service threads");
    tmp310.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.beeswax-frontend.svc-thread-wait-time", tmp310);
    TMetricDef tmp312 = new TMetricDef();
    List<String> tmp313 = new ArrayList<String>();
    tmp313.add("IMPALAD");

    tmp312.setContexts(tmp313);
    tmp312.setDescription("The number of Beeswax API connection requests to this Impala Daemon that have been timed out waiting to be setup.");
    tmp312.setKey("impala.thrift-server.beeswax-frontend.timedout-cnxn-requests");
    tmp312.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp312.setLabel("Beeswax API Connection Requests Timed Out");
    tmp312.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.beeswax-frontend.timedout-cnxn-requests", tmp312);
    TMetricDef tmp314 = new TMetricDef();
    List<String> tmp315 = new ArrayList<String>();
    tmp315.add("IMPALAD");

    tmp314.setContexts(tmp315);
    tmp314.setDescription("The total number of Beeswax API connections made to this Impala Daemon over its lifetime.");
    tmp314.setKey("impala.thrift-server.beeswax-frontend.total-connections");
    tmp314.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp314.setLabel("Beeswax API Total Connections");
    tmp314.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala.thrift-server.beeswax-frontend.total-connections", tmp314);
    TMetricDef tmp316 = new TMetricDef();
    List<String> tmp317 = new ArrayList<String>();
    tmp317.add("IMPALAD");

    tmp316.setContexts(tmp317);
    tmp316.setDescription("The number of HiveServer2 API connections to this Impala Daemon that have been accepted and are waiting to be setup.");
    tmp316.setKey("impala.thrift-server.hiveserver2-frontend.connection-setup-queue-size");
    tmp316.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp316.setLabel("HiveServer2 API Connections Queued for Setup");
    tmp316.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-frontend.connection-setup-queue-size", tmp316);
    TMetricDef tmp318 = new TMetricDef();
    List<String> tmp319 = new ArrayList<String>();
    tmp319.add("IMPALAD");

    tmp318.setContexts(tmp319);
    tmp318.setDescription("Amount of time clients of HiveServer2 API spent waiting for connection to be set up");
    tmp318.setKey("impala.thrift-server.hiveserver2-frontend.connection-setup-time");
    tmp318.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp318.setLabel("HiveServer2 API client connection setup time");
    tmp318.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.hiveserver2-frontend.connection-setup-time", tmp318);
    TMetricDef tmp320 = new TMetricDef();
    List<String> tmp321 = new ArrayList<String>();
    tmp321.add("IMPALAD");

    tmp320.setContexts(tmp321);
    tmp320.setDescription("The number of active HiveServer2 API connections to this Impala Daemon.");
    tmp320.setKey("impala.thrift-server.hiveserver2-frontend.connections-in-use");
    tmp320.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp320.setLabel("HiveServer2 API Active Connections");
    tmp320.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-frontend.connections-in-use", tmp320);
    TMetricDef tmp322 = new TMetricDef();
    List<String> tmp323 = new ArrayList<String>();
    tmp323.add("IMPALAD");

    tmp322.setContexts(tmp323);
    tmp322.setDescription("Amount of time clients of HiveServer2 API spent waiting for service threads");
    tmp322.setKey("impala.thrift-server.hiveserver2-frontend.svc-thread-wait-time");
    tmp322.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp322.setLabel("HiveServer2 API clients' wait time for service threads");
    tmp322.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.hiveserver2-frontend.svc-thread-wait-time", tmp322);
    TMetricDef tmp324 = new TMetricDef();
    List<String> tmp325 = new ArrayList<String>();
    tmp325.add("IMPALAD");

    tmp324.setContexts(tmp325);
    tmp324.setDescription("The number of HiveServer2 API connection requests to this Impala Daemon that have been timed out waiting to be setup.");
    tmp324.setKey("impala.thrift-server.hiveserver2-frontend.timedout-cnxn-requests");
    tmp324.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp324.setLabel("HiveServer2 API Connection Requests Timed Out");
    tmp324.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-frontend.timedout-cnxn-requests", tmp324);
    TMetricDef tmp326 = new TMetricDef();
    List<String> tmp327 = new ArrayList<String>();
    tmp327.add("IMPALAD");

    tmp326.setContexts(tmp327);
    tmp326.setDescription("The total number of HiveServer2 API connections made to this Impala Daemon over its lifetime.");
    tmp326.setKey("impala.thrift-server.hiveserver2-frontend.total-connections");
    tmp326.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp326.setLabel("HiveServer2 API Total Connections");
    tmp326.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala.thrift-server.hiveserver2-frontend.total-connections", tmp326);
    TMetricDef tmp328 = new TMetricDef();
    List<String> tmp329 = new ArrayList<String>();
    tmp329.add("IMPALAD");

    tmp328.setContexts(tmp329);
    tmp328.setDescription("The number of HiveServer2 HTTP API connections to this Impala Daemon that have been accepted and are waiting to be setup.");
    tmp328.setKey("impala.thrift-server.hiveserver2-http-frontend.connection-setup-queue-size");
    tmp328.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp328.setLabel("HiveServer2 HTTP API Connections Queued for Setup");
    tmp328.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.connection-setup-queue-size", tmp328);
    TMetricDef tmp330 = new TMetricDef();
    List<String> tmp331 = new ArrayList<String>();
    tmp331.add("IMPALAD");

    tmp330.setContexts(tmp331);
    tmp330.setDescription("Amount of time clients of HiveServer2 HTTP API spent waiting for connection to be set up");
    tmp330.setKey("impala.thrift-server.hiveserver2-http-frontend.connection-setup-time");
    tmp330.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp330.setLabel("HiveServer2 HTTP API client connection setup time");
    tmp330.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.connection-setup-time", tmp330);
    TMetricDef tmp332 = new TMetricDef();
    List<String> tmp333 = new ArrayList<String>();
    tmp333.add("IMPALAD");

    tmp332.setContexts(tmp333);
    tmp332.setDescription("The number of active HiveServer2 HTTP API connections to this Impala Daemon.");
    tmp332.setKey("impala.thrift-server.hiveserver2-http-frontend.connections-in-use");
    tmp332.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp332.setLabel("HiveServer2 HTTP API Active Connections");
    tmp332.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.connections-in-use", tmp332);
    TMetricDef tmp334 = new TMetricDef();
    List<String> tmp335 = new ArrayList<String>();
    tmp335.add("IMPALAD");

    tmp334.setContexts(tmp335);
    tmp334.setDescription("Amount of time clients of HiveServer2 HTTP API spent waiting for service threads");
    tmp334.setKey("impala.thrift-server.hiveserver2-http-frontend.svc-thread-wait-time");
    tmp334.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp334.setLabel("HiveServer2 HTTP API clients' wait time for service threads");
    tmp334.setUnits(org.apache.impala.thrift.TUnit.TIME_US);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.svc-thread-wait-time", tmp334);
    TMetricDef tmp336 = new TMetricDef();
    List<String> tmp337 = new ArrayList<String>();
    tmp337.add("IMPALAD");

    tmp336.setContexts(tmp337);
    tmp336.setDescription("The number of HiveServer2 HTTP API connection requests to this Impala Daemon that have been timed out waiting to be setup.");
    tmp336.setKey("impala.thrift-server.hiveserver2-http-frontend.timedout-cnxn-requests");
    tmp336.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp336.setLabel("HiveServer2 HTTP API Connection Requests Timed Out");
    tmp336.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.timedout-cnxn-requests", tmp336);
    TMetricDef tmp338 = new TMetricDef();
    List<String> tmp339 = new ArrayList<String>();
    tmp339.add("IMPALAD");

    tmp338.setContexts(tmp339);
    tmp338.setDescription("The number of HiveServer2 HTTP API connection requests to this Impala Daemon that failed to authenticate with Basic auth due to an invalid username or password.");
    tmp338.setKey("impala.thrift-server.hiveserver2-http-frontend.total-basic-auth-failure");
    tmp338.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp338.setLabel("HiveServer2 HTTP API Connection Basic Auth Failure");
    tmp338.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.total-basic-auth-failure", tmp338);
    TMetricDef tmp340 = new TMetricDef();
    List<String> tmp341 = new ArrayList<String>();
    tmp341.add("IMPALAD");

    tmp340.setContexts(tmp341);
    tmp340.setDescription("The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were successfully authenticated with Basic (username/password) auth.");
    tmp340.setKey("impala.thrift-server.hiveserver2-http-frontend.total-basic-auth-success");
    tmp340.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp340.setLabel("HiveServer2 HTTP API Connection Basic Auth Success");
    tmp340.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.total-basic-auth-success", tmp340);
    TMetricDef tmp342 = new TMetricDef();
    List<String> tmp343 = new ArrayList<String>();
    tmp343.add("IMPALAD");

    tmp342.setContexts(tmp343);
    tmp342.setDescription("The total number of HiveServer2 HTTP API connections made to this Impala Daemon over its lifetime.");
    tmp342.setKey("impala.thrift-server.hiveserver2-http-frontend.total-connections");
    tmp342.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp342.setLabel("HiveServer2 HTTP API Total Connections");
    tmp342.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.total-connections", tmp342);
    TMetricDef tmp344 = new TMetricDef();
    List<String> tmp345 = new ArrayList<String>();
    tmp345.add("IMPALAD");

    tmp344.setContexts(tmp345);
    tmp344.setDescription("The number of HiveServer2 HTTP API connection requests to this Impala Daemon that provided an invalid cookie.");
    tmp344.setKey("impala.thrift-server.hiveserver2-http-frontend.total-cookie-auth-failure");
    tmp344.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp344.setLabel("HiveServer2 HTTP API Connection Cookie Auth Failure");
    tmp344.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.total-cookie-auth-failure", tmp344);
    TMetricDef tmp346 = new TMetricDef();
    List<String> tmp347 = new ArrayList<String>();
    tmp347.add("IMPALAD");

    tmp346.setContexts(tmp347);
    tmp346.setDescription("The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were successfully authenticated using a cookie.");
    tmp346.setKey("impala.thrift-server.hiveserver2-http-frontend.total-cookie-auth-success");
    tmp346.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp346.setLabel("HiveServer2 HTTP API Connection Cookie Auth Success");
    tmp346.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.total-cookie-auth-success", tmp346);
    TMetricDef tmp348 = new TMetricDef();
    List<String> tmp349 = new ArrayList<String>();
    tmp349.add("IMPALAD");

    tmp348.setContexts(tmp349);
    tmp348.setDescription("The number of HiveServer2 HTTP API connection requests to this Impala Daemon that attempted to authenticate with Kerberos but were unsuccessful.");
    tmp348.setKey("impala.thrift-server.hiveserver2-http-frontend.total-negotiate-auth-failure");
    tmp348.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp348.setLabel("HiveServer2 HTTP API Connection Kerberos Auth Failure");
    tmp348.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.total-negotiate-auth-failure", tmp348);
    TMetricDef tmp350 = new TMetricDef();
    List<String> tmp351 = new ArrayList<String>();
    tmp351.add("IMPALAD");

    tmp350.setContexts(tmp351);
    tmp350.setDescription("The number of HiveServer2 HTTP API connection requests to this Impala Daemon that were successfully authenticated with Kerberos");
    tmp350.setKey("impala.thrift-server.hiveserver2-http-frontend.total-negotiate-auth-success");
    tmp350.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp350.setLabel("HiveServer2 HTTP API Connection Kerberos Auth Success");
    tmp350.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.thrift-server.hiveserver2-http-frontend.total-negotiate-auth-success", tmp350);
    TMetricDef tmp352 = new TMetricDef();
    List<String> tmp353 = new ArrayList<String>();
    tmp353.add("IMPALAD");
    tmp353.add("CATALOGSERVER");
    tmp353.add("STATESTORE");

    tmp352.setContexts(tmp353);
    tmp352.setDescription("The number of HTTP connection requests to this daemon's webserver that provided an invalid cookie.");
    tmp352.setKey("impala.webserver.total-cookie-auth-failure");
    tmp352.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp352.setLabel("Webserver HTTP Connection Cookie Auth Failure");
    tmp352.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.webserver.total-cookie-auth-failure", tmp352);
    TMetricDef tmp354 = new TMetricDef();
    List<String> tmp355 = new ArrayList<String>();
    tmp355.add("IMPALAD");
    tmp355.add("CATALOGSERVER");
    tmp355.add("STATESTORE");

    tmp354.setContexts(tmp355);
    tmp354.setDescription("The number of HTTP connection requests to this daemon's webserver that were successfully authenticated using a cookie.");
    tmp354.setKey("impala.webserver.total-cookie-auth-success");
    tmp354.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp354.setLabel("Webserver HTTP Connection Cookie Auth Success");
    tmp354.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.webserver.total-cookie-auth-success", tmp354);
    TMetricDef tmp356 = new TMetricDef();
    List<String> tmp357 = new ArrayList<String>();
    tmp357.add("IMPALAD");
    tmp357.add("CATALOGSERVER");
    tmp357.add("STATESTORE");

    tmp356.setContexts(tmp357);
    tmp356.setDescription("The number of HTTP connection requests to this daemon's webserver that attempted to authenticate with Kerberos but were unsuccessful.");
    tmp356.setKey("impala.webserver.total-negotiate-auth-failure");
    tmp356.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp356.setLabel("Webserver HTTP Connection Kerberos Auth Failure");
    tmp356.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.webserver.total-negotiate-auth-failure", tmp356);
    TMetricDef tmp358 = new TMetricDef();
    List<String> tmp359 = new ArrayList<String>();
    tmp359.add("IMPALAD");
    tmp359.add("CATALOGSERVER");
    tmp359.add("STATESTORE");

    tmp358.setContexts(tmp359);
    tmp358.setDescription("The number of HTTP connection requests to this daemon's webserver that were successfully authenticated with Kerberos");
    tmp358.setKey("impala.webserver.total-negotiate-auth-success");
    tmp358.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp358.setLabel("Webserver HTTP Connection Kerberos Auth Success");
    tmp358.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("impala.webserver.total-negotiate-auth-success", tmp358);
    TMetricDef tmp360 = new TMetricDef();
    List<String> tmp361 = new ArrayList<String>();
    tmp361.add("CATALOGSERVER");
    tmp361.add("IMPALAD");

    tmp360.setContexts(tmp361);
    tmp360.setDescription("Jvm $0 Committed Usage Bytes");
    tmp360.setKey("jvm.$0.committed-usage-bytes");
    tmp360.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp360.setLabel("Jvm $0 Committed Usage Bytes");
    tmp360.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("jvm.$0.committed-usage-bytes", tmp360);
    TMetricDef tmp362 = new TMetricDef();
    List<String> tmp363 = new ArrayList<String>();
    tmp363.add("CATALOGSERVER");
    tmp363.add("IMPALAD");

    tmp362.setContexts(tmp363);
    tmp362.setDescription("Jvm $0 Current Usage Bytes");
    tmp362.setKey("jvm.$0.current-usage-bytes");
    tmp362.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp362.setLabel("Jvm $0 Current Usage Bytes");
    tmp362.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("jvm.$0.current-usage-bytes", tmp362);
    TMetricDef tmp364 = new TMetricDef();
    List<String> tmp365 = new ArrayList<String>();
    tmp365.add("CATALOGSERVER");
    tmp365.add("IMPALAD");

    tmp364.setContexts(tmp365);
    tmp364.setDescription("Jvm $0 Init Usage Bytes");
    tmp364.setKey("jvm.$0.init-usage-bytes");
    tmp364.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp364.setLabel("Jvm $0 Init Usage Bytes");
    tmp364.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("jvm.$0.init-usage-bytes", tmp364);
    TMetricDef tmp366 = new TMetricDef();
    List<String> tmp367 = new ArrayList<String>();
    tmp367.add("CATALOGSERVER");
    tmp367.add("IMPALAD");

    tmp366.setContexts(tmp367);
    tmp366.setDescription("Jvm $0 Max Usage Bytes");
    tmp366.setKey("jvm.$0.max-usage-bytes");
    tmp366.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp366.setLabel("Jvm $0 Max Usage Bytes");
    tmp366.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("jvm.$0.max-usage-bytes", tmp366);
    TMetricDef tmp368 = new TMetricDef();
    List<String> tmp369 = new ArrayList<String>();
    tmp369.add("CATALOGSERVER");
    tmp369.add("IMPALAD");

    tmp368.setContexts(tmp369);
    tmp368.setDescription("Jvm $0 Peak Committed Usage Bytes");
    tmp368.setKey("jvm.$0.peak-committed-usage-bytes");
    tmp368.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp368.setLabel("Jvm $0 Peak Committed Usage Bytes");
    tmp368.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("jvm.$0.peak-committed-usage-bytes", tmp368);
    TMetricDef tmp370 = new TMetricDef();
    List<String> tmp371 = new ArrayList<String>();
    tmp371.add("CATALOGSERVER");
    tmp371.add("IMPALAD");

    tmp370.setContexts(tmp371);
    tmp370.setDescription("Jvm $0 Peak Current Usage Bytes");
    tmp370.setKey("jvm.$0.peak-current-usage-bytes");
    tmp370.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp370.setLabel("Jvm $0 Peak Current Usage Bytes");
    tmp370.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("jvm.$0.peak-current-usage-bytes", tmp370);
    TMetricDef tmp372 = new TMetricDef();
    List<String> tmp373 = new ArrayList<String>();
    tmp373.add("CATALOGSERVER");
    tmp373.add("IMPALAD");

    tmp372.setContexts(tmp373);
    tmp372.setDescription("Jvm $0 Peak Init Usage Bytes");
    tmp372.setKey("jvm.$0.peak-init-usage-bytes");
    tmp372.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp372.setLabel("Jvm $0 Peak Init Usage Bytes");
    tmp372.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("jvm.$0.peak-init-usage-bytes", tmp372);
    TMetricDef tmp374 = new TMetricDef();
    List<String> tmp375 = new ArrayList<String>();
    tmp375.add("CATALOGSERVER");
    tmp375.add("IMPALAD");

    tmp374.setContexts(tmp375);
    tmp374.setDescription("Jvm $0 Peak Max Usage Bytes");
    tmp374.setKey("jvm.$0.peak-max-usage-bytes");
    tmp374.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp374.setLabel("Jvm $0 Peak Max Usage Bytes");
    tmp374.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("jvm.$0.peak-max-usage-bytes", tmp374);
    TMetricDef tmp376 = new TMetricDef();
    List<String> tmp377 = new ArrayList<String>();
    tmp377.add("CATALOGSERVER");
    tmp377.add("IMPALAD");

    tmp376.setContexts(tmp377);
    tmp376.setDescription("Jvm Garbage Collection Count");
    tmp376.setKey("jvm.gc_count");
    tmp376.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp376.setLabel("Jvm Garbage Collection Count");
    tmp376.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("jvm.gc_count", tmp376);
    TMetricDef tmp378 = new TMetricDef();
    List<String> tmp379 = new ArrayList<String>();
    tmp379.add("CATALOGSERVER");
    tmp379.add("IMPALAD");

    tmp378.setContexts(tmp379);
    tmp378.setDescription("Jvm Pause Detection Info Threshold Exceeded");
    tmp378.setKey("jvm.gc_num_info_threshold_exceeded");
    tmp378.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp378.setLabel("Jvm Pause Detector Info Threshold Exceeded");
    tmp378.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("jvm.gc_num_info_threshold_exceeded", tmp378);
    TMetricDef tmp380 = new TMetricDef();
    List<String> tmp381 = new ArrayList<String>();
    tmp381.add("CATALOGSERVER");
    tmp381.add("IMPALAD");

    tmp380.setContexts(tmp381);
    tmp380.setDescription("Jvm Pause Detection Warning Threshold Exceeded");
    tmp380.setKey("jvm.gc_num_warn_threshold_exceeded");
    tmp380.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp380.setLabel("Jvm Pause Detector Warn Threshold Exceeded");
    tmp380.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("jvm.gc_num_warn_threshold_exceeded", tmp380);
    TMetricDef tmp382 = new TMetricDef();
    List<String> tmp383 = new ArrayList<String>();
    tmp383.add("CATALOGSERVER");
    tmp383.add("IMPALAD");

    tmp382.setContexts(tmp383);
    tmp382.setDescription("Jvm Garbage Collection Time");
    tmp382.setKey("jvm.gc_time_millis");
    tmp382.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp382.setLabel("Jvm Garbage Collection Time");
    tmp382.setUnits(org.apache.impala.thrift.TUnit.TIME_MS);

    TMetricDefs.put("jvm.gc_time_millis", tmp382);
    TMetricDef tmp384 = new TMetricDef();
    List<String> tmp385 = new ArrayList<String>();
    tmp385.add("CATALOGSERVER");
    tmp385.add("IMPALAD");

    tmp384.setContexts(tmp385);
    tmp384.setDescription("Jvm Pause Detection Extra Sleep Time");
    tmp384.setKey("jvm.gc_total_extra_sleep_time_millis");
    tmp384.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp384.setLabel("Jvm Pause Detector Extra Sleep Time");
    tmp384.setUnits(org.apache.impala.thrift.TUnit.TIME_MS);

    TMetricDefs.put("jvm.gc_total_extra_sleep_time_millis", tmp384);
    TMetricDef tmp386 = new TMetricDef();
    List<String> tmp387 = new ArrayList<String>();
    tmp387.add("IMPALAD");
    tmp387.add("CATALOGSERVER");
    tmp387.add("STATESTORE");

    tmp386.setContexts(tmp387);
    tmp386.setDescription("A version string identifying the Kudu client");
    tmp386.setKey("kudu-client.version");
    tmp386.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp386.setLabel("Kudu Client Version");
    tmp386.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("kudu-client.version", tmp386);
    TMetricDef tmp388 = new TMetricDef();
    List<String> tmp389 = new ArrayList<String>();
    tmp389.add("IMPALAD");

    tmp388.setContexts(tmp389);
    tmp388.setDescription("Memtracker $0 Current Usage Bytes");
    tmp388.setKey("mem-tracker.$0.current_usage_bytes");
    tmp388.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp388.setLabel("Memtracker $0 Current Usage Bytes");
    tmp388.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("mem-tracker.$0.current_usage_bytes", tmp388);
    TMetricDef tmp390 = new TMetricDef();
    List<String> tmp391 = new ArrayList<String>();
    tmp391.add("IMPALAD");

    tmp390.setContexts(tmp391);
    tmp390.setDescription("Memtracker $0 Peak Usage Bytes");
    tmp390.setKey("mem-tracker.$0.peak_usage_bytes");
    tmp390.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp390.setLabel("Memtracker $0 Peak Max Bytes");
    tmp390.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("mem-tracker.$0.peak_usage_bytes", tmp390);
    TMetricDef tmp392 = new TMetricDef();
    List<String> tmp393 = new ArrayList<String>();
    tmp393.add("IMPALAD");

    tmp392.setContexts(tmp393);
    tmp392.setDescription("The amount of memory freed by the last memory tracker garbage collection.");
    tmp392.setKey("mem-tracker.process.bytes-freed-by-last-gc");
    tmp392.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp392.setLabel("MemTracker Bytes Freed By Last Garbage Collection");
    tmp392.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("mem-tracker.process.bytes-freed-by-last-gc", tmp392);
    TMetricDef tmp394 = new TMetricDef();
    List<String> tmp395 = new ArrayList<String>();
    tmp395.add("IMPALAD");

    tmp394.setContexts(tmp395);
    tmp394.setDescription("The amount of memory by which the process was over its memory limit the last time the memory limit was encountered.");
    tmp394.setKey("mem-tracker.process.bytes-over-limit");
    tmp394.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp394.setLabel("MemTracker Bytes Over Limit");
    tmp394.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("mem-tracker.process.bytes-over-limit", tmp394);
    TMetricDef tmp396 = new TMetricDef();
    List<String> tmp397 = new ArrayList<String>();
    tmp397.add("IMPALAD");

    tmp396.setContexts(tmp397);
    tmp396.setDescription("The process memory tracker limit.");
    tmp396.setKey("mem-tracker.process.limit");
    tmp396.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp396.setLabel("Process Tracker Limit");
    tmp396.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("mem-tracker.process.limit", tmp396);
    TMetricDef tmp398 = new TMetricDef();
    List<String> tmp399 = new ArrayList<String>();
    tmp399.add("IMPALAD");

    tmp398.setContexts(tmp399);
    tmp398.setDescription("The total number of garbage collections performed by the memory tracker over the life of the process.");
    tmp398.setKey("mem-tracker.process.num-gcs");
    tmp398.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp398.setLabel("MemTracker Garbage Collections");
    tmp398.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("mem-tracker.process.num-gcs", tmp398);
    TMetricDef tmp400 = new TMetricDef();
    List<String> tmp401 = new ArrayList<String>();
    tmp401.add("STATESTORE");
    tmp401.add("CATALOGSERVER");
    tmp401.add("IMPALAD");

    tmp400.setContexts(tmp401);
    tmp400.setDescription("Total bytes of anonymous (a.k.a. transparent) huge pages used by this process.");
    tmp400.setKey("memory.anon-huge-page-bytes");
    tmp400.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp400.setLabel("Anonymous Huge Pages.");
    tmp400.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("memory.anon-huge-page-bytes", tmp400);
    TMetricDef tmp402 = new TMetricDef();
    List<String> tmp403 = new ArrayList<String>();
    tmp403.add("STATESTORE");
    tmp403.add("CATALOGSERVER");
    tmp403.add("IMPALAD");

    tmp402.setContexts(tmp403);
    tmp402.setDescription("Total bytes of memory mappings in this process (the virtual memory size).");
    tmp402.setKey("memory.mapped-bytes");
    tmp402.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp402.setLabel("Total Virtual Memory.");
    tmp402.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("memory.mapped-bytes", tmp402);
    TMetricDef tmp404 = new TMetricDef();
    List<String> tmp405 = new ArrayList<String>();
    tmp405.add("STATESTORE");
    tmp405.add("CATALOGSERVER");
    tmp405.add("IMPALAD");

    tmp404.setContexts(tmp405);
    tmp404.setDescription("Total number of memory mappings in this process.");
    tmp404.setKey("memory.num-maps");
    tmp404.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp404.setLabel("Number of memory mappings.");
    tmp404.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("memory.num-maps", tmp404);
    TMetricDef tmp406 = new TMetricDef();
    List<String> tmp407 = new ArrayList<String>();
    tmp407.add("STATESTORE");
    tmp407.add("CATALOGSERVER");
    tmp407.add("IMPALAD");

    tmp406.setContexts(tmp407);
    tmp406.setDescription("Resident set size (RSS) of this process, including TCMalloc, buffer pool and Jvm.");
    tmp406.setKey("memory.rss");
    tmp406.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp406.setLabel("Resident set size.");
    tmp406.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("memory.rss", tmp406);
    TMetricDef tmp408 = new TMetricDef();
    List<String> tmp409 = new ArrayList<String>();
    tmp409.add("STATESTORE");
    tmp409.add("CATALOGSERVER");
    tmp409.add("IMPALAD");

    tmp408.setContexts(tmp409);
    tmp408.setDescription("The system-wide 'defrag' setting for Transparent Huge Pages.");
    tmp408.setKey("memory.thp.defrag");
    tmp408.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp408.setLabel("Transparent Huge Pages Defrag Enabled.");
    tmp408.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("memory.thp.defrag", tmp408);
    TMetricDef tmp410 = new TMetricDef();
    List<String> tmp411 = new ArrayList<String>();
    tmp411.add("STATESTORE");
    tmp411.add("CATALOGSERVER");
    tmp411.add("IMPALAD");

    tmp410.setContexts(tmp411);
    tmp410.setDescription("The system-wide 'enabled' setting for Transparent Huge Pages.");
    tmp410.setKey("memory.thp.enabled");
    tmp410.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp410.setLabel("Transparent Huge Pages Enabled.");
    tmp410.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("memory.thp.enabled", tmp410);
    TMetricDef tmp412 = new TMetricDef();
    List<String> tmp413 = new ArrayList<String>();
    tmp413.add("STATESTORE");
    tmp413.add("CATALOGSERVER");
    tmp413.add("IMPALAD");

    tmp412.setContexts(tmp413);
    tmp412.setDescription("The system-wide 'defrag' setting for khugepaged.");
    tmp412.setKey("memory.thp.khugepaged-defrag");
    tmp412.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp412.setLabel("Khugepaged Defrag Enabled.");
    tmp412.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("memory.thp.khugepaged-defrag", tmp412);
    TMetricDef tmp414 = new TMetricDef();
    List<String> tmp415 = new ArrayList<String>();
    tmp415.add("STATESTORE");
    tmp415.add("CATALOGSERVER");
    tmp415.add("IMPALAD");

    tmp414.setContexts(tmp415);
    tmp414.setDescription("Total memory currently used by TCMalloc and buffer pool.");
    tmp414.setKey("memory.total-used");
    tmp414.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp414.setLabel("Total Used Memory.");
    tmp414.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("memory.total-used", tmp414);
    TMetricDef tmp416 = new TMetricDef();
    List<String> tmp417 = new ArrayList<String>();
    tmp417.add("IMPALAD");
    tmp417.add("CATALOGSERVER");
    tmp417.add("STATESTORE");

    tmp416.setContexts(tmp417);
    tmp416.setDescription("The local start time of the process");
    tmp416.setKey("process-start-time");
    tmp416.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp416.setLabel("Process Start Time");
    tmp416.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("process-start-time", tmp416);
    TMetricDef tmp418 = new TMetricDef();
    List<String> tmp419 = new ArrayList<String>();
    tmp419.add("IMPALAD");

    tmp418.setContexts(tmp419);
    tmp418.setDescription("Time (ms) spent resolving request request pools.");
    tmp418.setKey("request-pool-service.resolve-pool-duration-ms");
    tmp418.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp418.setLabel("Request Pool Service Resolve Pool Duration Ms");
    tmp418.setUnits(org.apache.impala.thrift.TUnit.TIME_MS);

    TMetricDefs.put("request-pool-service.resolve-pool-duration-ms", tmp418);
    TMetricDef tmp420 = new TMetricDef();
    List<String> tmp421 = new ArrayList<String>();
    tmp421.add("CATALOGSERVER");
    tmp421.add("STATESTORE");
    tmp421.add("IMPALAD");

    tmp420.setContexts(tmp421);
    tmp420.setDescription("Duration (ms) of RPC calls to $0");
    tmp420.setKey("rpc-method.$0.call_duration");
    tmp420.setKind(org.apache.impala.thrift.TMetricKind.HISTOGRAM);
    tmp420.setLabel("$0 RPC Call Duration");
    tmp420.setUnits(org.apache.impala.thrift.TUnit.TIME_MS);

    TMetricDefs.put("rpc-method.$0.call_duration", tmp420);
    TMetricDef tmp422 = new TMetricDef();
    List<String> tmp423 = new ArrayList<String>();
    tmp423.add("IMPALAD");

    tmp422.setContexts(tmp423);
    tmp422.setDescription("Service $0: Total number of incoming RPCs that were rejected due to overflow of the service queue.");
    tmp422.setKey("rpc.$0.rpcs_queue_overflow");
    tmp422.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp422.setLabel("Service $0 Incoming RPC Queue Overflows");
    tmp422.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("rpc.$0.rpcs_queue_overflow", tmp422);
    TMetricDef tmp424 = new TMetricDef();
    List<String> tmp425 = new ArrayList<String>();
    tmp425.add("STATESTORE");
    tmp425.add("CATALOGSERVER");
    tmp425.add("IMPALAD");

    tmp424.setContexts(tmp425);
    tmp424.setDescription("Bytes allocated from the sanitizer malloc (Sanitizer debug builds only)");
    tmp424.setKey("sanitizer-total-bytes-allocated");
    tmp424.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp424.setLabel("Sanitizer Malloc Bytes Allocated");
    tmp424.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("sanitizer-total-bytes-allocated", tmp424);
    TMetricDef tmp426 = new TMetricDef();
    List<String> tmp427 = new ArrayList<String>();
    tmp427.add("IMPALAD");

    tmp426.setContexts(tmp427);
    tmp426.setDescription("Number of senders waiting for receiving fragment to initialize");
    tmp426.setKey("senders-blocked-on-recvr-creation");
    tmp426.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp426.setLabel("Number of senders waiting for receiving fragment to initialize.");
    tmp426.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("senders-blocked-on-recvr-creation", tmp426);
    TMetricDef tmp428 = new TMetricDef();
    List<String> tmp429 = new ArrayList<String>();
    tmp429.add("IMPALAD");

    tmp428.setContexts(tmp429);
    tmp428.setDescription("The number of assignments");
    tmp428.setKey("simple-scheduler.assignments.total");
    tmp428.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp428.setLabel("Assignments");
    tmp428.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("simple-scheduler.assignments.total", tmp428);
    TMetricDef tmp430 = new TMetricDef();
    List<String> tmp431 = new ArrayList<String>();
    tmp431.add("IMPALAD");

    tmp430.setContexts(tmp431);
    tmp430.setDescription("Indicates whether the scheduler has been initialized.");
    tmp430.setKey("simple-scheduler.initialized");
    tmp430.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp430.setLabel("Simple Scheduler Initialized");
    tmp430.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("simple-scheduler.initialized", tmp430);
    TMetricDef tmp432 = new TMetricDef();
    List<String> tmp433 = new ArrayList<String>();
    tmp433.add("IMPALAD");

    tmp432.setContexts(tmp433);
    tmp432.setDescription("Number of assignments operating on local data");
    tmp432.setKey("simple-scheduler.local-assignments.total");
    tmp432.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp432.setLabel("Local Assignments");
    tmp432.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("simple-scheduler.local-assignments.total", tmp432);
    TMetricDef tmp434 = new TMetricDef();
    List<String> tmp435 = new ArrayList<String>();
    tmp435.add("IMPALAD");

    tmp434.setContexts(tmp435);
    tmp434.setDescription("The number of backend connections from this Impala Daemon to other Impala Daemons.");
    tmp434.setKey("simple-scheduler.num-backends");
    tmp434.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp434.setLabel("Backend Connections");
    tmp434.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("simple-scheduler.num-backends", tmp434);
    TMetricDef tmp436 = new TMetricDef();
    List<String> tmp437 = new ArrayList<String>();
    tmp437.add("CATALOGSERVER");
    tmp437.add("IMPALAD");

    tmp436.setContexts(tmp437);
    tmp436.setDescription("Whether the Impala Daemon considers itself connected to the StateStore.");
    tmp436.setKey("statestore-subscriber.connected");
    tmp436.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp436.setLabel("StateStore Connectivity");
    tmp436.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore-subscriber.connected", tmp436);
    TMetricDef tmp438 = new TMetricDef();
    List<String> tmp439 = new ArrayList<String>();
    tmp439.add("CATALOGSERVER");
    tmp439.add("IMPALAD");

    tmp438.setContexts(tmp439);
    tmp438.setDescription("The time (sec) between Statestore heartbeats.");
    tmp438.setKey("statestore-subscriber.heartbeat-interval-time");
    tmp438.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp438.setLabel("Statestore Subscriber Heartbeat Interval Time");
    tmp438.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("statestore-subscriber.heartbeat-interval-time", tmp438);
    TMetricDef tmp440 = new TMetricDef();
    List<String> tmp441 = new ArrayList<String>();
    tmp441.add("CATALOGSERVER");
    tmp441.add("IMPALAD");

    tmp440.setContexts(tmp441);
    tmp440.setDescription("The amount of time the StateStore subscriber took to recover the connection the last time it was lost.");
    tmp440.setKey("statestore-subscriber.last-recovery-duration");
    tmp440.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp440.setLabel("StateStore Subscriber Last Recovery Duration");
    tmp440.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("statestore-subscriber.last-recovery-duration", tmp440);
    TMetricDef tmp442 = new TMetricDef();
    List<String> tmp443 = new ArrayList<String>();
    tmp443.add("CATALOGSERVER");
    tmp443.add("IMPALAD");

    tmp442.setContexts(tmp443);
    tmp442.setDescription("The local time that the last statestore recovery happened.");
    tmp442.setKey("statestore-subscriber.last-recovery-time");
    tmp442.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp442.setLabel("Statestore Subscriber Last Recovery Time");
    tmp442.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore-subscriber.last-recovery-time", tmp442);
    TMetricDef tmp444 = new TMetricDef();
    List<String> tmp445 = new ArrayList<String>();
    tmp445.add("CATALOGSERVER");
    tmp445.add("IMPALAD");

    tmp444.setContexts(tmp445);
    tmp444.setDescription("Number of times that the Daemon detected a loss of connectivity to the StateStore.");
    tmp444.setKey("statestore-subscriber.num-connection-failures");
    tmp444.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp444.setLabel("StateStore Connectivity Loss Count.");
    tmp444.setUnits(org.apache.impala.thrift.TUnit.UNIT);

    TMetricDefs.put("statestore-subscriber.num-connection-failures", tmp444);
    TMetricDef tmp446 = new TMetricDef();
    List<String> tmp447 = new ArrayList<String>();
    tmp447.add("CATALOGSERVER");
    tmp447.add("IMPALAD");

    tmp446.setContexts(tmp447);
    tmp446.setDescription("The most recent registration ID for this subscriber with the statestore. Set to 'N/A' if no registration has been completed");
    tmp446.setKey("statestore-subscriber.registration-id");
    tmp446.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp446.setLabel("Statestore Subscriber Registration Id");
    tmp446.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore-subscriber.registration-id", tmp446);
    TMetricDef tmp448 = new TMetricDef();
    List<String> tmp449 = new ArrayList<String>();
    tmp449.add("CATALOGSERVER");
    tmp449.add("IMPALAD");

    tmp448.setContexts(tmp449);
    tmp448.setDescription("The number of active StateStore subscriber clients in this Impala Daemon's client cache. These clients are for communication from this role to the StateStore.");
    tmp448.setKey("statestore-subscriber.statestore.client-cache.clients-in-use");
    tmp448.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp448.setLabel("StateStore Subscriber Active Clients");
    tmp448.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore-subscriber.statestore.client-cache.clients-in-use", tmp448);
    TMetricDef tmp450 = new TMetricDef();
    List<String> tmp451 = new ArrayList<String>();
    tmp451.add("CATALOGSERVER");
    tmp451.add("IMPALAD");

    tmp450.setContexts(tmp451);
    tmp450.setDescription("The total number of StateStore subscriber clients in this Impala Daemon's client cache. These clients are for communication from this role to the StateStore.");
    tmp450.setKey("statestore-subscriber.statestore.client-cache.total-clients");
    tmp450.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp450.setLabel("StateStore Subscriber Total Clients");
    tmp450.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore-subscriber.statestore.client-cache.total-clients", tmp450);
    TMetricDef tmp452 = new TMetricDef();
    List<String> tmp453 = new ArrayList<String>();
    tmp453.add("CATALOGSERVER");
    tmp453.add("IMPALAD");

    tmp452.setContexts(tmp453);
    tmp452.setDescription("Statestore Subscriber Topic $0 Processing Time");
    tmp452.setKey("statestore-subscriber.topic-$0.processing-time-s");
    tmp452.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp452.setLabel("Statestore Subscriber Topic $0 Processing Time");
    tmp452.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("statestore-subscriber.topic-$0.processing-time-s", tmp452);
    TMetricDef tmp454 = new TMetricDef();
    List<String> tmp455 = new ArrayList<String>();
    tmp455.add("CATALOGSERVER");
    tmp455.add("IMPALAD");

    tmp454.setContexts(tmp455);
    tmp454.setDescription("Interval between topic updates for Topic $0");
    tmp454.setKey("statestore-subscriber.topic-$0.update-interval");
    tmp454.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp454.setLabel("Statestore Subscriber Topic $0 Update Interval");
    tmp454.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("statestore-subscriber.topic-$0.update-interval", tmp454);
    TMetricDef tmp456 = new TMetricDef();
    List<String> tmp457 = new ArrayList<String>();
    tmp457.add("CATALOGSERVER");
    tmp457.add("IMPALAD");

    tmp456.setContexts(tmp457);
    tmp456.setDescription("The time (sec) taken to process Statestore subscriber topic updates.");
    tmp456.setKey("statestore-subscriber.topic-update-duration");
    tmp456.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp456.setLabel("Statestore Subscriber Topic Update Duration");
    tmp456.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("statestore-subscriber.topic-update-duration", tmp456);
    TMetricDef tmp458 = new TMetricDef();
    List<String> tmp459 = new ArrayList<String>();
    tmp459.add("CATALOGSERVER");
    tmp459.add("IMPALAD");

    tmp458.setContexts(tmp459);
    tmp458.setDescription("The time (sec) between Statestore subscriber topic updates.");
    tmp458.setKey("statestore-subscriber.topic-update-interval-time");
    tmp458.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp458.setLabel("Statestore Subscriber Topic Update Interval Time");
    tmp458.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("statestore-subscriber.topic-update-interval-time", tmp458);
    TMetricDef tmp460 = new TMetricDef();
    List<String> tmp461 = new ArrayList<String>();
    tmp461.add("STATESTORE");

    tmp460.setContexts(tmp461);
    tmp460.setDescription("The time (sec) spent sending heartbeat RPCs. Includes subscriber-side processing time and network transmission time.");
    tmp460.setKey("statestore.heartbeat-durations");
    tmp460.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp460.setLabel("Statestore Heartbeat Durations");
    tmp460.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("statestore.heartbeat-durations", tmp460);
    TMetricDef tmp462 = new TMetricDef();
    List<String> tmp463 = new ArrayList<String>();
    tmp463.add("STATESTORE");

    tmp462.setContexts(tmp463);
    tmp462.setDescription("The number of registered Statestore subscribers.");
    tmp462.setKey("statestore.live-backends");
    tmp462.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp462.setLabel("Statestore Live Backends");
    tmp462.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore.live-backends", tmp462);
    TMetricDef tmp464 = new TMetricDef();
    List<String> tmp465 = new ArrayList<String>();
    tmp465.add("STATESTORE");

    tmp464.setContexts(tmp465);
    tmp464.setDescription("The set of all live Statestore subscribers.");
    tmp464.setKey("statestore.live-backends.list");
    tmp464.setKind(org.apache.impala.thrift.TMetricKind.SET);
    tmp464.setLabel("Statestore Live Backends List");
    tmp464.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore.live-backends.list", tmp464);
    TMetricDef tmp466 = new TMetricDef();
    List<String> tmp467 = new ArrayList<String>();
    tmp467.add("STATESTORE");

    tmp466.setContexts(tmp467);
    tmp466.setDescription("The time (sec) spent sending priority topic update RPCs. Includes subscriber-side processing time and network transmission time.");
    tmp466.setKey("statestore.priority-topic-update-durations");
    tmp466.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp466.setLabel("Statestore Priority Topic Update Durations");
    tmp466.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("statestore.priority-topic-update-durations", tmp466);
    TMetricDef tmp468 = new TMetricDef();
    List<String> tmp469 = new ArrayList<String>();
    tmp469.add("STATESTORE");

    tmp468.setContexts(tmp469);
    tmp468.setDescription("The time (sec) spent sending non-priority topic update RPCs. Includes subscriber-side processing time and network transmission time.");
    tmp468.setKey("statestore.topic-update-durations");
    tmp468.setKind(org.apache.impala.thrift.TMetricKind.STATS);
    tmp468.setLabel("Statestore Topic Update Durations");
    tmp468.setUnits(org.apache.impala.thrift.TUnit.TIME_S);

    TMetricDefs.put("statestore.topic-update-durations", tmp468);
    TMetricDef tmp470 = new TMetricDef();
    List<String> tmp471 = new ArrayList<String>();
    tmp471.add("STATESTORE");

    tmp470.setContexts(tmp471);
    tmp470.setDescription("The sum of the size of all keys for all topics tracked by the StateStore.");
    tmp470.setKey("statestore.total-key-size-bytes");
    tmp470.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp470.setLabel("Topic Key Size");
    tmp470.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore.total-key-size-bytes", tmp470);
    TMetricDef tmp472 = new TMetricDef();
    List<String> tmp473 = new ArrayList<String>();
    tmp473.add("STATESTORE");

    tmp472.setContexts(tmp473);
    tmp472.setDescription("The sum of the size of all keys and all values for all topics tracked by the StateStore.");
    tmp472.setKey("statestore.total-topic-size-bytes");
    tmp472.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp472.setLabel("Topic Size");
    tmp472.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore.total-topic-size-bytes", tmp472);
    TMetricDef tmp474 = new TMetricDef();
    List<String> tmp475 = new ArrayList<String>();
    tmp475.add("STATESTORE");

    tmp474.setContexts(tmp475);
    tmp474.setDescription("The sum of the size of all values for all topics tracked by the StateStore.");
    tmp474.setKey("statestore.total-value-size-bytes");
    tmp474.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp474.setLabel("Topic Value Size");
    tmp474.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore.total-value-size-bytes", tmp474);
    TMetricDef tmp476 = new TMetricDef();
    List<String> tmp477 = new ArrayList<String>();
    tmp477.add("STATESTORE");

    tmp476.setContexts(tmp477);
    tmp476.setDescription("The full version string of the Statestore Server.");
    tmp476.setKey("statestore.version");
    tmp476.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp476.setLabel("Statestore Version");
    tmp476.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("statestore.version", tmp476);
    TMetricDef tmp478 = new TMetricDef();
    List<String> tmp479 = new ArrayList<String>();
    tmp479.add("STATESTORE");

    tmp478.setContexts(tmp479);
    tmp478.setDescription("The number of clients in use by the Statestore heartbeat client cache.");
    tmp478.setKey("subscriber-heartbeat.client-cache.clients-in-use");
    tmp478.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp478.setLabel("Subscriber Heartbeat Client Cache Clients In Use");
    tmp478.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("subscriber-heartbeat.client-cache.clients-in-use", tmp478);
    TMetricDef tmp480 = new TMetricDef();
    List<String> tmp481 = new ArrayList<String>();
    tmp481.add("STATESTORE");

    tmp480.setContexts(tmp481);
    tmp480.setDescription("The total number of clients in the Statestore heartbeat client cache.");
    tmp480.setKey("subscriber-heartbeat.client-cache.total-clients");
    tmp480.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp480.setLabel("Subscriber Heartbeat Client Cache Total Clients");
    tmp480.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("subscriber-heartbeat.client-cache.total-clients", tmp480);
    TMetricDef tmp482 = new TMetricDef();
    List<String> tmp483 = new ArrayList<String>();
    tmp483.add("STATESTORE");

    tmp482.setContexts(tmp483);
    tmp482.setDescription("The number of clients in use by the Statestore update state client cache.");
    tmp482.setKey("subscriber-update-state.client-cache.clients-in-use");
    tmp482.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp482.setLabel("Subscriber Update State Client Cache Clients In Use");
    tmp482.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("subscriber-update-state.client-cache.clients-in-use", tmp482);
    TMetricDef tmp484 = new TMetricDef();
    List<String> tmp485 = new ArrayList<String>();
    tmp485.add("STATESTORE");

    tmp484.setContexts(tmp485);
    tmp484.setDescription("The total number of clients in the Statestore update state client cache.");
    tmp484.setKey("subscriber-update-state.client-cache.total-clients");
    tmp484.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp484.setLabel("Subscriber Update State Client Cache Total Clients");
    tmp484.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("subscriber-update-state.client-cache.total-clients", tmp484);
    TMetricDef tmp486 = new TMetricDef();
    List<String> tmp487 = new ArrayList<String>();
    tmp487.add("STATESTORE");
    tmp487.add("CATALOGSERVER");
    tmp487.add("IMPALAD");

    tmp486.setContexts(tmp487);
    tmp486.setDescription("Number of bytes used by the application. This will not typically match the memory use reported by the OS, because it does not include TCMalloc overhead or memory fragmentation.");
    tmp486.setKey("tcmalloc.bytes-in-use");
    tmp486.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp486.setLabel("TCMalloc Bytes in Use");
    tmp486.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("tcmalloc.bytes-in-use", tmp486);
    TMetricDef tmp488 = new TMetricDef();
    List<String> tmp489 = new ArrayList<String>();
    tmp489.add("STATESTORE");
    tmp489.add("CATALOGSERVER");
    tmp489.add("IMPALAD");

    tmp488.setContexts(tmp489);
    tmp488.setDescription("Number of bytes in free, mapped pages in page heap. These bytes can be used to fulfill allocation requests. They always count towards virtual memory usage, and unless the underlying memory is swapped out by the OS, they also count towards physical memory usage.");
    tmp488.setKey("tcmalloc.pageheap-free-bytes");
    tmp488.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp488.setLabel("TCMalloc Pageheap Free");
    tmp488.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("tcmalloc.pageheap-free-bytes", tmp488);
    TMetricDef tmp490 = new TMetricDef();
    List<String> tmp491 = new ArrayList<String>();
    tmp491.add("STATESTORE");
    tmp491.add("CATALOGSERVER");
    tmp491.add("IMPALAD");

    tmp490.setContexts(tmp491);
    tmp490.setDescription("Number of bytes in free, unmapped pages in page heap. These are bytes that have been released back to the OS, possibly by one of the MallocExtension \"Release\" calls. They can be used to fulfill allocation requests, but typically incur a page fault. They always count towards virtual memory usage, and depending on the OS, typically do not count towards physical memory usage.");
    tmp490.setKey("tcmalloc.pageheap-unmapped-bytes");
    tmp490.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp490.setLabel("TCMalloc Pageheap Unmapped");
    tmp490.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("tcmalloc.pageheap-unmapped-bytes", tmp490);
    TMetricDef tmp492 = new TMetricDef();
    List<String> tmp493 = new ArrayList<String>();
    tmp493.add("STATESTORE");
    tmp493.add("CATALOGSERVER");
    tmp493.add("IMPALAD");

    tmp492.setContexts(tmp493);
    tmp492.setDescription("Derived metric computing the amount of physical memory (in bytes) used by the process, including that actually in use and free bytes reserved by tcmalloc. Does not include the tcmalloc metadata.");
    tmp492.setKey("tcmalloc.physical-bytes-reserved");
    tmp492.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp492.setLabel("TCMalloc Physical Bytes Reserved");
    tmp492.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("tcmalloc.physical-bytes-reserved", tmp492);
    TMetricDef tmp494 = new TMetricDef();
    List<String> tmp495 = new ArrayList<String>();
    tmp495.add("STATESTORE");
    tmp495.add("CATALOGSERVER");
    tmp495.add("IMPALAD");

    tmp494.setContexts(tmp495);
    tmp494.setDescription("Bytes of system memory reserved by TCMalloc.");
    tmp494.setKey("tcmalloc.total-bytes-reserved");
    tmp494.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp494.setLabel("TCMalloc Total Bytes Reserved");
    tmp494.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("tcmalloc.total-bytes-reserved", tmp494);
    TMetricDef tmp496 = new TMetricDef();
    List<String> tmp497 = new ArrayList<String>();
    tmp497.add("STATESTORE");
    tmp497.add("CATALOGSERVER");
    tmp497.add("IMPALAD");

    tmp496.setContexts(tmp497);
    tmp496.setDescription("The number of running threads in this process.");
    tmp496.setKey("thread-manager.running-threads");
    tmp496.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp496.setLabel("Running Threads");
    tmp496.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("thread-manager.running-threads", tmp496);
    TMetricDef tmp498 = new TMetricDef();
    List<String> tmp499 = new ArrayList<String>();
    tmp499.add("STATESTORE");
    tmp499.add("CATALOGSERVER");
    tmp499.add("IMPALAD");

    tmp498.setContexts(tmp499);
    tmp498.setDescription("Threads created over the lifetime of the process.");
    tmp498.setKey("thread-manager.total-threads-created");
    tmp498.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp498.setLabel("Threads Created");
    tmp498.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("thread-manager.total-threads-created", tmp498);
    TMetricDef tmp500 = new TMetricDef();
    List<String> tmp501 = new ArrayList<String>();
    tmp501.add("IMPALAD");

    tmp500.setContexts(tmp501);
    tmp500.setDescription("The number of active scratch directories for spilling to disk.");
    tmp500.setKey("tmp-file-mgr.active-scratch-dirs");
    tmp500.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp500.setLabel("Active scratch directories");
    tmp500.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("tmp-file-mgr.active-scratch-dirs", tmp500);
    TMetricDef tmp502 = new TMetricDef();
    List<String> tmp503 = new ArrayList<String>();
    tmp503.add("IMPALAD");

    tmp502.setContexts(tmp503);
    tmp502.setDescription("The set of all active scratch directories for spilling to disk.");
    tmp502.setKey("tmp-file-mgr.active-scratch-dirs.list");
    tmp502.setKind(org.apache.impala.thrift.TMetricKind.SET);
    tmp502.setLabel("Active scratch directories list");
    tmp502.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("tmp-file-mgr.active-scratch-dirs.list", tmp502);
    TMetricDef tmp504 = new TMetricDef();
    List<String> tmp505 = new ArrayList<String>();
    tmp505.add("IMPALAD");

    tmp504.setContexts(tmp505);
    tmp504.setDescription("The current total spilled bytes across all scratch directories.");
    tmp504.setKey("tmp-file-mgr.scratch-space-bytes-used");
    tmp504.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp504.setLabel("Spilled bytes for scratch directories");
    tmp504.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("tmp-file-mgr.scratch-space-bytes-used", tmp504);
    TMetricDef tmp506 = new TMetricDef();
    List<String> tmp507 = new ArrayList<String>();
    tmp507.add("IMPALAD");

    tmp506.setContexts(tmp507);
    tmp506.setDescription("The high water mark for spilled bytes across all scratch directories.");
    tmp506.setKey("tmp-file-mgr.scratch-space-bytes-used-high-water-mark");
    tmp506.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp506.setLabel("Spilled bytes HWM for scratch directories");
    tmp506.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("tmp-file-mgr.scratch-space-bytes-used-high-water-mark", tmp506);
    TMetricDef tmp508 = new TMetricDef();
    List<String> tmp509 = new ArrayList<String>();
    tmp509.add("IMPALAD");

    tmp508.setContexts(tmp509);
    tmp508.setDescription("The current total spilled bytes for a single scratch directory.");
    tmp508.setKey("tmp-file-mgr.scratch-space-bytes-used.dir-$0");
    tmp508.setKind(org.apache.impala.thrift.TMetricKind.GAUGE);
    tmp508.setLabel("Per-directory scratch space bytes used");
    tmp508.setUnits(org.apache.impala.thrift.TUnit.BYTES);

    TMetricDefs.put("tmp-file-mgr.scratch-space-bytes-used.dir-$0", tmp508);
    TMetricDef tmp510 = new TMetricDef();
    List<String> tmp511 = new ArrayList<String>();
    tmp511.add("IMPALAD");

    tmp510.setContexts(tmp511);
    tmp510.setDescription("Total number of senders that have been blocked waiting for receiving fragment to initialize.");
    tmp510.setKey("total-senders-blocked-on-recvr-creation");
    tmp510.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp510.setLabel("Total senders waiting for receiving fragment to initialize");
    tmp510.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("total-senders-blocked-on-recvr-creation", tmp510);
    TMetricDef tmp512 = new TMetricDef();
    List<String> tmp513 = new ArrayList<String>();
    tmp513.add("IMPALAD");

    tmp512.setContexts(tmp513);
    tmp512.setDescription("Total number of senders that timed-out waiting for receiving fragment to initialize.");
    tmp512.setKey("total-senders-timedout-waiting-for-recvr-creation");
    tmp512.setKind(org.apache.impala.thrift.TMetricKind.COUNTER);
    tmp512.setLabel("Total senders timed-out waiting for receiving fragment to initialize");
    tmp512.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("total-senders-timedout-waiting-for-recvr-creation", tmp512);
    TMetricDef tmp514 = new TMetricDef();
    List<String> tmp515 = new ArrayList<String>();
    tmp515.add("IMPALAD");

    tmp514.setContexts(tmp515);
    tmp514.setDescription("Path to the time-zone database");
    tmp514.setKey("tzdata-path");
    tmp514.setKind(org.apache.impala.thrift.TMetricKind.PROPERTY);
    tmp514.setLabel("Path to the time-zone database");
    tmp514.setUnits(org.apache.impala.thrift.TUnit.NONE);

    TMetricDefs.put("tzdata-path", tmp514);
  }

}
