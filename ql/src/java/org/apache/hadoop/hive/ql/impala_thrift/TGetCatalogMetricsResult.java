/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TGetCatalogMetricsResult implements org.apache.thrift.TBase<TGetCatalogMetricsResult, TGetCatalogMetricsResult._Fields>, java.io.Serializable, Cloneable, Comparable<TGetCatalogMetricsResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetCatalogMetricsResult");

  private static final org.apache.thrift.protocol.TField NUM_DBS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_dbs", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_TABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_tables", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CACHE_EVICTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_eviction_count", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CACHE_HIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_hit_count", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CACHE_LOAD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_load_count", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CACHE_LOAD_EXCEPTION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_load_exception_count", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CACHE_LOAD_SUCCESS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_load_success_count", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CACHE_MISS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_miss_count", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CACHE_REQUEST_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_request_count", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CACHE_TOTAL_LOAD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_total_load_time", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CACHE_AVG_LOAD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_avg_load_time", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField CACHE_HIT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_hit_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField CACHE_LOAD_EXCEPTION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_load_exception_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CACHE_MISS_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_miss_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGetCatalogMetricsResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGetCatalogMetricsResultTupleSchemeFactory());
  }

  private int num_dbs; // required
  private int num_tables; // required
  private long cache_eviction_count; // optional
  private long cache_hit_count; // optional
  private long cache_load_count; // optional
  private long cache_load_exception_count; // optional
  private long cache_load_success_count; // optional
  private long cache_miss_count; // optional
  private long cache_request_count; // optional
  private long cache_total_load_time; // optional
  private double cache_avg_load_time; // optional
  private double cache_hit_rate; // optional
  private double cache_load_exception_rate; // optional
  private double cache_miss_rate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_DBS((short)1, "num_dbs"),
    NUM_TABLES((short)2, "num_tables"),
    CACHE_EVICTION_COUNT((short)3, "cache_eviction_count"),
    CACHE_HIT_COUNT((short)4, "cache_hit_count"),
    CACHE_LOAD_COUNT((short)5, "cache_load_count"),
    CACHE_LOAD_EXCEPTION_COUNT((short)6, "cache_load_exception_count"),
    CACHE_LOAD_SUCCESS_COUNT((short)7, "cache_load_success_count"),
    CACHE_MISS_COUNT((short)8, "cache_miss_count"),
    CACHE_REQUEST_COUNT((short)9, "cache_request_count"),
    CACHE_TOTAL_LOAD_TIME((short)10, "cache_total_load_time"),
    CACHE_AVG_LOAD_TIME((short)11, "cache_avg_load_time"),
    CACHE_HIT_RATE((short)12, "cache_hit_rate"),
    CACHE_LOAD_EXCEPTION_RATE((short)13, "cache_load_exception_rate"),
    CACHE_MISS_RATE((short)14, "cache_miss_rate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_DBS
          return NUM_DBS;
        case 2: // NUM_TABLES
          return NUM_TABLES;
        case 3: // CACHE_EVICTION_COUNT
          return CACHE_EVICTION_COUNT;
        case 4: // CACHE_HIT_COUNT
          return CACHE_HIT_COUNT;
        case 5: // CACHE_LOAD_COUNT
          return CACHE_LOAD_COUNT;
        case 6: // CACHE_LOAD_EXCEPTION_COUNT
          return CACHE_LOAD_EXCEPTION_COUNT;
        case 7: // CACHE_LOAD_SUCCESS_COUNT
          return CACHE_LOAD_SUCCESS_COUNT;
        case 8: // CACHE_MISS_COUNT
          return CACHE_MISS_COUNT;
        case 9: // CACHE_REQUEST_COUNT
          return CACHE_REQUEST_COUNT;
        case 10: // CACHE_TOTAL_LOAD_TIME
          return CACHE_TOTAL_LOAD_TIME;
        case 11: // CACHE_AVG_LOAD_TIME
          return CACHE_AVG_LOAD_TIME;
        case 12: // CACHE_HIT_RATE
          return CACHE_HIT_RATE;
        case 13: // CACHE_LOAD_EXCEPTION_RATE
          return CACHE_LOAD_EXCEPTION_RATE;
        case 14: // CACHE_MISS_RATE
          return CACHE_MISS_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_DBS_ISSET_ID = 0;
  private static final int __NUM_TABLES_ISSET_ID = 1;
  private static final int __CACHE_EVICTION_COUNT_ISSET_ID = 2;
  private static final int __CACHE_HIT_COUNT_ISSET_ID = 3;
  private static final int __CACHE_LOAD_COUNT_ISSET_ID = 4;
  private static final int __CACHE_LOAD_EXCEPTION_COUNT_ISSET_ID = 5;
  private static final int __CACHE_LOAD_SUCCESS_COUNT_ISSET_ID = 6;
  private static final int __CACHE_MISS_COUNT_ISSET_ID = 7;
  private static final int __CACHE_REQUEST_COUNT_ISSET_ID = 8;
  private static final int __CACHE_TOTAL_LOAD_TIME_ISSET_ID = 9;
  private static final int __CACHE_AVG_LOAD_TIME_ISSET_ID = 10;
  private static final int __CACHE_HIT_RATE_ISSET_ID = 11;
  private static final int __CACHE_LOAD_EXCEPTION_RATE_ISSET_ID = 12;
  private static final int __CACHE_MISS_RATE_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CACHE_EVICTION_COUNT,_Fields.CACHE_HIT_COUNT,_Fields.CACHE_LOAD_COUNT,_Fields.CACHE_LOAD_EXCEPTION_COUNT,_Fields.CACHE_LOAD_SUCCESS_COUNT,_Fields.CACHE_MISS_COUNT,_Fields.CACHE_REQUEST_COUNT,_Fields.CACHE_TOTAL_LOAD_TIME,_Fields.CACHE_AVG_LOAD_TIME,_Fields.CACHE_HIT_RATE,_Fields.CACHE_LOAD_EXCEPTION_RATE,_Fields.CACHE_MISS_RATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_DBS, new org.apache.thrift.meta_data.FieldMetaData("num_dbs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_TABLES, new org.apache.thrift.meta_data.FieldMetaData("num_tables", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CACHE_EVICTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cache_eviction_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_HIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cache_hit_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_LOAD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cache_load_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_LOAD_EXCEPTION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cache_load_exception_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_LOAD_SUCCESS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cache_load_success_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_MISS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cache_miss_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_REQUEST_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cache_request_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_TOTAL_LOAD_TIME, new org.apache.thrift.meta_data.FieldMetaData("cache_total_load_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CACHE_AVG_LOAD_TIME, new org.apache.thrift.meta_data.FieldMetaData("cache_avg_load_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CACHE_HIT_RATE, new org.apache.thrift.meta_data.FieldMetaData("cache_hit_rate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CACHE_LOAD_EXCEPTION_RATE, new org.apache.thrift.meta_data.FieldMetaData("cache_load_exception_rate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CACHE_MISS_RATE, new org.apache.thrift.meta_data.FieldMetaData("cache_miss_rate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetCatalogMetricsResult.class, metaDataMap);
  }

  public TGetCatalogMetricsResult() {
  }

  public TGetCatalogMetricsResult(
    int num_dbs,
    int num_tables)
  {
    this();
    this.num_dbs = num_dbs;
    setNum_dbsIsSet(true);
    this.num_tables = num_tables;
    setNum_tablesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetCatalogMetricsResult(TGetCatalogMetricsResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_dbs = other.num_dbs;
    this.num_tables = other.num_tables;
    this.cache_eviction_count = other.cache_eviction_count;
    this.cache_hit_count = other.cache_hit_count;
    this.cache_load_count = other.cache_load_count;
    this.cache_load_exception_count = other.cache_load_exception_count;
    this.cache_load_success_count = other.cache_load_success_count;
    this.cache_miss_count = other.cache_miss_count;
    this.cache_request_count = other.cache_request_count;
    this.cache_total_load_time = other.cache_total_load_time;
    this.cache_avg_load_time = other.cache_avg_load_time;
    this.cache_hit_rate = other.cache_hit_rate;
    this.cache_load_exception_rate = other.cache_load_exception_rate;
    this.cache_miss_rate = other.cache_miss_rate;
  }

  public TGetCatalogMetricsResult deepCopy() {
    return new TGetCatalogMetricsResult(this);
  }

  @Override
  public void clear() {
    setNum_dbsIsSet(false);
    this.num_dbs = 0;
    setNum_tablesIsSet(false);
    this.num_tables = 0;
    setCache_eviction_countIsSet(false);
    this.cache_eviction_count = 0;
    setCache_hit_countIsSet(false);
    this.cache_hit_count = 0;
    setCache_load_countIsSet(false);
    this.cache_load_count = 0;
    setCache_load_exception_countIsSet(false);
    this.cache_load_exception_count = 0;
    setCache_load_success_countIsSet(false);
    this.cache_load_success_count = 0;
    setCache_miss_countIsSet(false);
    this.cache_miss_count = 0;
    setCache_request_countIsSet(false);
    this.cache_request_count = 0;
    setCache_total_load_timeIsSet(false);
    this.cache_total_load_time = 0;
    setCache_avg_load_timeIsSet(false);
    this.cache_avg_load_time = 0.0;
    setCache_hit_rateIsSet(false);
    this.cache_hit_rate = 0.0;
    setCache_load_exception_rateIsSet(false);
    this.cache_load_exception_rate = 0.0;
    setCache_miss_rateIsSet(false);
    this.cache_miss_rate = 0.0;
  }

  public int getNum_dbs() {
    return this.num_dbs;
  }

  public void setNum_dbs(int num_dbs) {
    this.num_dbs = num_dbs;
    setNum_dbsIsSet(true);
  }

  public void unsetNum_dbs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_DBS_ISSET_ID);
  }

  /** Returns true if field num_dbs is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_dbs() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_DBS_ISSET_ID);
  }

  public void setNum_dbsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_DBS_ISSET_ID, value);
  }

  public int getNum_tables() {
    return this.num_tables;
  }

  public void setNum_tables(int num_tables) {
    this.num_tables = num_tables;
    setNum_tablesIsSet(true);
  }

  public void unsetNum_tables() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_TABLES_ISSET_ID);
  }

  /** Returns true if field num_tables is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_tables() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_TABLES_ISSET_ID);
  }

  public void setNum_tablesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_TABLES_ISSET_ID, value);
  }

  public long getCache_eviction_count() {
    return this.cache_eviction_count;
  }

  public void setCache_eviction_count(long cache_eviction_count) {
    this.cache_eviction_count = cache_eviction_count;
    setCache_eviction_countIsSet(true);
  }

  public void unsetCache_eviction_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_EVICTION_COUNT_ISSET_ID);
  }

  /** Returns true if field cache_eviction_count is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_eviction_count() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_EVICTION_COUNT_ISSET_ID);
  }

  public void setCache_eviction_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_EVICTION_COUNT_ISSET_ID, value);
  }

  public long getCache_hit_count() {
    return this.cache_hit_count;
  }

  public void setCache_hit_count(long cache_hit_count) {
    this.cache_hit_count = cache_hit_count;
    setCache_hit_countIsSet(true);
  }

  public void unsetCache_hit_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_HIT_COUNT_ISSET_ID);
  }

  /** Returns true if field cache_hit_count is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_hit_count() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_HIT_COUNT_ISSET_ID);
  }

  public void setCache_hit_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_HIT_COUNT_ISSET_ID, value);
  }

  public long getCache_load_count() {
    return this.cache_load_count;
  }

  public void setCache_load_count(long cache_load_count) {
    this.cache_load_count = cache_load_count;
    setCache_load_countIsSet(true);
  }

  public void unsetCache_load_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_LOAD_COUNT_ISSET_ID);
  }

  /** Returns true if field cache_load_count is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_load_count() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_LOAD_COUNT_ISSET_ID);
  }

  public void setCache_load_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_LOAD_COUNT_ISSET_ID, value);
  }

  public long getCache_load_exception_count() {
    return this.cache_load_exception_count;
  }

  public void setCache_load_exception_count(long cache_load_exception_count) {
    this.cache_load_exception_count = cache_load_exception_count;
    setCache_load_exception_countIsSet(true);
  }

  public void unsetCache_load_exception_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_LOAD_EXCEPTION_COUNT_ISSET_ID);
  }

  /** Returns true if field cache_load_exception_count is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_load_exception_count() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_LOAD_EXCEPTION_COUNT_ISSET_ID);
  }

  public void setCache_load_exception_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_LOAD_EXCEPTION_COUNT_ISSET_ID, value);
  }

  public long getCache_load_success_count() {
    return this.cache_load_success_count;
  }

  public void setCache_load_success_count(long cache_load_success_count) {
    this.cache_load_success_count = cache_load_success_count;
    setCache_load_success_countIsSet(true);
  }

  public void unsetCache_load_success_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_LOAD_SUCCESS_COUNT_ISSET_ID);
  }

  /** Returns true if field cache_load_success_count is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_load_success_count() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_LOAD_SUCCESS_COUNT_ISSET_ID);
  }

  public void setCache_load_success_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_LOAD_SUCCESS_COUNT_ISSET_ID, value);
  }

  public long getCache_miss_count() {
    return this.cache_miss_count;
  }

  public void setCache_miss_count(long cache_miss_count) {
    this.cache_miss_count = cache_miss_count;
    setCache_miss_countIsSet(true);
  }

  public void unsetCache_miss_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_MISS_COUNT_ISSET_ID);
  }

  /** Returns true if field cache_miss_count is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_miss_count() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_MISS_COUNT_ISSET_ID);
  }

  public void setCache_miss_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_MISS_COUNT_ISSET_ID, value);
  }

  public long getCache_request_count() {
    return this.cache_request_count;
  }

  public void setCache_request_count(long cache_request_count) {
    this.cache_request_count = cache_request_count;
    setCache_request_countIsSet(true);
  }

  public void unsetCache_request_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_REQUEST_COUNT_ISSET_ID);
  }

  /** Returns true if field cache_request_count is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_request_count() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_REQUEST_COUNT_ISSET_ID);
  }

  public void setCache_request_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_REQUEST_COUNT_ISSET_ID, value);
  }

  public long getCache_total_load_time() {
    return this.cache_total_load_time;
  }

  public void setCache_total_load_time(long cache_total_load_time) {
    this.cache_total_load_time = cache_total_load_time;
    setCache_total_load_timeIsSet(true);
  }

  public void unsetCache_total_load_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_TOTAL_LOAD_TIME_ISSET_ID);
  }

  /** Returns true if field cache_total_load_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_total_load_time() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_TOTAL_LOAD_TIME_ISSET_ID);
  }

  public void setCache_total_load_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_TOTAL_LOAD_TIME_ISSET_ID, value);
  }

  public double getCache_avg_load_time() {
    return this.cache_avg_load_time;
  }

  public void setCache_avg_load_time(double cache_avg_load_time) {
    this.cache_avg_load_time = cache_avg_load_time;
    setCache_avg_load_timeIsSet(true);
  }

  public void unsetCache_avg_load_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_AVG_LOAD_TIME_ISSET_ID);
  }

  /** Returns true if field cache_avg_load_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_avg_load_time() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_AVG_LOAD_TIME_ISSET_ID);
  }

  public void setCache_avg_load_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_AVG_LOAD_TIME_ISSET_ID, value);
  }

  public double getCache_hit_rate() {
    return this.cache_hit_rate;
  }

  public void setCache_hit_rate(double cache_hit_rate) {
    this.cache_hit_rate = cache_hit_rate;
    setCache_hit_rateIsSet(true);
  }

  public void unsetCache_hit_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_HIT_RATE_ISSET_ID);
  }

  /** Returns true if field cache_hit_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_hit_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_HIT_RATE_ISSET_ID);
  }

  public void setCache_hit_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_HIT_RATE_ISSET_ID, value);
  }

  public double getCache_load_exception_rate() {
    return this.cache_load_exception_rate;
  }

  public void setCache_load_exception_rate(double cache_load_exception_rate) {
    this.cache_load_exception_rate = cache_load_exception_rate;
    setCache_load_exception_rateIsSet(true);
  }

  public void unsetCache_load_exception_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_LOAD_EXCEPTION_RATE_ISSET_ID);
  }

  /** Returns true if field cache_load_exception_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_load_exception_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_LOAD_EXCEPTION_RATE_ISSET_ID);
  }

  public void setCache_load_exception_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_LOAD_EXCEPTION_RATE_ISSET_ID, value);
  }

  public double getCache_miss_rate() {
    return this.cache_miss_rate;
  }

  public void setCache_miss_rate(double cache_miss_rate) {
    this.cache_miss_rate = cache_miss_rate;
    setCache_miss_rateIsSet(true);
  }

  public void unsetCache_miss_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CACHE_MISS_RATE_ISSET_ID);
  }

  /** Returns true if field cache_miss_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_miss_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __CACHE_MISS_RATE_ISSET_ID);
  }

  public void setCache_miss_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CACHE_MISS_RATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_DBS:
      if (value == null) {
        unsetNum_dbs();
      } else {
        setNum_dbs((Integer)value);
      }
      break;

    case NUM_TABLES:
      if (value == null) {
        unsetNum_tables();
      } else {
        setNum_tables((Integer)value);
      }
      break;

    case CACHE_EVICTION_COUNT:
      if (value == null) {
        unsetCache_eviction_count();
      } else {
        setCache_eviction_count((Long)value);
      }
      break;

    case CACHE_HIT_COUNT:
      if (value == null) {
        unsetCache_hit_count();
      } else {
        setCache_hit_count((Long)value);
      }
      break;

    case CACHE_LOAD_COUNT:
      if (value == null) {
        unsetCache_load_count();
      } else {
        setCache_load_count((Long)value);
      }
      break;

    case CACHE_LOAD_EXCEPTION_COUNT:
      if (value == null) {
        unsetCache_load_exception_count();
      } else {
        setCache_load_exception_count((Long)value);
      }
      break;

    case CACHE_LOAD_SUCCESS_COUNT:
      if (value == null) {
        unsetCache_load_success_count();
      } else {
        setCache_load_success_count((Long)value);
      }
      break;

    case CACHE_MISS_COUNT:
      if (value == null) {
        unsetCache_miss_count();
      } else {
        setCache_miss_count((Long)value);
      }
      break;

    case CACHE_REQUEST_COUNT:
      if (value == null) {
        unsetCache_request_count();
      } else {
        setCache_request_count((Long)value);
      }
      break;

    case CACHE_TOTAL_LOAD_TIME:
      if (value == null) {
        unsetCache_total_load_time();
      } else {
        setCache_total_load_time((Long)value);
      }
      break;

    case CACHE_AVG_LOAD_TIME:
      if (value == null) {
        unsetCache_avg_load_time();
      } else {
        setCache_avg_load_time((Double)value);
      }
      break;

    case CACHE_HIT_RATE:
      if (value == null) {
        unsetCache_hit_rate();
      } else {
        setCache_hit_rate((Double)value);
      }
      break;

    case CACHE_LOAD_EXCEPTION_RATE:
      if (value == null) {
        unsetCache_load_exception_rate();
      } else {
        setCache_load_exception_rate((Double)value);
      }
      break;

    case CACHE_MISS_RATE:
      if (value == null) {
        unsetCache_miss_rate();
      } else {
        setCache_miss_rate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_DBS:
      return getNum_dbs();

    case NUM_TABLES:
      return getNum_tables();

    case CACHE_EVICTION_COUNT:
      return getCache_eviction_count();

    case CACHE_HIT_COUNT:
      return getCache_hit_count();

    case CACHE_LOAD_COUNT:
      return getCache_load_count();

    case CACHE_LOAD_EXCEPTION_COUNT:
      return getCache_load_exception_count();

    case CACHE_LOAD_SUCCESS_COUNT:
      return getCache_load_success_count();

    case CACHE_MISS_COUNT:
      return getCache_miss_count();

    case CACHE_REQUEST_COUNT:
      return getCache_request_count();

    case CACHE_TOTAL_LOAD_TIME:
      return getCache_total_load_time();

    case CACHE_AVG_LOAD_TIME:
      return getCache_avg_load_time();

    case CACHE_HIT_RATE:
      return getCache_hit_rate();

    case CACHE_LOAD_EXCEPTION_RATE:
      return getCache_load_exception_rate();

    case CACHE_MISS_RATE:
      return getCache_miss_rate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_DBS:
      return isSetNum_dbs();
    case NUM_TABLES:
      return isSetNum_tables();
    case CACHE_EVICTION_COUNT:
      return isSetCache_eviction_count();
    case CACHE_HIT_COUNT:
      return isSetCache_hit_count();
    case CACHE_LOAD_COUNT:
      return isSetCache_load_count();
    case CACHE_LOAD_EXCEPTION_COUNT:
      return isSetCache_load_exception_count();
    case CACHE_LOAD_SUCCESS_COUNT:
      return isSetCache_load_success_count();
    case CACHE_MISS_COUNT:
      return isSetCache_miss_count();
    case CACHE_REQUEST_COUNT:
      return isSetCache_request_count();
    case CACHE_TOTAL_LOAD_TIME:
      return isSetCache_total_load_time();
    case CACHE_AVG_LOAD_TIME:
      return isSetCache_avg_load_time();
    case CACHE_HIT_RATE:
      return isSetCache_hit_rate();
    case CACHE_LOAD_EXCEPTION_RATE:
      return isSetCache_load_exception_rate();
    case CACHE_MISS_RATE:
      return isSetCache_miss_rate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGetCatalogMetricsResult)
      return this.equals((TGetCatalogMetricsResult)that);
    return false;
  }

  public boolean equals(TGetCatalogMetricsResult that) {
    if (that == null)
      return false;

    boolean this_present_num_dbs = true;
    boolean that_present_num_dbs = true;
    if (this_present_num_dbs || that_present_num_dbs) {
      if (!(this_present_num_dbs && that_present_num_dbs))
        return false;
      if (this.num_dbs != that.num_dbs)
        return false;
    }

    boolean this_present_num_tables = true;
    boolean that_present_num_tables = true;
    if (this_present_num_tables || that_present_num_tables) {
      if (!(this_present_num_tables && that_present_num_tables))
        return false;
      if (this.num_tables != that.num_tables)
        return false;
    }

    boolean this_present_cache_eviction_count = true && this.isSetCache_eviction_count();
    boolean that_present_cache_eviction_count = true && that.isSetCache_eviction_count();
    if (this_present_cache_eviction_count || that_present_cache_eviction_count) {
      if (!(this_present_cache_eviction_count && that_present_cache_eviction_count))
        return false;
      if (this.cache_eviction_count != that.cache_eviction_count)
        return false;
    }

    boolean this_present_cache_hit_count = true && this.isSetCache_hit_count();
    boolean that_present_cache_hit_count = true && that.isSetCache_hit_count();
    if (this_present_cache_hit_count || that_present_cache_hit_count) {
      if (!(this_present_cache_hit_count && that_present_cache_hit_count))
        return false;
      if (this.cache_hit_count != that.cache_hit_count)
        return false;
    }

    boolean this_present_cache_load_count = true && this.isSetCache_load_count();
    boolean that_present_cache_load_count = true && that.isSetCache_load_count();
    if (this_present_cache_load_count || that_present_cache_load_count) {
      if (!(this_present_cache_load_count && that_present_cache_load_count))
        return false;
      if (this.cache_load_count != that.cache_load_count)
        return false;
    }

    boolean this_present_cache_load_exception_count = true && this.isSetCache_load_exception_count();
    boolean that_present_cache_load_exception_count = true && that.isSetCache_load_exception_count();
    if (this_present_cache_load_exception_count || that_present_cache_load_exception_count) {
      if (!(this_present_cache_load_exception_count && that_present_cache_load_exception_count))
        return false;
      if (this.cache_load_exception_count != that.cache_load_exception_count)
        return false;
    }

    boolean this_present_cache_load_success_count = true && this.isSetCache_load_success_count();
    boolean that_present_cache_load_success_count = true && that.isSetCache_load_success_count();
    if (this_present_cache_load_success_count || that_present_cache_load_success_count) {
      if (!(this_present_cache_load_success_count && that_present_cache_load_success_count))
        return false;
      if (this.cache_load_success_count != that.cache_load_success_count)
        return false;
    }

    boolean this_present_cache_miss_count = true && this.isSetCache_miss_count();
    boolean that_present_cache_miss_count = true && that.isSetCache_miss_count();
    if (this_present_cache_miss_count || that_present_cache_miss_count) {
      if (!(this_present_cache_miss_count && that_present_cache_miss_count))
        return false;
      if (this.cache_miss_count != that.cache_miss_count)
        return false;
    }

    boolean this_present_cache_request_count = true && this.isSetCache_request_count();
    boolean that_present_cache_request_count = true && that.isSetCache_request_count();
    if (this_present_cache_request_count || that_present_cache_request_count) {
      if (!(this_present_cache_request_count && that_present_cache_request_count))
        return false;
      if (this.cache_request_count != that.cache_request_count)
        return false;
    }

    boolean this_present_cache_total_load_time = true && this.isSetCache_total_load_time();
    boolean that_present_cache_total_load_time = true && that.isSetCache_total_load_time();
    if (this_present_cache_total_load_time || that_present_cache_total_load_time) {
      if (!(this_present_cache_total_load_time && that_present_cache_total_load_time))
        return false;
      if (this.cache_total_load_time != that.cache_total_load_time)
        return false;
    }

    boolean this_present_cache_avg_load_time = true && this.isSetCache_avg_load_time();
    boolean that_present_cache_avg_load_time = true && that.isSetCache_avg_load_time();
    if (this_present_cache_avg_load_time || that_present_cache_avg_load_time) {
      if (!(this_present_cache_avg_load_time && that_present_cache_avg_load_time))
        return false;
      if (this.cache_avg_load_time != that.cache_avg_load_time)
        return false;
    }

    boolean this_present_cache_hit_rate = true && this.isSetCache_hit_rate();
    boolean that_present_cache_hit_rate = true && that.isSetCache_hit_rate();
    if (this_present_cache_hit_rate || that_present_cache_hit_rate) {
      if (!(this_present_cache_hit_rate && that_present_cache_hit_rate))
        return false;
      if (this.cache_hit_rate != that.cache_hit_rate)
        return false;
    }

    boolean this_present_cache_load_exception_rate = true && this.isSetCache_load_exception_rate();
    boolean that_present_cache_load_exception_rate = true && that.isSetCache_load_exception_rate();
    if (this_present_cache_load_exception_rate || that_present_cache_load_exception_rate) {
      if (!(this_present_cache_load_exception_rate && that_present_cache_load_exception_rate))
        return false;
      if (this.cache_load_exception_rate != that.cache_load_exception_rate)
        return false;
    }

    boolean this_present_cache_miss_rate = true && this.isSetCache_miss_rate();
    boolean that_present_cache_miss_rate = true && that.isSetCache_miss_rate();
    if (this_present_cache_miss_rate || that_present_cache_miss_rate) {
      if (!(this_present_cache_miss_rate && that_present_cache_miss_rate))
        return false;
      if (this.cache_miss_rate != that.cache_miss_rate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_num_dbs = true;
    list.add(present_num_dbs);
    if (present_num_dbs)
      list.add(num_dbs);

    boolean present_num_tables = true;
    list.add(present_num_tables);
    if (present_num_tables)
      list.add(num_tables);

    boolean present_cache_eviction_count = true && (isSetCache_eviction_count());
    list.add(present_cache_eviction_count);
    if (present_cache_eviction_count)
      list.add(cache_eviction_count);

    boolean present_cache_hit_count = true && (isSetCache_hit_count());
    list.add(present_cache_hit_count);
    if (present_cache_hit_count)
      list.add(cache_hit_count);

    boolean present_cache_load_count = true && (isSetCache_load_count());
    list.add(present_cache_load_count);
    if (present_cache_load_count)
      list.add(cache_load_count);

    boolean present_cache_load_exception_count = true && (isSetCache_load_exception_count());
    list.add(present_cache_load_exception_count);
    if (present_cache_load_exception_count)
      list.add(cache_load_exception_count);

    boolean present_cache_load_success_count = true && (isSetCache_load_success_count());
    list.add(present_cache_load_success_count);
    if (present_cache_load_success_count)
      list.add(cache_load_success_count);

    boolean present_cache_miss_count = true && (isSetCache_miss_count());
    list.add(present_cache_miss_count);
    if (present_cache_miss_count)
      list.add(cache_miss_count);

    boolean present_cache_request_count = true && (isSetCache_request_count());
    list.add(present_cache_request_count);
    if (present_cache_request_count)
      list.add(cache_request_count);

    boolean present_cache_total_load_time = true && (isSetCache_total_load_time());
    list.add(present_cache_total_load_time);
    if (present_cache_total_load_time)
      list.add(cache_total_load_time);

    boolean present_cache_avg_load_time = true && (isSetCache_avg_load_time());
    list.add(present_cache_avg_load_time);
    if (present_cache_avg_load_time)
      list.add(cache_avg_load_time);

    boolean present_cache_hit_rate = true && (isSetCache_hit_rate());
    list.add(present_cache_hit_rate);
    if (present_cache_hit_rate)
      list.add(cache_hit_rate);

    boolean present_cache_load_exception_rate = true && (isSetCache_load_exception_rate());
    list.add(present_cache_load_exception_rate);
    if (present_cache_load_exception_rate)
      list.add(cache_load_exception_rate);

    boolean present_cache_miss_rate = true && (isSetCache_miss_rate());
    list.add(present_cache_miss_rate);
    if (present_cache_miss_rate)
      list.add(cache_miss_rate);

    return list.hashCode();
  }

  @Override
  public int compareTo(TGetCatalogMetricsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNum_dbs()).compareTo(other.isSetNum_dbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_dbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_dbs, other.num_dbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_tables()).compareTo(other.isSetNum_tables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_tables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_tables, other.num_tables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_eviction_count()).compareTo(other.isSetCache_eviction_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_eviction_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_eviction_count, other.cache_eviction_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_hit_count()).compareTo(other.isSetCache_hit_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_hit_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_hit_count, other.cache_hit_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_load_count()).compareTo(other.isSetCache_load_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_load_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_load_count, other.cache_load_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_load_exception_count()).compareTo(other.isSetCache_load_exception_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_load_exception_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_load_exception_count, other.cache_load_exception_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_load_success_count()).compareTo(other.isSetCache_load_success_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_load_success_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_load_success_count, other.cache_load_success_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_miss_count()).compareTo(other.isSetCache_miss_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_miss_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_miss_count, other.cache_miss_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_request_count()).compareTo(other.isSetCache_request_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_request_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_request_count, other.cache_request_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_total_load_time()).compareTo(other.isSetCache_total_load_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_total_load_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_total_load_time, other.cache_total_load_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_avg_load_time()).compareTo(other.isSetCache_avg_load_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_avg_load_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_avg_load_time, other.cache_avg_load_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_hit_rate()).compareTo(other.isSetCache_hit_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_hit_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_hit_rate, other.cache_hit_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_load_exception_rate()).compareTo(other.isSetCache_load_exception_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_load_exception_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_load_exception_rate, other.cache_load_exception_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_miss_rate()).compareTo(other.isSetCache_miss_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_miss_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_miss_rate, other.cache_miss_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGetCatalogMetricsResult(");
    boolean first = true;

    sb.append("num_dbs:");
    sb.append(this.num_dbs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_tables:");
    sb.append(this.num_tables);
    first = false;
    if (isSetCache_eviction_count()) {
      if (!first) sb.append(", ");
      sb.append("cache_eviction_count:");
      sb.append(this.cache_eviction_count);
      first = false;
    }
    if (isSetCache_hit_count()) {
      if (!first) sb.append(", ");
      sb.append("cache_hit_count:");
      sb.append(this.cache_hit_count);
      first = false;
    }
    if (isSetCache_load_count()) {
      if (!first) sb.append(", ");
      sb.append("cache_load_count:");
      sb.append(this.cache_load_count);
      first = false;
    }
    if (isSetCache_load_exception_count()) {
      if (!first) sb.append(", ");
      sb.append("cache_load_exception_count:");
      sb.append(this.cache_load_exception_count);
      first = false;
    }
    if (isSetCache_load_success_count()) {
      if (!first) sb.append(", ");
      sb.append("cache_load_success_count:");
      sb.append(this.cache_load_success_count);
      first = false;
    }
    if (isSetCache_miss_count()) {
      if (!first) sb.append(", ");
      sb.append("cache_miss_count:");
      sb.append(this.cache_miss_count);
      first = false;
    }
    if (isSetCache_request_count()) {
      if (!first) sb.append(", ");
      sb.append("cache_request_count:");
      sb.append(this.cache_request_count);
      first = false;
    }
    if (isSetCache_total_load_time()) {
      if (!first) sb.append(", ");
      sb.append("cache_total_load_time:");
      sb.append(this.cache_total_load_time);
      first = false;
    }
    if (isSetCache_avg_load_time()) {
      if (!first) sb.append(", ");
      sb.append("cache_avg_load_time:");
      sb.append(this.cache_avg_load_time);
      first = false;
    }
    if (isSetCache_hit_rate()) {
      if (!first) sb.append(", ");
      sb.append("cache_hit_rate:");
      sb.append(this.cache_hit_rate);
      first = false;
    }
    if (isSetCache_load_exception_rate()) {
      if (!first) sb.append(", ");
      sb.append("cache_load_exception_rate:");
      sb.append(this.cache_load_exception_rate);
      first = false;
    }
    if (isSetCache_miss_rate()) {
      if (!first) sb.append(", ");
      sb.append("cache_miss_rate:");
      sb.append(this.cache_miss_rate);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetNum_dbs()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_dbs' is unset! Struct:" + toString());
    }

    if (!isSetNum_tables()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_tables' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetCatalogMetricsResultStandardSchemeFactory implements SchemeFactory {
    public TGetCatalogMetricsResultStandardScheme getScheme() {
      return new TGetCatalogMetricsResultStandardScheme();
    }
  }

  private static class TGetCatalogMetricsResultStandardScheme extends StandardScheme<TGetCatalogMetricsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetCatalogMetricsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_DBS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_dbs = iprot.readI32();
              struct.setNum_dbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_TABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_tables = iprot.readI32();
              struct.setNum_tablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CACHE_EVICTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cache_eviction_count = iprot.readI64();
              struct.setCache_eviction_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CACHE_HIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cache_hit_count = iprot.readI64();
              struct.setCache_hit_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CACHE_LOAD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cache_load_count = iprot.readI64();
              struct.setCache_load_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CACHE_LOAD_EXCEPTION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cache_load_exception_count = iprot.readI64();
              struct.setCache_load_exception_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CACHE_LOAD_SUCCESS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cache_load_success_count = iprot.readI64();
              struct.setCache_load_success_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CACHE_MISS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cache_miss_count = iprot.readI64();
              struct.setCache_miss_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CACHE_REQUEST_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cache_request_count = iprot.readI64();
              struct.setCache_request_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CACHE_TOTAL_LOAD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cache_total_load_time = iprot.readI64();
              struct.setCache_total_load_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CACHE_AVG_LOAD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cache_avg_load_time = iprot.readDouble();
              struct.setCache_avg_load_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CACHE_HIT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cache_hit_rate = iprot.readDouble();
              struct.setCache_hit_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CACHE_LOAD_EXCEPTION_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cache_load_exception_rate = iprot.readDouble();
              struct.setCache_load_exception_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CACHE_MISS_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cache_miss_rate = iprot.readDouble();
              struct.setCache_miss_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetCatalogMetricsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_DBS_FIELD_DESC);
      oprot.writeI32(struct.num_dbs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_TABLES_FIELD_DESC);
      oprot.writeI32(struct.num_tables);
      oprot.writeFieldEnd();
      if (struct.isSetCache_eviction_count()) {
        oprot.writeFieldBegin(CACHE_EVICTION_COUNT_FIELD_DESC);
        oprot.writeI64(struct.cache_eviction_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_hit_count()) {
        oprot.writeFieldBegin(CACHE_HIT_COUNT_FIELD_DESC);
        oprot.writeI64(struct.cache_hit_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_load_count()) {
        oprot.writeFieldBegin(CACHE_LOAD_COUNT_FIELD_DESC);
        oprot.writeI64(struct.cache_load_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_load_exception_count()) {
        oprot.writeFieldBegin(CACHE_LOAD_EXCEPTION_COUNT_FIELD_DESC);
        oprot.writeI64(struct.cache_load_exception_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_load_success_count()) {
        oprot.writeFieldBegin(CACHE_LOAD_SUCCESS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.cache_load_success_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_miss_count()) {
        oprot.writeFieldBegin(CACHE_MISS_COUNT_FIELD_DESC);
        oprot.writeI64(struct.cache_miss_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_request_count()) {
        oprot.writeFieldBegin(CACHE_REQUEST_COUNT_FIELD_DESC);
        oprot.writeI64(struct.cache_request_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_total_load_time()) {
        oprot.writeFieldBegin(CACHE_TOTAL_LOAD_TIME_FIELD_DESC);
        oprot.writeI64(struct.cache_total_load_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_avg_load_time()) {
        oprot.writeFieldBegin(CACHE_AVG_LOAD_TIME_FIELD_DESC);
        oprot.writeDouble(struct.cache_avg_load_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_hit_rate()) {
        oprot.writeFieldBegin(CACHE_HIT_RATE_FIELD_DESC);
        oprot.writeDouble(struct.cache_hit_rate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_load_exception_rate()) {
        oprot.writeFieldBegin(CACHE_LOAD_EXCEPTION_RATE_FIELD_DESC);
        oprot.writeDouble(struct.cache_load_exception_rate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCache_miss_rate()) {
        oprot.writeFieldBegin(CACHE_MISS_RATE_FIELD_DESC);
        oprot.writeDouble(struct.cache_miss_rate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetCatalogMetricsResultTupleSchemeFactory implements SchemeFactory {
    public TGetCatalogMetricsResultTupleScheme getScheme() {
      return new TGetCatalogMetricsResultTupleScheme();
    }
  }

  private static class TGetCatalogMetricsResultTupleScheme extends TupleScheme<TGetCatalogMetricsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetCatalogMetricsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.num_dbs);
      oprot.writeI32(struct.num_tables);
      BitSet optionals = new BitSet();
      if (struct.isSetCache_eviction_count()) {
        optionals.set(0);
      }
      if (struct.isSetCache_hit_count()) {
        optionals.set(1);
      }
      if (struct.isSetCache_load_count()) {
        optionals.set(2);
      }
      if (struct.isSetCache_load_exception_count()) {
        optionals.set(3);
      }
      if (struct.isSetCache_load_success_count()) {
        optionals.set(4);
      }
      if (struct.isSetCache_miss_count()) {
        optionals.set(5);
      }
      if (struct.isSetCache_request_count()) {
        optionals.set(6);
      }
      if (struct.isSetCache_total_load_time()) {
        optionals.set(7);
      }
      if (struct.isSetCache_avg_load_time()) {
        optionals.set(8);
      }
      if (struct.isSetCache_hit_rate()) {
        optionals.set(9);
      }
      if (struct.isSetCache_load_exception_rate()) {
        optionals.set(10);
      }
      if (struct.isSetCache_miss_rate()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetCache_eviction_count()) {
        oprot.writeI64(struct.cache_eviction_count);
      }
      if (struct.isSetCache_hit_count()) {
        oprot.writeI64(struct.cache_hit_count);
      }
      if (struct.isSetCache_load_count()) {
        oprot.writeI64(struct.cache_load_count);
      }
      if (struct.isSetCache_load_exception_count()) {
        oprot.writeI64(struct.cache_load_exception_count);
      }
      if (struct.isSetCache_load_success_count()) {
        oprot.writeI64(struct.cache_load_success_count);
      }
      if (struct.isSetCache_miss_count()) {
        oprot.writeI64(struct.cache_miss_count);
      }
      if (struct.isSetCache_request_count()) {
        oprot.writeI64(struct.cache_request_count);
      }
      if (struct.isSetCache_total_load_time()) {
        oprot.writeI64(struct.cache_total_load_time);
      }
      if (struct.isSetCache_avg_load_time()) {
        oprot.writeDouble(struct.cache_avg_load_time);
      }
      if (struct.isSetCache_hit_rate()) {
        oprot.writeDouble(struct.cache_hit_rate);
      }
      if (struct.isSetCache_load_exception_rate()) {
        oprot.writeDouble(struct.cache_load_exception_rate);
      }
      if (struct.isSetCache_miss_rate()) {
        oprot.writeDouble(struct.cache_miss_rate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetCatalogMetricsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.num_dbs = iprot.readI32();
      struct.setNum_dbsIsSet(true);
      struct.num_tables = iprot.readI32();
      struct.setNum_tablesIsSet(true);
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.cache_eviction_count = iprot.readI64();
        struct.setCache_eviction_countIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cache_hit_count = iprot.readI64();
        struct.setCache_hit_countIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cache_load_count = iprot.readI64();
        struct.setCache_load_countIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cache_load_exception_count = iprot.readI64();
        struct.setCache_load_exception_countIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cache_load_success_count = iprot.readI64();
        struct.setCache_load_success_countIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cache_miss_count = iprot.readI64();
        struct.setCache_miss_countIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cache_request_count = iprot.readI64();
        struct.setCache_request_countIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cache_total_load_time = iprot.readI64();
        struct.setCache_total_load_timeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cache_avg_load_time = iprot.readDouble();
        struct.setCache_avg_load_timeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cache_hit_rate = iprot.readDouble();
        struct.setCache_hit_rateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cache_load_exception_rate = iprot.readDouble();
        struct.setCache_load_exception_rateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cache_miss_rate = iprot.readDouble();
        struct.setCache_miss_rateIsSet(true);
      }
    }
  }

}

