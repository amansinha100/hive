/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TComputeStatsParams implements org.apache.thrift.TBase<TComputeStatsParams, TComputeStatsParams._Fields>, java.io.Serializable, Cloneable, Comparable<TComputeStatsParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TComputeStatsParams");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TBL_STATS_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl_stats_query", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COL_STATS_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("col_stats_query", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_INCREMENTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_incremental", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField EXISTING_PART_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("existing_part_stats", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField EXPECTED_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("expected_partitions", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField EXPECT_ALL_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("expect_all_partitions", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField NUM_PARTITION_COLS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_partition_cols", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_FILE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("total_file_bytes", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TComputeStatsParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TComputeStatsParamsTupleSchemeFactory());
  }

  public org.apache.impala.thrift.TTableName table_name; // required
  public String tbl_stats_query; // optional
  public String col_stats_query; // optional
  public boolean is_incremental; // optional
  public List<org.apache.impala.thrift.TPartitionStats> existing_part_stats; // optional
  public List<List<String>> expected_partitions; // optional
  public boolean expect_all_partitions; // optional
  public int num_partition_cols; // optional
  public long total_file_bytes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    TBL_STATS_QUERY((short)2, "tbl_stats_query"),
    COL_STATS_QUERY((short)3, "col_stats_query"),
    IS_INCREMENTAL((short)4, "is_incremental"),
    EXISTING_PART_STATS((short)5, "existing_part_stats"),
    EXPECTED_PARTITIONS((short)6, "expected_partitions"),
    EXPECT_ALL_PARTITIONS((short)7, "expect_all_partitions"),
    NUM_PARTITION_COLS((short)8, "num_partition_cols"),
    TOTAL_FILE_BYTES((short)9, "total_file_bytes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // TBL_STATS_QUERY
          return TBL_STATS_QUERY;
        case 3: // COL_STATS_QUERY
          return COL_STATS_QUERY;
        case 4: // IS_INCREMENTAL
          return IS_INCREMENTAL;
        case 5: // EXISTING_PART_STATS
          return EXISTING_PART_STATS;
        case 6: // EXPECTED_PARTITIONS
          return EXPECTED_PARTITIONS;
        case 7: // EXPECT_ALL_PARTITIONS
          return EXPECT_ALL_PARTITIONS;
        case 8: // NUM_PARTITION_COLS
          return NUM_PARTITION_COLS;
        case 9: // TOTAL_FILE_BYTES
          return TOTAL_FILE_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_INCREMENTAL_ISSET_ID = 0;
  private static final int __EXPECT_ALL_PARTITIONS_ISSET_ID = 1;
  private static final int __NUM_PARTITION_COLS_ISSET_ID = 2;
  private static final int __TOTAL_FILE_BYTES_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TBL_STATS_QUERY,_Fields.COL_STATS_QUERY,_Fields.IS_INCREMENTAL,_Fields.EXISTING_PART_STATS,_Fields.EXPECTED_PARTITIONS,_Fields.EXPECT_ALL_PARTITIONS,_Fields.NUM_PARTITION_COLS,_Fields.TOTAL_FILE_BYTES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.TBL_STATS_QUERY, new org.apache.thrift.meta_data.FieldMetaData("tbl_stats_query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL_STATS_QUERY, new org.apache.thrift.meta_data.FieldMetaData("col_stats_query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_INCREMENTAL, new org.apache.thrift.meta_data.FieldMetaData("is_incremental", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXISTING_PART_STATS, new org.apache.thrift.meta_data.FieldMetaData("existing_part_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TPartitionStats.class))));
    tmpMap.put(_Fields.EXPECTED_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("expected_partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.EXPECT_ALL_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("expect_all_partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NUM_PARTITION_COLS, new org.apache.thrift.meta_data.FieldMetaData("num_partition_cols", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_FILE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("total_file_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TComputeStatsParams.class, metaDataMap);
  }

  public TComputeStatsParams() {
  }

  public TComputeStatsParams(
    org.apache.impala.thrift.TTableName table_name)
  {
    this();
    this.table_name = table_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TComputeStatsParams(TComputeStatsParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_name()) {
      this.table_name = new org.apache.impala.thrift.TTableName(other.table_name);
    }
    if (other.isSetTbl_stats_query()) {
      this.tbl_stats_query = other.tbl_stats_query;
    }
    if (other.isSetCol_stats_query()) {
      this.col_stats_query = other.col_stats_query;
    }
    this.is_incremental = other.is_incremental;
    if (other.isSetExisting_part_stats()) {
      List<org.apache.impala.thrift.TPartitionStats> __this__existing_part_stats = new ArrayList<org.apache.impala.thrift.TPartitionStats>(other.existing_part_stats.size());
      for (org.apache.impala.thrift.TPartitionStats other_element : other.existing_part_stats) {
        __this__existing_part_stats.add(new org.apache.impala.thrift.TPartitionStats(other_element));
      }
      this.existing_part_stats = __this__existing_part_stats;
    }
    if (other.isSetExpected_partitions()) {
      List<List<String>> __this__expected_partitions = new ArrayList<List<String>>(other.expected_partitions.size());
      for (List<String> other_element : other.expected_partitions) {
        List<String> __this__expected_partitions_copy = new ArrayList<String>(other_element);
        __this__expected_partitions.add(__this__expected_partitions_copy);
      }
      this.expected_partitions = __this__expected_partitions;
    }
    this.expect_all_partitions = other.expect_all_partitions;
    this.num_partition_cols = other.num_partition_cols;
    this.total_file_bytes = other.total_file_bytes;
  }

  public TComputeStatsParams deepCopy() {
    return new TComputeStatsParams(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    this.tbl_stats_query = null;
    this.col_stats_query = null;
    setIs_incrementalIsSet(false);
    this.is_incremental = false;
    this.existing_part_stats = null;
    this.expected_partitions = null;
    setExpect_all_partitionsIsSet(false);
    this.expect_all_partitions = false;
    setNum_partition_colsIsSet(false);
    this.num_partition_cols = 0;
    setTotal_file_bytesIsSet(false);
    this.total_file_bytes = 0;
  }

  public org.apache.impala.thrift.TTableName getTable_name() {
    return this.table_name;
  }

  public TComputeStatsParams setTable_name(org.apache.impala.thrift.TTableName table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public String getTbl_stats_query() {
    return this.tbl_stats_query;
  }

  public TComputeStatsParams setTbl_stats_query(String tbl_stats_query) {
    this.tbl_stats_query = tbl_stats_query;
    return this;
  }

  public void unsetTbl_stats_query() {
    this.tbl_stats_query = null;
  }

  /** Returns true if field tbl_stats_query is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl_stats_query() {
    return this.tbl_stats_query != null;
  }

  public void setTbl_stats_queryIsSet(boolean value) {
    if (!value) {
      this.tbl_stats_query = null;
    }
  }

  public String getCol_stats_query() {
    return this.col_stats_query;
  }

  public TComputeStatsParams setCol_stats_query(String col_stats_query) {
    this.col_stats_query = col_stats_query;
    return this;
  }

  public void unsetCol_stats_query() {
    this.col_stats_query = null;
  }

  /** Returns true if field col_stats_query is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_stats_query() {
    return this.col_stats_query != null;
  }

  public void setCol_stats_queryIsSet(boolean value) {
    if (!value) {
      this.col_stats_query = null;
    }
  }

  public boolean isIs_incremental() {
    return this.is_incremental;
  }

  public TComputeStatsParams setIs_incremental(boolean is_incremental) {
    this.is_incremental = is_incremental;
    setIs_incrementalIsSet(true);
    return this;
  }

  public void unsetIs_incremental() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_INCREMENTAL_ISSET_ID);
  }

  /** Returns true if field is_incremental is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_incremental() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_INCREMENTAL_ISSET_ID);
  }

  public void setIs_incrementalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_INCREMENTAL_ISSET_ID, value);
  }

  public int getExisting_part_statsSize() {
    return (this.existing_part_stats == null) ? 0 : this.existing_part_stats.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TPartitionStats> getExisting_part_statsIterator() {
    return (this.existing_part_stats == null) ? null : this.existing_part_stats.iterator();
  }

  public void addToExisting_part_stats(org.apache.impala.thrift.TPartitionStats elem) {
    if (this.existing_part_stats == null) {
      this.existing_part_stats = new ArrayList<org.apache.impala.thrift.TPartitionStats>();
    }
    this.existing_part_stats.add(elem);
  }

  public List<org.apache.impala.thrift.TPartitionStats> getExisting_part_stats() {
    return this.existing_part_stats;
  }

  public TComputeStatsParams setExisting_part_stats(List<org.apache.impala.thrift.TPartitionStats> existing_part_stats) {
    this.existing_part_stats = existing_part_stats;
    return this;
  }

  public void unsetExisting_part_stats() {
    this.existing_part_stats = null;
  }

  /** Returns true if field existing_part_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetExisting_part_stats() {
    return this.existing_part_stats != null;
  }

  public void setExisting_part_statsIsSet(boolean value) {
    if (!value) {
      this.existing_part_stats = null;
    }
  }

  public int getExpected_partitionsSize() {
    return (this.expected_partitions == null) ? 0 : this.expected_partitions.size();
  }

  public java.util.Iterator<List<String>> getExpected_partitionsIterator() {
    return (this.expected_partitions == null) ? null : this.expected_partitions.iterator();
  }

  public void addToExpected_partitions(List<String> elem) {
    if (this.expected_partitions == null) {
      this.expected_partitions = new ArrayList<List<String>>();
    }
    this.expected_partitions.add(elem);
  }

  public List<List<String>> getExpected_partitions() {
    return this.expected_partitions;
  }

  public TComputeStatsParams setExpected_partitions(List<List<String>> expected_partitions) {
    this.expected_partitions = expected_partitions;
    return this;
  }

  public void unsetExpected_partitions() {
    this.expected_partitions = null;
  }

  /** Returns true if field expected_partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetExpected_partitions() {
    return this.expected_partitions != null;
  }

  public void setExpected_partitionsIsSet(boolean value) {
    if (!value) {
      this.expected_partitions = null;
    }
  }

  public boolean isExpect_all_partitions() {
    return this.expect_all_partitions;
  }

  public TComputeStatsParams setExpect_all_partitions(boolean expect_all_partitions) {
    this.expect_all_partitions = expect_all_partitions;
    setExpect_all_partitionsIsSet(true);
    return this;
  }

  public void unsetExpect_all_partitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPECT_ALL_PARTITIONS_ISSET_ID);
  }

  /** Returns true if field expect_all_partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetExpect_all_partitions() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPECT_ALL_PARTITIONS_ISSET_ID);
  }

  public void setExpect_all_partitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPECT_ALL_PARTITIONS_ISSET_ID, value);
  }

  public int getNum_partition_cols() {
    return this.num_partition_cols;
  }

  public TComputeStatsParams setNum_partition_cols(int num_partition_cols) {
    this.num_partition_cols = num_partition_cols;
    setNum_partition_colsIsSet(true);
    return this;
  }

  public void unsetNum_partition_cols() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_PARTITION_COLS_ISSET_ID);
  }

  /** Returns true if field num_partition_cols is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_partition_cols() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_PARTITION_COLS_ISSET_ID);
  }

  public void setNum_partition_colsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_PARTITION_COLS_ISSET_ID, value);
  }

  public long getTotal_file_bytes() {
    return this.total_file_bytes;
  }

  public TComputeStatsParams setTotal_file_bytes(long total_file_bytes) {
    this.total_file_bytes = total_file_bytes;
    setTotal_file_bytesIsSet(true);
    return this;
  }

  public void unsetTotal_file_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_FILE_BYTES_ISSET_ID);
  }

  /** Returns true if field total_file_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_file_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_FILE_BYTES_ISSET_ID);
  }

  public void setTotal_file_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_FILE_BYTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((org.apache.impala.thrift.TTableName)value);
      }
      break;

    case TBL_STATS_QUERY:
      if (value == null) {
        unsetTbl_stats_query();
      } else {
        setTbl_stats_query((String)value);
      }
      break;

    case COL_STATS_QUERY:
      if (value == null) {
        unsetCol_stats_query();
      } else {
        setCol_stats_query((String)value);
      }
      break;

    case IS_INCREMENTAL:
      if (value == null) {
        unsetIs_incremental();
      } else {
        setIs_incremental((Boolean)value);
      }
      break;

    case EXISTING_PART_STATS:
      if (value == null) {
        unsetExisting_part_stats();
      } else {
        setExisting_part_stats((List<org.apache.impala.thrift.TPartitionStats>)value);
      }
      break;

    case EXPECTED_PARTITIONS:
      if (value == null) {
        unsetExpected_partitions();
      } else {
        setExpected_partitions((List<List<String>>)value);
      }
      break;

    case EXPECT_ALL_PARTITIONS:
      if (value == null) {
        unsetExpect_all_partitions();
      } else {
        setExpect_all_partitions((Boolean)value);
      }
      break;

    case NUM_PARTITION_COLS:
      if (value == null) {
        unsetNum_partition_cols();
      } else {
        setNum_partition_cols((Integer)value);
      }
      break;

    case TOTAL_FILE_BYTES:
      if (value == null) {
        unsetTotal_file_bytes();
      } else {
        setTotal_file_bytes((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTable_name();

    case TBL_STATS_QUERY:
      return getTbl_stats_query();

    case COL_STATS_QUERY:
      return getCol_stats_query();

    case IS_INCREMENTAL:
      return isIs_incremental();

    case EXISTING_PART_STATS:
      return getExisting_part_stats();

    case EXPECTED_PARTITIONS:
      return getExpected_partitions();

    case EXPECT_ALL_PARTITIONS:
      return isExpect_all_partitions();

    case NUM_PARTITION_COLS:
      return getNum_partition_cols();

    case TOTAL_FILE_BYTES:
      return getTotal_file_bytes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTable_name();
    case TBL_STATS_QUERY:
      return isSetTbl_stats_query();
    case COL_STATS_QUERY:
      return isSetCol_stats_query();
    case IS_INCREMENTAL:
      return isSetIs_incremental();
    case EXISTING_PART_STATS:
      return isSetExisting_part_stats();
    case EXPECTED_PARTITIONS:
      return isSetExpected_partitions();
    case EXPECT_ALL_PARTITIONS:
      return isSetExpect_all_partitions();
    case NUM_PARTITION_COLS:
      return isSetNum_partition_cols();
    case TOTAL_FILE_BYTES:
      return isSetTotal_file_bytes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TComputeStatsParams)
      return this.equals((TComputeStatsParams)that);
    return false;
  }

  public boolean equals(TComputeStatsParams that) {
    if (that == null)
      return false;

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_tbl_stats_query = true && this.isSetTbl_stats_query();
    boolean that_present_tbl_stats_query = true && that.isSetTbl_stats_query();
    if (this_present_tbl_stats_query || that_present_tbl_stats_query) {
      if (!(this_present_tbl_stats_query && that_present_tbl_stats_query))
        return false;
      if (!this.tbl_stats_query.equals(that.tbl_stats_query))
        return false;
    }

    boolean this_present_col_stats_query = true && this.isSetCol_stats_query();
    boolean that_present_col_stats_query = true && that.isSetCol_stats_query();
    if (this_present_col_stats_query || that_present_col_stats_query) {
      if (!(this_present_col_stats_query && that_present_col_stats_query))
        return false;
      if (!this.col_stats_query.equals(that.col_stats_query))
        return false;
    }

    boolean this_present_is_incremental = true && this.isSetIs_incremental();
    boolean that_present_is_incremental = true && that.isSetIs_incremental();
    if (this_present_is_incremental || that_present_is_incremental) {
      if (!(this_present_is_incremental && that_present_is_incremental))
        return false;
      if (this.is_incremental != that.is_incremental)
        return false;
    }

    boolean this_present_existing_part_stats = true && this.isSetExisting_part_stats();
    boolean that_present_existing_part_stats = true && that.isSetExisting_part_stats();
    if (this_present_existing_part_stats || that_present_existing_part_stats) {
      if (!(this_present_existing_part_stats && that_present_existing_part_stats))
        return false;
      if (!this.existing_part_stats.equals(that.existing_part_stats))
        return false;
    }

    boolean this_present_expected_partitions = true && this.isSetExpected_partitions();
    boolean that_present_expected_partitions = true && that.isSetExpected_partitions();
    if (this_present_expected_partitions || that_present_expected_partitions) {
      if (!(this_present_expected_partitions && that_present_expected_partitions))
        return false;
      if (!this.expected_partitions.equals(that.expected_partitions))
        return false;
    }

    boolean this_present_expect_all_partitions = true && this.isSetExpect_all_partitions();
    boolean that_present_expect_all_partitions = true && that.isSetExpect_all_partitions();
    if (this_present_expect_all_partitions || that_present_expect_all_partitions) {
      if (!(this_present_expect_all_partitions && that_present_expect_all_partitions))
        return false;
      if (this.expect_all_partitions != that.expect_all_partitions)
        return false;
    }

    boolean this_present_num_partition_cols = true && this.isSetNum_partition_cols();
    boolean that_present_num_partition_cols = true && that.isSetNum_partition_cols();
    if (this_present_num_partition_cols || that_present_num_partition_cols) {
      if (!(this_present_num_partition_cols && that_present_num_partition_cols))
        return false;
      if (this.num_partition_cols != that.num_partition_cols)
        return false;
    }

    boolean this_present_total_file_bytes = true && this.isSetTotal_file_bytes();
    boolean that_present_total_file_bytes = true && that.isSetTotal_file_bytes();
    if (this_present_total_file_bytes || that_present_total_file_bytes) {
      if (!(this_present_total_file_bytes && that_present_total_file_bytes))
        return false;
      if (this.total_file_bytes != that.total_file_bytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_table_name = true && (isSetTable_name());
    list.add(present_table_name);
    if (present_table_name)
      list.add(table_name);

    boolean present_tbl_stats_query = true && (isSetTbl_stats_query());
    list.add(present_tbl_stats_query);
    if (present_tbl_stats_query)
      list.add(tbl_stats_query);

    boolean present_col_stats_query = true && (isSetCol_stats_query());
    list.add(present_col_stats_query);
    if (present_col_stats_query)
      list.add(col_stats_query);

    boolean present_is_incremental = true && (isSetIs_incremental());
    list.add(present_is_incremental);
    if (present_is_incremental)
      list.add(is_incremental);

    boolean present_existing_part_stats = true && (isSetExisting_part_stats());
    list.add(present_existing_part_stats);
    if (present_existing_part_stats)
      list.add(existing_part_stats);

    boolean present_expected_partitions = true && (isSetExpected_partitions());
    list.add(present_expected_partitions);
    if (present_expected_partitions)
      list.add(expected_partitions);

    boolean present_expect_all_partitions = true && (isSetExpect_all_partitions());
    list.add(present_expect_all_partitions);
    if (present_expect_all_partitions)
      list.add(expect_all_partitions);

    boolean present_num_partition_cols = true && (isSetNum_partition_cols());
    list.add(present_num_partition_cols);
    if (present_num_partition_cols)
      list.add(num_partition_cols);

    boolean present_total_file_bytes = true && (isSetTotal_file_bytes());
    list.add(present_total_file_bytes);
    if (present_total_file_bytes)
      list.add(total_file_bytes);

    return list.hashCode();
  }

  @Override
  public int compareTo(TComputeStatsParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTbl_stats_query()).compareTo(other.isSetTbl_stats_query());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl_stats_query()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl_stats_query, other.tbl_stats_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol_stats_query()).compareTo(other.isSetCol_stats_query());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_stats_query()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_stats_query, other.col_stats_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_incremental()).compareTo(other.isSetIs_incremental());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_incremental()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_incremental, other.is_incremental);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExisting_part_stats()).compareTo(other.isSetExisting_part_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExisting_part_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.existing_part_stats, other.existing_part_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpected_partitions()).compareTo(other.isSetExpected_partitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpected_partitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expected_partitions, other.expected_partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpect_all_partitions()).compareTo(other.isSetExpect_all_partitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpect_all_partitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expect_all_partitions, other.expect_all_partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_partition_cols()).compareTo(other.isSetNum_partition_cols());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_partition_cols()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_partition_cols, other.num_partition_cols);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_file_bytes()).compareTo(other.isSetTotal_file_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_file_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_file_bytes, other.total_file_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TComputeStatsParams(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (isSetTbl_stats_query()) {
      if (!first) sb.append(", ");
      sb.append("tbl_stats_query:");
      if (this.tbl_stats_query == null) {
        sb.append("null");
      } else {
        sb.append(this.tbl_stats_query);
      }
      first = false;
    }
    if (isSetCol_stats_query()) {
      if (!first) sb.append(", ");
      sb.append("col_stats_query:");
      if (this.col_stats_query == null) {
        sb.append("null");
      } else {
        sb.append(this.col_stats_query);
      }
      first = false;
    }
    if (isSetIs_incremental()) {
      if (!first) sb.append(", ");
      sb.append("is_incremental:");
      sb.append(this.is_incremental);
      first = false;
    }
    if (isSetExisting_part_stats()) {
      if (!first) sb.append(", ");
      sb.append("existing_part_stats:");
      if (this.existing_part_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.existing_part_stats);
      }
      first = false;
    }
    if (isSetExpected_partitions()) {
      if (!first) sb.append(", ");
      sb.append("expected_partitions:");
      if (this.expected_partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.expected_partitions);
      }
      first = false;
    }
    if (isSetExpect_all_partitions()) {
      if (!first) sb.append(", ");
      sb.append("expect_all_partitions:");
      sb.append(this.expect_all_partitions);
      first = false;
    }
    if (isSetNum_partition_cols()) {
      if (!first) sb.append(", ");
      sb.append("num_partition_cols:");
      sb.append(this.num_partition_cols);
      first = false;
    }
    if (isSetTotal_file_bytes()) {
      if (!first) sb.append(", ");
      sb.append("total_file_bytes:");
      sb.append(this.total_file_bytes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (table_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TComputeStatsParamsStandardSchemeFactory implements SchemeFactory {
    public TComputeStatsParamsStandardScheme getScheme() {
      return new TComputeStatsParamsStandardScheme();
    }
  }

  private static class TComputeStatsParamsStandardScheme extends StandardScheme<TComputeStatsParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TComputeStatsParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new org.apache.impala.thrift.TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TBL_STATS_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tbl_stats_query = iprot.readString();
              struct.setTbl_stats_queryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COL_STATS_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.col_stats_query = iprot.readString();
              struct.setCol_stats_queryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_INCREMENTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_incremental = iprot.readBool();
              struct.setIs_incrementalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXISTING_PART_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                struct.existing_part_stats = new ArrayList<org.apache.impala.thrift.TPartitionStats>(_list250.size);
                org.apache.impala.thrift.TPartitionStats _elem251;
                for (int _i252 = 0; _i252 < _list250.size; ++_i252)
                {
                  _elem251 = new org.apache.impala.thrift.TPartitionStats();
                  _elem251.read(iprot);
                  struct.existing_part_stats.add(_elem251);
                }
                iprot.readListEnd();
              }
              struct.setExisting_part_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPECTED_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list253 = iprot.readListBegin();
                struct.expected_partitions = new ArrayList<List<String>>(_list253.size);
                List<String> _elem254;
                for (int _i255 = 0; _i255 < _list253.size; ++_i255)
                {
                  {
                    org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                    _elem254 = new ArrayList<String>(_list256.size);
                    String _elem257;
                    for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                    {
                      _elem257 = iprot.readString();
                      _elem254.add(_elem257);
                    }
                    iprot.readListEnd();
                  }
                  struct.expected_partitions.add(_elem254);
                }
                iprot.readListEnd();
              }
              struct.setExpected_partitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPECT_ALL_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.expect_all_partitions = iprot.readBool();
              struct.setExpect_all_partitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUM_PARTITION_COLS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_partition_cols = iprot.readI32();
              struct.setNum_partition_colsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_FILE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_file_bytes = iprot.readI64();
              struct.setTotal_file_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TComputeStatsParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tbl_stats_query != null) {
        if (struct.isSetTbl_stats_query()) {
          oprot.writeFieldBegin(TBL_STATS_QUERY_FIELD_DESC);
          oprot.writeString(struct.tbl_stats_query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.col_stats_query != null) {
        if (struct.isSetCol_stats_query()) {
          oprot.writeFieldBegin(COL_STATS_QUERY_FIELD_DESC);
          oprot.writeString(struct.col_stats_query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_incremental()) {
        oprot.writeFieldBegin(IS_INCREMENTAL_FIELD_DESC);
        oprot.writeBool(struct.is_incremental);
        oprot.writeFieldEnd();
      }
      if (struct.existing_part_stats != null) {
        if (struct.isSetExisting_part_stats()) {
          oprot.writeFieldBegin(EXISTING_PART_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.existing_part_stats.size()));
            for (org.apache.impala.thrift.TPartitionStats _iter259 : struct.existing_part_stats)
            {
              _iter259.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.expected_partitions != null) {
        if (struct.isSetExpected_partitions()) {
          oprot.writeFieldBegin(EXPECTED_PARTITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.expected_partitions.size()));
            for (List<String> _iter260 : struct.expected_partitions)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter260.size()));
                for (String _iter261 : _iter260)
                {
                  oprot.writeString(_iter261);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpect_all_partitions()) {
        oprot.writeFieldBegin(EXPECT_ALL_PARTITIONS_FIELD_DESC);
        oprot.writeBool(struct.expect_all_partitions);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_partition_cols()) {
        oprot.writeFieldBegin(NUM_PARTITION_COLS_FIELD_DESC);
        oprot.writeI32(struct.num_partition_cols);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal_file_bytes()) {
        oprot.writeFieldBegin(TOTAL_FILE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.total_file_bytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TComputeStatsParamsTupleSchemeFactory implements SchemeFactory {
    public TComputeStatsParamsTupleScheme getScheme() {
      return new TComputeStatsParamsTupleScheme();
    }
  }

  private static class TComputeStatsParamsTupleScheme extends TupleScheme<TComputeStatsParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TComputeStatsParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.table_name.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetTbl_stats_query()) {
        optionals.set(0);
      }
      if (struct.isSetCol_stats_query()) {
        optionals.set(1);
      }
      if (struct.isSetIs_incremental()) {
        optionals.set(2);
      }
      if (struct.isSetExisting_part_stats()) {
        optionals.set(3);
      }
      if (struct.isSetExpected_partitions()) {
        optionals.set(4);
      }
      if (struct.isSetExpect_all_partitions()) {
        optionals.set(5);
      }
      if (struct.isSetNum_partition_cols()) {
        optionals.set(6);
      }
      if (struct.isSetTotal_file_bytes()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTbl_stats_query()) {
        oprot.writeString(struct.tbl_stats_query);
      }
      if (struct.isSetCol_stats_query()) {
        oprot.writeString(struct.col_stats_query);
      }
      if (struct.isSetIs_incremental()) {
        oprot.writeBool(struct.is_incremental);
      }
      if (struct.isSetExisting_part_stats()) {
        {
          oprot.writeI32(struct.existing_part_stats.size());
          for (org.apache.impala.thrift.TPartitionStats _iter262 : struct.existing_part_stats)
          {
            _iter262.write(oprot);
          }
        }
      }
      if (struct.isSetExpected_partitions()) {
        {
          oprot.writeI32(struct.expected_partitions.size());
          for (List<String> _iter263 : struct.expected_partitions)
          {
            {
              oprot.writeI32(_iter263.size());
              for (String _iter264 : _iter263)
              {
                oprot.writeString(_iter264);
              }
            }
          }
        }
      }
      if (struct.isSetExpect_all_partitions()) {
        oprot.writeBool(struct.expect_all_partitions);
      }
      if (struct.isSetNum_partition_cols()) {
        oprot.writeI32(struct.num_partition_cols);
      }
      if (struct.isSetTotal_file_bytes()) {
        oprot.writeI64(struct.total_file_bytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TComputeStatsParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table_name = new org.apache.impala.thrift.TTableName();
      struct.table_name.read(iprot);
      struct.setTable_nameIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.tbl_stats_query = iprot.readString();
        struct.setTbl_stats_queryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.col_stats_query = iprot.readString();
        struct.setCol_stats_queryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_incremental = iprot.readBool();
        struct.setIs_incrementalIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list265 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.existing_part_stats = new ArrayList<org.apache.impala.thrift.TPartitionStats>(_list265.size);
          org.apache.impala.thrift.TPartitionStats _elem266;
          for (int _i267 = 0; _i267 < _list265.size; ++_i267)
          {
            _elem266 = new org.apache.impala.thrift.TPartitionStats();
            _elem266.read(iprot);
            struct.existing_part_stats.add(_elem266);
          }
        }
        struct.setExisting_part_statsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list268 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.expected_partitions = new ArrayList<List<String>>(_list268.size);
          List<String> _elem269;
          for (int _i270 = 0; _i270 < _list268.size; ++_i270)
          {
            {
              org.apache.thrift.protocol.TList _list271 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem269 = new ArrayList<String>(_list271.size);
              String _elem272;
              for (int _i273 = 0; _i273 < _list271.size; ++_i273)
              {
                _elem272 = iprot.readString();
                _elem269.add(_elem272);
              }
            }
            struct.expected_partitions.add(_elem269);
          }
        }
        struct.setExpected_partitionsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expect_all_partitions = iprot.readBool();
        struct.setExpect_all_partitionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.num_partition_cols = iprot.readI32();
        struct.setNum_partition_colsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.total_file_bytes = iprot.readI64();
        struct.setTotal_file_bytesIsSet(true);
      }
    }
  }

}

