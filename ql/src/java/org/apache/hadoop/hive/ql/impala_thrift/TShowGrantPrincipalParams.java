/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TShowGrantPrincipalParams implements org.apache.thrift.TBase<TShowGrantPrincipalParams, TShowGrantPrincipalParams._Fields>, java.io.Serializable, Cloneable, Comparable<TShowGrantPrincipalParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TShowGrantPrincipalParams");

  private static final org.apache.thrift.protocol.TField REQUESTING_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("requesting_user", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("principal_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRIVILEGE_FIELD_DESC = new org.apache.thrift.protocol.TField("privilege", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TShowGrantPrincipalParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TShowGrantPrincipalParamsTupleSchemeFactory());
  }

  private String requesting_user; // optional
  private String name; // required
  private org.apache.impala.thrift.TPrincipalType principal_type; // required
  private org.apache.impala.thrift.TPrivilege privilege; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUESTING_USER((short)1, "requesting_user"),
    NAME((short)2, "name"),
    /**
     * 
     * @see org.apache.impala.thrift.TPrincipalType
     */
    PRINCIPAL_TYPE((short)3, "principal_type"),
    PRIVILEGE((short)5, "privilege");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUESTING_USER
          return REQUESTING_USER;
        case 2: // NAME
          return NAME;
        case 3: // PRINCIPAL_TYPE
          return PRINCIPAL_TYPE;
        case 5: // PRIVILEGE
          return PRIVILEGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.REQUESTING_USER,_Fields.PRIVILEGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUESTING_USER, new org.apache.thrift.meta_data.FieldMetaData("requesting_user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("principal_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TPrincipalType.class)));
    tmpMap.put(_Fields.PRIVILEGE, new org.apache.thrift.meta_data.FieldMetaData("privilege", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TPrivilege.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TShowGrantPrincipalParams.class, metaDataMap);
  }

  public TShowGrantPrincipalParams() {
  }

  public TShowGrantPrincipalParams(
    String name,
    org.apache.impala.thrift.TPrincipalType principal_type)
  {
    this();
    this.name = name;
    this.principal_type = principal_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TShowGrantPrincipalParams(TShowGrantPrincipalParams other) {
    if (other.isSetRequesting_user()) {
      this.requesting_user = other.requesting_user;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPrincipal_type()) {
      this.principal_type = other.principal_type;
    }
    if (other.isSetPrivilege()) {
      this.privilege = new org.apache.impala.thrift.TPrivilege(other.privilege);
    }
  }

  public TShowGrantPrincipalParams deepCopy() {
    return new TShowGrantPrincipalParams(this);
  }

  @Override
  public void clear() {
    this.requesting_user = null;
    this.name = null;
    this.principal_type = null;
    this.privilege = null;
  }

  public String getRequesting_user() {
    return this.requesting_user;
  }

  public void setRequesting_user(String requesting_user) {
    this.requesting_user = requesting_user;
  }

  public void unsetRequesting_user() {
    this.requesting_user = null;
  }

  /** Returns true if field requesting_user is set (has been assigned a value) and false otherwise */
  public boolean isSetRequesting_user() {
    return this.requesting_user != null;
  }

  public void setRequesting_userIsSet(boolean value) {
    if (!value) {
      this.requesting_user = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see org.apache.impala.thrift.TPrincipalType
   */
  public org.apache.impala.thrift.TPrincipalType getPrincipal_type() {
    return this.principal_type;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TPrincipalType
   */
  public void setPrincipal_type(org.apache.impala.thrift.TPrincipalType principal_type) {
    this.principal_type = principal_type;
  }

  public void unsetPrincipal_type() {
    this.principal_type = null;
  }

  /** Returns true if field principal_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal_type() {
    return this.principal_type != null;
  }

  public void setPrincipal_typeIsSet(boolean value) {
    if (!value) {
      this.principal_type = null;
    }
  }

  public org.apache.impala.thrift.TPrivilege getPrivilege() {
    return this.privilege;
  }

  public void setPrivilege(org.apache.impala.thrift.TPrivilege privilege) {
    this.privilege = privilege;
  }

  public void unsetPrivilege() {
    this.privilege = null;
  }

  /** Returns true if field privilege is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivilege() {
    return this.privilege != null;
  }

  public void setPrivilegeIsSet(boolean value) {
    if (!value) {
      this.privilege = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUESTING_USER:
      if (value == null) {
        unsetRequesting_user();
      } else {
        setRequesting_user((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PRINCIPAL_TYPE:
      if (value == null) {
        unsetPrincipal_type();
      } else {
        setPrincipal_type((org.apache.impala.thrift.TPrincipalType)value);
      }
      break;

    case PRIVILEGE:
      if (value == null) {
        unsetPrivilege();
      } else {
        setPrivilege((org.apache.impala.thrift.TPrivilege)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUESTING_USER:
      return getRequesting_user();

    case NAME:
      return getName();

    case PRINCIPAL_TYPE:
      return getPrincipal_type();

    case PRIVILEGE:
      return getPrivilege();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUESTING_USER:
      return isSetRequesting_user();
    case NAME:
      return isSetName();
    case PRINCIPAL_TYPE:
      return isSetPrincipal_type();
    case PRIVILEGE:
      return isSetPrivilege();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TShowGrantPrincipalParams)
      return this.equals((TShowGrantPrincipalParams)that);
    return false;
  }

  public boolean equals(TShowGrantPrincipalParams that) {
    if (that == null)
      return false;

    boolean this_present_requesting_user = true && this.isSetRequesting_user();
    boolean that_present_requesting_user = true && that.isSetRequesting_user();
    if (this_present_requesting_user || that_present_requesting_user) {
      if (!(this_present_requesting_user && that_present_requesting_user))
        return false;
      if (!this.requesting_user.equals(that.requesting_user))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_principal_type = true && this.isSetPrincipal_type();
    boolean that_present_principal_type = true && that.isSetPrincipal_type();
    if (this_present_principal_type || that_present_principal_type) {
      if (!(this_present_principal_type && that_present_principal_type))
        return false;
      if (!this.principal_type.equals(that.principal_type))
        return false;
    }

    boolean this_present_privilege = true && this.isSetPrivilege();
    boolean that_present_privilege = true && that.isSetPrivilege();
    if (this_present_privilege || that_present_privilege) {
      if (!(this_present_privilege && that_present_privilege))
        return false;
      if (!this.privilege.equals(that.privilege))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_requesting_user = true && (isSetRequesting_user());
    list.add(present_requesting_user);
    if (present_requesting_user)
      list.add(requesting_user);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_principal_type = true && (isSetPrincipal_type());
    list.add(present_principal_type);
    if (present_principal_type)
      list.add(principal_type.getValue());

    boolean present_privilege = true && (isSetPrivilege());
    list.add(present_privilege);
    if (present_privilege)
      list.add(privilege);

    return list.hashCode();
  }

  @Override
  public int compareTo(TShowGrantPrincipalParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequesting_user()).compareTo(other.isSetRequesting_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequesting_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requesting_user, other.requesting_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal_type()).compareTo(other.isSetPrincipal_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal_type, other.principal_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivilege()).compareTo(other.isSetPrivilege());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivilege()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privilege, other.privilege);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TShowGrantPrincipalParams(");
    boolean first = true;

    if (isSetRequesting_user()) {
      sb.append("requesting_user:");
      if (this.requesting_user == null) {
        sb.append("null");
      } else {
        sb.append(this.requesting_user);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal_type:");
    if (this.principal_type == null) {
      sb.append("null");
    } else {
      sb.append(this.principal_type);
    }
    first = false;
    if (isSetPrivilege()) {
      if (!first) sb.append(", ");
      sb.append("privilege:");
      if (this.privilege == null) {
        sb.append("null");
      } else {
        sb.append(this.privilege);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' is unset! Struct:" + toString());
    }

    if (!isSetPrincipal_type()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'principal_type' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (privilege != null) {
      privilege.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TShowGrantPrincipalParamsStandardSchemeFactory implements SchemeFactory {
    public TShowGrantPrincipalParamsStandardScheme getScheme() {
      return new TShowGrantPrincipalParamsStandardScheme();
    }
  }

  private static class TShowGrantPrincipalParamsStandardScheme extends StandardScheme<TShowGrantPrincipalParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TShowGrantPrincipalParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUESTING_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requesting_user = iprot.readString();
              struct.setRequesting_userIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRINCIPAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.principal_type = org.apache.impala.thrift.TPrincipalType.findByValue(iprot.readI32());
              struct.setPrincipal_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIVILEGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.privilege = new org.apache.impala.thrift.TPrivilege();
              struct.privilege.read(iprot);
              struct.setPrivilegeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TShowGrantPrincipalParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requesting_user != null) {
        if (struct.isSetRequesting_user()) {
          oprot.writeFieldBegin(REQUESTING_USER_FIELD_DESC);
          oprot.writeString(struct.requesting_user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.principal_type != null) {
        oprot.writeFieldBegin(PRINCIPAL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.principal_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.privilege != null) {
        if (struct.isSetPrivilege()) {
          oprot.writeFieldBegin(PRIVILEGE_FIELD_DESC);
          struct.privilege.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TShowGrantPrincipalParamsTupleSchemeFactory implements SchemeFactory {
    public TShowGrantPrincipalParamsTupleScheme getScheme() {
      return new TShowGrantPrincipalParamsTupleScheme();
    }
  }

  private static class TShowGrantPrincipalParamsTupleScheme extends TupleScheme<TShowGrantPrincipalParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TShowGrantPrincipalParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.principal_type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetRequesting_user()) {
        optionals.set(0);
      }
      if (struct.isSetPrivilege()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRequesting_user()) {
        oprot.writeString(struct.requesting_user);
      }
      if (struct.isSetPrivilege()) {
        struct.privilege.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TShowGrantPrincipalParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.principal_type = org.apache.impala.thrift.TPrincipalType.findByValue(iprot.readI32());
      struct.setPrincipal_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.requesting_user = iprot.readString();
        struct.setRequesting_userIsSet(true);
      }
      if (incoming.get(1)) {
        struct.privilege = new org.apache.impala.thrift.TPrivilege();
        struct.privilege.read(iprot);
        struct.setPrivilegeIsSet(true);
      }
    }
  }

}

