/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TDmlResult implements org.apache.thrift.TBase<TDmlResult, TDmlResult._Fields>, java.io.Serializable, Cloneable, Comparable<TDmlResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDmlResult");

  private static final org.apache.thrift.protocol.TField ROWS_MODIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("rows_modified", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_ROW_ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_row_errors", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDmlResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDmlResultTupleSchemeFactory());
  }

  public Map<String,Long> rows_modified; // required
  public long num_row_errors; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROWS_MODIFIED((short)1, "rows_modified"),
    NUM_ROW_ERRORS((short)2, "num_row_errors");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROWS_MODIFIED
          return ROWS_MODIFIED;
        case 2: // NUM_ROW_ERRORS
          return NUM_ROW_ERRORS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ROW_ERRORS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NUM_ROW_ERRORS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROWS_MODIFIED, new org.apache.thrift.meta_data.FieldMetaData("rows_modified", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.NUM_ROW_ERRORS, new org.apache.thrift.meta_data.FieldMetaData("num_row_errors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDmlResult.class, metaDataMap);
  }

  public TDmlResult() {
  }

  public TDmlResult(
    Map<String,Long> rows_modified)
  {
    this();
    this.rows_modified = rows_modified;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDmlResult(TDmlResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRows_modified()) {
      Map<String,Long> __this__rows_modified = new HashMap<String,Long>(other.rows_modified);
      this.rows_modified = __this__rows_modified;
    }
    this.num_row_errors = other.num_row_errors;
  }

  public TDmlResult deepCopy() {
    return new TDmlResult(this);
  }

  @Override
  public void clear() {
    this.rows_modified = null;
    setNum_row_errorsIsSet(false);
    this.num_row_errors = 0;
  }

  public int getRows_modifiedSize() {
    return (this.rows_modified == null) ? 0 : this.rows_modified.size();
  }

  public void putToRows_modified(String key, long val) {
    if (this.rows_modified == null) {
      this.rows_modified = new HashMap<String,Long>();
    }
    this.rows_modified.put(key, val);
  }

  public Map<String,Long> getRows_modified() {
    return this.rows_modified;
  }

  public TDmlResult setRows_modified(Map<String,Long> rows_modified) {
    this.rows_modified = rows_modified;
    return this;
  }

  public void unsetRows_modified() {
    this.rows_modified = null;
  }

  /** Returns true if field rows_modified is set (has been assigned a value) and false otherwise */
  public boolean isSetRows_modified() {
    return this.rows_modified != null;
  }

  public void setRows_modifiedIsSet(boolean value) {
    if (!value) {
      this.rows_modified = null;
    }
  }

  public long getNum_row_errors() {
    return this.num_row_errors;
  }

  public TDmlResult setNum_row_errors(long num_row_errors) {
    this.num_row_errors = num_row_errors;
    setNum_row_errorsIsSet(true);
    return this;
  }

  public void unsetNum_row_errors() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ROW_ERRORS_ISSET_ID);
  }

  /** Returns true if field num_row_errors is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_row_errors() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ROW_ERRORS_ISSET_ID);
  }

  public void setNum_row_errorsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ROW_ERRORS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROWS_MODIFIED:
      if (value == null) {
        unsetRows_modified();
      } else {
        setRows_modified((Map<String,Long>)value);
      }
      break;

    case NUM_ROW_ERRORS:
      if (value == null) {
        unsetNum_row_errors();
      } else {
        setNum_row_errors((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROWS_MODIFIED:
      return getRows_modified();

    case NUM_ROW_ERRORS:
      return getNum_row_errors();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROWS_MODIFIED:
      return isSetRows_modified();
    case NUM_ROW_ERRORS:
      return isSetNum_row_errors();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDmlResult)
      return this.equals((TDmlResult)that);
    return false;
  }

  public boolean equals(TDmlResult that) {
    if (that == null)
      return false;

    boolean this_present_rows_modified = true && this.isSetRows_modified();
    boolean that_present_rows_modified = true && that.isSetRows_modified();
    if (this_present_rows_modified || that_present_rows_modified) {
      if (!(this_present_rows_modified && that_present_rows_modified))
        return false;
      if (!this.rows_modified.equals(that.rows_modified))
        return false;
    }

    boolean this_present_num_row_errors = true && this.isSetNum_row_errors();
    boolean that_present_num_row_errors = true && that.isSetNum_row_errors();
    if (this_present_num_row_errors || that_present_num_row_errors) {
      if (!(this_present_num_row_errors && that_present_num_row_errors))
        return false;
      if (this.num_row_errors != that.num_row_errors)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rows_modified = true && (isSetRows_modified());
    list.add(present_rows_modified);
    if (present_rows_modified)
      list.add(rows_modified);

    boolean present_num_row_errors = true && (isSetNum_row_errors());
    list.add(present_num_row_errors);
    if (present_num_row_errors)
      list.add(num_row_errors);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDmlResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRows_modified()).compareTo(other.isSetRows_modified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows_modified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows_modified, other.rows_modified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_row_errors()).compareTo(other.isSetNum_row_errors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_row_errors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_row_errors, other.num_row_errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDmlResult(");
    boolean first = true;

    sb.append("rows_modified:");
    if (this.rows_modified == null) {
      sb.append("null");
    } else {
      sb.append(this.rows_modified);
    }
    first = false;
    if (isSetNum_row_errors()) {
      if (!first) sb.append(", ");
      sb.append("num_row_errors:");
      sb.append(this.num_row_errors);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (rows_modified == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rows_modified' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDmlResultStandardSchemeFactory implements SchemeFactory {
    public TDmlResultStandardScheme getScheme() {
      return new TDmlResultStandardScheme();
    }
  }

  private static class TDmlResultStandardScheme extends StandardScheme<TDmlResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDmlResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROWS_MODIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.rows_modified = new HashMap<String,Long>(2*_map0.size);
                String _key1;
                long _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readI64();
                  struct.rows_modified.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setRows_modifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_ROW_ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_row_errors = iprot.readI64();
              struct.setNum_row_errorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDmlResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rows_modified != null) {
        oprot.writeFieldBegin(ROWS_MODIFIED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.rows_modified.size()));
          for (Map.Entry<String, Long> _iter4 : struct.rows_modified.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeI64(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_row_errors()) {
        oprot.writeFieldBegin(NUM_ROW_ERRORS_FIELD_DESC);
        oprot.writeI64(struct.num_row_errors);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDmlResultTupleSchemeFactory implements SchemeFactory {
    public TDmlResultTupleScheme getScheme() {
      return new TDmlResultTupleScheme();
    }
  }

  private static class TDmlResultTupleScheme extends TupleScheme<TDmlResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDmlResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.rows_modified.size());
        for (Map.Entry<String, Long> _iter5 : struct.rows_modified.entrySet())
        {
          oprot.writeString(_iter5.getKey());
          oprot.writeI64(_iter5.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetNum_row_errors()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNum_row_errors()) {
        oprot.writeI64(struct.num_row_errors);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDmlResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.rows_modified = new HashMap<String,Long>(2*_map6.size);
        String _key7;
        long _val8;
        for (int _i9 = 0; _i9 < _map6.size; ++_i9)
        {
          _key7 = iprot.readString();
          _val8 = iprot.readI64();
          struct.rows_modified.put(_key7, _val8);
        }
      }
      struct.setRows_modifiedIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.num_row_errors = iprot.readI64();
        struct.setNum_row_errorsIsSet(true);
      }
    }
  }

}

