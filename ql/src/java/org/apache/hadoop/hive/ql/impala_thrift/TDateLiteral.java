/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TDateLiteral implements org.apache.thrift.TBase<TDateLiteral, TDateLiteral._Fields>, java.io.Serializable, Cloneable, Comparable<TDateLiteral> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDateLiteral");

  private static final org.apache.thrift.protocol.TField DAYS_SINCE_EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("days_since_epoch", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("date_string", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDateLiteralStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDateLiteralTupleSchemeFactory());
  }

  public int days_since_epoch; // required
  public String date_string; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DAYS_SINCE_EPOCH((short)1, "days_since_epoch"),
    DATE_STRING((short)2, "date_string");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DAYS_SINCE_EPOCH
          return DAYS_SINCE_EPOCH;
        case 2: // DATE_STRING
          return DATE_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DAYS_SINCE_EPOCH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DAYS_SINCE_EPOCH, new org.apache.thrift.meta_data.FieldMetaData("days_since_epoch", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE_STRING, new org.apache.thrift.meta_data.FieldMetaData("date_string", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDateLiteral.class, metaDataMap);
  }

  public TDateLiteral() {
  }

  public TDateLiteral(
    int days_since_epoch,
    String date_string)
  {
    this();
    this.days_since_epoch = days_since_epoch;
    setDays_since_epochIsSet(true);
    this.date_string = date_string;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDateLiteral(TDateLiteral other) {
    __isset_bitfield = other.__isset_bitfield;
    this.days_since_epoch = other.days_since_epoch;
    if (other.isSetDate_string()) {
      this.date_string = other.date_string;
    }
  }

  public TDateLiteral deepCopy() {
    return new TDateLiteral(this);
  }

  @Override
  public void clear() {
    setDays_since_epochIsSet(false);
    this.days_since_epoch = 0;
    this.date_string = null;
  }

  public int getDays_since_epoch() {
    return this.days_since_epoch;
  }

  public TDateLiteral setDays_since_epoch(int days_since_epoch) {
    this.days_since_epoch = days_since_epoch;
    setDays_since_epochIsSet(true);
    return this;
  }

  public void unsetDays_since_epoch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAYS_SINCE_EPOCH_ISSET_ID);
  }

  /** Returns true if field days_since_epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetDays_since_epoch() {
    return EncodingUtils.testBit(__isset_bitfield, __DAYS_SINCE_EPOCH_ISSET_ID);
  }

  public void setDays_since_epochIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAYS_SINCE_EPOCH_ISSET_ID, value);
  }

  public String getDate_string() {
    return this.date_string;
  }

  public TDateLiteral setDate_string(String date_string) {
    this.date_string = date_string;
    return this;
  }

  public void unsetDate_string() {
    this.date_string = null;
  }

  /** Returns true if field date_string is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_string() {
    return this.date_string != null;
  }

  public void setDate_stringIsSet(boolean value) {
    if (!value) {
      this.date_string = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DAYS_SINCE_EPOCH:
      if (value == null) {
        unsetDays_since_epoch();
      } else {
        setDays_since_epoch((Integer)value);
      }
      break;

    case DATE_STRING:
      if (value == null) {
        unsetDate_string();
      } else {
        setDate_string((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DAYS_SINCE_EPOCH:
      return getDays_since_epoch();

    case DATE_STRING:
      return getDate_string();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DAYS_SINCE_EPOCH:
      return isSetDays_since_epoch();
    case DATE_STRING:
      return isSetDate_string();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDateLiteral)
      return this.equals((TDateLiteral)that);
    return false;
  }

  public boolean equals(TDateLiteral that) {
    if (that == null)
      return false;

    boolean this_present_days_since_epoch = true;
    boolean that_present_days_since_epoch = true;
    if (this_present_days_since_epoch || that_present_days_since_epoch) {
      if (!(this_present_days_since_epoch && that_present_days_since_epoch))
        return false;
      if (this.days_since_epoch != that.days_since_epoch)
        return false;
    }

    boolean this_present_date_string = true && this.isSetDate_string();
    boolean that_present_date_string = true && that.isSetDate_string();
    if (this_present_date_string || that_present_date_string) {
      if (!(this_present_date_string && that_present_date_string))
        return false;
      if (!this.date_string.equals(that.date_string))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_days_since_epoch = true;
    list.add(present_days_since_epoch);
    if (present_days_since_epoch)
      list.add(days_since_epoch);

    boolean present_date_string = true && (isSetDate_string());
    list.add(present_date_string);
    if (present_date_string)
      list.add(date_string);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDateLiteral other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDays_since_epoch()).compareTo(other.isSetDays_since_epoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDays_since_epoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days_since_epoch, other.days_since_epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_string()).compareTo(other.isSetDate_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_string, other.date_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDateLiteral(");
    boolean first = true;

    sb.append("days_since_epoch:");
    sb.append(this.days_since_epoch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date_string:");
    if (this.date_string == null) {
      sb.append("null");
    } else {
      sb.append(this.date_string);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'days_since_epoch' because it's a primitive and you chose the non-beans generator.
    if (date_string == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'date_string' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDateLiteralStandardSchemeFactory implements SchemeFactory {
    public TDateLiteralStandardScheme getScheme() {
      return new TDateLiteralStandardScheme();
    }
  }

  private static class TDateLiteralStandardScheme extends StandardScheme<TDateLiteral> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDateLiteral struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DAYS_SINCE_EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.days_since_epoch = iprot.readI32();
              struct.setDays_since_epochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date_string = iprot.readString();
              struct.setDate_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDays_since_epoch()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'days_since_epoch' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDateLiteral struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DAYS_SINCE_EPOCH_FIELD_DESC);
      oprot.writeI32(struct.days_since_epoch);
      oprot.writeFieldEnd();
      if (struct.date_string != null) {
        oprot.writeFieldBegin(DATE_STRING_FIELD_DESC);
        oprot.writeString(struct.date_string);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDateLiteralTupleSchemeFactory implements SchemeFactory {
    public TDateLiteralTupleScheme getScheme() {
      return new TDateLiteralTupleScheme();
    }
  }

  private static class TDateLiteralTupleScheme extends TupleScheme<TDateLiteral> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDateLiteral struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.days_since_epoch);
      oprot.writeString(struct.date_string);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDateLiteral struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.days_since_epoch = iprot.readI32();
      struct.setDays_since_epochIsSet(true);
      struct.date_string = iprot.readString();
      struct.setDate_stringIsSet(true);
    }
  }

}

