/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TPlanFragmentTree implements org.apache.thrift.TBase<TPlanFragmentTree, TPlanFragmentTree._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragmentTree> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragmentTree");

  private static final org.apache.thrift.protocol.TField COHORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cohort_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fragments", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanFragmentTreeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanFragmentTreeTupleSchemeFactory());
  }

  private int cohort_id; // required
  private List<TPlanFragment> fragments; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COHORT_ID((short)1, "cohort_id"),
    FRAGMENTS((short)2, "fragments");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COHORT_ID
          return COHORT_ID;
        case 2: // FRAGMENTS
          return FRAGMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COHORT_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COHORT_ID, new org.apache.thrift.meta_data.FieldMetaData("cohort_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAGMENTS, new org.apache.thrift.meta_data.FieldMetaData("fragments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragment.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragmentTree.class, metaDataMap);
  }

  public TPlanFragmentTree() {
  }

  public TPlanFragmentTree(
    int cohort_id,
    List<TPlanFragment> fragments)
  {
    this();
    this.cohort_id = cohort_id;
    setCohort_idIsSet(true);
    this.fragments = fragments;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragmentTree(TPlanFragmentTree other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cohort_id = other.cohort_id;
    if (other.isSetFragments()) {
      List<TPlanFragment> __this__fragments = new ArrayList<TPlanFragment>(other.fragments.size());
      for (TPlanFragment other_element : other.fragments) {
        __this__fragments.add(new TPlanFragment(other_element));
      }
      this.fragments = __this__fragments;
    }
  }

  public TPlanFragmentTree deepCopy() {
    return new TPlanFragmentTree(this);
  }

  @Override
  public void clear() {
    setCohort_idIsSet(false);
    this.cohort_id = 0;
    this.fragments = null;
  }

  public int getCohort_id() {
    return this.cohort_id;
  }

  public void setCohort_id(int cohort_id) {
    this.cohort_id = cohort_id;
    setCohort_idIsSet(true);
  }

  public void unsetCohort_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COHORT_ID_ISSET_ID);
  }

  /** Returns true if field cohort_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCohort_id() {
    return EncodingUtils.testBit(__isset_bitfield, __COHORT_ID_ISSET_ID);
  }

  public void setCohort_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COHORT_ID_ISSET_ID, value);
  }

  public int getFragmentsSize() {
    return (this.fragments == null) ? 0 : this.fragments.size();
  }

  public java.util.Iterator<TPlanFragment> getFragmentsIterator() {
    return (this.fragments == null) ? null : this.fragments.iterator();
  }

  public void addToFragments(TPlanFragment elem) {
    if (this.fragments == null) {
      this.fragments = new ArrayList<TPlanFragment>();
    }
    this.fragments.add(elem);
  }

  public List<TPlanFragment> getFragments() {
    return this.fragments;
  }

  public void setFragments(List<TPlanFragment> fragments) {
    this.fragments = fragments;
  }

  public void unsetFragments() {
    this.fragments = null;
  }

  /** Returns true if field fragments is set (has been assigned a value) and false otherwise */
  public boolean isSetFragments() {
    return this.fragments != null;
  }

  public void setFragmentsIsSet(boolean value) {
    if (!value) {
      this.fragments = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COHORT_ID:
      if (value == null) {
        unsetCohort_id();
      } else {
        setCohort_id((Integer)value);
      }
      break;

    case FRAGMENTS:
      if (value == null) {
        unsetFragments();
      } else {
        setFragments((List<TPlanFragment>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COHORT_ID:
      return getCohort_id();

    case FRAGMENTS:
      return getFragments();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COHORT_ID:
      return isSetCohort_id();
    case FRAGMENTS:
      return isSetFragments();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanFragmentTree)
      return this.equals((TPlanFragmentTree)that);
    return false;
  }

  public boolean equals(TPlanFragmentTree that) {
    if (that == null)
      return false;

    boolean this_present_cohort_id = true;
    boolean that_present_cohort_id = true;
    if (this_present_cohort_id || that_present_cohort_id) {
      if (!(this_present_cohort_id && that_present_cohort_id))
        return false;
      if (this.cohort_id != that.cohort_id)
        return false;
    }

    boolean this_present_fragments = true && this.isSetFragments();
    boolean that_present_fragments = true && that.isSetFragments();
    if (this_present_fragments || that_present_fragments) {
      if (!(this_present_fragments && that_present_fragments))
        return false;
      if (!this.fragments.equals(that.fragments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cohort_id = true;
    list.add(present_cohort_id);
    if (present_cohort_id)
      list.add(cohort_id);

    boolean present_fragments = true && (isSetFragments());
    list.add(present_fragments);
    if (present_fragments)
      list.add(fragments);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlanFragmentTree other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCohort_id()).compareTo(other.isSetCohort_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCohort_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cohort_id, other.cohort_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragments()).compareTo(other.isSetFragments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragments, other.fragments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanFragmentTree(");
    boolean first = true;

    sb.append("cohort_id:");
    sb.append(this.cohort_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragments:");
    if (this.fragments == null) {
      sb.append("null");
    } else {
      sb.append(this.fragments);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetCohort_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cohort_id' is unset! Struct:" + toString());
    }

    if (!isSetFragments()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragments' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentTreeStandardSchemeFactory implements SchemeFactory {
    public TPlanFragmentTreeStandardScheme getScheme() {
      return new TPlanFragmentTreeStandardScheme();
    }
  }

  private static class TPlanFragmentTreeStandardScheme extends StandardScheme<TPlanFragmentTree> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragmentTree struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COHORT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cohort_id = iprot.readI32();
              struct.setCohort_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.fragments = new ArrayList<TPlanFragment>(_list24.size);
                TPlanFragment _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new TPlanFragment();
                  _elem25.read(iprot);
                  struct.fragments.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setFragmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragmentTree struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COHORT_ID_FIELD_DESC);
      oprot.writeI32(struct.cohort_id);
      oprot.writeFieldEnd();
      if (struct.fragments != null) {
        oprot.writeFieldBegin(FRAGMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fragments.size()));
          for (TPlanFragment _iter27 : struct.fragments)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentTreeTupleSchemeFactory implements SchemeFactory {
    public TPlanFragmentTreeTupleScheme getScheme() {
      return new TPlanFragmentTreeTupleScheme();
    }
  }

  private static class TPlanFragmentTreeTupleScheme extends TupleScheme<TPlanFragmentTree> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentTree struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.cohort_id);
      {
        oprot.writeI32(struct.fragments.size());
        for (TPlanFragment _iter28 : struct.fragments)
        {
          _iter28.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentTree struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.cohort_id = iprot.readI32();
      struct.setCohort_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.fragments = new ArrayList<TPlanFragment>(_list29.size);
        TPlanFragment _elem30;
        for (int _i31 = 0; _i31 < _list29.size; ++_i31)
        {
          _elem30 = new TPlanFragment();
          _elem30.read(iprot);
          struct.fragments.add(_elem30);
        }
      }
      struct.setFragmentsIsSet(true);
    }
  }

}

