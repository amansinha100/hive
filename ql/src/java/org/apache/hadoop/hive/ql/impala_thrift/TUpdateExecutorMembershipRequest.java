/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TUpdateExecutorMembershipRequest implements org.apache.thrift.TBase<TUpdateExecutorMembershipRequest, TUpdateExecutorMembershipRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TUpdateExecutorMembershipRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUpdateExecutorMembershipRequest");

  private static final org.apache.thrift.protocol.TField HOSTNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("hostnames", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField IP_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("ip_addresses", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_executors", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUpdateExecutorMembershipRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUpdateExecutorMembershipRequestTupleSchemeFactory());
  }

  public Set<String> hostnames; // required
  public Set<String> ip_addresses; // required
  public int num_executors; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOSTNAMES((short)1, "hostnames"),
    IP_ADDRESSES((short)2, "ip_addresses"),
    NUM_EXECUTORS((short)3, "num_executors");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOSTNAMES
          return HOSTNAMES;
        case 2: // IP_ADDRESSES
          return IP_ADDRESSES;
        case 3: // NUM_EXECUTORS
          return NUM_EXECUTORS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_EXECUTORS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOSTNAMES, new org.apache.thrift.meta_data.FieldMetaData("hostnames", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IP_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("ip_addresses", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NUM_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("num_executors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUpdateExecutorMembershipRequest.class, metaDataMap);
  }

  public TUpdateExecutorMembershipRequest() {
  }

  public TUpdateExecutorMembershipRequest(
    Set<String> hostnames,
    Set<String> ip_addresses,
    int num_executors)
  {
    this();
    this.hostnames = hostnames;
    this.ip_addresses = ip_addresses;
    this.num_executors = num_executors;
    setNum_executorsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUpdateExecutorMembershipRequest(TUpdateExecutorMembershipRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostnames()) {
      Set<String> __this__hostnames = new HashSet<String>(other.hostnames);
      this.hostnames = __this__hostnames;
    }
    if (other.isSetIp_addresses()) {
      Set<String> __this__ip_addresses = new HashSet<String>(other.ip_addresses);
      this.ip_addresses = __this__ip_addresses;
    }
    this.num_executors = other.num_executors;
  }

  public TUpdateExecutorMembershipRequest deepCopy() {
    return new TUpdateExecutorMembershipRequest(this);
  }

  @Override
  public void clear() {
    this.hostnames = null;
    this.ip_addresses = null;
    setNum_executorsIsSet(false);
    this.num_executors = 0;
  }

  public int getHostnamesSize() {
    return (this.hostnames == null) ? 0 : this.hostnames.size();
  }

  public java.util.Iterator<String> getHostnamesIterator() {
    return (this.hostnames == null) ? null : this.hostnames.iterator();
  }

  public void addToHostnames(String elem) {
    if (this.hostnames == null) {
      this.hostnames = new HashSet<String>();
    }
    this.hostnames.add(elem);
  }

  public Set<String> getHostnames() {
    return this.hostnames;
  }

  public TUpdateExecutorMembershipRequest setHostnames(Set<String> hostnames) {
    this.hostnames = hostnames;
    return this;
  }

  public void unsetHostnames() {
    this.hostnames = null;
  }

  /** Returns true if field hostnames is set (has been assigned a value) and false otherwise */
  public boolean isSetHostnames() {
    return this.hostnames != null;
  }

  public void setHostnamesIsSet(boolean value) {
    if (!value) {
      this.hostnames = null;
    }
  }

  public int getIp_addressesSize() {
    return (this.ip_addresses == null) ? 0 : this.ip_addresses.size();
  }

  public java.util.Iterator<String> getIp_addressesIterator() {
    return (this.ip_addresses == null) ? null : this.ip_addresses.iterator();
  }

  public void addToIp_addresses(String elem) {
    if (this.ip_addresses == null) {
      this.ip_addresses = new HashSet<String>();
    }
    this.ip_addresses.add(elem);
  }

  public Set<String> getIp_addresses() {
    return this.ip_addresses;
  }

  public TUpdateExecutorMembershipRequest setIp_addresses(Set<String> ip_addresses) {
    this.ip_addresses = ip_addresses;
    return this;
  }

  public void unsetIp_addresses() {
    this.ip_addresses = null;
  }

  /** Returns true if field ip_addresses is set (has been assigned a value) and false otherwise */
  public boolean isSetIp_addresses() {
    return this.ip_addresses != null;
  }

  public void setIp_addressesIsSet(boolean value) {
    if (!value) {
      this.ip_addresses = null;
    }
  }

  public int getNum_executors() {
    return this.num_executors;
  }

  public TUpdateExecutorMembershipRequest setNum_executors(int num_executors) {
    this.num_executors = num_executors;
    setNum_executorsIsSet(true);
    return this;
  }

  public void unsetNum_executors() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
  }

  /** Returns true if field num_executors is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_executors() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
  }

  public void setNum_executorsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOSTNAMES:
      if (value == null) {
        unsetHostnames();
      } else {
        setHostnames((Set<String>)value);
      }
      break;

    case IP_ADDRESSES:
      if (value == null) {
        unsetIp_addresses();
      } else {
        setIp_addresses((Set<String>)value);
      }
      break;

    case NUM_EXECUTORS:
      if (value == null) {
        unsetNum_executors();
      } else {
        setNum_executors((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOSTNAMES:
      return getHostnames();

    case IP_ADDRESSES:
      return getIp_addresses();

    case NUM_EXECUTORS:
      return getNum_executors();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOSTNAMES:
      return isSetHostnames();
    case IP_ADDRESSES:
      return isSetIp_addresses();
    case NUM_EXECUTORS:
      return isSetNum_executors();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUpdateExecutorMembershipRequest)
      return this.equals((TUpdateExecutorMembershipRequest)that);
    return false;
  }

  public boolean equals(TUpdateExecutorMembershipRequest that) {
    if (that == null)
      return false;

    boolean this_present_hostnames = true && this.isSetHostnames();
    boolean that_present_hostnames = true && that.isSetHostnames();
    if (this_present_hostnames || that_present_hostnames) {
      if (!(this_present_hostnames && that_present_hostnames))
        return false;
      if (!this.hostnames.equals(that.hostnames))
        return false;
    }

    boolean this_present_ip_addresses = true && this.isSetIp_addresses();
    boolean that_present_ip_addresses = true && that.isSetIp_addresses();
    if (this_present_ip_addresses || that_present_ip_addresses) {
      if (!(this_present_ip_addresses && that_present_ip_addresses))
        return false;
      if (!this.ip_addresses.equals(that.ip_addresses))
        return false;
    }

    boolean this_present_num_executors = true;
    boolean that_present_num_executors = true;
    if (this_present_num_executors || that_present_num_executors) {
      if (!(this_present_num_executors && that_present_num_executors))
        return false;
      if (this.num_executors != that.num_executors)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hostnames = true && (isSetHostnames());
    list.add(present_hostnames);
    if (present_hostnames)
      list.add(hostnames);

    boolean present_ip_addresses = true && (isSetIp_addresses());
    list.add(present_ip_addresses);
    if (present_ip_addresses)
      list.add(ip_addresses);

    boolean present_num_executors = true;
    list.add(present_num_executors);
    if (present_num_executors)
      list.add(num_executors);

    return list.hashCode();
  }

  @Override
  public int compareTo(TUpdateExecutorMembershipRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostnames()).compareTo(other.isSetHostnames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostnames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostnames, other.hostnames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp_addresses()).compareTo(other.isSetIp_addresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp_addresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip_addresses, other.ip_addresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_executors()).compareTo(other.isSetNum_executors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_executors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_executors, other.num_executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUpdateExecutorMembershipRequest(");
    boolean first = true;

    sb.append("hostnames:");
    if (this.hostnames == null) {
      sb.append("null");
    } else {
      sb.append(this.hostnames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip_addresses:");
    if (this.ip_addresses == null) {
      sb.append("null");
    } else {
      sb.append(this.ip_addresses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_executors:");
    sb.append(this.num_executors);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (hostnames == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostnames' was not present! Struct: " + toString());
    }
    if (ip_addresses == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ip_addresses' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUpdateExecutorMembershipRequestStandardSchemeFactory implements SchemeFactory {
    public TUpdateExecutorMembershipRequestStandardScheme getScheme() {
      return new TUpdateExecutorMembershipRequestStandardScheme();
    }
  }

  private static class TUpdateExecutorMembershipRequestStandardScheme extends StandardScheme<TUpdateExecutorMembershipRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUpdateExecutorMembershipRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOSTNAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set176 = iprot.readSetBegin();
                struct.hostnames = new HashSet<String>(2*_set176.size);
                String _elem177;
                for (int _i178 = 0; _i178 < _set176.size; ++_i178)
                {
                  _elem177 = iprot.readString();
                  struct.hostnames.add(_elem177);
                }
                iprot.readSetEnd();
              }
              struct.setHostnamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IP_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set179 = iprot.readSetBegin();
                struct.ip_addresses = new HashSet<String>(2*_set179.size);
                String _elem180;
                for (int _i181 = 0; _i181 < _set179.size; ++_i181)
                {
                  _elem180 = iprot.readString();
                  struct.ip_addresses.add(_elem180);
                }
                iprot.readSetEnd();
              }
              struct.setIp_addressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_EXECUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_executors = iprot.readI32();
              struct.setNum_executorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUpdateExecutorMembershipRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostnames != null) {
        oprot.writeFieldBegin(HOSTNAMES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.hostnames.size()));
          for (String _iter182 : struct.hostnames)
          {
            oprot.writeString(_iter182);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ip_addresses != null) {
        oprot.writeFieldBegin(IP_ADDRESSES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.ip_addresses.size()));
          for (String _iter183 : struct.ip_addresses)
          {
            oprot.writeString(_iter183);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_EXECUTORS_FIELD_DESC);
      oprot.writeI32(struct.num_executors);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUpdateExecutorMembershipRequestTupleSchemeFactory implements SchemeFactory {
    public TUpdateExecutorMembershipRequestTupleScheme getScheme() {
      return new TUpdateExecutorMembershipRequestTupleScheme();
    }
  }

  private static class TUpdateExecutorMembershipRequestTupleScheme extends TupleScheme<TUpdateExecutorMembershipRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUpdateExecutorMembershipRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.hostnames.size());
        for (String _iter184 : struct.hostnames)
        {
          oprot.writeString(_iter184);
        }
      }
      {
        oprot.writeI32(struct.ip_addresses.size());
        for (String _iter185 : struct.ip_addresses)
        {
          oprot.writeString(_iter185);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetNum_executors()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNum_executors()) {
        oprot.writeI32(struct.num_executors);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUpdateExecutorMembershipRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TSet _set186 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.hostnames = new HashSet<String>(2*_set186.size);
        String _elem187;
        for (int _i188 = 0; _i188 < _set186.size; ++_i188)
        {
          _elem187 = iprot.readString();
          struct.hostnames.add(_elem187);
        }
      }
      struct.setHostnamesIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set189 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.ip_addresses = new HashSet<String>(2*_set189.size);
        String _elem190;
        for (int _i191 = 0; _i191 < _set189.size; ++_i191)
        {
          _elem190 = iprot.readString();
          struct.ip_addresses.add(_elem190);
        }
      }
      struct.setIp_addressesIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.num_executors = iprot.readI32();
        struct.setNum_executorsIsSet(true);
      }
    }
  }

}

