/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TTopicDelta implements org.apache.thrift.TBase<TTopicDelta, TTopicDelta._Fields>, java.io.Serializable, Cloneable, Comparable<TTopicDelta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTopicDelta");

  private static final org.apache.thrift.protocol.TField TOPIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_entries", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IS_DELTA_FIELD_DESC = new org.apache.thrift.protocol.TField("is_delta", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("from_version", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TO_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("to_version", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_SUBSCRIBER_TOPIC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("min_subscriber_topic_version", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CLEAR_TOPIC_ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("clear_topic_entries", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTopicDeltaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTopicDeltaTupleSchemeFactory());
  }

  private String topic_name; // required
  private List<TTopicItem> topic_entries; // required
  private boolean is_delta; // required
  private long from_version; // optional
  private long to_version; // optional
  private long min_subscriber_topic_version; // optional
  private boolean clear_topic_entries; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOPIC_NAME((short)1, "topic_name"),
    TOPIC_ENTRIES((short)2, "topic_entries"),
    IS_DELTA((short)3, "is_delta"),
    FROM_VERSION((short)4, "from_version"),
    TO_VERSION((short)5, "to_version"),
    MIN_SUBSCRIBER_TOPIC_VERSION((short)6, "min_subscriber_topic_version"),
    CLEAR_TOPIC_ENTRIES((short)7, "clear_topic_entries");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOPIC_NAME
          return TOPIC_NAME;
        case 2: // TOPIC_ENTRIES
          return TOPIC_ENTRIES;
        case 3: // IS_DELTA
          return IS_DELTA;
        case 4: // FROM_VERSION
          return FROM_VERSION;
        case 5: // TO_VERSION
          return TO_VERSION;
        case 6: // MIN_SUBSCRIBER_TOPIC_VERSION
          return MIN_SUBSCRIBER_TOPIC_VERSION;
        case 7: // CLEAR_TOPIC_ENTRIES
          return CLEAR_TOPIC_ENTRIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_DELTA_ISSET_ID = 0;
  private static final int __FROM_VERSION_ISSET_ID = 1;
  private static final int __TO_VERSION_ISSET_ID = 2;
  private static final int __MIN_SUBSCRIBER_TOPIC_VERSION_ISSET_ID = 3;
  private static final int __CLEAR_TOPIC_ENTRIES_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FROM_VERSION,_Fields.TO_VERSION,_Fields.MIN_SUBSCRIBER_TOPIC_VERSION,_Fields.CLEAR_TOPIC_ENTRIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOPIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("topic_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("topic_entries", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTopicItem.class))));
    tmpMap.put(_Fields.IS_DELTA, new org.apache.thrift.meta_data.FieldMetaData("is_delta", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FROM_VERSION, new org.apache.thrift.meta_data.FieldMetaData("from_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO_VERSION, new org.apache.thrift.meta_data.FieldMetaData("to_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_SUBSCRIBER_TOPIC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("min_subscriber_topic_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLEAR_TOPIC_ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("clear_topic_entries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTopicDelta.class, metaDataMap);
  }

  public TTopicDelta() {
  }

  public TTopicDelta(
    String topic_name,
    List<TTopicItem> topic_entries,
    boolean is_delta)
  {
    this();
    this.topic_name = topic_name;
    this.topic_entries = topic_entries;
    this.is_delta = is_delta;
    setIs_deltaIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTopicDelta(TTopicDelta other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTopic_name()) {
      this.topic_name = other.topic_name;
    }
    if (other.isSetTopic_entries()) {
      List<TTopicItem> __this__topic_entries = new ArrayList<TTopicItem>(other.topic_entries.size());
      for (TTopicItem other_element : other.topic_entries) {
        __this__topic_entries.add(new TTopicItem(other_element));
      }
      this.topic_entries = __this__topic_entries;
    }
    this.is_delta = other.is_delta;
    this.from_version = other.from_version;
    this.to_version = other.to_version;
    this.min_subscriber_topic_version = other.min_subscriber_topic_version;
    this.clear_topic_entries = other.clear_topic_entries;
  }

  public TTopicDelta deepCopy() {
    return new TTopicDelta(this);
  }

  @Override
  public void clear() {
    this.topic_name = null;
    this.topic_entries = null;
    setIs_deltaIsSet(false);
    this.is_delta = false;
    setFrom_versionIsSet(false);
    this.from_version = 0;
    setTo_versionIsSet(false);
    this.to_version = 0;
    setMin_subscriber_topic_versionIsSet(false);
    this.min_subscriber_topic_version = 0;
    setClear_topic_entriesIsSet(false);
    this.clear_topic_entries = false;
  }

  public String getTopic_name() {
    return this.topic_name;
  }

  public void setTopic_name(String topic_name) {
    this.topic_name = topic_name;
  }

  public void unsetTopic_name() {
    this.topic_name = null;
  }

  /** Returns true if field topic_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_name() {
    return this.topic_name != null;
  }

  public void setTopic_nameIsSet(boolean value) {
    if (!value) {
      this.topic_name = null;
    }
  }

  public int getTopic_entriesSize() {
    return (this.topic_entries == null) ? 0 : this.topic_entries.size();
  }

  public java.util.Iterator<TTopicItem> getTopic_entriesIterator() {
    return (this.topic_entries == null) ? null : this.topic_entries.iterator();
  }

  public void addToTopic_entries(TTopicItem elem) {
    if (this.topic_entries == null) {
      this.topic_entries = new ArrayList<TTopicItem>();
    }
    this.topic_entries.add(elem);
  }

  public List<TTopicItem> getTopic_entries() {
    return this.topic_entries;
  }

  public void setTopic_entries(List<TTopicItem> topic_entries) {
    this.topic_entries = topic_entries;
  }

  public void unsetTopic_entries() {
    this.topic_entries = null;
  }

  /** Returns true if field topic_entries is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_entries() {
    return this.topic_entries != null;
  }

  public void setTopic_entriesIsSet(boolean value) {
    if (!value) {
      this.topic_entries = null;
    }
  }

  public boolean isIs_delta() {
    return this.is_delta;
  }

  public void setIs_delta(boolean is_delta) {
    this.is_delta = is_delta;
    setIs_deltaIsSet(true);
  }

  public void unsetIs_delta() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_DELTA_ISSET_ID);
  }

  /** Returns true if field is_delta is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_delta() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_DELTA_ISSET_ID);
  }

  public void setIs_deltaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_DELTA_ISSET_ID, value);
  }

  public long getFrom_version() {
    return this.from_version;
  }

  public void setFrom_version(long from_version) {
    this.from_version = from_version;
    setFrom_versionIsSet(true);
  }

  public void unsetFrom_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROM_VERSION_ISSET_ID);
  }

  /** Returns true if field from_version is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom_version() {
    return EncodingUtils.testBit(__isset_bitfield, __FROM_VERSION_ISSET_ID);
  }

  public void setFrom_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROM_VERSION_ISSET_ID, value);
  }

  public long getTo_version() {
    return this.to_version;
  }

  public void setTo_version(long to_version) {
    this.to_version = to_version;
    setTo_versionIsSet(true);
  }

  public void unsetTo_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TO_VERSION_ISSET_ID);
  }

  /** Returns true if field to_version is set (has been assigned a value) and false otherwise */
  public boolean isSetTo_version() {
    return EncodingUtils.testBit(__isset_bitfield, __TO_VERSION_ISSET_ID);
  }

  public void setTo_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TO_VERSION_ISSET_ID, value);
  }

  public long getMin_subscriber_topic_version() {
    return this.min_subscriber_topic_version;
  }

  public void setMin_subscriber_topic_version(long min_subscriber_topic_version) {
    this.min_subscriber_topic_version = min_subscriber_topic_version;
    setMin_subscriber_topic_versionIsSet(true);
  }

  public void unsetMin_subscriber_topic_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_SUBSCRIBER_TOPIC_VERSION_ISSET_ID);
  }

  /** Returns true if field min_subscriber_topic_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_subscriber_topic_version() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_SUBSCRIBER_TOPIC_VERSION_ISSET_ID);
  }

  public void setMin_subscriber_topic_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_SUBSCRIBER_TOPIC_VERSION_ISSET_ID, value);
  }

  public boolean isClear_topic_entries() {
    return this.clear_topic_entries;
  }

  public void setClear_topic_entries(boolean clear_topic_entries) {
    this.clear_topic_entries = clear_topic_entries;
    setClear_topic_entriesIsSet(true);
  }

  public void unsetClear_topic_entries() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEAR_TOPIC_ENTRIES_ISSET_ID);
  }

  /** Returns true if field clear_topic_entries is set (has been assigned a value) and false otherwise */
  public boolean isSetClear_topic_entries() {
    return EncodingUtils.testBit(__isset_bitfield, __CLEAR_TOPIC_ENTRIES_ISSET_ID);
  }

  public void setClear_topic_entriesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEAR_TOPIC_ENTRIES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOPIC_NAME:
      if (value == null) {
        unsetTopic_name();
      } else {
        setTopic_name((String)value);
      }
      break;

    case TOPIC_ENTRIES:
      if (value == null) {
        unsetTopic_entries();
      } else {
        setTopic_entries((List<TTopicItem>)value);
      }
      break;

    case IS_DELTA:
      if (value == null) {
        unsetIs_delta();
      } else {
        setIs_delta((Boolean)value);
      }
      break;

    case FROM_VERSION:
      if (value == null) {
        unsetFrom_version();
      } else {
        setFrom_version((Long)value);
      }
      break;

    case TO_VERSION:
      if (value == null) {
        unsetTo_version();
      } else {
        setTo_version((Long)value);
      }
      break;

    case MIN_SUBSCRIBER_TOPIC_VERSION:
      if (value == null) {
        unsetMin_subscriber_topic_version();
      } else {
        setMin_subscriber_topic_version((Long)value);
      }
      break;

    case CLEAR_TOPIC_ENTRIES:
      if (value == null) {
        unsetClear_topic_entries();
      } else {
        setClear_topic_entries((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOPIC_NAME:
      return getTopic_name();

    case TOPIC_ENTRIES:
      return getTopic_entries();

    case IS_DELTA:
      return isIs_delta();

    case FROM_VERSION:
      return getFrom_version();

    case TO_VERSION:
      return getTo_version();

    case MIN_SUBSCRIBER_TOPIC_VERSION:
      return getMin_subscriber_topic_version();

    case CLEAR_TOPIC_ENTRIES:
      return isClear_topic_entries();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOPIC_NAME:
      return isSetTopic_name();
    case TOPIC_ENTRIES:
      return isSetTopic_entries();
    case IS_DELTA:
      return isSetIs_delta();
    case FROM_VERSION:
      return isSetFrom_version();
    case TO_VERSION:
      return isSetTo_version();
    case MIN_SUBSCRIBER_TOPIC_VERSION:
      return isSetMin_subscriber_topic_version();
    case CLEAR_TOPIC_ENTRIES:
      return isSetClear_topic_entries();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTopicDelta)
      return this.equals((TTopicDelta)that);
    return false;
  }

  public boolean equals(TTopicDelta that) {
    if (that == null)
      return false;

    boolean this_present_topic_name = true && this.isSetTopic_name();
    boolean that_present_topic_name = true && that.isSetTopic_name();
    if (this_present_topic_name || that_present_topic_name) {
      if (!(this_present_topic_name && that_present_topic_name))
        return false;
      if (!this.topic_name.equals(that.topic_name))
        return false;
    }

    boolean this_present_topic_entries = true && this.isSetTopic_entries();
    boolean that_present_topic_entries = true && that.isSetTopic_entries();
    if (this_present_topic_entries || that_present_topic_entries) {
      if (!(this_present_topic_entries && that_present_topic_entries))
        return false;
      if (!this.topic_entries.equals(that.topic_entries))
        return false;
    }

    boolean this_present_is_delta = true;
    boolean that_present_is_delta = true;
    if (this_present_is_delta || that_present_is_delta) {
      if (!(this_present_is_delta && that_present_is_delta))
        return false;
      if (this.is_delta != that.is_delta)
        return false;
    }

    boolean this_present_from_version = true && this.isSetFrom_version();
    boolean that_present_from_version = true && that.isSetFrom_version();
    if (this_present_from_version || that_present_from_version) {
      if (!(this_present_from_version && that_present_from_version))
        return false;
      if (this.from_version != that.from_version)
        return false;
    }

    boolean this_present_to_version = true && this.isSetTo_version();
    boolean that_present_to_version = true && that.isSetTo_version();
    if (this_present_to_version || that_present_to_version) {
      if (!(this_present_to_version && that_present_to_version))
        return false;
      if (this.to_version != that.to_version)
        return false;
    }

    boolean this_present_min_subscriber_topic_version = true && this.isSetMin_subscriber_topic_version();
    boolean that_present_min_subscriber_topic_version = true && that.isSetMin_subscriber_topic_version();
    if (this_present_min_subscriber_topic_version || that_present_min_subscriber_topic_version) {
      if (!(this_present_min_subscriber_topic_version && that_present_min_subscriber_topic_version))
        return false;
      if (this.min_subscriber_topic_version != that.min_subscriber_topic_version)
        return false;
    }

    boolean this_present_clear_topic_entries = true && this.isSetClear_topic_entries();
    boolean that_present_clear_topic_entries = true && that.isSetClear_topic_entries();
    if (this_present_clear_topic_entries || that_present_clear_topic_entries) {
      if (!(this_present_clear_topic_entries && that_present_clear_topic_entries))
        return false;
      if (this.clear_topic_entries != that.clear_topic_entries)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_topic_name = true && (isSetTopic_name());
    list.add(present_topic_name);
    if (present_topic_name)
      list.add(topic_name);

    boolean present_topic_entries = true && (isSetTopic_entries());
    list.add(present_topic_entries);
    if (present_topic_entries)
      list.add(topic_entries);

    boolean present_is_delta = true;
    list.add(present_is_delta);
    if (present_is_delta)
      list.add(is_delta);

    boolean present_from_version = true && (isSetFrom_version());
    list.add(present_from_version);
    if (present_from_version)
      list.add(from_version);

    boolean present_to_version = true && (isSetTo_version());
    list.add(present_to_version);
    if (present_to_version)
      list.add(to_version);

    boolean present_min_subscriber_topic_version = true && (isSetMin_subscriber_topic_version());
    list.add(present_min_subscriber_topic_version);
    if (present_min_subscriber_topic_version)
      list.add(min_subscriber_topic_version);

    boolean present_clear_topic_entries = true && (isSetClear_topic_entries());
    list.add(present_clear_topic_entries);
    if (present_clear_topic_entries)
      list.add(clear_topic_entries);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTopicDelta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTopic_name()).compareTo(other.isSetTopic_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_name, other.topic_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic_entries()).compareTo(other.isSetTopic_entries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_entries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_entries, other.topic_entries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_delta()).compareTo(other.isSetIs_delta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_delta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_delta, other.is_delta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrom_version()).compareTo(other.isSetFrom_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from_version, other.from_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo_version()).compareTo(other.isSetTo_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to_version, other.to_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_subscriber_topic_version()).compareTo(other.isSetMin_subscriber_topic_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_subscriber_topic_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_subscriber_topic_version, other.min_subscriber_topic_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClear_topic_entries()).compareTo(other.isSetClear_topic_entries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClear_topic_entries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clear_topic_entries, other.clear_topic_entries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTopicDelta(");
    boolean first = true;

    sb.append("topic_name:");
    if (this.topic_name == null) {
      sb.append("null");
    } else {
      sb.append(this.topic_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic_entries:");
    if (this.topic_entries == null) {
      sb.append("null");
    } else {
      sb.append(this.topic_entries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_delta:");
    sb.append(this.is_delta);
    first = false;
    if (isSetFrom_version()) {
      if (!first) sb.append(", ");
      sb.append("from_version:");
      sb.append(this.from_version);
      first = false;
    }
    if (isSetTo_version()) {
      if (!first) sb.append(", ");
      sb.append("to_version:");
      sb.append(this.to_version);
      first = false;
    }
    if (isSetMin_subscriber_topic_version()) {
      if (!first) sb.append(", ");
      sb.append("min_subscriber_topic_version:");
      sb.append(this.min_subscriber_topic_version);
      first = false;
    }
    if (isSetClear_topic_entries()) {
      if (!first) sb.append(", ");
      sb.append("clear_topic_entries:");
      sb.append(this.clear_topic_entries);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTopic_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'topic_name' is unset! Struct:" + toString());
    }

    if (!isSetTopic_entries()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'topic_entries' is unset! Struct:" + toString());
    }

    if (!isSetIs_delta()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_delta' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTopicDeltaStandardSchemeFactory implements SchemeFactory {
    public TTopicDeltaStandardScheme getScheme() {
      return new TTopicDeltaStandardScheme();
    }
  }

  private static class TTopicDeltaStandardScheme extends StandardScheme<TTopicDelta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTopicDelta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOPIC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic_name = iprot.readString();
              struct.setTopic_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC_ENTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.topic_entries = new ArrayList<TTopicItem>(_list8.size);
                TTopicItem _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TTopicItem();
                  _elem9.read(iprot);
                  struct.topic_entries.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setTopic_entriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_DELTA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_delta = iprot.readBool();
              struct.setIs_deltaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.from_version = iprot.readI64();
              struct.setFrom_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TO_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.to_version = iprot.readI64();
              struct.setTo_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MIN_SUBSCRIBER_TOPIC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_subscriber_topic_version = iprot.readI64();
              struct.setMin_subscriber_topic_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLEAR_TOPIC_ENTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clear_topic_entries = iprot.readBool();
              struct.setClear_topic_entriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTopicDelta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.topic_name != null) {
        oprot.writeFieldBegin(TOPIC_NAME_FIELD_DESC);
        oprot.writeString(struct.topic_name);
        oprot.writeFieldEnd();
      }
      if (struct.topic_entries != null) {
        oprot.writeFieldBegin(TOPIC_ENTRIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.topic_entries.size()));
          for (TTopicItem _iter11 : struct.topic_entries)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_DELTA_FIELD_DESC);
      oprot.writeBool(struct.is_delta);
      oprot.writeFieldEnd();
      if (struct.isSetFrom_version()) {
        oprot.writeFieldBegin(FROM_VERSION_FIELD_DESC);
        oprot.writeI64(struct.from_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTo_version()) {
        oprot.writeFieldBegin(TO_VERSION_FIELD_DESC);
        oprot.writeI64(struct.to_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMin_subscriber_topic_version()) {
        oprot.writeFieldBegin(MIN_SUBSCRIBER_TOPIC_VERSION_FIELD_DESC);
        oprot.writeI64(struct.min_subscriber_topic_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClear_topic_entries()) {
        oprot.writeFieldBegin(CLEAR_TOPIC_ENTRIES_FIELD_DESC);
        oprot.writeBool(struct.clear_topic_entries);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTopicDeltaTupleSchemeFactory implements SchemeFactory {
    public TTopicDeltaTupleScheme getScheme() {
      return new TTopicDeltaTupleScheme();
    }
  }

  private static class TTopicDeltaTupleScheme extends TupleScheme<TTopicDelta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTopicDelta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.topic_name);
      {
        oprot.writeI32(struct.topic_entries.size());
        for (TTopicItem _iter12 : struct.topic_entries)
        {
          _iter12.write(oprot);
        }
      }
      oprot.writeBool(struct.is_delta);
      BitSet optionals = new BitSet();
      if (struct.isSetFrom_version()) {
        optionals.set(0);
      }
      if (struct.isSetTo_version()) {
        optionals.set(1);
      }
      if (struct.isSetMin_subscriber_topic_version()) {
        optionals.set(2);
      }
      if (struct.isSetClear_topic_entries()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFrom_version()) {
        oprot.writeI64(struct.from_version);
      }
      if (struct.isSetTo_version()) {
        oprot.writeI64(struct.to_version);
      }
      if (struct.isSetMin_subscriber_topic_version()) {
        oprot.writeI64(struct.min_subscriber_topic_version);
      }
      if (struct.isSetClear_topic_entries()) {
        oprot.writeBool(struct.clear_topic_entries);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTopicDelta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.topic_name = iprot.readString();
      struct.setTopic_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.topic_entries = new ArrayList<TTopicItem>(_list13.size);
        TTopicItem _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new TTopicItem();
          _elem14.read(iprot);
          struct.topic_entries.add(_elem14);
        }
      }
      struct.setTopic_entriesIsSet(true);
      struct.is_delta = iprot.readBool();
      struct.setIs_deltaIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.from_version = iprot.readI64();
        struct.setFrom_versionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.to_version = iprot.readI64();
        struct.setTo_versionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.min_subscriber_topic_version = iprot.readI64();
        struct.setMin_subscriber_topic_versionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.clear_topic_entries = iprot.readBool();
        struct.setClear_topic_entriesIsSet(true);
      }
    }
  }

}

