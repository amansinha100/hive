/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TPartialDbInfo implements org.apache.thrift.TBase<TPartialDbInfo, TPartialDbInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TPartialDbInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPartialDbInfo");

  private static final org.apache.thrift.protocol.TField HMS_DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("hms_database", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("table_names", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FUNCTION_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("function_names", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPartialDbInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPartialDbInfoTupleSchemeFactory());
  }

  private org.apache.hadoop.hive.metastore.api.Database hms_database; // optional
  private List<String> table_names; // optional
  private List<String> function_names; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HMS_DATABASE((short)1, "hms_database"),
    TABLE_NAMES((short)2, "table_names"),
    FUNCTION_NAMES((short)3, "function_names");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HMS_DATABASE
          return HMS_DATABASE;
        case 2: // TABLE_NAMES
          return TABLE_NAMES;
        case 3: // FUNCTION_NAMES
          return FUNCTION_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.HMS_DATABASE,_Fields.TABLE_NAMES,_Fields.FUNCTION_NAMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HMS_DATABASE, new org.apache.thrift.meta_data.FieldMetaData("hms_database", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hadoop.hive.metastore.api.Database.class)));
    tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("table_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FUNCTION_NAMES, new org.apache.thrift.meta_data.FieldMetaData("function_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPartialDbInfo.class, metaDataMap);
  }

  public TPartialDbInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPartialDbInfo(TPartialDbInfo other) {
    if (other.isSetHms_database()) {
      this.hms_database = new org.apache.hadoop.hive.metastore.api.Database(other.hms_database);
    }
    if (other.isSetTable_names()) {
      List<String> __this__table_names = new ArrayList<String>(other.table_names);
      this.table_names = __this__table_names;
    }
    if (other.isSetFunction_names()) {
      List<String> __this__function_names = new ArrayList<String>(other.function_names);
      this.function_names = __this__function_names;
    }
  }

  public TPartialDbInfo deepCopy() {
    return new TPartialDbInfo(this);
  }

  @Override
  public void clear() {
    this.hms_database = null;
    this.table_names = null;
    this.function_names = null;
  }

  public org.apache.hadoop.hive.metastore.api.Database getHms_database() {
    return this.hms_database;
  }

  public void setHms_database(org.apache.hadoop.hive.metastore.api.Database hms_database) {
    this.hms_database = hms_database;
  }

  public void unsetHms_database() {
    this.hms_database = null;
  }

  /** Returns true if field hms_database is set (has been assigned a value) and false otherwise */
  public boolean isSetHms_database() {
    return this.hms_database != null;
  }

  public void setHms_databaseIsSet(boolean value) {
    if (!value) {
      this.hms_database = null;
    }
  }

  public int getTable_namesSize() {
    return (this.table_names == null) ? 0 : this.table_names.size();
  }

  public java.util.Iterator<String> getTable_namesIterator() {
    return (this.table_names == null) ? null : this.table_names.iterator();
  }

  public void addToTable_names(String elem) {
    if (this.table_names == null) {
      this.table_names = new ArrayList<String>();
    }
    this.table_names.add(elem);
  }

  public List<String> getTable_names() {
    return this.table_names;
  }

  public void setTable_names(List<String> table_names) {
    this.table_names = table_names;
  }

  public void unsetTable_names() {
    this.table_names = null;
  }

  /** Returns true if field table_names is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_names() {
    return this.table_names != null;
  }

  public void setTable_namesIsSet(boolean value) {
    if (!value) {
      this.table_names = null;
    }
  }

  public int getFunction_namesSize() {
    return (this.function_names == null) ? 0 : this.function_names.size();
  }

  public java.util.Iterator<String> getFunction_namesIterator() {
    return (this.function_names == null) ? null : this.function_names.iterator();
  }

  public void addToFunction_names(String elem) {
    if (this.function_names == null) {
      this.function_names = new ArrayList<String>();
    }
    this.function_names.add(elem);
  }

  public List<String> getFunction_names() {
    return this.function_names;
  }

  public void setFunction_names(List<String> function_names) {
    this.function_names = function_names;
  }

  public void unsetFunction_names() {
    this.function_names = null;
  }

  /** Returns true if field function_names is set (has been assigned a value) and false otherwise */
  public boolean isSetFunction_names() {
    return this.function_names != null;
  }

  public void setFunction_namesIsSet(boolean value) {
    if (!value) {
      this.function_names = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HMS_DATABASE:
      if (value == null) {
        unsetHms_database();
      } else {
        setHms_database((org.apache.hadoop.hive.metastore.api.Database)value);
      }
      break;

    case TABLE_NAMES:
      if (value == null) {
        unsetTable_names();
      } else {
        setTable_names((List<String>)value);
      }
      break;

    case FUNCTION_NAMES:
      if (value == null) {
        unsetFunction_names();
      } else {
        setFunction_names((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HMS_DATABASE:
      return getHms_database();

    case TABLE_NAMES:
      return getTable_names();

    case FUNCTION_NAMES:
      return getFunction_names();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HMS_DATABASE:
      return isSetHms_database();
    case TABLE_NAMES:
      return isSetTable_names();
    case FUNCTION_NAMES:
      return isSetFunction_names();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPartialDbInfo)
      return this.equals((TPartialDbInfo)that);
    return false;
  }

  public boolean equals(TPartialDbInfo that) {
    if (that == null)
      return false;

    boolean this_present_hms_database = true && this.isSetHms_database();
    boolean that_present_hms_database = true && that.isSetHms_database();
    if (this_present_hms_database || that_present_hms_database) {
      if (!(this_present_hms_database && that_present_hms_database))
        return false;
      if (!this.hms_database.equals(that.hms_database))
        return false;
    }

    boolean this_present_table_names = true && this.isSetTable_names();
    boolean that_present_table_names = true && that.isSetTable_names();
    if (this_present_table_names || that_present_table_names) {
      if (!(this_present_table_names && that_present_table_names))
        return false;
      if (!this.table_names.equals(that.table_names))
        return false;
    }

    boolean this_present_function_names = true && this.isSetFunction_names();
    boolean that_present_function_names = true && that.isSetFunction_names();
    if (this_present_function_names || that_present_function_names) {
      if (!(this_present_function_names && that_present_function_names))
        return false;
      if (!this.function_names.equals(that.function_names))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hms_database = true && (isSetHms_database());
    list.add(present_hms_database);
    if (present_hms_database)
      list.add(hms_database);

    boolean present_table_names = true && (isSetTable_names());
    list.add(present_table_names);
    if (present_table_names)
      list.add(table_names);

    boolean present_function_names = true && (isSetFunction_names());
    list.add(present_function_names);
    if (present_function_names)
      list.add(function_names);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPartialDbInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHms_database()).compareTo(other.isSetHms_database());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHms_database()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hms_database, other.hms_database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_names()).compareTo(other.isSetTable_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_names, other.table_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunction_names()).compareTo(other.isSetFunction_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunction_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.function_names, other.function_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPartialDbInfo(");
    boolean first = true;

    if (isSetHms_database()) {
      sb.append("hms_database:");
      if (this.hms_database == null) {
        sb.append("null");
      } else {
        sb.append(this.hms_database);
      }
      first = false;
    }
    if (isSetTable_names()) {
      if (!first) sb.append(", ");
      sb.append("table_names:");
      if (this.table_names == null) {
        sb.append("null");
      } else {
        sb.append(this.table_names);
      }
      first = false;
    }
    if (isSetFunction_names()) {
      if (!first) sb.append(", ");
      sb.append("function_names:");
      if (this.function_names == null) {
        sb.append("null");
      } else {
        sb.append(this.function_names);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hms_database != null) {
      hms_database.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPartialDbInfoStandardSchemeFactory implements SchemeFactory {
    public TPartialDbInfoStandardScheme getScheme() {
      return new TPartialDbInfoStandardScheme();
    }
  }

  private static class TPartialDbInfoStandardScheme extends StandardScheme<TPartialDbInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPartialDbInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HMS_DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hms_database = new org.apache.hadoop.hive.metastore.api.Database();
              struct.hms_database.read(iprot);
              struct.setHms_databaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.table_names = new ArrayList<String>(_list96.size);
                String _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = iprot.readString();
                  struct.table_names.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setTable_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FUNCTION_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                struct.function_names = new ArrayList<String>(_list99.size);
                String _elem100;
                for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                {
                  _elem100 = iprot.readString();
                  struct.function_names.add(_elem100);
                }
                iprot.readListEnd();
              }
              struct.setFunction_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPartialDbInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hms_database != null) {
        if (struct.isSetHms_database()) {
          oprot.writeFieldBegin(HMS_DATABASE_FIELD_DESC);
          struct.hms_database.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_names != null) {
        if (struct.isSetTable_names()) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.table_names.size()));
            for (String _iter102 : struct.table_names)
            {
              oprot.writeString(_iter102);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.function_names != null) {
        if (struct.isSetFunction_names()) {
          oprot.writeFieldBegin(FUNCTION_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.function_names.size()));
            for (String _iter103 : struct.function_names)
            {
              oprot.writeString(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPartialDbInfoTupleSchemeFactory implements SchemeFactory {
    public TPartialDbInfoTupleScheme getScheme() {
      return new TPartialDbInfoTupleScheme();
    }
  }

  private static class TPartialDbInfoTupleScheme extends TupleScheme<TPartialDbInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPartialDbInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHms_database()) {
        optionals.set(0);
      }
      if (struct.isSetTable_names()) {
        optionals.set(1);
      }
      if (struct.isSetFunction_names()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHms_database()) {
        struct.hms_database.write(oprot);
      }
      if (struct.isSetTable_names()) {
        {
          oprot.writeI32(struct.table_names.size());
          for (String _iter104 : struct.table_names)
          {
            oprot.writeString(_iter104);
          }
        }
      }
      if (struct.isSetFunction_names()) {
        {
          oprot.writeI32(struct.function_names.size());
          for (String _iter105 : struct.function_names)
          {
            oprot.writeString(_iter105);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPartialDbInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.hms_database = new org.apache.hadoop.hive.metastore.api.Database();
        struct.hms_database.read(iprot);
        struct.setHms_databaseIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.table_names = new ArrayList<String>(_list106.size);
          String _elem107;
          for (int _i108 = 0; _i108 < _list106.size; ++_i108)
          {
            _elem107 = iprot.readString();
            struct.table_names.add(_elem107);
          }
        }
        struct.setTable_namesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.function_names = new ArrayList<String>(_list109.size);
          String _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = iprot.readString();
            struct.function_names.add(_elem110);
          }
        }
        struct.setFunction_namesIsSet(true);
      }
    }
  }

}

