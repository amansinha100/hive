/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TExecQueryFInstancesSidecar implements org.apache.thrift.TBase<TExecQueryFInstancesSidecar, TExecQueryFInstancesSidecar._Fields>, java.io.Serializable, Cloneable, Comparable<TExecQueryFInstancesSidecar> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecQueryFInstancesSidecar");

  private static final org.apache.thrift.protocol.TField QUERY_CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("query_ctx", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_CTXS_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_ctxs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_CTXS_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_ctxs", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExecQueryFInstancesSidecarStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExecQueryFInstancesSidecarTupleSchemeFactory());
  }

  private TQueryCtx query_ctx; // optional
  private List<TPlanFragmentCtx> fragment_ctxs; // optional
  private List<TPlanFragmentInstanceCtx> fragment_instance_ctxs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_CTX((short)1, "query_ctx"),
    FRAGMENT_CTXS((short)2, "fragment_ctxs"),
    FRAGMENT_INSTANCE_CTXS((short)3, "fragment_instance_ctxs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_CTX
          return QUERY_CTX;
        case 2: // FRAGMENT_CTXS
          return FRAGMENT_CTXS;
        case 3: // FRAGMENT_INSTANCE_CTXS
          return FRAGMENT_INSTANCE_CTXS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.QUERY_CTX,_Fields.FRAGMENT_CTXS,_Fields.FRAGMENT_INSTANCE_CTXS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_CTX, new org.apache.thrift.meta_data.FieldMetaData("query_ctx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryCtx.class)));
    tmpMap.put(_Fields.FRAGMENT_CTXS, new org.apache.thrift.meta_data.FieldMetaData("fragment_ctxs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentCtx.class))));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_CTXS, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_ctxs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentInstanceCtx.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecQueryFInstancesSidecar.class, metaDataMap);
  }

  public TExecQueryFInstancesSidecar() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecQueryFInstancesSidecar(TExecQueryFInstancesSidecar other) {
    if (other.isSetQuery_ctx()) {
      this.query_ctx = new TQueryCtx(other.query_ctx);
    }
    if (other.isSetFragment_ctxs()) {
      List<TPlanFragmentCtx> __this__fragment_ctxs = new ArrayList<TPlanFragmentCtx>(other.fragment_ctxs.size());
      for (TPlanFragmentCtx other_element : other.fragment_ctxs) {
        __this__fragment_ctxs.add(new TPlanFragmentCtx(other_element));
      }
      this.fragment_ctxs = __this__fragment_ctxs;
    }
    if (other.isSetFragment_instance_ctxs()) {
      List<TPlanFragmentInstanceCtx> __this__fragment_instance_ctxs = new ArrayList<TPlanFragmentInstanceCtx>(other.fragment_instance_ctxs.size());
      for (TPlanFragmentInstanceCtx other_element : other.fragment_instance_ctxs) {
        __this__fragment_instance_ctxs.add(new TPlanFragmentInstanceCtx(other_element));
      }
      this.fragment_instance_ctxs = __this__fragment_instance_ctxs;
    }
  }

  public TExecQueryFInstancesSidecar deepCopy() {
    return new TExecQueryFInstancesSidecar(this);
  }

  @Override
  public void clear() {
    this.query_ctx = null;
    this.fragment_ctxs = null;
    this.fragment_instance_ctxs = null;
  }

  public TQueryCtx getQuery_ctx() {
    return this.query_ctx;
  }

  public void setQuery_ctx(TQueryCtx query_ctx) {
    this.query_ctx = query_ctx;
  }

  public void unsetQuery_ctx() {
    this.query_ctx = null;
  }

  /** Returns true if field query_ctx is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_ctx() {
    return this.query_ctx != null;
  }

  public void setQuery_ctxIsSet(boolean value) {
    if (!value) {
      this.query_ctx = null;
    }
  }

  public int getFragment_ctxsSize() {
    return (this.fragment_ctxs == null) ? 0 : this.fragment_ctxs.size();
  }

  public java.util.Iterator<TPlanFragmentCtx> getFragment_ctxsIterator() {
    return (this.fragment_ctxs == null) ? null : this.fragment_ctxs.iterator();
  }

  public void addToFragment_ctxs(TPlanFragmentCtx elem) {
    if (this.fragment_ctxs == null) {
      this.fragment_ctxs = new ArrayList<TPlanFragmentCtx>();
    }
    this.fragment_ctxs.add(elem);
  }

  public List<TPlanFragmentCtx> getFragment_ctxs() {
    return this.fragment_ctxs;
  }

  public void setFragment_ctxs(List<TPlanFragmentCtx> fragment_ctxs) {
    this.fragment_ctxs = fragment_ctxs;
  }

  public void unsetFragment_ctxs() {
    this.fragment_ctxs = null;
  }

  /** Returns true if field fragment_ctxs is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_ctxs() {
    return this.fragment_ctxs != null;
  }

  public void setFragment_ctxsIsSet(boolean value) {
    if (!value) {
      this.fragment_ctxs = null;
    }
  }

  public int getFragment_instance_ctxsSize() {
    return (this.fragment_instance_ctxs == null) ? 0 : this.fragment_instance_ctxs.size();
  }

  public java.util.Iterator<TPlanFragmentInstanceCtx> getFragment_instance_ctxsIterator() {
    return (this.fragment_instance_ctxs == null) ? null : this.fragment_instance_ctxs.iterator();
  }

  public void addToFragment_instance_ctxs(TPlanFragmentInstanceCtx elem) {
    if (this.fragment_instance_ctxs == null) {
      this.fragment_instance_ctxs = new ArrayList<TPlanFragmentInstanceCtx>();
    }
    this.fragment_instance_ctxs.add(elem);
  }

  public List<TPlanFragmentInstanceCtx> getFragment_instance_ctxs() {
    return this.fragment_instance_ctxs;
  }

  public void setFragment_instance_ctxs(List<TPlanFragmentInstanceCtx> fragment_instance_ctxs) {
    this.fragment_instance_ctxs = fragment_instance_ctxs;
  }

  public void unsetFragment_instance_ctxs() {
    this.fragment_instance_ctxs = null;
  }

  /** Returns true if field fragment_instance_ctxs is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_ctxs() {
    return this.fragment_instance_ctxs != null;
  }

  public void setFragment_instance_ctxsIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_ctxs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_CTX:
      if (value == null) {
        unsetQuery_ctx();
      } else {
        setQuery_ctx((TQueryCtx)value);
      }
      break;

    case FRAGMENT_CTXS:
      if (value == null) {
        unsetFragment_ctxs();
      } else {
        setFragment_ctxs((List<TPlanFragmentCtx>)value);
      }
      break;

    case FRAGMENT_INSTANCE_CTXS:
      if (value == null) {
        unsetFragment_instance_ctxs();
      } else {
        setFragment_instance_ctxs((List<TPlanFragmentInstanceCtx>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_CTX:
      return getQuery_ctx();

    case FRAGMENT_CTXS:
      return getFragment_ctxs();

    case FRAGMENT_INSTANCE_CTXS:
      return getFragment_instance_ctxs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_CTX:
      return isSetQuery_ctx();
    case FRAGMENT_CTXS:
      return isSetFragment_ctxs();
    case FRAGMENT_INSTANCE_CTXS:
      return isSetFragment_instance_ctxs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExecQueryFInstancesSidecar)
      return this.equals((TExecQueryFInstancesSidecar)that);
    return false;
  }

  public boolean equals(TExecQueryFInstancesSidecar that) {
    if (that == null)
      return false;

    boolean this_present_query_ctx = true && this.isSetQuery_ctx();
    boolean that_present_query_ctx = true && that.isSetQuery_ctx();
    if (this_present_query_ctx || that_present_query_ctx) {
      if (!(this_present_query_ctx && that_present_query_ctx))
        return false;
      if (!this.query_ctx.equals(that.query_ctx))
        return false;
    }

    boolean this_present_fragment_ctxs = true && this.isSetFragment_ctxs();
    boolean that_present_fragment_ctxs = true && that.isSetFragment_ctxs();
    if (this_present_fragment_ctxs || that_present_fragment_ctxs) {
      if (!(this_present_fragment_ctxs && that_present_fragment_ctxs))
        return false;
      if (!this.fragment_ctxs.equals(that.fragment_ctxs))
        return false;
    }

    boolean this_present_fragment_instance_ctxs = true && this.isSetFragment_instance_ctxs();
    boolean that_present_fragment_instance_ctxs = true && that.isSetFragment_instance_ctxs();
    if (this_present_fragment_instance_ctxs || that_present_fragment_instance_ctxs) {
      if (!(this_present_fragment_instance_ctxs && that_present_fragment_instance_ctxs))
        return false;
      if (!this.fragment_instance_ctxs.equals(that.fragment_instance_ctxs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_query_ctx = true && (isSetQuery_ctx());
    list.add(present_query_ctx);
    if (present_query_ctx)
      list.add(query_ctx);

    boolean present_fragment_ctxs = true && (isSetFragment_ctxs());
    list.add(present_fragment_ctxs);
    if (present_fragment_ctxs)
      list.add(fragment_ctxs);

    boolean present_fragment_instance_ctxs = true && (isSetFragment_instance_ctxs());
    list.add(present_fragment_instance_ctxs);
    if (present_fragment_instance_ctxs)
      list.add(fragment_instance_ctxs);

    return list.hashCode();
  }

  @Override
  public int compareTo(TExecQueryFInstancesSidecar other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery_ctx()).compareTo(other.isSetQuery_ctx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_ctx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_ctx, other.query_ctx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment_ctxs()).compareTo(other.isSetFragment_ctxs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_ctxs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_ctxs, other.fragment_ctxs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFragment_instance_ctxs()).compareTo(other.isSetFragment_instance_ctxs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_ctxs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_ctxs, other.fragment_instance_ctxs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExecQueryFInstancesSidecar(");
    boolean first = true;

    if (isSetQuery_ctx()) {
      sb.append("query_ctx:");
      if (this.query_ctx == null) {
        sb.append("null");
      } else {
        sb.append(this.query_ctx);
      }
      first = false;
    }
    if (isSetFragment_ctxs()) {
      if (!first) sb.append(", ");
      sb.append("fragment_ctxs:");
      if (this.fragment_ctxs == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment_ctxs);
      }
      first = false;
    }
    if (isSetFragment_instance_ctxs()) {
      if (!first) sb.append(", ");
      sb.append("fragment_instance_ctxs:");
      if (this.fragment_instance_ctxs == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment_instance_ctxs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (query_ctx != null) {
      query_ctx.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecQueryFInstancesSidecarStandardSchemeFactory implements SchemeFactory {
    public TExecQueryFInstancesSidecarStandardScheme getScheme() {
      return new TExecQueryFInstancesSidecarStandardScheme();
    }
  }

  private static class TExecQueryFInstancesSidecarStandardScheme extends StandardScheme<TExecQueryFInstancesSidecar> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecQueryFInstancesSidecar struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_ctx = new TQueryCtx();
              struct.query_ctx.read(iprot);
              struct.setQuery_ctxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT_CTXS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.fragment_ctxs = new ArrayList<TPlanFragmentCtx>(_list60.size);
                TPlanFragmentCtx _elem61;
                for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                {
                  _elem61 = new TPlanFragmentCtx();
                  _elem61.read(iprot);
                  struct.fragment_ctxs.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setFragment_ctxsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FRAGMENT_INSTANCE_CTXS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                struct.fragment_instance_ctxs = new ArrayList<TPlanFragmentInstanceCtx>(_list63.size);
                TPlanFragmentInstanceCtx _elem64;
                for (int _i65 = 0; _i65 < _list63.size; ++_i65)
                {
                  _elem64 = new TPlanFragmentInstanceCtx();
                  _elem64.read(iprot);
                  struct.fragment_instance_ctxs.add(_elem64);
                }
                iprot.readListEnd();
              }
              struct.setFragment_instance_ctxsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecQueryFInstancesSidecar struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query_ctx != null) {
        if (struct.isSetQuery_ctx()) {
          oprot.writeFieldBegin(QUERY_CTX_FIELD_DESC);
          struct.query_ctx.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fragment_ctxs != null) {
        if (struct.isSetFragment_ctxs()) {
          oprot.writeFieldBegin(FRAGMENT_CTXS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fragment_ctxs.size()));
            for (TPlanFragmentCtx _iter66 : struct.fragment_ctxs)
            {
              _iter66.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.fragment_instance_ctxs != null) {
        if (struct.isSetFragment_instance_ctxs()) {
          oprot.writeFieldBegin(FRAGMENT_INSTANCE_CTXS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fragment_instance_ctxs.size()));
            for (TPlanFragmentInstanceCtx _iter67 : struct.fragment_instance_ctxs)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecQueryFInstancesSidecarTupleSchemeFactory implements SchemeFactory {
    public TExecQueryFInstancesSidecarTupleScheme getScheme() {
      return new TExecQueryFInstancesSidecarTupleScheme();
    }
  }

  private static class TExecQueryFInstancesSidecarTupleScheme extends TupleScheme<TExecQueryFInstancesSidecar> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecQueryFInstancesSidecar struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuery_ctx()) {
        optionals.set(0);
      }
      if (struct.isSetFragment_ctxs()) {
        optionals.set(1);
      }
      if (struct.isSetFragment_instance_ctxs()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetQuery_ctx()) {
        struct.query_ctx.write(oprot);
      }
      if (struct.isSetFragment_ctxs()) {
        {
          oprot.writeI32(struct.fragment_ctxs.size());
          for (TPlanFragmentCtx _iter68 : struct.fragment_ctxs)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetFragment_instance_ctxs()) {
        {
          oprot.writeI32(struct.fragment_instance_ctxs.size());
          for (TPlanFragmentInstanceCtx _iter69 : struct.fragment_instance_ctxs)
          {
            _iter69.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecQueryFInstancesSidecar struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.query_ctx = new TQueryCtx();
        struct.query_ctx.read(iprot);
        struct.setQuery_ctxIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list70 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fragment_ctxs = new ArrayList<TPlanFragmentCtx>(_list70.size);
          TPlanFragmentCtx _elem71;
          for (int _i72 = 0; _i72 < _list70.size; ++_i72)
          {
            _elem71 = new TPlanFragmentCtx();
            _elem71.read(iprot);
            struct.fragment_ctxs.add(_elem71);
          }
        }
        struct.setFragment_ctxsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fragment_instance_ctxs = new ArrayList<TPlanFragmentInstanceCtx>(_list73.size);
          TPlanFragmentInstanceCtx _elem74;
          for (int _i75 = 0; _i75 < _list73.size; ++_i75)
          {
            _elem74 = new TPlanFragmentInstanceCtx();
            _elem74.read(iprot);
            struct.fragment_instance_ctxs.add(_elem74);
          }
        }
        struct.setFragment_instance_ctxsIsSet(true);
      }
    }
  }

}

