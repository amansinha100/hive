/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TPipelineMembership implements org.apache.thrift.TBase<TPipelineMembership, TPipelineMembership._Fields>, java.io.Serializable, Cloneable, Comparable<TPipelineMembership> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPipelineMembership");

  private static final org.apache.thrift.protocol.TField PIPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pipe_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PHASE_FIELD_DESC = new org.apache.thrift.protocol.TField("phase", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPipelineMembershipStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPipelineMembershipTupleSchemeFactory());
  }

  private int pipe_id; // required
  private int height; // required
  private TExecNodePhase phase; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PIPE_ID((short)1, "pipe_id"),
    HEIGHT((short)2, "height"),
    /**
     * 
     * @see TExecNodePhase
     */
    PHASE((short)3, "phase");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PIPE_ID
          return PIPE_ID;
        case 2: // HEIGHT
          return HEIGHT;
        case 3: // PHASE
          return PHASE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PIPE_ID_ISSET_ID = 0;
  private static final int __HEIGHT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PIPE_ID, new org.apache.thrift.meta_data.FieldMetaData("pipe_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PHASE, new org.apache.thrift.meta_data.FieldMetaData("phase", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TExecNodePhase.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPipelineMembership.class, metaDataMap);
  }

  public TPipelineMembership() {
  }

  public TPipelineMembership(
    int pipe_id,
    int height,
    TExecNodePhase phase)
  {
    this();
    this.pipe_id = pipe_id;
    setPipe_idIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.phase = phase;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPipelineMembership(TPipelineMembership other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pipe_id = other.pipe_id;
    this.height = other.height;
    if (other.isSetPhase()) {
      this.phase = other.phase;
    }
  }

  public TPipelineMembership deepCopy() {
    return new TPipelineMembership(this);
  }

  @Override
  public void clear() {
    setPipe_idIsSet(false);
    this.pipe_id = 0;
    setHeightIsSet(false);
    this.height = 0;
    this.phase = null;
  }

  public int getPipe_id() {
    return this.pipe_id;
  }

  public void setPipe_id(int pipe_id) {
    this.pipe_id = pipe_id;
    setPipe_idIsSet(true);
  }

  public void unsetPipe_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PIPE_ID_ISSET_ID);
  }

  /** Returns true if field pipe_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPipe_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PIPE_ID_ISSET_ID);
  }

  public void setPipe_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PIPE_ID_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public void setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  /**
   * 
   * @see TExecNodePhase
   */
  public TExecNodePhase getPhase() {
    return this.phase;
  }

  /**
   * 
   * @see TExecNodePhase
   */
  public void setPhase(TExecNodePhase phase) {
    this.phase = phase;
  }

  public void unsetPhase() {
    this.phase = null;
  }

  /** Returns true if field phase is set (has been assigned a value) and false otherwise */
  public boolean isSetPhase() {
    return this.phase != null;
  }

  public void setPhaseIsSet(boolean value) {
    if (!value) {
      this.phase = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PIPE_ID:
      if (value == null) {
        unsetPipe_id();
      } else {
        setPipe_id((Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case PHASE:
      if (value == null) {
        unsetPhase();
      } else {
        setPhase((TExecNodePhase)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PIPE_ID:
      return getPipe_id();

    case HEIGHT:
      return getHeight();

    case PHASE:
      return getPhase();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PIPE_ID:
      return isSetPipe_id();
    case HEIGHT:
      return isSetHeight();
    case PHASE:
      return isSetPhase();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPipelineMembership)
      return this.equals((TPipelineMembership)that);
    return false;
  }

  public boolean equals(TPipelineMembership that) {
    if (that == null)
      return false;

    boolean this_present_pipe_id = true;
    boolean that_present_pipe_id = true;
    if (this_present_pipe_id || that_present_pipe_id) {
      if (!(this_present_pipe_id && that_present_pipe_id))
        return false;
      if (this.pipe_id != that.pipe_id)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_phase = true && this.isSetPhase();
    boolean that_present_phase = true && that.isSetPhase();
    if (this_present_phase || that_present_phase) {
      if (!(this_present_phase && that_present_phase))
        return false;
      if (!this.phase.equals(that.phase))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pipe_id = true;
    list.add(present_pipe_id);
    if (present_pipe_id)
      list.add(pipe_id);

    boolean present_height = true;
    list.add(present_height);
    if (present_height)
      list.add(height);

    boolean present_phase = true && (isSetPhase());
    list.add(present_phase);
    if (present_phase)
      list.add(phase.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TPipelineMembership other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPipe_id()).compareTo(other.isSetPipe_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipe_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipe_id, other.pipe_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhase()).compareTo(other.isSetPhase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phase, other.phase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPipelineMembership(");
    boolean first = true;

    sb.append("pipe_id:");
    sb.append(this.pipe_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phase:");
    if (this.phase == null) {
      sb.append("null");
    } else {
      sb.append(this.phase);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetPipe_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pipe_id' is unset! Struct:" + toString());
    }

    if (!isSetHeight()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'height' is unset! Struct:" + toString());
    }

    if (!isSetPhase()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phase' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPipelineMembershipStandardSchemeFactory implements SchemeFactory {
    public TPipelineMembershipStandardScheme getScheme() {
      return new TPipelineMembershipStandardScheme();
    }
  }

  private static class TPipelineMembershipStandardScheme extends StandardScheme<TPipelineMembership> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPipelineMembership struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PIPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pipe_id = iprot.readI32();
              struct.setPipe_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PHASE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.phase = org.apache.impala.thrift.TExecNodePhase.findByValue(iprot.readI32());
              struct.setPhaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPipelineMembership struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PIPE_ID_FIELD_DESC);
      oprot.writeI32(struct.pipe_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      if (struct.phase != null) {
        oprot.writeFieldBegin(PHASE_FIELD_DESC);
        oprot.writeI32(struct.phase.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPipelineMembershipTupleSchemeFactory implements SchemeFactory {
    public TPipelineMembershipTupleScheme getScheme() {
      return new TPipelineMembershipTupleScheme();
    }
  }

  private static class TPipelineMembershipTupleScheme extends TupleScheme<TPipelineMembership> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPipelineMembership struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.pipe_id);
      oprot.writeI32(struct.height);
      oprot.writeI32(struct.phase.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPipelineMembership struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.pipe_id = iprot.readI32();
      struct.setPipe_idIsSet(true);
      struct.height = iprot.readI32();
      struct.setHeightIsSet(true);
      struct.phase = org.apache.impala.thrift.TExecNodePhase.findByValue(iprot.readI32());
      struct.setPhaseIsSet(true);
    }
  }

}

