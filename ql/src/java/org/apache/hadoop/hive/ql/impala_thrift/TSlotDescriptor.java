/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TSlotDescriptor implements org.apache.thrift.TBase<TSlotDescriptor, TSlotDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TSlotDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSlotDescriptor");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("parent", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemTupleId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SLOT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("slotType", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField MATERIALIZED_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("materializedPath", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField BYTE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("byteOffset", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NULL_INDICATOR_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("nullIndicatorByte", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NULL_INDICATOR_BIT_FIELD_DESC = new org.apache.thrift.protocol.TField("nullIndicatorBit", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SLOT_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("slotIdx", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSlotDescriptorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSlotDescriptorTupleSchemeFactory());
  }

  private int id; // required
  private int parent; // required
  private int itemTupleId; // optional
  private org.apache.impala.thrift.TColumnType slotType; // required
  private List<Integer> materializedPath; // required
  private int byteOffset; // required
  private int nullIndicatorByte; // required
  private int nullIndicatorBit; // required
  private int slotIdx; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PARENT((short)2, "parent"),
    ITEM_TUPLE_ID((short)3, "itemTupleId"),
    SLOT_TYPE((short)4, "slotType"),
    MATERIALIZED_PATH((short)5, "materializedPath"),
    BYTE_OFFSET((short)6, "byteOffset"),
    NULL_INDICATOR_BYTE((short)7, "nullIndicatorByte"),
    NULL_INDICATOR_BIT((short)8, "nullIndicatorBit"),
    SLOT_IDX((short)9, "slotIdx");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PARENT
          return PARENT;
        case 3: // ITEM_TUPLE_ID
          return ITEM_TUPLE_ID;
        case 4: // SLOT_TYPE
          return SLOT_TYPE;
        case 5: // MATERIALIZED_PATH
          return MATERIALIZED_PATH;
        case 6: // BYTE_OFFSET
          return BYTE_OFFSET;
        case 7: // NULL_INDICATOR_BYTE
          return NULL_INDICATOR_BYTE;
        case 8: // NULL_INDICATOR_BIT
          return NULL_INDICATOR_BIT;
        case 9: // SLOT_IDX
          return SLOT_IDX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PARENT_ISSET_ID = 1;
  private static final int __ITEMTUPLEID_ISSET_ID = 2;
  private static final int __BYTEOFFSET_ISSET_ID = 3;
  private static final int __NULLINDICATORBYTE_ISSET_ID = 4;
  private static final int __NULLINDICATORBIT_ISSET_ID = 5;
  private static final int __SLOTIDX_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ITEM_TUPLE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSlotId")));
    tmpMap.put(_Fields.PARENT, new org.apache.thrift.meta_data.FieldMetaData("parent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.ITEM_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("itemTupleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.SLOT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("slotType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumnType.class)));
    tmpMap.put(_Fields.MATERIALIZED_PATH, new org.apache.thrift.meta_data.FieldMetaData("materializedPath", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BYTE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("byteOffset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NULL_INDICATOR_BYTE, new org.apache.thrift.meta_data.FieldMetaData("nullIndicatorByte", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NULL_INDICATOR_BIT, new org.apache.thrift.meta_data.FieldMetaData("nullIndicatorBit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLOT_IDX, new org.apache.thrift.meta_data.FieldMetaData("slotIdx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSlotDescriptor.class, metaDataMap);
  }

  public TSlotDescriptor() {
  }

  public TSlotDescriptor(
    int id,
    int parent,
    org.apache.impala.thrift.TColumnType slotType,
    List<Integer> materializedPath,
    int byteOffset,
    int nullIndicatorByte,
    int nullIndicatorBit,
    int slotIdx)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.parent = parent;
    setParentIsSet(true);
    this.slotType = slotType;
    this.materializedPath = materializedPath;
    this.byteOffset = byteOffset;
    setByteOffsetIsSet(true);
    this.nullIndicatorByte = nullIndicatorByte;
    setNullIndicatorByteIsSet(true);
    this.nullIndicatorBit = nullIndicatorBit;
    setNullIndicatorBitIsSet(true);
    this.slotIdx = slotIdx;
    setSlotIdxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSlotDescriptor(TSlotDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.parent = other.parent;
    this.itemTupleId = other.itemTupleId;
    if (other.isSetSlotType()) {
      this.slotType = new org.apache.impala.thrift.TColumnType(other.slotType);
    }
    if (other.isSetMaterializedPath()) {
      List<Integer> __this__materializedPath = new ArrayList<Integer>(other.materializedPath);
      this.materializedPath = __this__materializedPath;
    }
    this.byteOffset = other.byteOffset;
    this.nullIndicatorByte = other.nullIndicatorByte;
    this.nullIndicatorBit = other.nullIndicatorBit;
    this.slotIdx = other.slotIdx;
  }

  public TSlotDescriptor deepCopy() {
    return new TSlotDescriptor(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setParentIsSet(false);
    this.parent = 0;
    setItemTupleIdIsSet(false);
    this.itemTupleId = 0;
    this.slotType = null;
    this.materializedPath = null;
    setByteOffsetIsSet(false);
    this.byteOffset = 0;
    setNullIndicatorByteIsSet(false);
    this.nullIndicatorByte = 0;
    setNullIndicatorBitIsSet(false);
    this.nullIndicatorBit = 0;
    setSlotIdxIsSet(false);
    this.slotIdx = 0;
  }

  public int getId() {
    return this.id;
  }

  public void setId(int id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getParent() {
    return this.parent;
  }

  public void setParent(int parent) {
    this.parent = parent;
    setParentIsSet(true);
  }

  public void unsetParent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  /** Returns true if field parent is set (has been assigned a value) and false otherwise */
  public boolean isSetParent() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  public void setParentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENT_ISSET_ID, value);
  }

  public int getItemTupleId() {
    return this.itemTupleId;
  }

  public void setItemTupleId(int itemTupleId) {
    this.itemTupleId = itemTupleId;
    setItemTupleIdIsSet(true);
  }

  public void unsetItemTupleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTUPLEID_ISSET_ID);
  }

  /** Returns true if field itemTupleId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemTupleId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMTUPLEID_ISSET_ID);
  }

  public void setItemTupleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTUPLEID_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TColumnType getSlotType() {
    return this.slotType;
  }

  public void setSlotType(org.apache.impala.thrift.TColumnType slotType) {
    this.slotType = slotType;
  }

  public void unsetSlotType() {
    this.slotType = null;
  }

  /** Returns true if field slotType is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotType() {
    return this.slotType != null;
  }

  public void setSlotTypeIsSet(boolean value) {
    if (!value) {
      this.slotType = null;
    }
  }

  public int getMaterializedPathSize() {
    return (this.materializedPath == null) ? 0 : this.materializedPath.size();
  }

  public java.util.Iterator<Integer> getMaterializedPathIterator() {
    return (this.materializedPath == null) ? null : this.materializedPath.iterator();
  }

  public void addToMaterializedPath(int elem) {
    if (this.materializedPath == null) {
      this.materializedPath = new ArrayList<Integer>();
    }
    this.materializedPath.add(elem);
  }

  public List<Integer> getMaterializedPath() {
    return this.materializedPath;
  }

  public void setMaterializedPath(List<Integer> materializedPath) {
    this.materializedPath = materializedPath;
  }

  public void unsetMaterializedPath() {
    this.materializedPath = null;
  }

  /** Returns true if field materializedPath is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterializedPath() {
    return this.materializedPath != null;
  }

  public void setMaterializedPathIsSet(boolean value) {
    if (!value) {
      this.materializedPath = null;
    }
  }

  public int getByteOffset() {
    return this.byteOffset;
  }

  public void setByteOffset(int byteOffset) {
    this.byteOffset = byteOffset;
    setByteOffsetIsSet(true);
  }

  public void unsetByteOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTEOFFSET_ISSET_ID);
  }

  /** Returns true if field byteOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetByteOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTEOFFSET_ISSET_ID);
  }

  public void setByteOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTEOFFSET_ISSET_ID, value);
  }

  public int getNullIndicatorByte() {
    return this.nullIndicatorByte;
  }

  public void setNullIndicatorByte(int nullIndicatorByte) {
    this.nullIndicatorByte = nullIndicatorByte;
    setNullIndicatorByteIsSet(true);
  }

  public void unsetNullIndicatorByte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NULLINDICATORBYTE_ISSET_ID);
  }

  /** Returns true if field nullIndicatorByte is set (has been assigned a value) and false otherwise */
  public boolean isSetNullIndicatorByte() {
    return EncodingUtils.testBit(__isset_bitfield, __NULLINDICATORBYTE_ISSET_ID);
  }

  public void setNullIndicatorByteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NULLINDICATORBYTE_ISSET_ID, value);
  }

  public int getNullIndicatorBit() {
    return this.nullIndicatorBit;
  }

  public void setNullIndicatorBit(int nullIndicatorBit) {
    this.nullIndicatorBit = nullIndicatorBit;
    setNullIndicatorBitIsSet(true);
  }

  public void unsetNullIndicatorBit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NULLINDICATORBIT_ISSET_ID);
  }

  /** Returns true if field nullIndicatorBit is set (has been assigned a value) and false otherwise */
  public boolean isSetNullIndicatorBit() {
    return EncodingUtils.testBit(__isset_bitfield, __NULLINDICATORBIT_ISSET_ID);
  }

  public void setNullIndicatorBitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NULLINDICATORBIT_ISSET_ID, value);
  }

  public int getSlotIdx() {
    return this.slotIdx;
  }

  public void setSlotIdx(int slotIdx) {
    this.slotIdx = slotIdx;
    setSlotIdxIsSet(true);
  }

  public void unsetSlotIdx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLOTIDX_ISSET_ID);
  }

  /** Returns true if field slotIdx is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotIdx() {
    return EncodingUtils.testBit(__isset_bitfield, __SLOTIDX_ISSET_ID);
  }

  public void setSlotIdxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLOTIDX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PARENT:
      if (value == null) {
        unsetParent();
      } else {
        setParent((Integer)value);
      }
      break;

    case ITEM_TUPLE_ID:
      if (value == null) {
        unsetItemTupleId();
      } else {
        setItemTupleId((Integer)value);
      }
      break;

    case SLOT_TYPE:
      if (value == null) {
        unsetSlotType();
      } else {
        setSlotType((org.apache.impala.thrift.TColumnType)value);
      }
      break;

    case MATERIALIZED_PATH:
      if (value == null) {
        unsetMaterializedPath();
      } else {
        setMaterializedPath((List<Integer>)value);
      }
      break;

    case BYTE_OFFSET:
      if (value == null) {
        unsetByteOffset();
      } else {
        setByteOffset((Integer)value);
      }
      break;

    case NULL_INDICATOR_BYTE:
      if (value == null) {
        unsetNullIndicatorByte();
      } else {
        setNullIndicatorByte((Integer)value);
      }
      break;

    case NULL_INDICATOR_BIT:
      if (value == null) {
        unsetNullIndicatorBit();
      } else {
        setNullIndicatorBit((Integer)value);
      }
      break;

    case SLOT_IDX:
      if (value == null) {
        unsetSlotIdx();
      } else {
        setSlotIdx((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PARENT:
      return getParent();

    case ITEM_TUPLE_ID:
      return getItemTupleId();

    case SLOT_TYPE:
      return getSlotType();

    case MATERIALIZED_PATH:
      return getMaterializedPath();

    case BYTE_OFFSET:
      return getByteOffset();

    case NULL_INDICATOR_BYTE:
      return getNullIndicatorByte();

    case NULL_INDICATOR_BIT:
      return getNullIndicatorBit();

    case SLOT_IDX:
      return getSlotIdx();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PARENT:
      return isSetParent();
    case ITEM_TUPLE_ID:
      return isSetItemTupleId();
    case SLOT_TYPE:
      return isSetSlotType();
    case MATERIALIZED_PATH:
      return isSetMaterializedPath();
    case BYTE_OFFSET:
      return isSetByteOffset();
    case NULL_INDICATOR_BYTE:
      return isSetNullIndicatorByte();
    case NULL_INDICATOR_BIT:
      return isSetNullIndicatorBit();
    case SLOT_IDX:
      return isSetSlotIdx();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSlotDescriptor)
      return this.equals((TSlotDescriptor)that);
    return false;
  }

  public boolean equals(TSlotDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_parent = true;
    boolean that_present_parent = true;
    if (this_present_parent || that_present_parent) {
      if (!(this_present_parent && that_present_parent))
        return false;
      if (this.parent != that.parent)
        return false;
    }

    boolean this_present_itemTupleId = true && this.isSetItemTupleId();
    boolean that_present_itemTupleId = true && that.isSetItemTupleId();
    if (this_present_itemTupleId || that_present_itemTupleId) {
      if (!(this_present_itemTupleId && that_present_itemTupleId))
        return false;
      if (this.itemTupleId != that.itemTupleId)
        return false;
    }

    boolean this_present_slotType = true && this.isSetSlotType();
    boolean that_present_slotType = true && that.isSetSlotType();
    if (this_present_slotType || that_present_slotType) {
      if (!(this_present_slotType && that_present_slotType))
        return false;
      if (!this.slotType.equals(that.slotType))
        return false;
    }

    boolean this_present_materializedPath = true && this.isSetMaterializedPath();
    boolean that_present_materializedPath = true && that.isSetMaterializedPath();
    if (this_present_materializedPath || that_present_materializedPath) {
      if (!(this_present_materializedPath && that_present_materializedPath))
        return false;
      if (!this.materializedPath.equals(that.materializedPath))
        return false;
    }

    boolean this_present_byteOffset = true;
    boolean that_present_byteOffset = true;
    if (this_present_byteOffset || that_present_byteOffset) {
      if (!(this_present_byteOffset && that_present_byteOffset))
        return false;
      if (this.byteOffset != that.byteOffset)
        return false;
    }

    boolean this_present_nullIndicatorByte = true;
    boolean that_present_nullIndicatorByte = true;
    if (this_present_nullIndicatorByte || that_present_nullIndicatorByte) {
      if (!(this_present_nullIndicatorByte && that_present_nullIndicatorByte))
        return false;
      if (this.nullIndicatorByte != that.nullIndicatorByte)
        return false;
    }

    boolean this_present_nullIndicatorBit = true;
    boolean that_present_nullIndicatorBit = true;
    if (this_present_nullIndicatorBit || that_present_nullIndicatorBit) {
      if (!(this_present_nullIndicatorBit && that_present_nullIndicatorBit))
        return false;
      if (this.nullIndicatorBit != that.nullIndicatorBit)
        return false;
    }

    boolean this_present_slotIdx = true;
    boolean that_present_slotIdx = true;
    if (this_present_slotIdx || that_present_slotIdx) {
      if (!(this_present_slotIdx && that_present_slotIdx))
        return false;
      if (this.slotIdx != that.slotIdx)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_parent = true;
    list.add(present_parent);
    if (present_parent)
      list.add(parent);

    boolean present_itemTupleId = true && (isSetItemTupleId());
    list.add(present_itemTupleId);
    if (present_itemTupleId)
      list.add(itemTupleId);

    boolean present_slotType = true && (isSetSlotType());
    list.add(present_slotType);
    if (present_slotType)
      list.add(slotType);

    boolean present_materializedPath = true && (isSetMaterializedPath());
    list.add(present_materializedPath);
    if (present_materializedPath)
      list.add(materializedPath);

    boolean present_byteOffset = true;
    list.add(present_byteOffset);
    if (present_byteOffset)
      list.add(byteOffset);

    boolean present_nullIndicatorByte = true;
    list.add(present_nullIndicatorByte);
    if (present_nullIndicatorByte)
      list.add(nullIndicatorByte);

    boolean present_nullIndicatorBit = true;
    list.add(present_nullIndicatorBit);
    if (present_nullIndicatorBit)
      list.add(nullIndicatorBit);

    boolean present_slotIdx = true;
    list.add(present_slotIdx);
    if (present_slotIdx)
      list.add(slotIdx);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSlotDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParent()).compareTo(other.isSetParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent, other.parent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemTupleId()).compareTo(other.isSetItemTupleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemTupleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemTupleId, other.itemTupleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlotType()).compareTo(other.isSetSlotType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slotType, other.slotType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaterializedPath()).compareTo(other.isSetMaterializedPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterializedPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materializedPath, other.materializedPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteOffset()).compareTo(other.isSetByteOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteOffset, other.byteOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNullIndicatorByte()).compareTo(other.isSetNullIndicatorByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullIndicatorByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullIndicatorByte, other.nullIndicatorByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNullIndicatorBit()).compareTo(other.isSetNullIndicatorBit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullIndicatorBit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullIndicatorBit, other.nullIndicatorBit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlotIdx()).compareTo(other.isSetSlotIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slotIdx, other.slotIdx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSlotDescriptor(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parent:");
    sb.append(this.parent);
    first = false;
    if (isSetItemTupleId()) {
      if (!first) sb.append(", ");
      sb.append("itemTupleId:");
      sb.append(this.itemTupleId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("slotType:");
    if (this.slotType == null) {
      sb.append("null");
    } else {
      sb.append(this.slotType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("materializedPath:");
    if (this.materializedPath == null) {
      sb.append("null");
    } else {
      sb.append(this.materializedPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteOffset:");
    sb.append(this.byteOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nullIndicatorByte:");
    sb.append(this.nullIndicatorByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nullIndicatorBit:");
    sb.append(this.nullIndicatorBit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slotIdx:");
    sb.append(this.slotIdx);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!isSetParent()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parent' is unset! Struct:" + toString());
    }

    if (!isSetSlotType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'slotType' is unset! Struct:" + toString());
    }

    if (!isSetMaterializedPath()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'materializedPath' is unset! Struct:" + toString());
    }

    if (!isSetByteOffset()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'byteOffset' is unset! Struct:" + toString());
    }

    if (!isSetNullIndicatorByte()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nullIndicatorByte' is unset! Struct:" + toString());
    }

    if (!isSetNullIndicatorBit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nullIndicatorBit' is unset! Struct:" + toString());
    }

    if (!isSetSlotIdx()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'slotIdx' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (slotType != null) {
      slotType.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSlotDescriptorStandardSchemeFactory implements SchemeFactory {
    public TSlotDescriptorStandardScheme getScheme() {
      return new TSlotDescriptorStandardScheme();
    }
  }

  private static class TSlotDescriptorStandardScheme extends StandardScheme<TSlotDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSlotDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parent = iprot.readI32();
              struct.setParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemTupleId = iprot.readI32();
              struct.setItemTupleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLOT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.slotType = new org.apache.impala.thrift.TColumnType();
              struct.slotType.read(iprot);
              struct.setSlotTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MATERIALIZED_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.materializedPath = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.materializedPath.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMaterializedPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BYTE_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.byteOffset = iprot.readI32();
              struct.setByteOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NULL_INDICATOR_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nullIndicatorByte = iprot.readI32();
              struct.setNullIndicatorByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NULL_INDICATOR_BIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nullIndicatorBit = iprot.readI32();
              struct.setNullIndicatorBitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SLOT_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.slotIdx = iprot.readI32();
              struct.setSlotIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSlotDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_FIELD_DESC);
      oprot.writeI32(struct.parent);
      oprot.writeFieldEnd();
      if (struct.isSetItemTupleId()) {
        oprot.writeFieldBegin(ITEM_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.itemTupleId);
        oprot.writeFieldEnd();
      }
      if (struct.slotType != null) {
        oprot.writeFieldBegin(SLOT_TYPE_FIELD_DESC);
        struct.slotType.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.materializedPath != null) {
        oprot.writeFieldBegin(MATERIALIZED_PATH_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.materializedPath.size()));
          for (int _iter3 : struct.materializedPath)
          {
            oprot.writeI32(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BYTE_OFFSET_FIELD_DESC);
      oprot.writeI32(struct.byteOffset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NULL_INDICATOR_BYTE_FIELD_DESC);
      oprot.writeI32(struct.nullIndicatorByte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NULL_INDICATOR_BIT_FIELD_DESC);
      oprot.writeI32(struct.nullIndicatorBit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SLOT_IDX_FIELD_DESC);
      oprot.writeI32(struct.slotIdx);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSlotDescriptorTupleSchemeFactory implements SchemeFactory {
    public TSlotDescriptorTupleScheme getScheme() {
      return new TSlotDescriptorTupleScheme();
    }
  }

  private static class TSlotDescriptorTupleScheme extends TupleScheme<TSlotDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSlotDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeI32(struct.parent);
      struct.slotType.write(oprot);
      {
        oprot.writeI32(struct.materializedPath.size());
        for (int _iter4 : struct.materializedPath)
        {
          oprot.writeI32(_iter4);
        }
      }
      oprot.writeI32(struct.byteOffset);
      oprot.writeI32(struct.nullIndicatorByte);
      oprot.writeI32(struct.nullIndicatorBit);
      oprot.writeI32(struct.slotIdx);
      BitSet optionals = new BitSet();
      if (struct.isSetItemTupleId()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetItemTupleId()) {
        oprot.writeI32(struct.itemTupleId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSlotDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.parent = iprot.readI32();
      struct.setParentIsSet(true);
      struct.slotType = new org.apache.impala.thrift.TColumnType();
      struct.slotType.read(iprot);
      struct.setSlotTypeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.materializedPath = new ArrayList<Integer>(_list5.size);
        int _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readI32();
          struct.materializedPath.add(_elem6);
        }
      }
      struct.setMaterializedPathIsSet(true);
      struct.byteOffset = iprot.readI32();
      struct.setByteOffsetIsSet(true);
      struct.nullIndicatorByte = iprot.readI32();
      struct.setNullIndicatorByteIsSet(true);
      struct.nullIndicatorBit = iprot.readI32();
      struct.setNullIndicatorBitIsSet(true);
      struct.slotIdx = iprot.readI32();
      struct.setSlotIdxIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.itemTupleId = iprot.readI32();
        struct.setItemTupleIdIsSet(true);
      }
    }
  }

}

