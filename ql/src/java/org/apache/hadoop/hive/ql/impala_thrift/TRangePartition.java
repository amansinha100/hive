/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TRangePartition implements org.apache.thrift.TBase<TRangePartition, TRangePartition._Fields>, java.io.Serializable, Cloneable, Comparable<TRangePartition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRangePartition");

  private static final org.apache.thrift.protocol.TField LOWER_BOUND_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("lower_bound_values", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IS_LOWER_BOUND_INCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_lower_bound_inclusive", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField UPPER_BOUND_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("upper_bound_values", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IS_UPPER_BOUND_INCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_upper_bound_inclusive", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRangePartitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRangePartitionTupleSchemeFactory());
  }

  public List<org.apache.impala.thrift.TExpr> lower_bound_values; // optional
  public boolean is_lower_bound_inclusive; // optional
  public List<org.apache.impala.thrift.TExpr> upper_bound_values; // optional
  public boolean is_upper_bound_inclusive; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOWER_BOUND_VALUES((short)1, "lower_bound_values"),
    IS_LOWER_BOUND_INCLUSIVE((short)2, "is_lower_bound_inclusive"),
    UPPER_BOUND_VALUES((short)3, "upper_bound_values"),
    IS_UPPER_BOUND_INCLUSIVE((short)4, "is_upper_bound_inclusive");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOWER_BOUND_VALUES
          return LOWER_BOUND_VALUES;
        case 2: // IS_LOWER_BOUND_INCLUSIVE
          return IS_LOWER_BOUND_INCLUSIVE;
        case 3: // UPPER_BOUND_VALUES
          return UPPER_BOUND_VALUES;
        case 4: // IS_UPPER_BOUND_INCLUSIVE
          return IS_UPPER_BOUND_INCLUSIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_LOWER_BOUND_INCLUSIVE_ISSET_ID = 0;
  private static final int __IS_UPPER_BOUND_INCLUSIVE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOWER_BOUND_VALUES,_Fields.IS_LOWER_BOUND_INCLUSIVE,_Fields.UPPER_BOUND_VALUES,_Fields.IS_UPPER_BOUND_INCLUSIVE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOWER_BOUND_VALUES, new org.apache.thrift.meta_data.FieldMetaData("lower_bound_values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.IS_LOWER_BOUND_INCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("is_lower_bound_inclusive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UPPER_BOUND_VALUES, new org.apache.thrift.meta_data.FieldMetaData("upper_bound_values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.IS_UPPER_BOUND_INCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("is_upper_bound_inclusive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRangePartition.class, metaDataMap);
  }

  public TRangePartition() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRangePartition(TRangePartition other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLower_bound_values()) {
      List<org.apache.impala.thrift.TExpr> __this__lower_bound_values = new ArrayList<org.apache.impala.thrift.TExpr>(other.lower_bound_values.size());
      for (org.apache.impala.thrift.TExpr other_element : other.lower_bound_values) {
        __this__lower_bound_values.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.lower_bound_values = __this__lower_bound_values;
    }
    this.is_lower_bound_inclusive = other.is_lower_bound_inclusive;
    if (other.isSetUpper_bound_values()) {
      List<org.apache.impala.thrift.TExpr> __this__upper_bound_values = new ArrayList<org.apache.impala.thrift.TExpr>(other.upper_bound_values.size());
      for (org.apache.impala.thrift.TExpr other_element : other.upper_bound_values) {
        __this__upper_bound_values.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.upper_bound_values = __this__upper_bound_values;
    }
    this.is_upper_bound_inclusive = other.is_upper_bound_inclusive;
  }

  public TRangePartition deepCopy() {
    return new TRangePartition(this);
  }

  @Override
  public void clear() {
    this.lower_bound_values = null;
    setIs_lower_bound_inclusiveIsSet(false);
    this.is_lower_bound_inclusive = false;
    this.upper_bound_values = null;
    setIs_upper_bound_inclusiveIsSet(false);
    this.is_upper_bound_inclusive = false;
  }

  public int getLower_bound_valuesSize() {
    return (this.lower_bound_values == null) ? 0 : this.lower_bound_values.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getLower_bound_valuesIterator() {
    return (this.lower_bound_values == null) ? null : this.lower_bound_values.iterator();
  }

  public void addToLower_bound_values(org.apache.impala.thrift.TExpr elem) {
    if (this.lower_bound_values == null) {
      this.lower_bound_values = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.lower_bound_values.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getLower_bound_values() {
    return this.lower_bound_values;
  }

  public TRangePartition setLower_bound_values(List<org.apache.impala.thrift.TExpr> lower_bound_values) {
    this.lower_bound_values = lower_bound_values;
    return this;
  }

  public void unsetLower_bound_values() {
    this.lower_bound_values = null;
  }

  /** Returns true if field lower_bound_values is set (has been assigned a value) and false otherwise */
  public boolean isSetLower_bound_values() {
    return this.lower_bound_values != null;
  }

  public void setLower_bound_valuesIsSet(boolean value) {
    if (!value) {
      this.lower_bound_values = null;
    }
  }

  public boolean isIs_lower_bound_inclusive() {
    return this.is_lower_bound_inclusive;
  }

  public TRangePartition setIs_lower_bound_inclusive(boolean is_lower_bound_inclusive) {
    this.is_lower_bound_inclusive = is_lower_bound_inclusive;
    setIs_lower_bound_inclusiveIsSet(true);
    return this;
  }

  public void unsetIs_lower_bound_inclusive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_LOWER_BOUND_INCLUSIVE_ISSET_ID);
  }

  /** Returns true if field is_lower_bound_inclusive is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_lower_bound_inclusive() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_LOWER_BOUND_INCLUSIVE_ISSET_ID);
  }

  public void setIs_lower_bound_inclusiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_LOWER_BOUND_INCLUSIVE_ISSET_ID, value);
  }

  public int getUpper_bound_valuesSize() {
    return (this.upper_bound_values == null) ? 0 : this.upper_bound_values.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getUpper_bound_valuesIterator() {
    return (this.upper_bound_values == null) ? null : this.upper_bound_values.iterator();
  }

  public void addToUpper_bound_values(org.apache.impala.thrift.TExpr elem) {
    if (this.upper_bound_values == null) {
      this.upper_bound_values = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.upper_bound_values.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getUpper_bound_values() {
    return this.upper_bound_values;
  }

  public TRangePartition setUpper_bound_values(List<org.apache.impala.thrift.TExpr> upper_bound_values) {
    this.upper_bound_values = upper_bound_values;
    return this;
  }

  public void unsetUpper_bound_values() {
    this.upper_bound_values = null;
  }

  /** Returns true if field upper_bound_values is set (has been assigned a value) and false otherwise */
  public boolean isSetUpper_bound_values() {
    return this.upper_bound_values != null;
  }

  public void setUpper_bound_valuesIsSet(boolean value) {
    if (!value) {
      this.upper_bound_values = null;
    }
  }

  public boolean isIs_upper_bound_inclusive() {
    return this.is_upper_bound_inclusive;
  }

  public TRangePartition setIs_upper_bound_inclusive(boolean is_upper_bound_inclusive) {
    this.is_upper_bound_inclusive = is_upper_bound_inclusive;
    setIs_upper_bound_inclusiveIsSet(true);
    return this;
  }

  public void unsetIs_upper_bound_inclusive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_UPPER_BOUND_INCLUSIVE_ISSET_ID);
  }

  /** Returns true if field is_upper_bound_inclusive is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_upper_bound_inclusive() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_UPPER_BOUND_INCLUSIVE_ISSET_ID);
  }

  public void setIs_upper_bound_inclusiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_UPPER_BOUND_INCLUSIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOWER_BOUND_VALUES:
      if (value == null) {
        unsetLower_bound_values();
      } else {
        setLower_bound_values((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case IS_LOWER_BOUND_INCLUSIVE:
      if (value == null) {
        unsetIs_lower_bound_inclusive();
      } else {
        setIs_lower_bound_inclusive((Boolean)value);
      }
      break;

    case UPPER_BOUND_VALUES:
      if (value == null) {
        unsetUpper_bound_values();
      } else {
        setUpper_bound_values((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case IS_UPPER_BOUND_INCLUSIVE:
      if (value == null) {
        unsetIs_upper_bound_inclusive();
      } else {
        setIs_upper_bound_inclusive((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOWER_BOUND_VALUES:
      return getLower_bound_values();

    case IS_LOWER_BOUND_INCLUSIVE:
      return isIs_lower_bound_inclusive();

    case UPPER_BOUND_VALUES:
      return getUpper_bound_values();

    case IS_UPPER_BOUND_INCLUSIVE:
      return isIs_upper_bound_inclusive();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOWER_BOUND_VALUES:
      return isSetLower_bound_values();
    case IS_LOWER_BOUND_INCLUSIVE:
      return isSetIs_lower_bound_inclusive();
    case UPPER_BOUND_VALUES:
      return isSetUpper_bound_values();
    case IS_UPPER_BOUND_INCLUSIVE:
      return isSetIs_upper_bound_inclusive();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRangePartition)
      return this.equals((TRangePartition)that);
    return false;
  }

  public boolean equals(TRangePartition that) {
    if (that == null)
      return false;

    boolean this_present_lower_bound_values = true && this.isSetLower_bound_values();
    boolean that_present_lower_bound_values = true && that.isSetLower_bound_values();
    if (this_present_lower_bound_values || that_present_lower_bound_values) {
      if (!(this_present_lower_bound_values && that_present_lower_bound_values))
        return false;
      if (!this.lower_bound_values.equals(that.lower_bound_values))
        return false;
    }

    boolean this_present_is_lower_bound_inclusive = true && this.isSetIs_lower_bound_inclusive();
    boolean that_present_is_lower_bound_inclusive = true && that.isSetIs_lower_bound_inclusive();
    if (this_present_is_lower_bound_inclusive || that_present_is_lower_bound_inclusive) {
      if (!(this_present_is_lower_bound_inclusive && that_present_is_lower_bound_inclusive))
        return false;
      if (this.is_lower_bound_inclusive != that.is_lower_bound_inclusive)
        return false;
    }

    boolean this_present_upper_bound_values = true && this.isSetUpper_bound_values();
    boolean that_present_upper_bound_values = true && that.isSetUpper_bound_values();
    if (this_present_upper_bound_values || that_present_upper_bound_values) {
      if (!(this_present_upper_bound_values && that_present_upper_bound_values))
        return false;
      if (!this.upper_bound_values.equals(that.upper_bound_values))
        return false;
    }

    boolean this_present_is_upper_bound_inclusive = true && this.isSetIs_upper_bound_inclusive();
    boolean that_present_is_upper_bound_inclusive = true && that.isSetIs_upper_bound_inclusive();
    if (this_present_is_upper_bound_inclusive || that_present_is_upper_bound_inclusive) {
      if (!(this_present_is_upper_bound_inclusive && that_present_is_upper_bound_inclusive))
        return false;
      if (this.is_upper_bound_inclusive != that.is_upper_bound_inclusive)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lower_bound_values = true && (isSetLower_bound_values());
    list.add(present_lower_bound_values);
    if (present_lower_bound_values)
      list.add(lower_bound_values);

    boolean present_is_lower_bound_inclusive = true && (isSetIs_lower_bound_inclusive());
    list.add(present_is_lower_bound_inclusive);
    if (present_is_lower_bound_inclusive)
      list.add(is_lower_bound_inclusive);

    boolean present_upper_bound_values = true && (isSetUpper_bound_values());
    list.add(present_upper_bound_values);
    if (present_upper_bound_values)
      list.add(upper_bound_values);

    boolean present_is_upper_bound_inclusive = true && (isSetIs_upper_bound_inclusive());
    list.add(present_is_upper_bound_inclusive);
    if (present_is_upper_bound_inclusive)
      list.add(is_upper_bound_inclusive);

    return list.hashCode();
  }

  @Override
  public int compareTo(TRangePartition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLower_bound_values()).compareTo(other.isSetLower_bound_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLower_bound_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lower_bound_values, other.lower_bound_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_lower_bound_inclusive()).compareTo(other.isSetIs_lower_bound_inclusive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_lower_bound_inclusive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_lower_bound_inclusive, other.is_lower_bound_inclusive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpper_bound_values()).compareTo(other.isSetUpper_bound_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpper_bound_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upper_bound_values, other.upper_bound_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_upper_bound_inclusive()).compareTo(other.isSetIs_upper_bound_inclusive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_upper_bound_inclusive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_upper_bound_inclusive, other.is_upper_bound_inclusive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRangePartition(");
    boolean first = true;

    if (isSetLower_bound_values()) {
      sb.append("lower_bound_values:");
      if (this.lower_bound_values == null) {
        sb.append("null");
      } else {
        sb.append(this.lower_bound_values);
      }
      first = false;
    }
    if (isSetIs_lower_bound_inclusive()) {
      if (!first) sb.append(", ");
      sb.append("is_lower_bound_inclusive:");
      sb.append(this.is_lower_bound_inclusive);
      first = false;
    }
    if (isSetUpper_bound_values()) {
      if (!first) sb.append(", ");
      sb.append("upper_bound_values:");
      if (this.upper_bound_values == null) {
        sb.append("null");
      } else {
        sb.append(this.upper_bound_values);
      }
      first = false;
    }
    if (isSetIs_upper_bound_inclusive()) {
      if (!first) sb.append(", ");
      sb.append("is_upper_bound_inclusive:");
      sb.append(this.is_upper_bound_inclusive);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRangePartitionStandardSchemeFactory implements SchemeFactory {
    public TRangePartitionStandardScheme getScheme() {
      return new TRangePartitionStandardScheme();
    }
  }

  private static class TRangePartitionStandardScheme extends StandardScheme<TRangePartition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRangePartition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOWER_BOUND_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                struct.lower_bound_values = new ArrayList<org.apache.impala.thrift.TExpr>(_list102.size);
                org.apache.impala.thrift.TExpr _elem103;
                for (int _i104 = 0; _i104 < _list102.size; ++_i104)
                {
                  _elem103 = new org.apache.impala.thrift.TExpr();
                  _elem103.read(iprot);
                  struct.lower_bound_values.add(_elem103);
                }
                iprot.readListEnd();
              }
              struct.setLower_bound_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_LOWER_BOUND_INCLUSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_lower_bound_inclusive = iprot.readBool();
              struct.setIs_lower_bound_inclusiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPPER_BOUND_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list105 = iprot.readListBegin();
                struct.upper_bound_values = new ArrayList<org.apache.impala.thrift.TExpr>(_list105.size);
                org.apache.impala.thrift.TExpr _elem106;
                for (int _i107 = 0; _i107 < _list105.size; ++_i107)
                {
                  _elem106 = new org.apache.impala.thrift.TExpr();
                  _elem106.read(iprot);
                  struct.upper_bound_values.add(_elem106);
                }
                iprot.readListEnd();
              }
              struct.setUpper_bound_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_UPPER_BOUND_INCLUSIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_upper_bound_inclusive = iprot.readBool();
              struct.setIs_upper_bound_inclusiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRangePartition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lower_bound_values != null) {
        if (struct.isSetLower_bound_values()) {
          oprot.writeFieldBegin(LOWER_BOUND_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lower_bound_values.size()));
            for (org.apache.impala.thrift.TExpr _iter108 : struct.lower_bound_values)
            {
              _iter108.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_lower_bound_inclusive()) {
        oprot.writeFieldBegin(IS_LOWER_BOUND_INCLUSIVE_FIELD_DESC);
        oprot.writeBool(struct.is_lower_bound_inclusive);
        oprot.writeFieldEnd();
      }
      if (struct.upper_bound_values != null) {
        if (struct.isSetUpper_bound_values()) {
          oprot.writeFieldBegin(UPPER_BOUND_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.upper_bound_values.size()));
            for (org.apache.impala.thrift.TExpr _iter109 : struct.upper_bound_values)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_upper_bound_inclusive()) {
        oprot.writeFieldBegin(IS_UPPER_BOUND_INCLUSIVE_FIELD_DESC);
        oprot.writeBool(struct.is_upper_bound_inclusive);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRangePartitionTupleSchemeFactory implements SchemeFactory {
    public TRangePartitionTupleScheme getScheme() {
      return new TRangePartitionTupleScheme();
    }
  }

  private static class TRangePartitionTupleScheme extends TupleScheme<TRangePartition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRangePartition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLower_bound_values()) {
        optionals.set(0);
      }
      if (struct.isSetIs_lower_bound_inclusive()) {
        optionals.set(1);
      }
      if (struct.isSetUpper_bound_values()) {
        optionals.set(2);
      }
      if (struct.isSetIs_upper_bound_inclusive()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLower_bound_values()) {
        {
          oprot.writeI32(struct.lower_bound_values.size());
          for (org.apache.impala.thrift.TExpr _iter110 : struct.lower_bound_values)
          {
            _iter110.write(oprot);
          }
        }
      }
      if (struct.isSetIs_lower_bound_inclusive()) {
        oprot.writeBool(struct.is_lower_bound_inclusive);
      }
      if (struct.isSetUpper_bound_values()) {
        {
          oprot.writeI32(struct.upper_bound_values.size());
          for (org.apache.impala.thrift.TExpr _iter111 : struct.upper_bound_values)
          {
            _iter111.write(oprot);
          }
        }
      }
      if (struct.isSetIs_upper_bound_inclusive()) {
        oprot.writeBool(struct.is_upper_bound_inclusive);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRangePartition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list112 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lower_bound_values = new ArrayList<org.apache.impala.thrift.TExpr>(_list112.size);
          org.apache.impala.thrift.TExpr _elem113;
          for (int _i114 = 0; _i114 < _list112.size; ++_i114)
          {
            _elem113 = new org.apache.impala.thrift.TExpr();
            _elem113.read(iprot);
            struct.lower_bound_values.add(_elem113);
          }
        }
        struct.setLower_bound_valuesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.is_lower_bound_inclusive = iprot.readBool();
        struct.setIs_lower_bound_inclusiveIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.upper_bound_values = new ArrayList<org.apache.impala.thrift.TExpr>(_list115.size);
          org.apache.impala.thrift.TExpr _elem116;
          for (int _i117 = 0; _i117 < _list115.size; ++_i117)
          {
            _elem116 = new org.apache.impala.thrift.TExpr();
            _elem116.read(iprot);
            struct.upper_bound_values.add(_elem116);
          }
        }
        struct.setUpper_bound_valuesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_upper_bound_inclusive = iprot.readBool();
        struct.setIs_upper_bound_inclusiveIsSet(true);
      }
    }
  }

}

