/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TUpdateCatalogCacheResponse implements org.apache.thrift.TBase<TUpdateCatalogCacheResponse, TUpdateCatalogCacheResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TUpdateCatalogCacheResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUpdateCatalogCacheResponse");

  private static final org.apache.thrift.protocol.TField CATALOG_SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog_service_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MIN_CATALOG_OBJECT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("min_catalog_object_version", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NEW_CATALOG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("new_catalog_version", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUpdateCatalogCacheResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUpdateCatalogCacheResponseTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TUniqueId catalog_service_id; // required
  private long min_catalog_object_version; // required
  private long new_catalog_version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATALOG_SERVICE_ID((short)1, "catalog_service_id"),
    MIN_CATALOG_OBJECT_VERSION((short)2, "min_catalog_object_version"),
    NEW_CATALOG_VERSION((short)3, "new_catalog_version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATALOG_SERVICE_ID
          return CATALOG_SERVICE_ID;
        case 2: // MIN_CATALOG_OBJECT_VERSION
          return MIN_CATALOG_OBJECT_VERSION;
        case 3: // NEW_CATALOG_VERSION
          return NEW_CATALOG_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MIN_CATALOG_OBJECT_VERSION_ISSET_ID = 0;
  private static final int __NEW_CATALOG_VERSION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATALOG_SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("catalog_service_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.MIN_CATALOG_OBJECT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("min_catalog_object_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEW_CATALOG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("new_catalog_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUpdateCatalogCacheResponse.class, metaDataMap);
  }

  public TUpdateCatalogCacheResponse() {
  }

  public TUpdateCatalogCacheResponse(
    org.apache.impala.thrift.TUniqueId catalog_service_id,
    long min_catalog_object_version,
    long new_catalog_version)
  {
    this();
    this.catalog_service_id = catalog_service_id;
    this.min_catalog_object_version = min_catalog_object_version;
    setMin_catalog_object_versionIsSet(true);
    this.new_catalog_version = new_catalog_version;
    setNew_catalog_versionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUpdateCatalogCacheResponse(TUpdateCatalogCacheResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCatalog_service_id()) {
      this.catalog_service_id = new org.apache.impala.thrift.TUniqueId(other.catalog_service_id);
    }
    this.min_catalog_object_version = other.min_catalog_object_version;
    this.new_catalog_version = other.new_catalog_version;
  }

  public TUpdateCatalogCacheResponse deepCopy() {
    return new TUpdateCatalogCacheResponse(this);
  }

  @Override
  public void clear() {
    this.catalog_service_id = null;
    setMin_catalog_object_versionIsSet(false);
    this.min_catalog_object_version = 0;
    setNew_catalog_versionIsSet(false);
    this.new_catalog_version = 0;
  }

  public org.apache.impala.thrift.TUniqueId getCatalog_service_id() {
    return this.catalog_service_id;
  }

  public void setCatalog_service_id(org.apache.impala.thrift.TUniqueId catalog_service_id) {
    this.catalog_service_id = catalog_service_id;
  }

  public void unsetCatalog_service_id() {
    this.catalog_service_id = null;
  }

  /** Returns true if field catalog_service_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog_service_id() {
    return this.catalog_service_id != null;
  }

  public void setCatalog_service_idIsSet(boolean value) {
    if (!value) {
      this.catalog_service_id = null;
    }
  }

  public long getMin_catalog_object_version() {
    return this.min_catalog_object_version;
  }

  public void setMin_catalog_object_version(long min_catalog_object_version) {
    this.min_catalog_object_version = min_catalog_object_version;
    setMin_catalog_object_versionIsSet(true);
  }

  public void unsetMin_catalog_object_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_CATALOG_OBJECT_VERSION_ISSET_ID);
  }

  /** Returns true if field min_catalog_object_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_catalog_object_version() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_CATALOG_OBJECT_VERSION_ISSET_ID);
  }

  public void setMin_catalog_object_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_CATALOG_OBJECT_VERSION_ISSET_ID, value);
  }

  public long getNew_catalog_version() {
    return this.new_catalog_version;
  }

  public void setNew_catalog_version(long new_catalog_version) {
    this.new_catalog_version = new_catalog_version;
    setNew_catalog_versionIsSet(true);
  }

  public void unsetNew_catalog_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEW_CATALOG_VERSION_ISSET_ID);
  }

  /** Returns true if field new_catalog_version is set (has been assigned a value) and false otherwise */
  public boolean isSetNew_catalog_version() {
    return EncodingUtils.testBit(__isset_bitfield, __NEW_CATALOG_VERSION_ISSET_ID);
  }

  public void setNew_catalog_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEW_CATALOG_VERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATALOG_SERVICE_ID:
      if (value == null) {
        unsetCatalog_service_id();
      } else {
        setCatalog_service_id((org.apache.impala.thrift.TUniqueId)value);
      }
      break;

    case MIN_CATALOG_OBJECT_VERSION:
      if (value == null) {
        unsetMin_catalog_object_version();
      } else {
        setMin_catalog_object_version((Long)value);
      }
      break;

    case NEW_CATALOG_VERSION:
      if (value == null) {
        unsetNew_catalog_version();
      } else {
        setNew_catalog_version((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATALOG_SERVICE_ID:
      return getCatalog_service_id();

    case MIN_CATALOG_OBJECT_VERSION:
      return getMin_catalog_object_version();

    case NEW_CATALOG_VERSION:
      return getNew_catalog_version();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATALOG_SERVICE_ID:
      return isSetCatalog_service_id();
    case MIN_CATALOG_OBJECT_VERSION:
      return isSetMin_catalog_object_version();
    case NEW_CATALOG_VERSION:
      return isSetNew_catalog_version();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUpdateCatalogCacheResponse)
      return this.equals((TUpdateCatalogCacheResponse)that);
    return false;
  }

  public boolean equals(TUpdateCatalogCacheResponse that) {
    if (that == null)
      return false;

    boolean this_present_catalog_service_id = true && this.isSetCatalog_service_id();
    boolean that_present_catalog_service_id = true && that.isSetCatalog_service_id();
    if (this_present_catalog_service_id || that_present_catalog_service_id) {
      if (!(this_present_catalog_service_id && that_present_catalog_service_id))
        return false;
      if (!this.catalog_service_id.equals(that.catalog_service_id))
        return false;
    }

    boolean this_present_min_catalog_object_version = true;
    boolean that_present_min_catalog_object_version = true;
    if (this_present_min_catalog_object_version || that_present_min_catalog_object_version) {
      if (!(this_present_min_catalog_object_version && that_present_min_catalog_object_version))
        return false;
      if (this.min_catalog_object_version != that.min_catalog_object_version)
        return false;
    }

    boolean this_present_new_catalog_version = true;
    boolean that_present_new_catalog_version = true;
    if (this_present_new_catalog_version || that_present_new_catalog_version) {
      if (!(this_present_new_catalog_version && that_present_new_catalog_version))
        return false;
      if (this.new_catalog_version != that.new_catalog_version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_catalog_service_id = true && (isSetCatalog_service_id());
    list.add(present_catalog_service_id);
    if (present_catalog_service_id)
      list.add(catalog_service_id);

    boolean present_min_catalog_object_version = true;
    list.add(present_min_catalog_object_version);
    if (present_min_catalog_object_version)
      list.add(min_catalog_object_version);

    boolean present_new_catalog_version = true;
    list.add(present_new_catalog_version);
    if (present_new_catalog_version)
      list.add(new_catalog_version);

    return list.hashCode();
  }

  @Override
  public int compareTo(TUpdateCatalogCacheResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCatalog_service_id()).compareTo(other.isSetCatalog_service_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog_service_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog_service_id, other.catalog_service_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_catalog_object_version()).compareTo(other.isSetMin_catalog_object_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_catalog_object_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_catalog_object_version, other.min_catalog_object_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNew_catalog_version()).compareTo(other.isSetNew_catalog_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNew_catalog_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_catalog_version, other.new_catalog_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUpdateCatalogCacheResponse(");
    boolean first = true;

    sb.append("catalog_service_id:");
    if (this.catalog_service_id == null) {
      sb.append("null");
    } else {
      sb.append(this.catalog_service_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_catalog_object_version:");
    sb.append(this.min_catalog_object_version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("new_catalog_version:");
    sb.append(this.new_catalog_version);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetCatalog_service_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'catalog_service_id' is unset! Struct:" + toString());
    }

    if (!isSetMin_catalog_object_version()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'min_catalog_object_version' is unset! Struct:" + toString());
    }

    if (!isSetNew_catalog_version()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'new_catalog_version' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (catalog_service_id != null) {
      catalog_service_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUpdateCatalogCacheResponseStandardSchemeFactory implements SchemeFactory {
    public TUpdateCatalogCacheResponseStandardScheme getScheme() {
      return new TUpdateCatalogCacheResponseStandardScheme();
    }
  }

  private static class TUpdateCatalogCacheResponseStandardScheme extends StandardScheme<TUpdateCatalogCacheResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUpdateCatalogCacheResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATALOG_SERVICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.catalog_service_id = new org.apache.impala.thrift.TUniqueId();
              struct.catalog_service_id.read(iprot);
              struct.setCatalog_service_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN_CATALOG_OBJECT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_catalog_object_version = iprot.readI64();
              struct.setMin_catalog_object_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEW_CATALOG_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.new_catalog_version = iprot.readI64();
              struct.setNew_catalog_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUpdateCatalogCacheResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.catalog_service_id != null) {
        oprot.writeFieldBegin(CATALOG_SERVICE_ID_FIELD_DESC);
        struct.catalog_service_id.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_CATALOG_OBJECT_VERSION_FIELD_DESC);
      oprot.writeI64(struct.min_catalog_object_version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_CATALOG_VERSION_FIELD_DESC);
      oprot.writeI64(struct.new_catalog_version);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUpdateCatalogCacheResponseTupleSchemeFactory implements SchemeFactory {
    public TUpdateCatalogCacheResponseTupleScheme getScheme() {
      return new TUpdateCatalogCacheResponseTupleScheme();
    }
  }

  private static class TUpdateCatalogCacheResponseTupleScheme extends TupleScheme<TUpdateCatalogCacheResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUpdateCatalogCacheResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.catalog_service_id.write(oprot);
      oprot.writeI64(struct.min_catalog_object_version);
      oprot.writeI64(struct.new_catalog_version);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUpdateCatalogCacheResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.catalog_service_id = new org.apache.impala.thrift.TUniqueId();
      struct.catalog_service_id.read(iprot);
      struct.setCatalog_service_idIsSet(true);
      struct.min_catalog_object_version = iprot.readI64();
      struct.setMin_catalog_object_versionIsSet(true);
      struct.new_catalog_version = iprot.readI64();
      struct.setNew_catalog_versionIsSet(true);
    }
  }

}

