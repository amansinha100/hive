/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TGrantRevokePrivParams implements org.apache.thrift.TBase<TGrantRevokePrivParams, TGrantRevokePrivParams._Fields>, java.io.Serializable, Cloneable, Comparable<TGrantRevokePrivParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGrantRevokePrivParams");

  private static final org.apache.thrift.protocol.TField PRIVILEGES_FIELD_DESC = new org.apache.thrift.protocol.TField("privileges", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("principal_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_GRANT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_grant", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField HAS_GRANT_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("has_grant_opt", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("principal_type", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGrantRevokePrivParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGrantRevokePrivParamsTupleSchemeFactory());
  }

  public List<org.apache.impala.thrift.TPrivilege> privileges; // required
  public String principal_name; // required
  public boolean is_grant; // required
  public boolean has_grant_opt; // required
  /**
   * 
   * @see org.apache.impala.thrift.TPrincipalType
   */
  public org.apache.impala.thrift.TPrincipalType principal_type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRIVILEGES((short)1, "privileges"),
    PRINCIPAL_NAME((short)2, "principal_name"),
    IS_GRANT((short)3, "is_grant"),
    HAS_GRANT_OPT((short)4, "has_grant_opt"),
    /**
     * 
     * @see org.apache.impala.thrift.TPrincipalType
     */
    PRINCIPAL_TYPE((short)5, "principal_type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRIVILEGES
          return PRIVILEGES;
        case 2: // PRINCIPAL_NAME
          return PRINCIPAL_NAME;
        case 3: // IS_GRANT
          return IS_GRANT;
        case 4: // HAS_GRANT_OPT
          return HAS_GRANT_OPT;
        case 5: // PRINCIPAL_TYPE
          return PRINCIPAL_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_GRANT_ISSET_ID = 0;
  private static final int __HAS_GRANT_OPT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRIVILEGES, new org.apache.thrift.meta_data.FieldMetaData("privileges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TPrivilege.class))));
    tmpMap.put(_Fields.PRINCIPAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("principal_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_GRANT, new org.apache.thrift.meta_data.FieldMetaData("is_grant", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_GRANT_OPT, new org.apache.thrift.meta_data.FieldMetaData("has_grant_opt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRINCIPAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("principal_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TPrincipalType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGrantRevokePrivParams.class, metaDataMap);
  }

  public TGrantRevokePrivParams() {
  }

  public TGrantRevokePrivParams(
    List<org.apache.impala.thrift.TPrivilege> privileges,
    String principal_name,
    boolean is_grant,
    boolean has_grant_opt,
    org.apache.impala.thrift.TPrincipalType principal_type)
  {
    this();
    this.privileges = privileges;
    this.principal_name = principal_name;
    this.is_grant = is_grant;
    setIs_grantIsSet(true);
    this.has_grant_opt = has_grant_opt;
    setHas_grant_optIsSet(true);
    this.principal_type = principal_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGrantRevokePrivParams(TGrantRevokePrivParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPrivileges()) {
      List<org.apache.impala.thrift.TPrivilege> __this__privileges = new ArrayList<org.apache.impala.thrift.TPrivilege>(other.privileges.size());
      for (org.apache.impala.thrift.TPrivilege other_element : other.privileges) {
        __this__privileges.add(new org.apache.impala.thrift.TPrivilege(other_element));
      }
      this.privileges = __this__privileges;
    }
    if (other.isSetPrincipal_name()) {
      this.principal_name = other.principal_name;
    }
    this.is_grant = other.is_grant;
    this.has_grant_opt = other.has_grant_opt;
    if (other.isSetPrincipal_type()) {
      this.principal_type = other.principal_type;
    }
  }

  public TGrantRevokePrivParams deepCopy() {
    return new TGrantRevokePrivParams(this);
  }

  @Override
  public void clear() {
    this.privileges = null;
    this.principal_name = null;
    setIs_grantIsSet(false);
    this.is_grant = false;
    setHas_grant_optIsSet(false);
    this.has_grant_opt = false;
    this.principal_type = null;
  }

  public int getPrivilegesSize() {
    return (this.privileges == null) ? 0 : this.privileges.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TPrivilege> getPrivilegesIterator() {
    return (this.privileges == null) ? null : this.privileges.iterator();
  }

  public void addToPrivileges(org.apache.impala.thrift.TPrivilege elem) {
    if (this.privileges == null) {
      this.privileges = new ArrayList<org.apache.impala.thrift.TPrivilege>();
    }
    this.privileges.add(elem);
  }

  public List<org.apache.impala.thrift.TPrivilege> getPrivileges() {
    return this.privileges;
  }

  public TGrantRevokePrivParams setPrivileges(List<org.apache.impala.thrift.TPrivilege> privileges) {
    this.privileges = privileges;
    return this;
  }

  public void unsetPrivileges() {
    this.privileges = null;
  }

  /** Returns true if field privileges is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivileges() {
    return this.privileges != null;
  }

  public void setPrivilegesIsSet(boolean value) {
    if (!value) {
      this.privileges = null;
    }
  }

  public String getPrincipal_name() {
    return this.principal_name;
  }

  public TGrantRevokePrivParams setPrincipal_name(String principal_name) {
    this.principal_name = principal_name;
    return this;
  }

  public void unsetPrincipal_name() {
    this.principal_name = null;
  }

  /** Returns true if field principal_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal_name() {
    return this.principal_name != null;
  }

  public void setPrincipal_nameIsSet(boolean value) {
    if (!value) {
      this.principal_name = null;
    }
  }

  public boolean isIs_grant() {
    return this.is_grant;
  }

  public TGrantRevokePrivParams setIs_grant(boolean is_grant) {
    this.is_grant = is_grant;
    setIs_grantIsSet(true);
    return this;
  }

  public void unsetIs_grant() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_GRANT_ISSET_ID);
  }

  /** Returns true if field is_grant is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_grant() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_GRANT_ISSET_ID);
  }

  public void setIs_grantIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_GRANT_ISSET_ID, value);
  }

  public boolean isHas_grant_opt() {
    return this.has_grant_opt;
  }

  public TGrantRevokePrivParams setHas_grant_opt(boolean has_grant_opt) {
    this.has_grant_opt = has_grant_opt;
    setHas_grant_optIsSet(true);
    return this;
  }

  public void unsetHas_grant_opt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAS_GRANT_OPT_ISSET_ID);
  }

  /** Returns true if field has_grant_opt is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_grant_opt() {
    return EncodingUtils.testBit(__isset_bitfield, __HAS_GRANT_OPT_ISSET_ID);
  }

  public void setHas_grant_optIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAS_GRANT_OPT_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.impala.thrift.TPrincipalType
   */
  public org.apache.impala.thrift.TPrincipalType getPrincipal_type() {
    return this.principal_type;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TPrincipalType
   */
  public TGrantRevokePrivParams setPrincipal_type(org.apache.impala.thrift.TPrincipalType principal_type) {
    this.principal_type = principal_type;
    return this;
  }

  public void unsetPrincipal_type() {
    this.principal_type = null;
  }

  /** Returns true if field principal_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal_type() {
    return this.principal_type != null;
  }

  public void setPrincipal_typeIsSet(boolean value) {
    if (!value) {
      this.principal_type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRIVILEGES:
      if (value == null) {
        unsetPrivileges();
      } else {
        setPrivileges((List<org.apache.impala.thrift.TPrivilege>)value);
      }
      break;

    case PRINCIPAL_NAME:
      if (value == null) {
        unsetPrincipal_name();
      } else {
        setPrincipal_name((String)value);
      }
      break;

    case IS_GRANT:
      if (value == null) {
        unsetIs_grant();
      } else {
        setIs_grant((Boolean)value);
      }
      break;

    case HAS_GRANT_OPT:
      if (value == null) {
        unsetHas_grant_opt();
      } else {
        setHas_grant_opt((Boolean)value);
      }
      break;

    case PRINCIPAL_TYPE:
      if (value == null) {
        unsetPrincipal_type();
      } else {
        setPrincipal_type((org.apache.impala.thrift.TPrincipalType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRIVILEGES:
      return getPrivileges();

    case PRINCIPAL_NAME:
      return getPrincipal_name();

    case IS_GRANT:
      return isIs_grant();

    case HAS_GRANT_OPT:
      return isHas_grant_opt();

    case PRINCIPAL_TYPE:
      return getPrincipal_type();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRIVILEGES:
      return isSetPrivileges();
    case PRINCIPAL_NAME:
      return isSetPrincipal_name();
    case IS_GRANT:
      return isSetIs_grant();
    case HAS_GRANT_OPT:
      return isSetHas_grant_opt();
    case PRINCIPAL_TYPE:
      return isSetPrincipal_type();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGrantRevokePrivParams)
      return this.equals((TGrantRevokePrivParams)that);
    return false;
  }

  public boolean equals(TGrantRevokePrivParams that) {
    if (that == null)
      return false;

    boolean this_present_privileges = true && this.isSetPrivileges();
    boolean that_present_privileges = true && that.isSetPrivileges();
    if (this_present_privileges || that_present_privileges) {
      if (!(this_present_privileges && that_present_privileges))
        return false;
      if (!this.privileges.equals(that.privileges))
        return false;
    }

    boolean this_present_principal_name = true && this.isSetPrincipal_name();
    boolean that_present_principal_name = true && that.isSetPrincipal_name();
    if (this_present_principal_name || that_present_principal_name) {
      if (!(this_present_principal_name && that_present_principal_name))
        return false;
      if (!this.principal_name.equals(that.principal_name))
        return false;
    }

    boolean this_present_is_grant = true;
    boolean that_present_is_grant = true;
    if (this_present_is_grant || that_present_is_grant) {
      if (!(this_present_is_grant && that_present_is_grant))
        return false;
      if (this.is_grant != that.is_grant)
        return false;
    }

    boolean this_present_has_grant_opt = true;
    boolean that_present_has_grant_opt = true;
    if (this_present_has_grant_opt || that_present_has_grant_opt) {
      if (!(this_present_has_grant_opt && that_present_has_grant_opt))
        return false;
      if (this.has_grant_opt != that.has_grant_opt)
        return false;
    }

    boolean this_present_principal_type = true && this.isSetPrincipal_type();
    boolean that_present_principal_type = true && that.isSetPrincipal_type();
    if (this_present_principal_type || that_present_principal_type) {
      if (!(this_present_principal_type && that_present_principal_type))
        return false;
      if (!this.principal_type.equals(that.principal_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_privileges = true && (isSetPrivileges());
    list.add(present_privileges);
    if (present_privileges)
      list.add(privileges);

    boolean present_principal_name = true && (isSetPrincipal_name());
    list.add(present_principal_name);
    if (present_principal_name)
      list.add(principal_name);

    boolean present_is_grant = true;
    list.add(present_is_grant);
    if (present_is_grant)
      list.add(is_grant);

    boolean present_has_grant_opt = true;
    list.add(present_has_grant_opt);
    if (present_has_grant_opt)
      list.add(has_grant_opt);

    boolean present_principal_type = true && (isSetPrincipal_type());
    list.add(present_principal_type);
    if (present_principal_type)
      list.add(principal_type.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TGrantRevokePrivParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPrivileges()).compareTo(other.isSetPrivileges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivileges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privileges, other.privileges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal_name()).compareTo(other.isSetPrincipal_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal_name, other.principal_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_grant()).compareTo(other.isSetIs_grant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_grant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_grant, other.is_grant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_grant_opt()).compareTo(other.isSetHas_grant_opt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_grant_opt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_grant_opt, other.has_grant_opt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal_type()).compareTo(other.isSetPrincipal_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal_type, other.principal_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGrantRevokePrivParams(");
    boolean first = true;

    sb.append("privileges:");
    if (this.privileges == null) {
      sb.append("null");
    } else {
      sb.append(this.privileges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal_name:");
    if (this.principal_name == null) {
      sb.append("null");
    } else {
      sb.append(this.principal_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_grant:");
    sb.append(this.is_grant);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_grant_opt:");
    sb.append(this.has_grant_opt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal_type:");
    if (this.principal_type == null) {
      sb.append("null");
    } else {
      sb.append(this.principal_type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (privileges == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'privileges' was not present! Struct: " + toString());
    }
    if (principal_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'principal_name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_grant' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'has_grant_opt' because it's a primitive and you chose the non-beans generator.
    if (principal_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'principal_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGrantRevokePrivParamsStandardSchemeFactory implements SchemeFactory {
    public TGrantRevokePrivParamsStandardScheme getScheme() {
      return new TGrantRevokePrivParamsStandardScheme();
    }
  }

  private static class TGrantRevokePrivParamsStandardScheme extends StandardScheme<TGrantRevokePrivParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGrantRevokePrivParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRIVILEGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list290 = iprot.readListBegin();
                struct.privileges = new ArrayList<org.apache.impala.thrift.TPrivilege>(_list290.size);
                org.apache.impala.thrift.TPrivilege _elem291;
                for (int _i292 = 0; _i292 < _list290.size; ++_i292)
                {
                  _elem291 = new org.apache.impala.thrift.TPrivilege();
                  _elem291.read(iprot);
                  struct.privileges.add(_elem291);
                }
                iprot.readListEnd();
              }
              struct.setPrivilegesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRINCIPAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.principal_name = iprot.readString();
              struct.setPrincipal_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_GRANT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_grant = iprot.readBool();
              struct.setIs_grantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HAS_GRANT_OPT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_grant_opt = iprot.readBool();
              struct.setHas_grant_optIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRINCIPAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.principal_type = org.apache.impala.thrift.TPrincipalType.findByValue(iprot.readI32());
              struct.setPrincipal_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIs_grant()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_grant' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHas_grant_opt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'has_grant_opt' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGrantRevokePrivParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.privileges != null) {
        oprot.writeFieldBegin(PRIVILEGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.privileges.size()));
          for (org.apache.impala.thrift.TPrivilege _iter293 : struct.privileges)
          {
            _iter293.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.principal_name != null) {
        oprot.writeFieldBegin(PRINCIPAL_NAME_FIELD_DESC);
        oprot.writeString(struct.principal_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_GRANT_FIELD_DESC);
      oprot.writeBool(struct.is_grant);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_GRANT_OPT_FIELD_DESC);
      oprot.writeBool(struct.has_grant_opt);
      oprot.writeFieldEnd();
      if (struct.principal_type != null) {
        oprot.writeFieldBegin(PRINCIPAL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.principal_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGrantRevokePrivParamsTupleSchemeFactory implements SchemeFactory {
    public TGrantRevokePrivParamsTupleScheme getScheme() {
      return new TGrantRevokePrivParamsTupleScheme();
    }
  }

  private static class TGrantRevokePrivParamsTupleScheme extends TupleScheme<TGrantRevokePrivParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGrantRevokePrivParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.privileges.size());
        for (org.apache.impala.thrift.TPrivilege _iter294 : struct.privileges)
        {
          _iter294.write(oprot);
        }
      }
      oprot.writeString(struct.principal_name);
      oprot.writeBool(struct.is_grant);
      oprot.writeBool(struct.has_grant_opt);
      oprot.writeI32(struct.principal_type.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGrantRevokePrivParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list295 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.privileges = new ArrayList<org.apache.impala.thrift.TPrivilege>(_list295.size);
        org.apache.impala.thrift.TPrivilege _elem296;
        for (int _i297 = 0; _i297 < _list295.size; ++_i297)
        {
          _elem296 = new org.apache.impala.thrift.TPrivilege();
          _elem296.read(iprot);
          struct.privileges.add(_elem296);
        }
      }
      struct.setPrivilegesIsSet(true);
      struct.principal_name = iprot.readString();
      struct.setPrincipal_nameIsSet(true);
      struct.is_grant = iprot.readBool();
      struct.setIs_grantIsSet(true);
      struct.has_grant_opt = iprot.readBool();
      struct.setHas_grant_optIsSet(true);
      struct.principal_type = org.apache.impala.thrift.TPrincipalType.findByValue(iprot.readI32());
      struct.setPrincipal_typeIsSet(true);
    }
  }

}

