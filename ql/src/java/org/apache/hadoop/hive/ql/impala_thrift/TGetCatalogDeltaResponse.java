/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TGetCatalogDeltaResponse implements org.apache.thrift.TBase<TGetCatalogDeltaResponse, TGetCatalogDeltaResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TGetCatalogDeltaResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetCatalogDeltaResponse");

  private static final org.apache.thrift.protocol.TField MAX_CATALOG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_catalog_version", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField UPDATED_OBJECTS_DEPRECATED_FIELD_DESC = new org.apache.thrift.protocol.TField("updated_objects_deprecated", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DELETED_OBJECTS_DEPRECATED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted_objects_deprecated", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGetCatalogDeltaResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGetCatalogDeltaResponseTupleSchemeFactory());
  }

  private long max_catalog_version; // required
  private List<org.apache.impala.thrift.TCatalogObject> updated_objects_deprecated; // optional
  private List<org.apache.impala.thrift.TCatalogObject> deleted_objects_deprecated; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_CATALOG_VERSION((short)1, "max_catalog_version"),
    UPDATED_OBJECTS_DEPRECATED((short)2, "updated_objects_deprecated"),
    DELETED_OBJECTS_DEPRECATED((short)3, "deleted_objects_deprecated");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_CATALOG_VERSION
          return MAX_CATALOG_VERSION;
        case 2: // UPDATED_OBJECTS_DEPRECATED
          return UPDATED_OBJECTS_DEPRECATED;
        case 3: // DELETED_OBJECTS_DEPRECATED
          return DELETED_OBJECTS_DEPRECATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_CATALOG_VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.UPDATED_OBJECTS_DEPRECATED,_Fields.DELETED_OBJECTS_DEPRECATED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_CATALOG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("max_catalog_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATED_OBJECTS_DEPRECATED, new org.apache.thrift.meta_data.FieldMetaData("updated_objects_deprecated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCatalogObject.class))));
    tmpMap.put(_Fields.DELETED_OBJECTS_DEPRECATED, new org.apache.thrift.meta_data.FieldMetaData("deleted_objects_deprecated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCatalogObject.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetCatalogDeltaResponse.class, metaDataMap);
  }

  public TGetCatalogDeltaResponse() {
  }

  public TGetCatalogDeltaResponse(
    long max_catalog_version)
  {
    this();
    this.max_catalog_version = max_catalog_version;
    setMax_catalog_versionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetCatalogDeltaResponse(TGetCatalogDeltaResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.max_catalog_version = other.max_catalog_version;
    if (other.isSetUpdated_objects_deprecated()) {
      List<org.apache.impala.thrift.TCatalogObject> __this__updated_objects_deprecated = new ArrayList<org.apache.impala.thrift.TCatalogObject>(other.updated_objects_deprecated.size());
      for (org.apache.impala.thrift.TCatalogObject other_element : other.updated_objects_deprecated) {
        __this__updated_objects_deprecated.add(new org.apache.impala.thrift.TCatalogObject(other_element));
      }
      this.updated_objects_deprecated = __this__updated_objects_deprecated;
    }
    if (other.isSetDeleted_objects_deprecated()) {
      List<org.apache.impala.thrift.TCatalogObject> __this__deleted_objects_deprecated = new ArrayList<org.apache.impala.thrift.TCatalogObject>(other.deleted_objects_deprecated.size());
      for (org.apache.impala.thrift.TCatalogObject other_element : other.deleted_objects_deprecated) {
        __this__deleted_objects_deprecated.add(new org.apache.impala.thrift.TCatalogObject(other_element));
      }
      this.deleted_objects_deprecated = __this__deleted_objects_deprecated;
    }
  }

  public TGetCatalogDeltaResponse deepCopy() {
    return new TGetCatalogDeltaResponse(this);
  }

  @Override
  public void clear() {
    setMax_catalog_versionIsSet(false);
    this.max_catalog_version = 0;
    this.updated_objects_deprecated = null;
    this.deleted_objects_deprecated = null;
  }

  public long getMax_catalog_version() {
    return this.max_catalog_version;
  }

  public void setMax_catalog_version(long max_catalog_version) {
    this.max_catalog_version = max_catalog_version;
    setMax_catalog_versionIsSet(true);
  }

  public void unsetMax_catalog_version() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_CATALOG_VERSION_ISSET_ID);
  }

  /** Returns true if field max_catalog_version is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_catalog_version() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_CATALOG_VERSION_ISSET_ID);
  }

  public void setMax_catalog_versionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_CATALOG_VERSION_ISSET_ID, value);
  }

  public int getUpdated_objects_deprecatedSize() {
    return (this.updated_objects_deprecated == null) ? 0 : this.updated_objects_deprecated.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TCatalogObject> getUpdated_objects_deprecatedIterator() {
    return (this.updated_objects_deprecated == null) ? null : this.updated_objects_deprecated.iterator();
  }

  public void addToUpdated_objects_deprecated(org.apache.impala.thrift.TCatalogObject elem) {
    if (this.updated_objects_deprecated == null) {
      this.updated_objects_deprecated = new ArrayList<org.apache.impala.thrift.TCatalogObject>();
    }
    this.updated_objects_deprecated.add(elem);
  }

  public List<org.apache.impala.thrift.TCatalogObject> getUpdated_objects_deprecated() {
    return this.updated_objects_deprecated;
  }

  public void setUpdated_objects_deprecated(List<org.apache.impala.thrift.TCatalogObject> updated_objects_deprecated) {
    this.updated_objects_deprecated = updated_objects_deprecated;
  }

  public void unsetUpdated_objects_deprecated() {
    this.updated_objects_deprecated = null;
  }

  /** Returns true if field updated_objects_deprecated is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdated_objects_deprecated() {
    return this.updated_objects_deprecated != null;
  }

  public void setUpdated_objects_deprecatedIsSet(boolean value) {
    if (!value) {
      this.updated_objects_deprecated = null;
    }
  }

  public int getDeleted_objects_deprecatedSize() {
    return (this.deleted_objects_deprecated == null) ? 0 : this.deleted_objects_deprecated.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TCatalogObject> getDeleted_objects_deprecatedIterator() {
    return (this.deleted_objects_deprecated == null) ? null : this.deleted_objects_deprecated.iterator();
  }

  public void addToDeleted_objects_deprecated(org.apache.impala.thrift.TCatalogObject elem) {
    if (this.deleted_objects_deprecated == null) {
      this.deleted_objects_deprecated = new ArrayList<org.apache.impala.thrift.TCatalogObject>();
    }
    this.deleted_objects_deprecated.add(elem);
  }

  public List<org.apache.impala.thrift.TCatalogObject> getDeleted_objects_deprecated() {
    return this.deleted_objects_deprecated;
  }

  public void setDeleted_objects_deprecated(List<org.apache.impala.thrift.TCatalogObject> deleted_objects_deprecated) {
    this.deleted_objects_deprecated = deleted_objects_deprecated;
  }

  public void unsetDeleted_objects_deprecated() {
    this.deleted_objects_deprecated = null;
  }

  /** Returns true if field deleted_objects_deprecated is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted_objects_deprecated() {
    return this.deleted_objects_deprecated != null;
  }

  public void setDeleted_objects_deprecatedIsSet(boolean value) {
    if (!value) {
      this.deleted_objects_deprecated = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_CATALOG_VERSION:
      if (value == null) {
        unsetMax_catalog_version();
      } else {
        setMax_catalog_version((Long)value);
      }
      break;

    case UPDATED_OBJECTS_DEPRECATED:
      if (value == null) {
        unsetUpdated_objects_deprecated();
      } else {
        setUpdated_objects_deprecated((List<org.apache.impala.thrift.TCatalogObject>)value);
      }
      break;

    case DELETED_OBJECTS_DEPRECATED:
      if (value == null) {
        unsetDeleted_objects_deprecated();
      } else {
        setDeleted_objects_deprecated((List<org.apache.impala.thrift.TCatalogObject>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_CATALOG_VERSION:
      return getMax_catalog_version();

    case UPDATED_OBJECTS_DEPRECATED:
      return getUpdated_objects_deprecated();

    case DELETED_OBJECTS_DEPRECATED:
      return getDeleted_objects_deprecated();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_CATALOG_VERSION:
      return isSetMax_catalog_version();
    case UPDATED_OBJECTS_DEPRECATED:
      return isSetUpdated_objects_deprecated();
    case DELETED_OBJECTS_DEPRECATED:
      return isSetDeleted_objects_deprecated();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGetCatalogDeltaResponse)
      return this.equals((TGetCatalogDeltaResponse)that);
    return false;
  }

  public boolean equals(TGetCatalogDeltaResponse that) {
    if (that == null)
      return false;

    boolean this_present_max_catalog_version = true;
    boolean that_present_max_catalog_version = true;
    if (this_present_max_catalog_version || that_present_max_catalog_version) {
      if (!(this_present_max_catalog_version && that_present_max_catalog_version))
        return false;
      if (this.max_catalog_version != that.max_catalog_version)
        return false;
    }

    boolean this_present_updated_objects_deprecated = true && this.isSetUpdated_objects_deprecated();
    boolean that_present_updated_objects_deprecated = true && that.isSetUpdated_objects_deprecated();
    if (this_present_updated_objects_deprecated || that_present_updated_objects_deprecated) {
      if (!(this_present_updated_objects_deprecated && that_present_updated_objects_deprecated))
        return false;
      if (!this.updated_objects_deprecated.equals(that.updated_objects_deprecated))
        return false;
    }

    boolean this_present_deleted_objects_deprecated = true && this.isSetDeleted_objects_deprecated();
    boolean that_present_deleted_objects_deprecated = true && that.isSetDeleted_objects_deprecated();
    if (this_present_deleted_objects_deprecated || that_present_deleted_objects_deprecated) {
      if (!(this_present_deleted_objects_deprecated && that_present_deleted_objects_deprecated))
        return false;
      if (!this.deleted_objects_deprecated.equals(that.deleted_objects_deprecated))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_max_catalog_version = true;
    list.add(present_max_catalog_version);
    if (present_max_catalog_version)
      list.add(max_catalog_version);

    boolean present_updated_objects_deprecated = true && (isSetUpdated_objects_deprecated());
    list.add(present_updated_objects_deprecated);
    if (present_updated_objects_deprecated)
      list.add(updated_objects_deprecated);

    boolean present_deleted_objects_deprecated = true && (isSetDeleted_objects_deprecated());
    list.add(present_deleted_objects_deprecated);
    if (present_deleted_objects_deprecated)
      list.add(deleted_objects_deprecated);

    return list.hashCode();
  }

  @Override
  public int compareTo(TGetCatalogDeltaResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMax_catalog_version()).compareTo(other.isSetMax_catalog_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_catalog_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_catalog_version, other.max_catalog_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdated_objects_deprecated()).compareTo(other.isSetUpdated_objects_deprecated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdated_objects_deprecated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updated_objects_deprecated, other.updated_objects_deprecated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted_objects_deprecated()).compareTo(other.isSetDeleted_objects_deprecated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted_objects_deprecated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted_objects_deprecated, other.deleted_objects_deprecated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGetCatalogDeltaResponse(");
    boolean first = true;

    sb.append("max_catalog_version:");
    sb.append(this.max_catalog_version);
    first = false;
    if (isSetUpdated_objects_deprecated()) {
      if (!first) sb.append(", ");
      sb.append("updated_objects_deprecated:");
      if (this.updated_objects_deprecated == null) {
        sb.append("null");
      } else {
        sb.append(this.updated_objects_deprecated);
      }
      first = false;
    }
    if (isSetDeleted_objects_deprecated()) {
      if (!first) sb.append(", ");
      sb.append("deleted_objects_deprecated:");
      if (this.deleted_objects_deprecated == null) {
        sb.append("null");
      } else {
        sb.append(this.deleted_objects_deprecated);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetMax_catalog_version()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_catalog_version' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetCatalogDeltaResponseStandardSchemeFactory implements SchemeFactory {
    public TGetCatalogDeltaResponseStandardScheme getScheme() {
      return new TGetCatalogDeltaResponseStandardScheme();
    }
  }

  private static class TGetCatalogDeltaResponseStandardScheme extends StandardScheme<TGetCatalogDeltaResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetCatalogDeltaResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_CATALOG_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_catalog_version = iprot.readI64();
              struct.setMax_catalog_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UPDATED_OBJECTS_DEPRECATED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.updated_objects_deprecated = new ArrayList<org.apache.impala.thrift.TCatalogObject>(_list0.size);
                org.apache.impala.thrift.TCatalogObject _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new org.apache.impala.thrift.TCatalogObject();
                  _elem1.read(iprot);
                  struct.updated_objects_deprecated.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUpdated_objects_deprecatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELETED_OBJECTS_DEPRECATED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.deleted_objects_deprecated = new ArrayList<org.apache.impala.thrift.TCatalogObject>(_list3.size);
                org.apache.impala.thrift.TCatalogObject _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new org.apache.impala.thrift.TCatalogObject();
                  _elem4.read(iprot);
                  struct.deleted_objects_deprecated.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDeleted_objects_deprecatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetCatalogDeltaResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_CATALOG_VERSION_FIELD_DESC);
      oprot.writeI64(struct.max_catalog_version);
      oprot.writeFieldEnd();
      if (struct.updated_objects_deprecated != null) {
        if (struct.isSetUpdated_objects_deprecated()) {
          oprot.writeFieldBegin(UPDATED_OBJECTS_DEPRECATED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.updated_objects_deprecated.size()));
            for (org.apache.impala.thrift.TCatalogObject _iter6 : struct.updated_objects_deprecated)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.deleted_objects_deprecated != null) {
        if (struct.isSetDeleted_objects_deprecated()) {
          oprot.writeFieldBegin(DELETED_OBJECTS_DEPRECATED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.deleted_objects_deprecated.size()));
            for (org.apache.impala.thrift.TCatalogObject _iter7 : struct.deleted_objects_deprecated)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetCatalogDeltaResponseTupleSchemeFactory implements SchemeFactory {
    public TGetCatalogDeltaResponseTupleScheme getScheme() {
      return new TGetCatalogDeltaResponseTupleScheme();
    }
  }

  private static class TGetCatalogDeltaResponseTupleScheme extends TupleScheme<TGetCatalogDeltaResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetCatalogDeltaResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.max_catalog_version);
      BitSet optionals = new BitSet();
      if (struct.isSetUpdated_objects_deprecated()) {
        optionals.set(0);
      }
      if (struct.isSetDeleted_objects_deprecated()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUpdated_objects_deprecated()) {
        {
          oprot.writeI32(struct.updated_objects_deprecated.size());
          for (org.apache.impala.thrift.TCatalogObject _iter8 : struct.updated_objects_deprecated)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetDeleted_objects_deprecated()) {
        {
          oprot.writeI32(struct.deleted_objects_deprecated.size());
          for (org.apache.impala.thrift.TCatalogObject _iter9 : struct.deleted_objects_deprecated)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetCatalogDeltaResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.max_catalog_version = iprot.readI64();
      struct.setMax_catalog_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.updated_objects_deprecated = new ArrayList<org.apache.impala.thrift.TCatalogObject>(_list10.size);
          org.apache.impala.thrift.TCatalogObject _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new org.apache.impala.thrift.TCatalogObject();
            _elem11.read(iprot);
            struct.updated_objects_deprecated.add(_elem11);
          }
        }
        struct.setUpdated_objects_deprecatedIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.deleted_objects_deprecated = new ArrayList<org.apache.impala.thrift.TCatalogObject>(_list13.size);
          org.apache.impala.thrift.TCatalogObject _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new org.apache.impala.thrift.TCatalogObject();
            _elem14.read(iprot);
            struct.deleted_objects_deprecated.add(_elem14);
          }
        }
        struct.setDeleted_objects_deprecatedIsSet(true);
      }
    }
  }

}

