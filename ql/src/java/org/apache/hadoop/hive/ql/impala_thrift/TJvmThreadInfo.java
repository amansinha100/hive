/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TJvmThreadInfo implements org.apache.thrift.TBase<TJvmThreadInfo, TJvmThreadInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TJvmThreadInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJvmThreadInfo");

  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CPU_TIME_IN_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_time_in_ns", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField USER_TIME_IN_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("user_time_in_ns", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BLOCKED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("blocked_count", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BLOCKED_TIME_IN_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("blocked_time_in_ms", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IS_IN_NATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_in_native", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TJvmThreadInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TJvmThreadInfoTupleSchemeFactory());
  }

  private String summary; // required
  private long cpu_time_in_ns; // required
  private long user_time_in_ns; // required
  private long blocked_count; // required
  private long blocked_time_in_ms; // required
  private boolean is_in_native; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUMMARY((short)1, "summary"),
    CPU_TIME_IN_NS((short)2, "cpu_time_in_ns"),
    USER_TIME_IN_NS((short)3, "user_time_in_ns"),
    BLOCKED_COUNT((short)4, "blocked_count"),
    BLOCKED_TIME_IN_MS((short)5, "blocked_time_in_ms"),
    IS_IN_NATIVE((short)6, "is_in_native");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUMMARY
          return SUMMARY;
        case 2: // CPU_TIME_IN_NS
          return CPU_TIME_IN_NS;
        case 3: // USER_TIME_IN_NS
          return USER_TIME_IN_NS;
        case 4: // BLOCKED_COUNT
          return BLOCKED_COUNT;
        case 5: // BLOCKED_TIME_IN_MS
          return BLOCKED_TIME_IN_MS;
        case 6: // IS_IN_NATIVE
          return IS_IN_NATIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPU_TIME_IN_NS_ISSET_ID = 0;
  private static final int __USER_TIME_IN_NS_ISSET_ID = 1;
  private static final int __BLOCKED_COUNT_ISSET_ID = 2;
  private static final int __BLOCKED_TIME_IN_MS_ISSET_ID = 3;
  private static final int __IS_IN_NATIVE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_TIME_IN_NS, new org.apache.thrift.meta_data.FieldMetaData("cpu_time_in_ns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_TIME_IN_NS, new org.apache.thrift.meta_data.FieldMetaData("user_time_in_ns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCKED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("blocked_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCKED_TIME_IN_MS, new org.apache.thrift.meta_data.FieldMetaData("blocked_time_in_ms", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_IN_NATIVE, new org.apache.thrift.meta_data.FieldMetaData("is_in_native", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJvmThreadInfo.class, metaDataMap);
  }

  public TJvmThreadInfo() {
  }

  public TJvmThreadInfo(
    String summary,
    long cpu_time_in_ns,
    long user_time_in_ns,
    long blocked_count,
    long blocked_time_in_ms,
    boolean is_in_native)
  {
    this();
    this.summary = summary;
    this.cpu_time_in_ns = cpu_time_in_ns;
    setCpu_time_in_nsIsSet(true);
    this.user_time_in_ns = user_time_in_ns;
    setUser_time_in_nsIsSet(true);
    this.blocked_count = blocked_count;
    setBlocked_countIsSet(true);
    this.blocked_time_in_ms = blocked_time_in_ms;
    setBlocked_time_in_msIsSet(true);
    this.is_in_native = is_in_native;
    setIs_in_nativeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TJvmThreadInfo(TJvmThreadInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSummary()) {
      this.summary = other.summary;
    }
    this.cpu_time_in_ns = other.cpu_time_in_ns;
    this.user_time_in_ns = other.user_time_in_ns;
    this.blocked_count = other.blocked_count;
    this.blocked_time_in_ms = other.blocked_time_in_ms;
    this.is_in_native = other.is_in_native;
  }

  public TJvmThreadInfo deepCopy() {
    return new TJvmThreadInfo(this);
  }

  @Override
  public void clear() {
    this.summary = null;
    setCpu_time_in_nsIsSet(false);
    this.cpu_time_in_ns = 0;
    setUser_time_in_nsIsSet(false);
    this.user_time_in_ns = 0;
    setBlocked_countIsSet(false);
    this.blocked_count = 0;
    setBlocked_time_in_msIsSet(false);
    this.blocked_time_in_ms = 0;
    setIs_in_nativeIsSet(false);
    this.is_in_native = false;
  }

  public String getSummary() {
    return this.summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }

  public void unsetSummary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary() {
    return this.summary != null;
  }

  public void setSummaryIsSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public long getCpu_time_in_ns() {
    return this.cpu_time_in_ns;
  }

  public void setCpu_time_in_ns(long cpu_time_in_ns) {
    this.cpu_time_in_ns = cpu_time_in_ns;
    setCpu_time_in_nsIsSet(true);
  }

  public void unsetCpu_time_in_ns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPU_TIME_IN_NS_ISSET_ID);
  }

  /** Returns true if field cpu_time_in_ns is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_time_in_ns() {
    return EncodingUtils.testBit(__isset_bitfield, __CPU_TIME_IN_NS_ISSET_ID);
  }

  public void setCpu_time_in_nsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPU_TIME_IN_NS_ISSET_ID, value);
  }

  public long getUser_time_in_ns() {
    return this.user_time_in_ns;
  }

  public void setUser_time_in_ns(long user_time_in_ns) {
    this.user_time_in_ns = user_time_in_ns;
    setUser_time_in_nsIsSet(true);
  }

  public void unsetUser_time_in_ns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_TIME_IN_NS_ISSET_ID);
  }

  /** Returns true if field user_time_in_ns is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_time_in_ns() {
    return EncodingUtils.testBit(__isset_bitfield, __USER_TIME_IN_NS_ISSET_ID);
  }

  public void setUser_time_in_nsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_TIME_IN_NS_ISSET_ID, value);
  }

  public long getBlocked_count() {
    return this.blocked_count;
  }

  public void setBlocked_count(long blocked_count) {
    this.blocked_count = blocked_count;
    setBlocked_countIsSet(true);
  }

  public void unsetBlocked_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKED_COUNT_ISSET_ID);
  }

  /** Returns true if field blocked_count is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocked_count() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKED_COUNT_ISSET_ID);
  }

  public void setBlocked_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKED_COUNT_ISSET_ID, value);
  }

  public long getBlocked_time_in_ms() {
    return this.blocked_time_in_ms;
  }

  public void setBlocked_time_in_ms(long blocked_time_in_ms) {
    this.blocked_time_in_ms = blocked_time_in_ms;
    setBlocked_time_in_msIsSet(true);
  }

  public void unsetBlocked_time_in_ms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKED_TIME_IN_MS_ISSET_ID);
  }

  /** Returns true if field blocked_time_in_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetBlocked_time_in_ms() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCKED_TIME_IN_MS_ISSET_ID);
  }

  public void setBlocked_time_in_msIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKED_TIME_IN_MS_ISSET_ID, value);
  }

  public boolean isIs_in_native() {
    return this.is_in_native;
  }

  public void setIs_in_native(boolean is_in_native) {
    this.is_in_native = is_in_native;
    setIs_in_nativeIsSet(true);
  }

  public void unsetIs_in_native() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_IN_NATIVE_ISSET_ID);
  }

  /** Returns true if field is_in_native is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_in_native() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_IN_NATIVE_ISSET_ID);
  }

  public void setIs_in_nativeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_IN_NATIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUMMARY:
      if (value == null) {
        unsetSummary();
      } else {
        setSummary((String)value);
      }
      break;

    case CPU_TIME_IN_NS:
      if (value == null) {
        unsetCpu_time_in_ns();
      } else {
        setCpu_time_in_ns((Long)value);
      }
      break;

    case USER_TIME_IN_NS:
      if (value == null) {
        unsetUser_time_in_ns();
      } else {
        setUser_time_in_ns((Long)value);
      }
      break;

    case BLOCKED_COUNT:
      if (value == null) {
        unsetBlocked_count();
      } else {
        setBlocked_count((Long)value);
      }
      break;

    case BLOCKED_TIME_IN_MS:
      if (value == null) {
        unsetBlocked_time_in_ms();
      } else {
        setBlocked_time_in_ms((Long)value);
      }
      break;

    case IS_IN_NATIVE:
      if (value == null) {
        unsetIs_in_native();
      } else {
        setIs_in_native((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUMMARY:
      return getSummary();

    case CPU_TIME_IN_NS:
      return getCpu_time_in_ns();

    case USER_TIME_IN_NS:
      return getUser_time_in_ns();

    case BLOCKED_COUNT:
      return getBlocked_count();

    case BLOCKED_TIME_IN_MS:
      return getBlocked_time_in_ms();

    case IS_IN_NATIVE:
      return isIs_in_native();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUMMARY:
      return isSetSummary();
    case CPU_TIME_IN_NS:
      return isSetCpu_time_in_ns();
    case USER_TIME_IN_NS:
      return isSetUser_time_in_ns();
    case BLOCKED_COUNT:
      return isSetBlocked_count();
    case BLOCKED_TIME_IN_MS:
      return isSetBlocked_time_in_ms();
    case IS_IN_NATIVE:
      return isSetIs_in_native();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TJvmThreadInfo)
      return this.equals((TJvmThreadInfo)that);
    return false;
  }

  public boolean equals(TJvmThreadInfo that) {
    if (that == null)
      return false;

    boolean this_present_summary = true && this.isSetSummary();
    boolean that_present_summary = true && that.isSetSummary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    boolean this_present_cpu_time_in_ns = true;
    boolean that_present_cpu_time_in_ns = true;
    if (this_present_cpu_time_in_ns || that_present_cpu_time_in_ns) {
      if (!(this_present_cpu_time_in_ns && that_present_cpu_time_in_ns))
        return false;
      if (this.cpu_time_in_ns != that.cpu_time_in_ns)
        return false;
    }

    boolean this_present_user_time_in_ns = true;
    boolean that_present_user_time_in_ns = true;
    if (this_present_user_time_in_ns || that_present_user_time_in_ns) {
      if (!(this_present_user_time_in_ns && that_present_user_time_in_ns))
        return false;
      if (this.user_time_in_ns != that.user_time_in_ns)
        return false;
    }

    boolean this_present_blocked_count = true;
    boolean that_present_blocked_count = true;
    if (this_present_blocked_count || that_present_blocked_count) {
      if (!(this_present_blocked_count && that_present_blocked_count))
        return false;
      if (this.blocked_count != that.blocked_count)
        return false;
    }

    boolean this_present_blocked_time_in_ms = true;
    boolean that_present_blocked_time_in_ms = true;
    if (this_present_blocked_time_in_ms || that_present_blocked_time_in_ms) {
      if (!(this_present_blocked_time_in_ms && that_present_blocked_time_in_ms))
        return false;
      if (this.blocked_time_in_ms != that.blocked_time_in_ms)
        return false;
    }

    boolean this_present_is_in_native = true;
    boolean that_present_is_in_native = true;
    if (this_present_is_in_native || that_present_is_in_native) {
      if (!(this_present_is_in_native && that_present_is_in_native))
        return false;
      if (this.is_in_native != that.is_in_native)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_summary = true && (isSetSummary());
    list.add(present_summary);
    if (present_summary)
      list.add(summary);

    boolean present_cpu_time_in_ns = true;
    list.add(present_cpu_time_in_ns);
    if (present_cpu_time_in_ns)
      list.add(cpu_time_in_ns);

    boolean present_user_time_in_ns = true;
    list.add(present_user_time_in_ns);
    if (present_user_time_in_ns)
      list.add(user_time_in_ns);

    boolean present_blocked_count = true;
    list.add(present_blocked_count);
    if (present_blocked_count)
      list.add(blocked_count);

    boolean present_blocked_time_in_ms = true;
    list.add(present_blocked_time_in_ms);
    if (present_blocked_time_in_ms)
      list.add(blocked_time_in_ms);

    boolean present_is_in_native = true;
    list.add(present_is_in_native);
    if (present_is_in_native)
      list.add(is_in_native);

    return list.hashCode();
  }

  @Override
  public int compareTo(TJvmThreadInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSummary()).compareTo(other.isSetSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, other.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpu_time_in_ns()).compareTo(other.isSetCpu_time_in_ns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_time_in_ns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_time_in_ns, other.cpu_time_in_ns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_time_in_ns()).compareTo(other.isSetUser_time_in_ns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_time_in_ns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_time_in_ns, other.user_time_in_ns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocked_count()).compareTo(other.isSetBlocked_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocked_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocked_count, other.blocked_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlocked_time_in_ms()).compareTo(other.isSetBlocked_time_in_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlocked_time_in_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocked_time_in_ms, other.blocked_time_in_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_in_native()).compareTo(other.isSetIs_in_native());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_in_native()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_in_native, other.is_in_native);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TJvmThreadInfo(");
    boolean first = true;

    sb.append("summary:");
    if (this.summary == null) {
      sb.append("null");
    } else {
      sb.append(this.summary);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpu_time_in_ns:");
    sb.append(this.cpu_time_in_ns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_time_in_ns:");
    sb.append(this.user_time_in_ns);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocked_count:");
    sb.append(this.blocked_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blocked_time_in_ms:");
    sb.append(this.blocked_time_in_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_in_native:");
    sb.append(this.is_in_native);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetSummary()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'summary' is unset! Struct:" + toString());
    }

    if (!isSetCpu_time_in_ns()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpu_time_in_ns' is unset! Struct:" + toString());
    }

    if (!isSetUser_time_in_ns()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user_time_in_ns' is unset! Struct:" + toString());
    }

    if (!isSetBlocked_count()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocked_count' is unset! Struct:" + toString());
    }

    if (!isSetBlocked_time_in_ms()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blocked_time_in_ms' is unset! Struct:" + toString());
    }

    if (!isSetIs_in_native()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_in_native' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TJvmThreadInfoStandardSchemeFactory implements SchemeFactory {
    public TJvmThreadInfoStandardScheme getScheme() {
      return new TJvmThreadInfoStandardScheme();
    }
  }

  private static class TJvmThreadInfoStandardScheme extends StandardScheme<TJvmThreadInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TJvmThreadInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary = iprot.readString();
              struct.setSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPU_TIME_IN_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpu_time_in_ns = iprot.readI64();
              struct.setCpu_time_in_nsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_TIME_IN_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.user_time_in_ns = iprot.readI64();
              struct.setUser_time_in_nsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BLOCKED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blocked_count = iprot.readI64();
              struct.setBlocked_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BLOCKED_TIME_IN_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blocked_time_in_ms = iprot.readI64();
              struct.setBlocked_time_in_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_IN_NATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_in_native = iprot.readBool();
              struct.setIs_in_nativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TJvmThreadInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.summary != null) {
        oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
        oprot.writeString(struct.summary);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPU_TIME_IN_NS_FIELD_DESC);
      oprot.writeI64(struct.cpu_time_in_ns);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_TIME_IN_NS_FIELD_DESC);
      oprot.writeI64(struct.user_time_in_ns);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCKED_COUNT_FIELD_DESC);
      oprot.writeI64(struct.blocked_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCKED_TIME_IN_MS_FIELD_DESC);
      oprot.writeI64(struct.blocked_time_in_ms);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_IN_NATIVE_FIELD_DESC);
      oprot.writeBool(struct.is_in_native);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TJvmThreadInfoTupleSchemeFactory implements SchemeFactory {
    public TJvmThreadInfoTupleScheme getScheme() {
      return new TJvmThreadInfoTupleScheme();
    }
  }

  private static class TJvmThreadInfoTupleScheme extends TupleScheme<TJvmThreadInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TJvmThreadInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.summary);
      oprot.writeI64(struct.cpu_time_in_ns);
      oprot.writeI64(struct.user_time_in_ns);
      oprot.writeI64(struct.blocked_count);
      oprot.writeI64(struct.blocked_time_in_ms);
      oprot.writeBool(struct.is_in_native);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TJvmThreadInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.summary = iprot.readString();
      struct.setSummaryIsSet(true);
      struct.cpu_time_in_ns = iprot.readI64();
      struct.setCpu_time_in_nsIsSet(true);
      struct.user_time_in_ns = iprot.readI64();
      struct.setUser_time_in_nsIsSet(true);
      struct.blocked_count = iprot.readI64();
      struct.setBlocked_countIsSet(true);
      struct.blocked_time_in_ms = iprot.readI64();
      struct.setBlocked_time_in_msIsSet(true);
      struct.is_in_native = iprot.readBool();
      struct.setIs_in_nativeIsSet(true);
    }
  }

}

