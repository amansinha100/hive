/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TCreateTableParams implements org.apache.thrift.TBase<TCreateTableParams, TCreateTableParams._Fields>, java.io.Serializable, Cloneable, Comparable<TCreateTableParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateTableParams");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_columns", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_format", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_EXTERNAL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_external", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IF_NOT_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_not_exists", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ROW_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("row_format", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TABLE_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("table_properties", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField SERDE_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("serde_properties", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField CACHE_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("cache_op", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField PARTITION_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_by", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField PRIMARY_KEY_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("primary_key_column_names", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField SORT_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_columns", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("server_name", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField SORTING_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sorting_order", org.apache.thrift.protocol.TType.I32, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCreateTableParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCreateTableParamsTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TTableName table_name; // required
  private List<org.apache.impala.thrift.TColumn> columns; // required
  private List<org.apache.impala.thrift.TColumn> partition_columns; // optional
  private org.apache.impala.thrift.THdfsFileFormat file_format; // required
  private boolean is_external; // required
  private boolean if_not_exists; // required
  private String owner; // required
  private TTableRowFormat row_format; // optional
  private String comment; // optional
  private String location; // optional
  private Map<String,String> table_properties; // optional
  private Map<String,String> serde_properties; // optional
  private THdfsCachingOp cache_op; // optional
  private List<org.apache.impala.thrift.TKuduPartitionParam> partition_by; // optional
  private List<String> primary_key_column_names; // optional
  private List<String> sort_columns; // optional
  private String server_name; // optional
  private org.apache.impala.thrift.TSortingOrder sorting_order; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    COLUMNS((short)2, "columns"),
    PARTITION_COLUMNS((short)3, "partition_columns"),
    /**
     * 
     * @see org.apache.impala.thrift.THdfsFileFormat
     */
    FILE_FORMAT((short)4, "file_format"),
    IS_EXTERNAL((short)5, "is_external"),
    IF_NOT_EXISTS((short)6, "if_not_exists"),
    OWNER((short)7, "owner"),
    ROW_FORMAT((short)8, "row_format"),
    COMMENT((short)9, "comment"),
    LOCATION((short)10, "location"),
    TABLE_PROPERTIES((short)11, "table_properties"),
    SERDE_PROPERTIES((short)12, "serde_properties"),
    CACHE_OP((short)13, "cache_op"),
    PARTITION_BY((short)14, "partition_by"),
    PRIMARY_KEY_COLUMN_NAMES((short)15, "primary_key_column_names"),
    SORT_COLUMNS((short)16, "sort_columns"),
    SERVER_NAME((short)17, "server_name"),
    /**
     * 
     * @see org.apache.impala.thrift.TSortingOrder
     */
    SORTING_ORDER((short)18, "sorting_order");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // COLUMNS
          return COLUMNS;
        case 3: // PARTITION_COLUMNS
          return PARTITION_COLUMNS;
        case 4: // FILE_FORMAT
          return FILE_FORMAT;
        case 5: // IS_EXTERNAL
          return IS_EXTERNAL;
        case 6: // IF_NOT_EXISTS
          return IF_NOT_EXISTS;
        case 7: // OWNER
          return OWNER;
        case 8: // ROW_FORMAT
          return ROW_FORMAT;
        case 9: // COMMENT
          return COMMENT;
        case 10: // LOCATION
          return LOCATION;
        case 11: // TABLE_PROPERTIES
          return TABLE_PROPERTIES;
        case 12: // SERDE_PROPERTIES
          return SERDE_PROPERTIES;
        case 13: // CACHE_OP
          return CACHE_OP;
        case 14: // PARTITION_BY
          return PARTITION_BY;
        case 15: // PRIMARY_KEY_COLUMN_NAMES
          return PRIMARY_KEY_COLUMN_NAMES;
        case 16: // SORT_COLUMNS
          return SORT_COLUMNS;
        case 17: // SERVER_NAME
          return SERVER_NAME;
        case 18: // SORTING_ORDER
          return SORTING_ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_EXTERNAL_ISSET_ID = 0;
  private static final int __IF_NOT_EXISTS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARTITION_COLUMNS,_Fields.ROW_FORMAT,_Fields.COMMENT,_Fields.LOCATION,_Fields.TABLE_PROPERTIES,_Fields.SERDE_PROPERTIES,_Fields.CACHE_OP,_Fields.PARTITION_BY,_Fields.PRIMARY_KEY_COLUMN_NAMES,_Fields.SORT_COLUMNS,_Fields.SERVER_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumn.class))));
    tmpMap.put(_Fields.PARTITION_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("partition_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumn.class))));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("file_format", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.THdfsFileFormat.class)));
    tmpMap.put(_Fields.IS_EXTERNAL, new org.apache.thrift.meta_data.FieldMetaData("is_external", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IF_NOT_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_not_exists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("row_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableRowFormat.class)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("table_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SERDE_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("serde_properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CACHE_OP, new org.apache.thrift.meta_data.FieldMetaData("cache_op", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsCachingOp.class)));
    tmpMap.put(_Fields.PARTITION_BY, new org.apache.thrift.meta_data.FieldMetaData("partition_by", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TKuduPartitionParam.class))));
    tmpMap.put(_Fields.PRIMARY_KEY_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("primary_key_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SORT_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("sort_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("server_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORTING_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sorting_order", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TSortingOrder.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateTableParams.class, metaDataMap);
  }

  public TCreateTableParams() {
  }

  public TCreateTableParams(
    org.apache.impala.thrift.TTableName table_name,
    List<org.apache.impala.thrift.TColumn> columns,
    org.apache.impala.thrift.THdfsFileFormat file_format,
    boolean is_external,
    boolean if_not_exists,
    String owner,
    org.apache.impala.thrift.TSortingOrder sorting_order)
  {
    this();
    this.table_name = table_name;
    this.columns = columns;
    this.file_format = file_format;
    this.is_external = is_external;
    setIs_externalIsSet(true);
    this.if_not_exists = if_not_exists;
    setIf_not_existsIsSet(true);
    this.owner = owner;
    this.sorting_order = sorting_order;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateTableParams(TCreateTableParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_name()) {
      this.table_name = new org.apache.impala.thrift.TTableName(other.table_name);
    }
    if (other.isSetColumns()) {
      List<org.apache.impala.thrift.TColumn> __this__columns = new ArrayList<org.apache.impala.thrift.TColumn>(other.columns.size());
      for (org.apache.impala.thrift.TColumn other_element : other.columns) {
        __this__columns.add(new org.apache.impala.thrift.TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetPartition_columns()) {
      List<org.apache.impala.thrift.TColumn> __this__partition_columns = new ArrayList<org.apache.impala.thrift.TColumn>(other.partition_columns.size());
      for (org.apache.impala.thrift.TColumn other_element : other.partition_columns) {
        __this__partition_columns.add(new org.apache.impala.thrift.TColumn(other_element));
      }
      this.partition_columns = __this__partition_columns;
    }
    if (other.isSetFile_format()) {
      this.file_format = other.file_format;
    }
    this.is_external = other.is_external;
    this.if_not_exists = other.if_not_exists;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetRow_format()) {
      this.row_format = new TTableRowFormat(other.row_format);
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetTable_properties()) {
      Map<String,String> __this__table_properties = new HashMap<String,String>(other.table_properties);
      this.table_properties = __this__table_properties;
    }
    if (other.isSetSerde_properties()) {
      Map<String,String> __this__serde_properties = new HashMap<String,String>(other.serde_properties);
      this.serde_properties = __this__serde_properties;
    }
    if (other.isSetCache_op()) {
      this.cache_op = new THdfsCachingOp(other.cache_op);
    }
    if (other.isSetPartition_by()) {
      List<org.apache.impala.thrift.TKuduPartitionParam> __this__partition_by = new ArrayList<org.apache.impala.thrift.TKuduPartitionParam>(other.partition_by.size());
      for (org.apache.impala.thrift.TKuduPartitionParam other_element : other.partition_by) {
        __this__partition_by.add(new org.apache.impala.thrift.TKuduPartitionParam(other_element));
      }
      this.partition_by = __this__partition_by;
    }
    if (other.isSetPrimary_key_column_names()) {
      List<String> __this__primary_key_column_names = new ArrayList<String>(other.primary_key_column_names);
      this.primary_key_column_names = __this__primary_key_column_names;
    }
    if (other.isSetSort_columns()) {
      List<String> __this__sort_columns = new ArrayList<String>(other.sort_columns);
      this.sort_columns = __this__sort_columns;
    }
    if (other.isSetServer_name()) {
      this.server_name = other.server_name;
    }
    if (other.isSetSorting_order()) {
      this.sorting_order = other.sorting_order;
    }
  }

  public TCreateTableParams deepCopy() {
    return new TCreateTableParams(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    this.columns = null;
    this.partition_columns = null;
    this.file_format = null;
    setIs_externalIsSet(false);
    this.is_external = false;
    setIf_not_existsIsSet(false);
    this.if_not_exists = false;
    this.owner = null;
    this.row_format = null;
    this.comment = null;
    this.location = null;
    this.table_properties = null;
    this.serde_properties = null;
    this.cache_op = null;
    this.partition_by = null;
    this.primary_key_column_names = null;
    this.sort_columns = null;
    this.server_name = null;
    this.sorting_order = null;
  }

  public org.apache.impala.thrift.TTableName getTable_name() {
    return this.table_name;
  }

  public void setTable_name(org.apache.impala.thrift.TTableName table_name) {
    this.table_name = table_name;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(org.apache.impala.thrift.TColumn elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<org.apache.impala.thrift.TColumn>();
    }
    this.columns.add(elem);
  }

  public List<org.apache.impala.thrift.TColumn> getColumns() {
    return this.columns;
  }

  public void setColumns(List<org.apache.impala.thrift.TColumn> columns) {
    this.columns = columns;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public int getPartition_columnsSize() {
    return (this.partition_columns == null) ? 0 : this.partition_columns.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TColumn> getPartition_columnsIterator() {
    return (this.partition_columns == null) ? null : this.partition_columns.iterator();
  }

  public void addToPartition_columns(org.apache.impala.thrift.TColumn elem) {
    if (this.partition_columns == null) {
      this.partition_columns = new ArrayList<org.apache.impala.thrift.TColumn>();
    }
    this.partition_columns.add(elem);
  }

  public List<org.apache.impala.thrift.TColumn> getPartition_columns() {
    return this.partition_columns;
  }

  public void setPartition_columns(List<org.apache.impala.thrift.TColumn> partition_columns) {
    this.partition_columns = partition_columns;
  }

  public void unsetPartition_columns() {
    this.partition_columns = null;
  }

  /** Returns true if field partition_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_columns() {
    return this.partition_columns != null;
  }

  public void setPartition_columnsIsSet(boolean value) {
    if (!value) {
      this.partition_columns = null;
    }
  }

  /**
   * 
   * @see org.apache.impala.thrift.THdfsFileFormat
   */
  public org.apache.impala.thrift.THdfsFileFormat getFile_format() {
    return this.file_format;
  }

  /**
   * 
   * @see org.apache.impala.thrift.THdfsFileFormat
   */
  public void setFile_format(org.apache.impala.thrift.THdfsFileFormat file_format) {
    this.file_format = file_format;
  }

  public void unsetFile_format() {
    this.file_format = null;
  }

  /** Returns true if field file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_format() {
    return this.file_format != null;
  }

  public void setFile_formatIsSet(boolean value) {
    if (!value) {
      this.file_format = null;
    }
  }

  public boolean isIs_external() {
    return this.is_external;
  }

  public void setIs_external(boolean is_external) {
    this.is_external = is_external;
    setIs_externalIsSet(true);
  }

  public void unsetIs_external() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_EXTERNAL_ISSET_ID);
  }

  /** Returns true if field is_external is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_external() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_EXTERNAL_ISSET_ID);
  }

  public void setIs_externalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_EXTERNAL_ISSET_ID, value);
  }

  public boolean isIf_not_exists() {
    return this.if_not_exists;
  }

  public void setIf_not_exists(boolean if_not_exists) {
    this.if_not_exists = if_not_exists;
    setIf_not_existsIsSet(true);
  }

  public void unsetIf_not_exists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  /** Returns true if field if_not_exists is set (has been assigned a value) and false otherwise */
  public boolean isSetIf_not_exists() {
    return EncodingUtils.testBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  public void setIf_not_existsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID, value);
  }

  public String getOwner() {
    return this.owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public TTableRowFormat getRow_format() {
    return this.row_format;
  }

  public void setRow_format(TTableRowFormat row_format) {
    this.row_format = row_format;
  }

  public void unsetRow_format() {
    this.row_format = null;
  }

  /** Returns true if field row_format is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_format() {
    return this.row_format != null;
  }

  public void setRow_formatIsSet(boolean value) {
    if (!value) {
      this.row_format = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public int getTable_propertiesSize() {
    return (this.table_properties == null) ? 0 : this.table_properties.size();
  }

  public void putToTable_properties(String key, String val) {
    if (this.table_properties == null) {
      this.table_properties = new HashMap<String,String>();
    }
    this.table_properties.put(key, val);
  }

  public Map<String,String> getTable_properties() {
    return this.table_properties;
  }

  public void setTable_properties(Map<String,String> table_properties) {
    this.table_properties = table_properties;
  }

  public void unsetTable_properties() {
    this.table_properties = null;
  }

  /** Returns true if field table_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_properties() {
    return this.table_properties != null;
  }

  public void setTable_propertiesIsSet(boolean value) {
    if (!value) {
      this.table_properties = null;
    }
  }

  public int getSerde_propertiesSize() {
    return (this.serde_properties == null) ? 0 : this.serde_properties.size();
  }

  public void putToSerde_properties(String key, String val) {
    if (this.serde_properties == null) {
      this.serde_properties = new HashMap<String,String>();
    }
    this.serde_properties.put(key, val);
  }

  public Map<String,String> getSerde_properties() {
    return this.serde_properties;
  }

  public void setSerde_properties(Map<String,String> serde_properties) {
    this.serde_properties = serde_properties;
  }

  public void unsetSerde_properties() {
    this.serde_properties = null;
  }

  /** Returns true if field serde_properties is set (has been assigned a value) and false otherwise */
  public boolean isSetSerde_properties() {
    return this.serde_properties != null;
  }

  public void setSerde_propertiesIsSet(boolean value) {
    if (!value) {
      this.serde_properties = null;
    }
  }

  public THdfsCachingOp getCache_op() {
    return this.cache_op;
  }

  public void setCache_op(THdfsCachingOp cache_op) {
    this.cache_op = cache_op;
  }

  public void unsetCache_op() {
    this.cache_op = null;
  }

  /** Returns true if field cache_op is set (has been assigned a value) and false otherwise */
  public boolean isSetCache_op() {
    return this.cache_op != null;
  }

  public void setCache_opIsSet(boolean value) {
    if (!value) {
      this.cache_op = null;
    }
  }

  public int getPartition_bySize() {
    return (this.partition_by == null) ? 0 : this.partition_by.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TKuduPartitionParam> getPartition_byIterator() {
    return (this.partition_by == null) ? null : this.partition_by.iterator();
  }

  public void addToPartition_by(org.apache.impala.thrift.TKuduPartitionParam elem) {
    if (this.partition_by == null) {
      this.partition_by = new ArrayList<org.apache.impala.thrift.TKuduPartitionParam>();
    }
    this.partition_by.add(elem);
  }

  public List<org.apache.impala.thrift.TKuduPartitionParam> getPartition_by() {
    return this.partition_by;
  }

  public void setPartition_by(List<org.apache.impala.thrift.TKuduPartitionParam> partition_by) {
    this.partition_by = partition_by;
  }

  public void unsetPartition_by() {
    this.partition_by = null;
  }

  /** Returns true if field partition_by is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_by() {
    return this.partition_by != null;
  }

  public void setPartition_byIsSet(boolean value) {
    if (!value) {
      this.partition_by = null;
    }
  }

  public int getPrimary_key_column_namesSize() {
    return (this.primary_key_column_names == null) ? 0 : this.primary_key_column_names.size();
  }

  public java.util.Iterator<String> getPrimary_key_column_namesIterator() {
    return (this.primary_key_column_names == null) ? null : this.primary_key_column_names.iterator();
  }

  public void addToPrimary_key_column_names(String elem) {
    if (this.primary_key_column_names == null) {
      this.primary_key_column_names = new ArrayList<String>();
    }
    this.primary_key_column_names.add(elem);
  }

  public List<String> getPrimary_key_column_names() {
    return this.primary_key_column_names;
  }

  public void setPrimary_key_column_names(List<String> primary_key_column_names) {
    this.primary_key_column_names = primary_key_column_names;
  }

  public void unsetPrimary_key_column_names() {
    this.primary_key_column_names = null;
  }

  /** Returns true if field primary_key_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimary_key_column_names() {
    return this.primary_key_column_names != null;
  }

  public void setPrimary_key_column_namesIsSet(boolean value) {
    if (!value) {
      this.primary_key_column_names = null;
    }
  }

  public int getSort_columnsSize() {
    return (this.sort_columns == null) ? 0 : this.sort_columns.size();
  }

  public java.util.Iterator<String> getSort_columnsIterator() {
    return (this.sort_columns == null) ? null : this.sort_columns.iterator();
  }

  public void addToSort_columns(String elem) {
    if (this.sort_columns == null) {
      this.sort_columns = new ArrayList<String>();
    }
    this.sort_columns.add(elem);
  }

  public List<String> getSort_columns() {
    return this.sort_columns;
  }

  public void setSort_columns(List<String> sort_columns) {
    this.sort_columns = sort_columns;
  }

  public void unsetSort_columns() {
    this.sort_columns = null;
  }

  /** Returns true if field sort_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_columns() {
    return this.sort_columns != null;
  }

  public void setSort_columnsIsSet(boolean value) {
    if (!value) {
      this.sort_columns = null;
    }
  }

  public String getServer_name() {
    return this.server_name;
  }

  public void setServer_name(String server_name) {
    this.server_name = server_name;
  }

  public void unsetServer_name() {
    this.server_name = null;
  }

  /** Returns true if field server_name is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_name() {
    return this.server_name != null;
  }

  public void setServer_nameIsSet(boolean value) {
    if (!value) {
      this.server_name = null;
    }
  }

  /**
   * 
   * @see org.apache.impala.thrift.TSortingOrder
   */
  public org.apache.impala.thrift.TSortingOrder getSorting_order() {
    return this.sorting_order;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TSortingOrder
   */
  public void setSorting_order(org.apache.impala.thrift.TSortingOrder sorting_order) {
    this.sorting_order = sorting_order;
  }

  public void unsetSorting_order() {
    this.sorting_order = null;
  }

  /** Returns true if field sorting_order is set (has been assigned a value) and false otherwise */
  public boolean isSetSorting_order() {
    return this.sorting_order != null;
  }

  public void setSorting_orderIsSet(boolean value) {
    if (!value) {
      this.sorting_order = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((org.apache.impala.thrift.TTableName)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<org.apache.impala.thrift.TColumn>)value);
      }
      break;

    case PARTITION_COLUMNS:
      if (value == null) {
        unsetPartition_columns();
      } else {
        setPartition_columns((List<org.apache.impala.thrift.TColumn>)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFile_format();
      } else {
        setFile_format((org.apache.impala.thrift.THdfsFileFormat)value);
      }
      break;

    case IS_EXTERNAL:
      if (value == null) {
        unsetIs_external();
      } else {
        setIs_external((Boolean)value);
      }
      break;

    case IF_NOT_EXISTS:
      if (value == null) {
        unsetIf_not_exists();
      } else {
        setIf_not_exists((Boolean)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case ROW_FORMAT:
      if (value == null) {
        unsetRow_format();
      } else {
        setRow_format((TTableRowFormat)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case TABLE_PROPERTIES:
      if (value == null) {
        unsetTable_properties();
      } else {
        setTable_properties((Map<String,String>)value);
      }
      break;

    case SERDE_PROPERTIES:
      if (value == null) {
        unsetSerde_properties();
      } else {
        setSerde_properties((Map<String,String>)value);
      }
      break;

    case CACHE_OP:
      if (value == null) {
        unsetCache_op();
      } else {
        setCache_op((THdfsCachingOp)value);
      }
      break;

    case PARTITION_BY:
      if (value == null) {
        unsetPartition_by();
      } else {
        setPartition_by((List<org.apache.impala.thrift.TKuduPartitionParam>)value);
      }
      break;

    case PRIMARY_KEY_COLUMN_NAMES:
      if (value == null) {
        unsetPrimary_key_column_names();
      } else {
        setPrimary_key_column_names((List<String>)value);
      }
      break;

    case SORT_COLUMNS:
      if (value == null) {
        unsetSort_columns();
      } else {
        setSort_columns((List<String>)value);
      }
      break;

    case SERVER_NAME:
      if (value == null) {
        unsetServer_name();
      } else {
        setServer_name((String)value);
      }
      break;

    case SORTING_ORDER:
      if (value == null) {
        unsetSorting_order();
      } else {
        setSorting_order((org.apache.impala.thrift.TSortingOrder)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTable_name();

    case COLUMNS:
      return getColumns();

    case PARTITION_COLUMNS:
      return getPartition_columns();

    case FILE_FORMAT:
      return getFile_format();

    case IS_EXTERNAL:
      return isIs_external();

    case IF_NOT_EXISTS:
      return isIf_not_exists();

    case OWNER:
      return getOwner();

    case ROW_FORMAT:
      return getRow_format();

    case COMMENT:
      return getComment();

    case LOCATION:
      return getLocation();

    case TABLE_PROPERTIES:
      return getTable_properties();

    case SERDE_PROPERTIES:
      return getSerde_properties();

    case CACHE_OP:
      return getCache_op();

    case PARTITION_BY:
      return getPartition_by();

    case PRIMARY_KEY_COLUMN_NAMES:
      return getPrimary_key_column_names();

    case SORT_COLUMNS:
      return getSort_columns();

    case SERVER_NAME:
      return getServer_name();

    case SORTING_ORDER:
      return getSorting_order();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTable_name();
    case COLUMNS:
      return isSetColumns();
    case PARTITION_COLUMNS:
      return isSetPartition_columns();
    case FILE_FORMAT:
      return isSetFile_format();
    case IS_EXTERNAL:
      return isSetIs_external();
    case IF_NOT_EXISTS:
      return isSetIf_not_exists();
    case OWNER:
      return isSetOwner();
    case ROW_FORMAT:
      return isSetRow_format();
    case COMMENT:
      return isSetComment();
    case LOCATION:
      return isSetLocation();
    case TABLE_PROPERTIES:
      return isSetTable_properties();
    case SERDE_PROPERTIES:
      return isSetSerde_properties();
    case CACHE_OP:
      return isSetCache_op();
    case PARTITION_BY:
      return isSetPartition_by();
    case PRIMARY_KEY_COLUMN_NAMES:
      return isSetPrimary_key_column_names();
    case SORT_COLUMNS:
      return isSetSort_columns();
    case SERVER_NAME:
      return isSetServer_name();
    case SORTING_ORDER:
      return isSetSorting_order();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCreateTableParams)
      return this.equals((TCreateTableParams)that);
    return false;
  }

  public boolean equals(TCreateTableParams that) {
    if (that == null)
      return false;

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_partition_columns = true && this.isSetPartition_columns();
    boolean that_present_partition_columns = true && that.isSetPartition_columns();
    if (this_present_partition_columns || that_present_partition_columns) {
      if (!(this_present_partition_columns && that_present_partition_columns))
        return false;
      if (!this.partition_columns.equals(that.partition_columns))
        return false;
    }

    boolean this_present_file_format = true && this.isSetFile_format();
    boolean that_present_file_format = true && that.isSetFile_format();
    if (this_present_file_format || that_present_file_format) {
      if (!(this_present_file_format && that_present_file_format))
        return false;
      if (!this.file_format.equals(that.file_format))
        return false;
    }

    boolean this_present_is_external = true;
    boolean that_present_is_external = true;
    if (this_present_is_external || that_present_is_external) {
      if (!(this_present_is_external && that_present_is_external))
        return false;
      if (this.is_external != that.is_external)
        return false;
    }

    boolean this_present_if_not_exists = true;
    boolean that_present_if_not_exists = true;
    if (this_present_if_not_exists || that_present_if_not_exists) {
      if (!(this_present_if_not_exists && that_present_if_not_exists))
        return false;
      if (this.if_not_exists != that.if_not_exists)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_row_format = true && this.isSetRow_format();
    boolean that_present_row_format = true && that.isSetRow_format();
    if (this_present_row_format || that_present_row_format) {
      if (!(this_present_row_format && that_present_row_format))
        return false;
      if (!this.row_format.equals(that.row_format))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_table_properties = true && this.isSetTable_properties();
    boolean that_present_table_properties = true && that.isSetTable_properties();
    if (this_present_table_properties || that_present_table_properties) {
      if (!(this_present_table_properties && that_present_table_properties))
        return false;
      if (!this.table_properties.equals(that.table_properties))
        return false;
    }

    boolean this_present_serde_properties = true && this.isSetSerde_properties();
    boolean that_present_serde_properties = true && that.isSetSerde_properties();
    if (this_present_serde_properties || that_present_serde_properties) {
      if (!(this_present_serde_properties && that_present_serde_properties))
        return false;
      if (!this.serde_properties.equals(that.serde_properties))
        return false;
    }

    boolean this_present_cache_op = true && this.isSetCache_op();
    boolean that_present_cache_op = true && that.isSetCache_op();
    if (this_present_cache_op || that_present_cache_op) {
      if (!(this_present_cache_op && that_present_cache_op))
        return false;
      if (!this.cache_op.equals(that.cache_op))
        return false;
    }

    boolean this_present_partition_by = true && this.isSetPartition_by();
    boolean that_present_partition_by = true && that.isSetPartition_by();
    if (this_present_partition_by || that_present_partition_by) {
      if (!(this_present_partition_by && that_present_partition_by))
        return false;
      if (!this.partition_by.equals(that.partition_by))
        return false;
    }

    boolean this_present_primary_key_column_names = true && this.isSetPrimary_key_column_names();
    boolean that_present_primary_key_column_names = true && that.isSetPrimary_key_column_names();
    if (this_present_primary_key_column_names || that_present_primary_key_column_names) {
      if (!(this_present_primary_key_column_names && that_present_primary_key_column_names))
        return false;
      if (!this.primary_key_column_names.equals(that.primary_key_column_names))
        return false;
    }

    boolean this_present_sort_columns = true && this.isSetSort_columns();
    boolean that_present_sort_columns = true && that.isSetSort_columns();
    if (this_present_sort_columns || that_present_sort_columns) {
      if (!(this_present_sort_columns && that_present_sort_columns))
        return false;
      if (!this.sort_columns.equals(that.sort_columns))
        return false;
    }

    boolean this_present_server_name = true && this.isSetServer_name();
    boolean that_present_server_name = true && that.isSetServer_name();
    if (this_present_server_name || that_present_server_name) {
      if (!(this_present_server_name && that_present_server_name))
        return false;
      if (!this.server_name.equals(that.server_name))
        return false;
    }

    boolean this_present_sorting_order = true && this.isSetSorting_order();
    boolean that_present_sorting_order = true && that.isSetSorting_order();
    if (this_present_sorting_order || that_present_sorting_order) {
      if (!(this_present_sorting_order && that_present_sorting_order))
        return false;
      if (!this.sorting_order.equals(that.sorting_order))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_table_name = true && (isSetTable_name());
    list.add(present_table_name);
    if (present_table_name)
      list.add(table_name);

    boolean present_columns = true && (isSetColumns());
    list.add(present_columns);
    if (present_columns)
      list.add(columns);

    boolean present_partition_columns = true && (isSetPartition_columns());
    list.add(present_partition_columns);
    if (present_partition_columns)
      list.add(partition_columns);

    boolean present_file_format = true && (isSetFile_format());
    list.add(present_file_format);
    if (present_file_format)
      list.add(file_format.getValue());

    boolean present_is_external = true;
    list.add(present_is_external);
    if (present_is_external)
      list.add(is_external);

    boolean present_if_not_exists = true;
    list.add(present_if_not_exists);
    if (present_if_not_exists)
      list.add(if_not_exists);

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_row_format = true && (isSetRow_format());
    list.add(present_row_format);
    if (present_row_format)
      list.add(row_format);

    boolean present_comment = true && (isSetComment());
    list.add(present_comment);
    if (present_comment)
      list.add(comment);

    boolean present_location = true && (isSetLocation());
    list.add(present_location);
    if (present_location)
      list.add(location);

    boolean present_table_properties = true && (isSetTable_properties());
    list.add(present_table_properties);
    if (present_table_properties)
      list.add(table_properties);

    boolean present_serde_properties = true && (isSetSerde_properties());
    list.add(present_serde_properties);
    if (present_serde_properties)
      list.add(serde_properties);

    boolean present_cache_op = true && (isSetCache_op());
    list.add(present_cache_op);
    if (present_cache_op)
      list.add(cache_op);

    boolean present_partition_by = true && (isSetPartition_by());
    list.add(present_partition_by);
    if (present_partition_by)
      list.add(partition_by);

    boolean present_primary_key_column_names = true && (isSetPrimary_key_column_names());
    list.add(present_primary_key_column_names);
    if (present_primary_key_column_names)
      list.add(primary_key_column_names);

    boolean present_sort_columns = true && (isSetSort_columns());
    list.add(present_sort_columns);
    if (present_sort_columns)
      list.add(sort_columns);

    boolean present_server_name = true && (isSetServer_name());
    list.add(present_server_name);
    if (present_server_name)
      list.add(server_name);

    boolean present_sorting_order = true && (isSetSorting_order());
    list.add(present_sorting_order);
    if (present_sorting_order)
      list.add(sorting_order.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TCreateTableParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_columns()).compareTo(other.isSetPartition_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_columns, other.partition_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_format()).compareTo(other.isSetFile_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_format, other.file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_external()).compareTo(other.isSetIs_external());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_external()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_external, other.is_external);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIf_not_exists()).compareTo(other.isSetIf_not_exists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIf_not_exists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_not_exists, other.if_not_exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRow_format()).compareTo(other.isSetRow_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_format, other.row_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_properties()).compareTo(other.isSetTable_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_properties, other.table_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerde_properties()).compareTo(other.isSetSerde_properties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerde_properties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serde_properties, other.serde_properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache_op()).compareTo(other.isSetCache_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache_op, other.cache_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_by()).compareTo(other.isSetPartition_by());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_by()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_by, other.partition_by);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrimary_key_column_names()).compareTo(other.isSetPrimary_key_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimary_key_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primary_key_column_names, other.primary_key_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_columns()).compareTo(other.isSetSort_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_columns, other.sort_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_name()).compareTo(other.isSetServer_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_name, other.server_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSorting_order()).compareTo(other.isSetSorting_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSorting_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sorting_order, other.sorting_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCreateTableParams(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    if (isSetPartition_columns()) {
      if (!first) sb.append(", ");
      sb.append("partition_columns:");
      if (this.partition_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_columns);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("file_format:");
    if (this.file_format == null) {
      sb.append("null");
    } else {
      sb.append(this.file_format);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_external:");
    sb.append(this.is_external);
    first = false;
    if (!first) sb.append(", ");
    sb.append("if_not_exists:");
    sb.append(this.if_not_exists);
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (isSetRow_format()) {
      if (!first) sb.append(", ");
      sb.append("row_format:");
      if (this.row_format == null) {
        sb.append("null");
      } else {
        sb.append(this.row_format);
      }
      first = false;
    }
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetTable_properties()) {
      if (!first) sb.append(", ");
      sb.append("table_properties:");
      if (this.table_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.table_properties);
      }
      first = false;
    }
    if (isSetSerde_properties()) {
      if (!first) sb.append(", ");
      sb.append("serde_properties:");
      if (this.serde_properties == null) {
        sb.append("null");
      } else {
        sb.append(this.serde_properties);
      }
      first = false;
    }
    if (isSetCache_op()) {
      if (!first) sb.append(", ");
      sb.append("cache_op:");
      if (this.cache_op == null) {
        sb.append("null");
      } else {
        sb.append(this.cache_op);
      }
      first = false;
    }
    if (isSetPartition_by()) {
      if (!first) sb.append(", ");
      sb.append("partition_by:");
      if (this.partition_by == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_by);
      }
      first = false;
    }
    if (isSetPrimary_key_column_names()) {
      if (!first) sb.append(", ");
      sb.append("primary_key_column_names:");
      if (this.primary_key_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.primary_key_column_names);
      }
      first = false;
    }
    if (isSetSort_columns()) {
      if (!first) sb.append(", ");
      sb.append("sort_columns:");
      if (this.sort_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_columns);
      }
      first = false;
    }
    if (isSetServer_name()) {
      if (!first) sb.append(", ");
      sb.append("server_name:");
      if (this.server_name == null) {
        sb.append("null");
      } else {
        sb.append(this.server_name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sorting_order:");
    if (this.sorting_order == null) {
      sb.append("null");
    } else {
      sb.append(this.sorting_order);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTable_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' is unset! Struct:" + toString());
    }

    if (!isSetColumns()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' is unset! Struct:" + toString());
    }

    if (!isSetFile_format()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_format' is unset! Struct:" + toString());
    }

    if (!isSetIs_external()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_external' is unset! Struct:" + toString());
    }

    if (!isSetIf_not_exists()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'if_not_exists' is unset! Struct:" + toString());
    }

    if (!isSetOwner()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'owner' is unset! Struct:" + toString());
    }

    if (!isSetSorting_order()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sorting_order' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
    if (row_format != null) {
      row_format.validate();
    }
    if (cache_op != null) {
      cache_op.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreateTableParamsStandardSchemeFactory implements SchemeFactory {
    public TCreateTableParamsStandardScheme getScheme() {
      return new TCreateTableParamsStandardScheme();
    }
  }

  private static class TCreateTableParamsStandardScheme extends StandardScheme<TCreateTableParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreateTableParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new org.apache.impala.thrift.TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list182 = iprot.readListBegin();
                struct.columns = new ArrayList<org.apache.impala.thrift.TColumn>(_list182.size);
                org.apache.impala.thrift.TColumn _elem183;
                for (int _i184 = 0; _i184 < _list182.size; ++_i184)
                {
                  _elem183 = new org.apache.impala.thrift.TColumn();
                  _elem183.read(iprot);
                  struct.columns.add(_elem183);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list185 = iprot.readListBegin();
                struct.partition_columns = new ArrayList<org.apache.impala.thrift.TColumn>(_list185.size);
                org.apache.impala.thrift.TColumn _elem186;
                for (int _i187 = 0; _i187 < _list185.size; ++_i187)
                {
                  _elem186 = new org.apache.impala.thrift.TColumn();
                  _elem186.read(iprot);
                  struct.partition_columns.add(_elem186);
                }
                iprot.readListEnd();
              }
              struct.setPartition_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_format = org.apache.impala.thrift.THdfsFileFormat.findByValue(iprot.readI32());
              struct.setFile_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_EXTERNAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_external = iprot.readBool();
              struct.setIs_externalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IF_NOT_EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.if_not_exists = iprot.readBool();
              struct.setIf_not_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROW_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.row_format = new TTableRowFormat();
              struct.row_format.read(iprot);
              struct.setRow_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TABLE_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map188 = iprot.readMapBegin();
                struct.table_properties = new HashMap<String,String>(2*_map188.size);
                String _key189;
                String _val190;
                for (int _i191 = 0; _i191 < _map188.size; ++_i191)
                {
                  _key189 = iprot.readString();
                  _val190 = iprot.readString();
                  struct.table_properties.put(_key189, _val190);
                }
                iprot.readMapEnd();
              }
              struct.setTable_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SERDE_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map192 = iprot.readMapBegin();
                struct.serde_properties = new HashMap<String,String>(2*_map192.size);
                String _key193;
                String _val194;
                for (int _i195 = 0; _i195 < _map192.size; ++_i195)
                {
                  _key193 = iprot.readString();
                  _val194 = iprot.readString();
                  struct.serde_properties.put(_key193, _val194);
                }
                iprot.readMapEnd();
              }
              struct.setSerde_propertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CACHE_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cache_op = new THdfsCachingOp();
              struct.cache_op.read(iprot);
              struct.setCache_opIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARTITION_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list196 = iprot.readListBegin();
                struct.partition_by = new ArrayList<org.apache.impala.thrift.TKuduPartitionParam>(_list196.size);
                org.apache.impala.thrift.TKuduPartitionParam _elem197;
                for (int _i198 = 0; _i198 < _list196.size; ++_i198)
                {
                  _elem197 = new org.apache.impala.thrift.TKuduPartitionParam();
                  _elem197.read(iprot);
                  struct.partition_by.add(_elem197);
                }
                iprot.readListEnd();
              }
              struct.setPartition_byIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRIMARY_KEY_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list199 = iprot.readListBegin();
                struct.primary_key_column_names = new ArrayList<String>(_list199.size);
                String _elem200;
                for (int _i201 = 0; _i201 < _list199.size; ++_i201)
                {
                  _elem200 = iprot.readString();
                  struct.primary_key_column_names.add(_elem200);
                }
                iprot.readListEnd();
              }
              struct.setPrimary_key_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SORT_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                struct.sort_columns = new ArrayList<String>(_list202.size);
                String _elem203;
                for (int _i204 = 0; _i204 < _list202.size; ++_i204)
                {
                  _elem203 = iprot.readString();
                  struct.sort_columns.add(_elem203);
                }
                iprot.readListEnd();
              }
              struct.setSort_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server_name = iprot.readString();
              struct.setServer_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SORTING_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sorting_order = org.apache.impala.thrift.TSortingOrder.findByValue(iprot.readI32());
              struct.setSorting_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreateTableParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
          for (org.apache.impala.thrift.TColumn _iter205 : struct.columns)
          {
            _iter205.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partition_columns != null) {
        if (struct.isSetPartition_columns()) {
          oprot.writeFieldBegin(PARTITION_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_columns.size()));
            for (org.apache.impala.thrift.TColumn _iter206 : struct.partition_columns)
            {
              _iter206.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_format != null) {
        oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
        oprot.writeI32(struct.file_format.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_EXTERNAL_FIELD_DESC);
      oprot.writeBool(struct.is_external);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IF_NOT_EXISTS_FIELD_DESC);
      oprot.writeBool(struct.if_not_exists);
      oprot.writeFieldEnd();
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.row_format != null) {
        if (struct.isSetRow_format()) {
          oprot.writeFieldBegin(ROW_FORMAT_FIELD_DESC);
          struct.row_format.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_properties != null) {
        if (struct.isSetTable_properties()) {
          oprot.writeFieldBegin(TABLE_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.table_properties.size()));
            for (Map.Entry<String, String> _iter207 : struct.table_properties.entrySet())
            {
              oprot.writeString(_iter207.getKey());
              oprot.writeString(_iter207.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.serde_properties != null) {
        if (struct.isSetSerde_properties()) {
          oprot.writeFieldBegin(SERDE_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.serde_properties.size()));
            for (Map.Entry<String, String> _iter208 : struct.serde_properties.entrySet())
            {
              oprot.writeString(_iter208.getKey());
              oprot.writeString(_iter208.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cache_op != null) {
        if (struct.isSetCache_op()) {
          oprot.writeFieldBegin(CACHE_OP_FIELD_DESC);
          struct.cache_op.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_by != null) {
        if (struct.isSetPartition_by()) {
          oprot.writeFieldBegin(PARTITION_BY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_by.size()));
            for (org.apache.impala.thrift.TKuduPartitionParam _iter209 : struct.partition_by)
            {
              _iter209.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.primary_key_column_names != null) {
        if (struct.isSetPrimary_key_column_names()) {
          oprot.writeFieldBegin(PRIMARY_KEY_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.primary_key_column_names.size()));
            for (String _iter210 : struct.primary_key_column_names)
            {
              oprot.writeString(_iter210);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_columns != null) {
        if (struct.isSetSort_columns()) {
          oprot.writeFieldBegin(SORT_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sort_columns.size()));
            for (String _iter211 : struct.sort_columns)
            {
              oprot.writeString(_iter211);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.server_name != null) {
        if (struct.isSetServer_name()) {
          oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
          oprot.writeString(struct.server_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sorting_order != null) {
        oprot.writeFieldBegin(SORTING_ORDER_FIELD_DESC);
        oprot.writeI32(struct.sorting_order.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreateTableParamsTupleSchemeFactory implements SchemeFactory {
    public TCreateTableParamsTupleScheme getScheme() {
      return new TCreateTableParamsTupleScheme();
    }
  }

  private static class TCreateTableParamsTupleScheme extends TupleScheme<TCreateTableParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreateTableParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.table_name.write(oprot);
      {
        oprot.writeI32(struct.columns.size());
        for (org.apache.impala.thrift.TColumn _iter212 : struct.columns)
        {
          _iter212.write(oprot);
        }
      }
      oprot.writeI32(struct.file_format.getValue());
      oprot.writeBool(struct.is_external);
      oprot.writeBool(struct.if_not_exists);
      oprot.writeString(struct.owner);
      oprot.writeI32(struct.sorting_order.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetPartition_columns()) {
        optionals.set(0);
      }
      if (struct.isSetRow_format()) {
        optionals.set(1);
      }
      if (struct.isSetComment()) {
        optionals.set(2);
      }
      if (struct.isSetLocation()) {
        optionals.set(3);
      }
      if (struct.isSetTable_properties()) {
        optionals.set(4);
      }
      if (struct.isSetSerde_properties()) {
        optionals.set(5);
      }
      if (struct.isSetCache_op()) {
        optionals.set(6);
      }
      if (struct.isSetPartition_by()) {
        optionals.set(7);
      }
      if (struct.isSetPrimary_key_column_names()) {
        optionals.set(8);
      }
      if (struct.isSetSort_columns()) {
        optionals.set(9);
      }
      if (struct.isSetServer_name()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPartition_columns()) {
        {
          oprot.writeI32(struct.partition_columns.size());
          for (org.apache.impala.thrift.TColumn _iter213 : struct.partition_columns)
          {
            _iter213.write(oprot);
          }
        }
      }
      if (struct.isSetRow_format()) {
        struct.row_format.write(oprot);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetTable_properties()) {
        {
          oprot.writeI32(struct.table_properties.size());
          for (Map.Entry<String, String> _iter214 : struct.table_properties.entrySet())
          {
            oprot.writeString(_iter214.getKey());
            oprot.writeString(_iter214.getValue());
          }
        }
      }
      if (struct.isSetSerde_properties()) {
        {
          oprot.writeI32(struct.serde_properties.size());
          for (Map.Entry<String, String> _iter215 : struct.serde_properties.entrySet())
          {
            oprot.writeString(_iter215.getKey());
            oprot.writeString(_iter215.getValue());
          }
        }
      }
      if (struct.isSetCache_op()) {
        struct.cache_op.write(oprot);
      }
      if (struct.isSetPartition_by()) {
        {
          oprot.writeI32(struct.partition_by.size());
          for (org.apache.impala.thrift.TKuduPartitionParam _iter216 : struct.partition_by)
          {
            _iter216.write(oprot);
          }
        }
      }
      if (struct.isSetPrimary_key_column_names()) {
        {
          oprot.writeI32(struct.primary_key_column_names.size());
          for (String _iter217 : struct.primary_key_column_names)
          {
            oprot.writeString(_iter217);
          }
        }
      }
      if (struct.isSetSort_columns()) {
        {
          oprot.writeI32(struct.sort_columns.size());
          for (String _iter218 : struct.sort_columns)
          {
            oprot.writeString(_iter218);
          }
        }
      }
      if (struct.isSetServer_name()) {
        oprot.writeString(struct.server_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreateTableParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table_name = new org.apache.impala.thrift.TTableName();
      struct.table_name.read(iprot);
      struct.setTable_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list219 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.columns = new ArrayList<org.apache.impala.thrift.TColumn>(_list219.size);
        org.apache.impala.thrift.TColumn _elem220;
        for (int _i221 = 0; _i221 < _list219.size; ++_i221)
        {
          _elem220 = new org.apache.impala.thrift.TColumn();
          _elem220.read(iprot);
          struct.columns.add(_elem220);
        }
      }
      struct.setColumnsIsSet(true);
      struct.file_format = org.apache.impala.thrift.THdfsFileFormat.findByValue(iprot.readI32());
      struct.setFile_formatIsSet(true);
      struct.is_external = iprot.readBool();
      struct.setIs_externalIsSet(true);
      struct.if_not_exists = iprot.readBool();
      struct.setIf_not_existsIsSet(true);
      struct.owner = iprot.readString();
      struct.setOwnerIsSet(true);
      struct.sorting_order = org.apache.impala.thrift.TSortingOrder.findByValue(iprot.readI32());
      struct.setSorting_orderIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list222 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partition_columns = new ArrayList<org.apache.impala.thrift.TColumn>(_list222.size);
          org.apache.impala.thrift.TColumn _elem223;
          for (int _i224 = 0; _i224 < _list222.size; ++_i224)
          {
            _elem223 = new org.apache.impala.thrift.TColumn();
            _elem223.read(iprot);
            struct.partition_columns.add(_elem223);
          }
        }
        struct.setPartition_columnsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.row_format = new TTableRowFormat();
        struct.row_format.read(iprot);
        struct.setRow_formatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map225 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.table_properties = new HashMap<String,String>(2*_map225.size);
          String _key226;
          String _val227;
          for (int _i228 = 0; _i228 < _map225.size; ++_i228)
          {
            _key226 = iprot.readString();
            _val227 = iprot.readString();
            struct.table_properties.put(_key226, _val227);
          }
        }
        struct.setTable_propertiesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map229 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.serde_properties = new HashMap<String,String>(2*_map229.size);
          String _key230;
          String _val231;
          for (int _i232 = 0; _i232 < _map229.size; ++_i232)
          {
            _key230 = iprot.readString();
            _val231 = iprot.readString();
            struct.serde_properties.put(_key230, _val231);
          }
        }
        struct.setSerde_propertiesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cache_op = new THdfsCachingOp();
        struct.cache_op.read(iprot);
        struct.setCache_opIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list233 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partition_by = new ArrayList<org.apache.impala.thrift.TKuduPartitionParam>(_list233.size);
          org.apache.impala.thrift.TKuduPartitionParam _elem234;
          for (int _i235 = 0; _i235 < _list233.size; ++_i235)
          {
            _elem234 = new org.apache.impala.thrift.TKuduPartitionParam();
            _elem234.read(iprot);
            struct.partition_by.add(_elem234);
          }
        }
        struct.setPartition_byIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list236 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.primary_key_column_names = new ArrayList<String>(_list236.size);
          String _elem237;
          for (int _i238 = 0; _i238 < _list236.size; ++_i238)
          {
            _elem237 = iprot.readString();
            struct.primary_key_column_names.add(_elem237);
          }
        }
        struct.setPrimary_key_column_namesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list239 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sort_columns = new ArrayList<String>(_list239.size);
          String _elem240;
          for (int _i241 = 0; _i241 < _list239.size; ++_i241)
          {
            _elem240 = iprot.readString();
            struct.sort_columns.add(_elem240);
          }
        }
        struct.setSort_columnsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.server_name = iprot.readString();
        struct.setServer_nameIsSet(true);
      }
    }
  }

}

