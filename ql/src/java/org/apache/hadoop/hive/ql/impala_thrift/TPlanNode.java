/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TPlanNode implements org.apache.thrift.TBase<TPlanNode, TPlanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanNode");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("node_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("node_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("num_children", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ROW_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("row_tuples", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NULLABLE_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("nullable_tuples", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("conjuncts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DISABLE_CODEGEN_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_codegen", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField PIPELINES_FIELD_DESC = new org.apache.thrift.protocol.TField("pipelines", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField HDFS_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField HBASE_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hbase_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField KUDU_SCAN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_scan_node", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_node", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField HASH_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hash_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField NESTED_LOOP_JOIN_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("nested_loop_join_node", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField AGG_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_node", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField SORT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_node", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField UNION_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("union_node", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField EXCHANGE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange_node", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField ANALYTIC_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("analytic_node", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField UNNEST_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("unnest_node", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField LABEL_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("label_detail", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField ESTIMATED_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("estimated_stats", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filters", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField RESOURCE_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_profile", org.apache.thrift.protocol.TType.STRUCT, (short)25);
  private static final org.apache.thrift.protocol.TField CARDINALITY_CHECK_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardinality_check_node", org.apache.thrift.protocol.TType.STRUCT, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanNodeTupleSchemeFactory());
  }

  private int node_id; // required
  private TPlanNodeType node_type; // required
  private int num_children; // required
  private long limit; // required
  private List<Integer> row_tuples; // required
  private List<Boolean> nullable_tuples; // required
  private List<org.apache.impala.thrift.TExpr> conjuncts; // optional
  private boolean disable_codegen; // required
  private List<TPipelineMembership> pipelines; // required
  private THdfsScanNode hdfs_scan_node; // optional
  private THBaseScanNode hbase_scan_node; // optional
  private TKuduScanNode kudu_scan_node; // optional
  private TDataSourceScanNode data_source_node; // optional
  private THashJoinNode hash_join_node; // optional
  private TNestedLoopJoinNode nested_loop_join_node; // optional
  private TAggregationNode agg_node; // optional
  private TSortNode sort_node; // optional
  private TUnionNode union_node; // optional
  private TExchangeNode exchange_node; // optional
  private TAnalyticNode analytic_node; // optional
  private TUnnestNode unnest_node; // optional
  private String label; // optional
  private String label_detail; // optional
  private org.apache.impala.thrift.TExecStats estimated_stats; // optional
  private List<TRuntimeFilterDesc> runtime_filters; // optional
  private org.apache.impala.thrift.TBackendResourceProfile resource_profile; // required
  private TCardinalityCheckNode cardinality_check_node; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "node_id"),
    /**
     * 
     * @see TPlanNodeType
     */
    NODE_TYPE((short)2, "node_type"),
    NUM_CHILDREN((short)3, "num_children"),
    LIMIT((short)4, "limit"),
    ROW_TUPLES((short)5, "row_tuples"),
    NULLABLE_TUPLES((short)6, "nullable_tuples"),
    CONJUNCTS((short)7, "conjuncts"),
    DISABLE_CODEGEN((short)8, "disable_codegen"),
    PIPELINES((short)27, "pipelines"),
    HDFS_SCAN_NODE((short)9, "hdfs_scan_node"),
    HBASE_SCAN_NODE((short)10, "hbase_scan_node"),
    KUDU_SCAN_NODE((short)11, "kudu_scan_node"),
    DATA_SOURCE_NODE((short)12, "data_source_node"),
    HASH_JOIN_NODE((short)13, "hash_join_node"),
    NESTED_LOOP_JOIN_NODE((short)14, "nested_loop_join_node"),
    AGG_NODE((short)15, "agg_node"),
    SORT_NODE((short)16, "sort_node"),
    UNION_NODE((short)17, "union_node"),
    EXCHANGE_NODE((short)18, "exchange_node"),
    ANALYTIC_NODE((short)19, "analytic_node"),
    UNNEST_NODE((short)20, "unnest_node"),
    LABEL((short)21, "label"),
    LABEL_DETAIL((short)22, "label_detail"),
    ESTIMATED_STATS((short)23, "estimated_stats"),
    RUNTIME_FILTERS((short)24, "runtime_filters"),
    RESOURCE_PROFILE((short)25, "resource_profile"),
    CARDINALITY_CHECK_NODE((short)26, "cardinality_check_node");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // NODE_TYPE
          return NODE_TYPE;
        case 3: // NUM_CHILDREN
          return NUM_CHILDREN;
        case 4: // LIMIT
          return LIMIT;
        case 5: // ROW_TUPLES
          return ROW_TUPLES;
        case 6: // NULLABLE_TUPLES
          return NULLABLE_TUPLES;
        case 7: // CONJUNCTS
          return CONJUNCTS;
        case 8: // DISABLE_CODEGEN
          return DISABLE_CODEGEN;
        case 27: // PIPELINES
          return PIPELINES;
        case 9: // HDFS_SCAN_NODE
          return HDFS_SCAN_NODE;
        case 10: // HBASE_SCAN_NODE
          return HBASE_SCAN_NODE;
        case 11: // KUDU_SCAN_NODE
          return KUDU_SCAN_NODE;
        case 12: // DATA_SOURCE_NODE
          return DATA_SOURCE_NODE;
        case 13: // HASH_JOIN_NODE
          return HASH_JOIN_NODE;
        case 14: // NESTED_LOOP_JOIN_NODE
          return NESTED_LOOP_JOIN_NODE;
        case 15: // AGG_NODE
          return AGG_NODE;
        case 16: // SORT_NODE
          return SORT_NODE;
        case 17: // UNION_NODE
          return UNION_NODE;
        case 18: // EXCHANGE_NODE
          return EXCHANGE_NODE;
        case 19: // ANALYTIC_NODE
          return ANALYTIC_NODE;
        case 20: // UNNEST_NODE
          return UNNEST_NODE;
        case 21: // LABEL
          return LABEL;
        case 22: // LABEL_DETAIL
          return LABEL_DETAIL;
        case 23: // ESTIMATED_STATS
          return ESTIMATED_STATS;
        case 24: // RUNTIME_FILTERS
          return RUNTIME_FILTERS;
        case 25: // RESOURCE_PROFILE
          return RESOURCE_PROFILE;
        case 26: // CARDINALITY_CHECK_NODE
          return CARDINALITY_CHECK_NODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODE_ID_ISSET_ID = 0;
  private static final int __NUM_CHILDREN_ISSET_ID = 1;
  private static final int __LIMIT_ISSET_ID = 2;
  private static final int __DISABLE_CODEGEN_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONJUNCTS,_Fields.HDFS_SCAN_NODE,_Fields.HBASE_SCAN_NODE,_Fields.KUDU_SCAN_NODE,_Fields.DATA_SOURCE_NODE,_Fields.HASH_JOIN_NODE,_Fields.NESTED_LOOP_JOIN_NODE,_Fields.AGG_NODE,_Fields.SORT_NODE,_Fields.UNION_NODE,_Fields.EXCHANGE_NODE,_Fields.ANALYTIC_NODE,_Fields.UNNEST_NODE,_Fields.LABEL,_Fields.LABEL_DETAIL,_Fields.ESTIMATED_STATS,_Fields.RUNTIME_FILTERS,_Fields.CARDINALITY_CHECK_NODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("node_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("node_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPlanNodeType.class)));
    tmpMap.put(_Fields.NUM_CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("num_children", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ROW_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("row_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"))));
    tmpMap.put(_Fields.NULLABLE_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("nullable_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.DISABLE_CODEGEN, new org.apache.thrift.meta_data.FieldMetaData("disable_codegen", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PIPELINES, new org.apache.thrift.meta_data.FieldMetaData("pipelines", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPipelineMembership.class))));
    tmpMap.put(_Fields.HDFS_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("hdfs_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsScanNode.class)));
    tmpMap.put(_Fields.HBASE_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("hbase_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THBaseScanNode.class)));
    tmpMap.put(_Fields.KUDU_SCAN_NODE, new org.apache.thrift.meta_data.FieldMetaData("kudu_scan_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TKuduScanNode.class)));
    tmpMap.put(_Fields.DATA_SOURCE_NODE, new org.apache.thrift.meta_data.FieldMetaData("data_source_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataSourceScanNode.class)));
    tmpMap.put(_Fields.HASH_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("hash_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THashJoinNode.class)));
    tmpMap.put(_Fields.NESTED_LOOP_JOIN_NODE, new org.apache.thrift.meta_data.FieldMetaData("nested_loop_join_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNestedLoopJoinNode.class)));
    tmpMap.put(_Fields.AGG_NODE, new org.apache.thrift.meta_data.FieldMetaData("agg_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAggregationNode.class)));
    tmpMap.put(_Fields.SORT_NODE, new org.apache.thrift.meta_data.FieldMetaData("sort_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSortNode.class)));
    tmpMap.put(_Fields.UNION_NODE, new org.apache.thrift.meta_data.FieldMetaData("union_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUnionNode.class)));
    tmpMap.put(_Fields.EXCHANGE_NODE, new org.apache.thrift.meta_data.FieldMetaData("exchange_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExchangeNode.class)));
    tmpMap.put(_Fields.ANALYTIC_NODE, new org.apache.thrift.meta_data.FieldMetaData("analytic_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAnalyticNode.class)));
    tmpMap.put(_Fields.UNNEST_NODE, new org.apache.thrift.meta_data.FieldMetaData("unnest_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUnnestNode.class)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("label_detail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ESTIMATED_STATS, new org.apache.thrift.meta_data.FieldMetaData("estimated_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExecStats.class)));
    tmpMap.put(_Fields.RUNTIME_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("runtime_filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRuntimeFilterDesc.class))));
    tmpMap.put(_Fields.RESOURCE_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("resource_profile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TBackendResourceProfile.class)));
    tmpMap.put(_Fields.CARDINALITY_CHECK_NODE, new org.apache.thrift.meta_data.FieldMetaData("cardinality_check_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCardinalityCheckNode.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanNode.class, metaDataMap);
  }

  public TPlanNode() {
  }

  public TPlanNode(
    int node_id,
    TPlanNodeType node_type,
    int num_children,
    long limit,
    List<Integer> row_tuples,
    List<Boolean> nullable_tuples,
    boolean disable_codegen,
    List<TPipelineMembership> pipelines,
    org.apache.impala.thrift.TBackendResourceProfile resource_profile)
  {
    this();
    this.node_id = node_id;
    setNode_idIsSet(true);
    this.node_type = node_type;
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    this.limit = limit;
    setLimitIsSet(true);
    this.row_tuples = row_tuples;
    this.nullable_tuples = nullable_tuples;
    this.disable_codegen = disable_codegen;
    setDisable_codegenIsSet(true);
    this.pipelines = pipelines;
    this.resource_profile = resource_profile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanNode(TPlanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.node_id = other.node_id;
    if (other.isSetNode_type()) {
      this.node_type = other.node_type;
    }
    this.num_children = other.num_children;
    this.limit = other.limit;
    if (other.isSetRow_tuples()) {
      List<Integer> __this__row_tuples = new ArrayList<Integer>(other.row_tuples.size());
      for (Integer other_element : other.row_tuples) {
        __this__row_tuples.add(other_element);
      }
      this.row_tuples = __this__row_tuples;
    }
    if (other.isSetNullable_tuples()) {
      List<Boolean> __this__nullable_tuples = new ArrayList<Boolean>(other.nullable_tuples);
      this.nullable_tuples = __this__nullable_tuples;
    }
    if (other.isSetConjuncts()) {
      List<org.apache.impala.thrift.TExpr> __this__conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>(other.conjuncts.size());
      for (org.apache.impala.thrift.TExpr other_element : other.conjuncts) {
        __this__conjuncts.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.conjuncts = __this__conjuncts;
    }
    this.disable_codegen = other.disable_codegen;
    if (other.isSetPipelines()) {
      List<TPipelineMembership> __this__pipelines = new ArrayList<TPipelineMembership>(other.pipelines.size());
      for (TPipelineMembership other_element : other.pipelines) {
        __this__pipelines.add(new TPipelineMembership(other_element));
      }
      this.pipelines = __this__pipelines;
    }
    if (other.isSetHdfs_scan_node()) {
      this.hdfs_scan_node = new THdfsScanNode(other.hdfs_scan_node);
    }
    if (other.isSetHbase_scan_node()) {
      this.hbase_scan_node = new THBaseScanNode(other.hbase_scan_node);
    }
    if (other.isSetKudu_scan_node()) {
      this.kudu_scan_node = new TKuduScanNode(other.kudu_scan_node);
    }
    if (other.isSetData_source_node()) {
      this.data_source_node = new TDataSourceScanNode(other.data_source_node);
    }
    if (other.isSetHash_join_node()) {
      this.hash_join_node = new THashJoinNode(other.hash_join_node);
    }
    if (other.isSetNested_loop_join_node()) {
      this.nested_loop_join_node = new TNestedLoopJoinNode(other.nested_loop_join_node);
    }
    if (other.isSetAgg_node()) {
      this.agg_node = new TAggregationNode(other.agg_node);
    }
    if (other.isSetSort_node()) {
      this.sort_node = new TSortNode(other.sort_node);
    }
    if (other.isSetUnion_node()) {
      this.union_node = new TUnionNode(other.union_node);
    }
    if (other.isSetExchange_node()) {
      this.exchange_node = new TExchangeNode(other.exchange_node);
    }
    if (other.isSetAnalytic_node()) {
      this.analytic_node = new TAnalyticNode(other.analytic_node);
    }
    if (other.isSetUnnest_node()) {
      this.unnest_node = new TUnnestNode(other.unnest_node);
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetLabel_detail()) {
      this.label_detail = other.label_detail;
    }
    if (other.isSetEstimated_stats()) {
      this.estimated_stats = new org.apache.impala.thrift.TExecStats(other.estimated_stats);
    }
    if (other.isSetRuntime_filters()) {
      List<TRuntimeFilterDesc> __this__runtime_filters = new ArrayList<TRuntimeFilterDesc>(other.runtime_filters.size());
      for (TRuntimeFilterDesc other_element : other.runtime_filters) {
        __this__runtime_filters.add(new TRuntimeFilterDesc(other_element));
      }
      this.runtime_filters = __this__runtime_filters;
    }
    if (other.isSetResource_profile()) {
      this.resource_profile = new org.apache.impala.thrift.TBackendResourceProfile(other.resource_profile);
    }
    if (other.isSetCardinality_check_node()) {
      this.cardinality_check_node = new TCardinalityCheckNode(other.cardinality_check_node);
    }
  }

  public TPlanNode deepCopy() {
    return new TPlanNode(this);
  }

  @Override
  public void clear() {
    setNode_idIsSet(false);
    this.node_id = 0;
    this.node_type = null;
    setNum_childrenIsSet(false);
    this.num_children = 0;
    setLimitIsSet(false);
    this.limit = 0;
    this.row_tuples = null;
    this.nullable_tuples = null;
    this.conjuncts = null;
    setDisable_codegenIsSet(false);
    this.disable_codegen = false;
    this.pipelines = null;
    this.hdfs_scan_node = null;
    this.hbase_scan_node = null;
    this.kudu_scan_node = null;
    this.data_source_node = null;
    this.hash_join_node = null;
    this.nested_loop_join_node = null;
    this.agg_node = null;
    this.sort_node = null;
    this.union_node = null;
    this.exchange_node = null;
    this.analytic_node = null;
    this.unnest_node = null;
    this.label = null;
    this.label_detail = null;
    this.estimated_stats = null;
    this.runtime_filters = null;
    this.resource_profile = null;
    this.cardinality_check_node = null;
  }

  public int getNode_id() {
    return this.node_id;
  }

  public void setNode_id(int node_id) {
    this.node_id = node_id;
    setNode_idIsSet(true);
  }

  public void unsetNode_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  /** Returns true if field node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_id() {
    return EncodingUtils.testBit(__isset_bitfield, __NODE_ID_ISSET_ID);
  }

  public void setNode_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NODE_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TPlanNodeType
   */
  public TPlanNodeType getNode_type() {
    return this.node_type;
  }

  /**
   * 
   * @see TPlanNodeType
   */
  public void setNode_type(TPlanNodeType node_type) {
    this.node_type = node_type;
  }

  public void unsetNode_type() {
    this.node_type = null;
  }

  /** Returns true if field node_type is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_type() {
    return this.node_type != null;
  }

  public void setNode_typeIsSet(boolean value) {
    if (!value) {
      this.node_type = null;
    }
  }

  public int getNum_children() {
    return this.num_children;
  }

  public void setNum_children(int num_children) {
    this.num_children = num_children;
    setNum_childrenIsSet(true);
  }

  public void unsetNum_children() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  /** Returns true if field num_children is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_children() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  public void setNum_childrenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID, value);
  }

  public long getLimit() {
    return this.limit;
  }

  public void setLimit(long limit) {
    this.limit = limit;
    setLimitIsSet(true);
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public int getRow_tuplesSize() {
    return (this.row_tuples == null) ? 0 : this.row_tuples.size();
  }

  public java.util.Iterator<Integer> getRow_tuplesIterator() {
    return (this.row_tuples == null) ? null : this.row_tuples.iterator();
  }

  public void addToRow_tuples(int elem) {
    if (this.row_tuples == null) {
      this.row_tuples = new ArrayList<Integer>();
    }
    this.row_tuples.add(elem);
  }

  public List<Integer> getRow_tuples() {
    return this.row_tuples;
  }

  public void setRow_tuples(List<Integer> row_tuples) {
    this.row_tuples = row_tuples;
  }

  public void unsetRow_tuples() {
    this.row_tuples = null;
  }

  /** Returns true if field row_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetRow_tuples() {
    return this.row_tuples != null;
  }

  public void setRow_tuplesIsSet(boolean value) {
    if (!value) {
      this.row_tuples = null;
    }
  }

  public int getNullable_tuplesSize() {
    return (this.nullable_tuples == null) ? 0 : this.nullable_tuples.size();
  }

  public java.util.Iterator<Boolean> getNullable_tuplesIterator() {
    return (this.nullable_tuples == null) ? null : this.nullable_tuples.iterator();
  }

  public void addToNullable_tuples(boolean elem) {
    if (this.nullable_tuples == null) {
      this.nullable_tuples = new ArrayList<Boolean>();
    }
    this.nullable_tuples.add(elem);
  }

  public List<Boolean> getNullable_tuples() {
    return this.nullable_tuples;
  }

  public void setNullable_tuples(List<Boolean> nullable_tuples) {
    this.nullable_tuples = nullable_tuples;
  }

  public void unsetNullable_tuples() {
    this.nullable_tuples = null;
  }

  /** Returns true if field nullable_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetNullable_tuples() {
    return this.nullable_tuples != null;
  }

  public void setNullable_tuplesIsSet(boolean value) {
    if (!value) {
      this.nullable_tuples = null;
    }
  }

  public int getConjunctsSize() {
    return (this.conjuncts == null) ? 0 : this.conjuncts.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getConjunctsIterator() {
    return (this.conjuncts == null) ? null : this.conjuncts.iterator();
  }

  public void addToConjuncts(org.apache.impala.thrift.TExpr elem) {
    if (this.conjuncts == null) {
      this.conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.conjuncts.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getConjuncts() {
    return this.conjuncts;
  }

  public void setConjuncts(List<org.apache.impala.thrift.TExpr> conjuncts) {
    this.conjuncts = conjuncts;
  }

  public void unsetConjuncts() {
    this.conjuncts = null;
  }

  /** Returns true if field conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetConjuncts() {
    return this.conjuncts != null;
  }

  public void setConjunctsIsSet(boolean value) {
    if (!value) {
      this.conjuncts = null;
    }
  }

  public boolean isDisable_codegen() {
    return this.disable_codegen;
  }

  public void setDisable_codegen(boolean disable_codegen) {
    this.disable_codegen = disable_codegen;
    setDisable_codegenIsSet(true);
  }

  public void unsetDisable_codegen() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLE_CODEGEN_ISSET_ID);
  }

  /** Returns true if field disable_codegen is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_codegen() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLE_CODEGEN_ISSET_ID);
  }

  public void setDisable_codegenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLE_CODEGEN_ISSET_ID, value);
  }

  public int getPipelinesSize() {
    return (this.pipelines == null) ? 0 : this.pipelines.size();
  }

  public java.util.Iterator<TPipelineMembership> getPipelinesIterator() {
    return (this.pipelines == null) ? null : this.pipelines.iterator();
  }

  public void addToPipelines(TPipelineMembership elem) {
    if (this.pipelines == null) {
      this.pipelines = new ArrayList<TPipelineMembership>();
    }
    this.pipelines.add(elem);
  }

  public List<TPipelineMembership> getPipelines() {
    return this.pipelines;
  }

  public void setPipelines(List<TPipelineMembership> pipelines) {
    this.pipelines = pipelines;
  }

  public void unsetPipelines() {
    this.pipelines = null;
  }

  /** Returns true if field pipelines is set (has been assigned a value) and false otherwise */
  public boolean isSetPipelines() {
    return this.pipelines != null;
  }

  public void setPipelinesIsSet(boolean value) {
    if (!value) {
      this.pipelines = null;
    }
  }

  public THdfsScanNode getHdfs_scan_node() {
    return this.hdfs_scan_node;
  }

  public void setHdfs_scan_node(THdfsScanNode hdfs_scan_node) {
    this.hdfs_scan_node = hdfs_scan_node;
  }

  public void unsetHdfs_scan_node() {
    this.hdfs_scan_node = null;
  }

  /** Returns true if field hdfs_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfs_scan_node() {
    return this.hdfs_scan_node != null;
  }

  public void setHdfs_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.hdfs_scan_node = null;
    }
  }

  public THBaseScanNode getHbase_scan_node() {
    return this.hbase_scan_node;
  }

  public void setHbase_scan_node(THBaseScanNode hbase_scan_node) {
    this.hbase_scan_node = hbase_scan_node;
  }

  public void unsetHbase_scan_node() {
    this.hbase_scan_node = null;
  }

  /** Returns true if field hbase_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetHbase_scan_node() {
    return this.hbase_scan_node != null;
  }

  public void setHbase_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.hbase_scan_node = null;
    }
  }

  public TKuduScanNode getKudu_scan_node() {
    return this.kudu_scan_node;
  }

  public void setKudu_scan_node(TKuduScanNode kudu_scan_node) {
    this.kudu_scan_node = kudu_scan_node;
  }

  public void unsetKudu_scan_node() {
    this.kudu_scan_node = null;
  }

  /** Returns true if field kudu_scan_node is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_scan_node() {
    return this.kudu_scan_node != null;
  }

  public void setKudu_scan_nodeIsSet(boolean value) {
    if (!value) {
      this.kudu_scan_node = null;
    }
  }

  public TDataSourceScanNode getData_source_node() {
    return this.data_source_node;
  }

  public void setData_source_node(TDataSourceScanNode data_source_node) {
    this.data_source_node = data_source_node;
  }

  public void unsetData_source_node() {
    this.data_source_node = null;
  }

  /** Returns true if field data_source_node is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_node() {
    return this.data_source_node != null;
  }

  public void setData_source_nodeIsSet(boolean value) {
    if (!value) {
      this.data_source_node = null;
    }
  }

  public THashJoinNode getHash_join_node() {
    return this.hash_join_node;
  }

  public void setHash_join_node(THashJoinNode hash_join_node) {
    this.hash_join_node = hash_join_node;
  }

  public void unsetHash_join_node() {
    this.hash_join_node = null;
  }

  /** Returns true if field hash_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetHash_join_node() {
    return this.hash_join_node != null;
  }

  public void setHash_join_nodeIsSet(boolean value) {
    if (!value) {
      this.hash_join_node = null;
    }
  }

  public TNestedLoopJoinNode getNested_loop_join_node() {
    return this.nested_loop_join_node;
  }

  public void setNested_loop_join_node(TNestedLoopJoinNode nested_loop_join_node) {
    this.nested_loop_join_node = nested_loop_join_node;
  }

  public void unsetNested_loop_join_node() {
    this.nested_loop_join_node = null;
  }

  /** Returns true if field nested_loop_join_node is set (has been assigned a value) and false otherwise */
  public boolean isSetNested_loop_join_node() {
    return this.nested_loop_join_node != null;
  }

  public void setNested_loop_join_nodeIsSet(boolean value) {
    if (!value) {
      this.nested_loop_join_node = null;
    }
  }

  public TAggregationNode getAgg_node() {
    return this.agg_node;
  }

  public void setAgg_node(TAggregationNode agg_node) {
    this.agg_node = agg_node;
  }

  public void unsetAgg_node() {
    this.agg_node = null;
  }

  /** Returns true if field agg_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_node() {
    return this.agg_node != null;
  }

  public void setAgg_nodeIsSet(boolean value) {
    if (!value) {
      this.agg_node = null;
    }
  }

  public TSortNode getSort_node() {
    return this.sort_node;
  }

  public void setSort_node(TSortNode sort_node) {
    this.sort_node = sort_node;
  }

  public void unsetSort_node() {
    this.sort_node = null;
  }

  /** Returns true if field sort_node is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_node() {
    return this.sort_node != null;
  }

  public void setSort_nodeIsSet(boolean value) {
    if (!value) {
      this.sort_node = null;
    }
  }

  public TUnionNode getUnion_node() {
    return this.union_node;
  }

  public void setUnion_node(TUnionNode union_node) {
    this.union_node = union_node;
  }

  public void unsetUnion_node() {
    this.union_node = null;
  }

  /** Returns true if field union_node is set (has been assigned a value) and false otherwise */
  public boolean isSetUnion_node() {
    return this.union_node != null;
  }

  public void setUnion_nodeIsSet(boolean value) {
    if (!value) {
      this.union_node = null;
    }
  }

  public TExchangeNode getExchange_node() {
    return this.exchange_node;
  }

  public void setExchange_node(TExchangeNode exchange_node) {
    this.exchange_node = exchange_node;
  }

  public void unsetExchange_node() {
    this.exchange_node = null;
  }

  /** Returns true if field exchange_node is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange_node() {
    return this.exchange_node != null;
  }

  public void setExchange_nodeIsSet(boolean value) {
    if (!value) {
      this.exchange_node = null;
    }
  }

  public TAnalyticNode getAnalytic_node() {
    return this.analytic_node;
  }

  public void setAnalytic_node(TAnalyticNode analytic_node) {
    this.analytic_node = analytic_node;
  }

  public void unsetAnalytic_node() {
    this.analytic_node = null;
  }

  /** Returns true if field analytic_node is set (has been assigned a value) and false otherwise */
  public boolean isSetAnalytic_node() {
    return this.analytic_node != null;
  }

  public void setAnalytic_nodeIsSet(boolean value) {
    if (!value) {
      this.analytic_node = null;
    }
  }

  public TUnnestNode getUnnest_node() {
    return this.unnest_node;
  }

  public void setUnnest_node(TUnnestNode unnest_node) {
    this.unnest_node = unnest_node;
  }

  public void unsetUnnest_node() {
    this.unnest_node = null;
  }

  /** Returns true if field unnest_node is set (has been assigned a value) and false otherwise */
  public boolean isSetUnnest_node() {
    return this.unnest_node != null;
  }

  public void setUnnest_nodeIsSet(boolean value) {
    if (!value) {
      this.unnest_node = null;
    }
  }

  public String getLabel() {
    return this.label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public String getLabel_detail() {
    return this.label_detail;
  }

  public void setLabel_detail(String label_detail) {
    this.label_detail = label_detail;
  }

  public void unsetLabel_detail() {
    this.label_detail = null;
  }

  /** Returns true if field label_detail is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel_detail() {
    return this.label_detail != null;
  }

  public void setLabel_detailIsSet(boolean value) {
    if (!value) {
      this.label_detail = null;
    }
  }

  public org.apache.impala.thrift.TExecStats getEstimated_stats() {
    return this.estimated_stats;
  }

  public void setEstimated_stats(org.apache.impala.thrift.TExecStats estimated_stats) {
    this.estimated_stats = estimated_stats;
  }

  public void unsetEstimated_stats() {
    this.estimated_stats = null;
  }

  /** Returns true if field estimated_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimated_stats() {
    return this.estimated_stats != null;
  }

  public void setEstimated_statsIsSet(boolean value) {
    if (!value) {
      this.estimated_stats = null;
    }
  }

  public int getRuntime_filtersSize() {
    return (this.runtime_filters == null) ? 0 : this.runtime_filters.size();
  }

  public java.util.Iterator<TRuntimeFilterDesc> getRuntime_filtersIterator() {
    return (this.runtime_filters == null) ? null : this.runtime_filters.iterator();
  }

  public void addToRuntime_filters(TRuntimeFilterDesc elem) {
    if (this.runtime_filters == null) {
      this.runtime_filters = new ArrayList<TRuntimeFilterDesc>();
    }
    this.runtime_filters.add(elem);
  }

  public List<TRuntimeFilterDesc> getRuntime_filters() {
    return this.runtime_filters;
  }

  public void setRuntime_filters(List<TRuntimeFilterDesc> runtime_filters) {
    this.runtime_filters = runtime_filters;
  }

  public void unsetRuntime_filters() {
    this.runtime_filters = null;
  }

  /** Returns true if field runtime_filters is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filters() {
    return this.runtime_filters != null;
  }

  public void setRuntime_filtersIsSet(boolean value) {
    if (!value) {
      this.runtime_filters = null;
    }
  }

  public org.apache.impala.thrift.TBackendResourceProfile getResource_profile() {
    return this.resource_profile;
  }

  public void setResource_profile(org.apache.impala.thrift.TBackendResourceProfile resource_profile) {
    this.resource_profile = resource_profile;
  }

  public void unsetResource_profile() {
    this.resource_profile = null;
  }

  /** Returns true if field resource_profile is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_profile() {
    return this.resource_profile != null;
  }

  public void setResource_profileIsSet(boolean value) {
    if (!value) {
      this.resource_profile = null;
    }
  }

  public TCardinalityCheckNode getCardinality_check_node() {
    return this.cardinality_check_node;
  }

  public void setCardinality_check_node(TCardinalityCheckNode cardinality_check_node) {
    this.cardinality_check_node = cardinality_check_node;
  }

  public void unsetCardinality_check_node() {
    this.cardinality_check_node = null;
  }

  /** Returns true if field cardinality_check_node is set (has been assigned a value) and false otherwise */
  public boolean isSetCardinality_check_node() {
    return this.cardinality_check_node != null;
  }

  public void setCardinality_check_nodeIsSet(boolean value) {
    if (!value) {
      this.cardinality_check_node = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNode_id();
      } else {
        setNode_id((Integer)value);
      }
      break;

    case NODE_TYPE:
      if (value == null) {
        unsetNode_type();
      } else {
        setNode_type((TPlanNodeType)value);
      }
      break;

    case NUM_CHILDREN:
      if (value == null) {
        unsetNum_children();
      } else {
        setNum_children((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Long)value);
      }
      break;

    case ROW_TUPLES:
      if (value == null) {
        unsetRow_tuples();
      } else {
        setRow_tuples((List<Integer>)value);
      }
      break;

    case NULLABLE_TUPLES:
      if (value == null) {
        unsetNullable_tuples();
      } else {
        setNullable_tuples((List<Boolean>)value);
      }
      break;

    case CONJUNCTS:
      if (value == null) {
        unsetConjuncts();
      } else {
        setConjuncts((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case DISABLE_CODEGEN:
      if (value == null) {
        unsetDisable_codegen();
      } else {
        setDisable_codegen((Boolean)value);
      }
      break;

    case PIPELINES:
      if (value == null) {
        unsetPipelines();
      } else {
        setPipelines((List<TPipelineMembership>)value);
      }
      break;

    case HDFS_SCAN_NODE:
      if (value == null) {
        unsetHdfs_scan_node();
      } else {
        setHdfs_scan_node((THdfsScanNode)value);
      }
      break;

    case HBASE_SCAN_NODE:
      if (value == null) {
        unsetHbase_scan_node();
      } else {
        setHbase_scan_node((THBaseScanNode)value);
      }
      break;

    case KUDU_SCAN_NODE:
      if (value == null) {
        unsetKudu_scan_node();
      } else {
        setKudu_scan_node((TKuduScanNode)value);
      }
      break;

    case DATA_SOURCE_NODE:
      if (value == null) {
        unsetData_source_node();
      } else {
        setData_source_node((TDataSourceScanNode)value);
      }
      break;

    case HASH_JOIN_NODE:
      if (value == null) {
        unsetHash_join_node();
      } else {
        setHash_join_node((THashJoinNode)value);
      }
      break;

    case NESTED_LOOP_JOIN_NODE:
      if (value == null) {
        unsetNested_loop_join_node();
      } else {
        setNested_loop_join_node((TNestedLoopJoinNode)value);
      }
      break;

    case AGG_NODE:
      if (value == null) {
        unsetAgg_node();
      } else {
        setAgg_node((TAggregationNode)value);
      }
      break;

    case SORT_NODE:
      if (value == null) {
        unsetSort_node();
      } else {
        setSort_node((TSortNode)value);
      }
      break;

    case UNION_NODE:
      if (value == null) {
        unsetUnion_node();
      } else {
        setUnion_node((TUnionNode)value);
      }
      break;

    case EXCHANGE_NODE:
      if (value == null) {
        unsetExchange_node();
      } else {
        setExchange_node((TExchangeNode)value);
      }
      break;

    case ANALYTIC_NODE:
      if (value == null) {
        unsetAnalytic_node();
      } else {
        setAnalytic_node((TAnalyticNode)value);
      }
      break;

    case UNNEST_NODE:
      if (value == null) {
        unsetUnnest_node();
      } else {
        setUnnest_node((TUnnestNode)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case LABEL_DETAIL:
      if (value == null) {
        unsetLabel_detail();
      } else {
        setLabel_detail((String)value);
      }
      break;

    case ESTIMATED_STATS:
      if (value == null) {
        unsetEstimated_stats();
      } else {
        setEstimated_stats((org.apache.impala.thrift.TExecStats)value);
      }
      break;

    case RUNTIME_FILTERS:
      if (value == null) {
        unsetRuntime_filters();
      } else {
        setRuntime_filters((List<TRuntimeFilterDesc>)value);
      }
      break;

    case RESOURCE_PROFILE:
      if (value == null) {
        unsetResource_profile();
      } else {
        setResource_profile((org.apache.impala.thrift.TBackendResourceProfile)value);
      }
      break;

    case CARDINALITY_CHECK_NODE:
      if (value == null) {
        unsetCardinality_check_node();
      } else {
        setCardinality_check_node((TCardinalityCheckNode)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNode_id();

    case NODE_TYPE:
      return getNode_type();

    case NUM_CHILDREN:
      return getNum_children();

    case LIMIT:
      return getLimit();

    case ROW_TUPLES:
      return getRow_tuples();

    case NULLABLE_TUPLES:
      return getNullable_tuples();

    case CONJUNCTS:
      return getConjuncts();

    case DISABLE_CODEGEN:
      return isDisable_codegen();

    case PIPELINES:
      return getPipelines();

    case HDFS_SCAN_NODE:
      return getHdfs_scan_node();

    case HBASE_SCAN_NODE:
      return getHbase_scan_node();

    case KUDU_SCAN_NODE:
      return getKudu_scan_node();

    case DATA_SOURCE_NODE:
      return getData_source_node();

    case HASH_JOIN_NODE:
      return getHash_join_node();

    case NESTED_LOOP_JOIN_NODE:
      return getNested_loop_join_node();

    case AGG_NODE:
      return getAgg_node();

    case SORT_NODE:
      return getSort_node();

    case UNION_NODE:
      return getUnion_node();

    case EXCHANGE_NODE:
      return getExchange_node();

    case ANALYTIC_NODE:
      return getAnalytic_node();

    case UNNEST_NODE:
      return getUnnest_node();

    case LABEL:
      return getLabel();

    case LABEL_DETAIL:
      return getLabel_detail();

    case ESTIMATED_STATS:
      return getEstimated_stats();

    case RUNTIME_FILTERS:
      return getRuntime_filters();

    case RESOURCE_PROFILE:
      return getResource_profile();

    case CARDINALITY_CHECK_NODE:
      return getCardinality_check_node();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNode_id();
    case NODE_TYPE:
      return isSetNode_type();
    case NUM_CHILDREN:
      return isSetNum_children();
    case LIMIT:
      return isSetLimit();
    case ROW_TUPLES:
      return isSetRow_tuples();
    case NULLABLE_TUPLES:
      return isSetNullable_tuples();
    case CONJUNCTS:
      return isSetConjuncts();
    case DISABLE_CODEGEN:
      return isSetDisable_codegen();
    case PIPELINES:
      return isSetPipelines();
    case HDFS_SCAN_NODE:
      return isSetHdfs_scan_node();
    case HBASE_SCAN_NODE:
      return isSetHbase_scan_node();
    case KUDU_SCAN_NODE:
      return isSetKudu_scan_node();
    case DATA_SOURCE_NODE:
      return isSetData_source_node();
    case HASH_JOIN_NODE:
      return isSetHash_join_node();
    case NESTED_LOOP_JOIN_NODE:
      return isSetNested_loop_join_node();
    case AGG_NODE:
      return isSetAgg_node();
    case SORT_NODE:
      return isSetSort_node();
    case UNION_NODE:
      return isSetUnion_node();
    case EXCHANGE_NODE:
      return isSetExchange_node();
    case ANALYTIC_NODE:
      return isSetAnalytic_node();
    case UNNEST_NODE:
      return isSetUnnest_node();
    case LABEL:
      return isSetLabel();
    case LABEL_DETAIL:
      return isSetLabel_detail();
    case ESTIMATED_STATS:
      return isSetEstimated_stats();
    case RUNTIME_FILTERS:
      return isSetRuntime_filters();
    case RESOURCE_PROFILE:
      return isSetResource_profile();
    case CARDINALITY_CHECK_NODE:
      return isSetCardinality_check_node();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanNode)
      return this.equals((TPlanNode)that);
    return false;
  }

  public boolean equals(TPlanNode that) {
    if (that == null)
      return false;

    boolean this_present_node_id = true;
    boolean that_present_node_id = true;
    if (this_present_node_id || that_present_node_id) {
      if (!(this_present_node_id && that_present_node_id))
        return false;
      if (this.node_id != that.node_id)
        return false;
    }

    boolean this_present_node_type = true && this.isSetNode_type();
    boolean that_present_node_type = true && that.isSetNode_type();
    if (this_present_node_type || that_present_node_type) {
      if (!(this_present_node_type && that_present_node_type))
        return false;
      if (!this.node_type.equals(that.node_type))
        return false;
    }

    boolean this_present_num_children = true;
    boolean that_present_num_children = true;
    if (this_present_num_children || that_present_num_children) {
      if (!(this_present_num_children && that_present_num_children))
        return false;
      if (this.num_children != that.num_children)
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_row_tuples = true && this.isSetRow_tuples();
    boolean that_present_row_tuples = true && that.isSetRow_tuples();
    if (this_present_row_tuples || that_present_row_tuples) {
      if (!(this_present_row_tuples && that_present_row_tuples))
        return false;
      if (!this.row_tuples.equals(that.row_tuples))
        return false;
    }

    boolean this_present_nullable_tuples = true && this.isSetNullable_tuples();
    boolean that_present_nullable_tuples = true && that.isSetNullable_tuples();
    if (this_present_nullable_tuples || that_present_nullable_tuples) {
      if (!(this_present_nullable_tuples && that_present_nullable_tuples))
        return false;
      if (!this.nullable_tuples.equals(that.nullable_tuples))
        return false;
    }

    boolean this_present_conjuncts = true && this.isSetConjuncts();
    boolean that_present_conjuncts = true && that.isSetConjuncts();
    if (this_present_conjuncts || that_present_conjuncts) {
      if (!(this_present_conjuncts && that_present_conjuncts))
        return false;
      if (!this.conjuncts.equals(that.conjuncts))
        return false;
    }

    boolean this_present_disable_codegen = true;
    boolean that_present_disable_codegen = true;
    if (this_present_disable_codegen || that_present_disable_codegen) {
      if (!(this_present_disable_codegen && that_present_disable_codegen))
        return false;
      if (this.disable_codegen != that.disable_codegen)
        return false;
    }

    boolean this_present_pipelines = true && this.isSetPipelines();
    boolean that_present_pipelines = true && that.isSetPipelines();
    if (this_present_pipelines || that_present_pipelines) {
      if (!(this_present_pipelines && that_present_pipelines))
        return false;
      if (!this.pipelines.equals(that.pipelines))
        return false;
    }

    boolean this_present_hdfs_scan_node = true && this.isSetHdfs_scan_node();
    boolean that_present_hdfs_scan_node = true && that.isSetHdfs_scan_node();
    if (this_present_hdfs_scan_node || that_present_hdfs_scan_node) {
      if (!(this_present_hdfs_scan_node && that_present_hdfs_scan_node))
        return false;
      if (!this.hdfs_scan_node.equals(that.hdfs_scan_node))
        return false;
    }

    boolean this_present_hbase_scan_node = true && this.isSetHbase_scan_node();
    boolean that_present_hbase_scan_node = true && that.isSetHbase_scan_node();
    if (this_present_hbase_scan_node || that_present_hbase_scan_node) {
      if (!(this_present_hbase_scan_node && that_present_hbase_scan_node))
        return false;
      if (!this.hbase_scan_node.equals(that.hbase_scan_node))
        return false;
    }

    boolean this_present_kudu_scan_node = true && this.isSetKudu_scan_node();
    boolean that_present_kudu_scan_node = true && that.isSetKudu_scan_node();
    if (this_present_kudu_scan_node || that_present_kudu_scan_node) {
      if (!(this_present_kudu_scan_node && that_present_kudu_scan_node))
        return false;
      if (!this.kudu_scan_node.equals(that.kudu_scan_node))
        return false;
    }

    boolean this_present_data_source_node = true && this.isSetData_source_node();
    boolean that_present_data_source_node = true && that.isSetData_source_node();
    if (this_present_data_source_node || that_present_data_source_node) {
      if (!(this_present_data_source_node && that_present_data_source_node))
        return false;
      if (!this.data_source_node.equals(that.data_source_node))
        return false;
    }

    boolean this_present_hash_join_node = true && this.isSetHash_join_node();
    boolean that_present_hash_join_node = true && that.isSetHash_join_node();
    if (this_present_hash_join_node || that_present_hash_join_node) {
      if (!(this_present_hash_join_node && that_present_hash_join_node))
        return false;
      if (!this.hash_join_node.equals(that.hash_join_node))
        return false;
    }

    boolean this_present_nested_loop_join_node = true && this.isSetNested_loop_join_node();
    boolean that_present_nested_loop_join_node = true && that.isSetNested_loop_join_node();
    if (this_present_nested_loop_join_node || that_present_nested_loop_join_node) {
      if (!(this_present_nested_loop_join_node && that_present_nested_loop_join_node))
        return false;
      if (!this.nested_loop_join_node.equals(that.nested_loop_join_node))
        return false;
    }

    boolean this_present_agg_node = true && this.isSetAgg_node();
    boolean that_present_agg_node = true && that.isSetAgg_node();
    if (this_present_agg_node || that_present_agg_node) {
      if (!(this_present_agg_node && that_present_agg_node))
        return false;
      if (!this.agg_node.equals(that.agg_node))
        return false;
    }

    boolean this_present_sort_node = true && this.isSetSort_node();
    boolean that_present_sort_node = true && that.isSetSort_node();
    if (this_present_sort_node || that_present_sort_node) {
      if (!(this_present_sort_node && that_present_sort_node))
        return false;
      if (!this.sort_node.equals(that.sort_node))
        return false;
    }

    boolean this_present_union_node = true && this.isSetUnion_node();
    boolean that_present_union_node = true && that.isSetUnion_node();
    if (this_present_union_node || that_present_union_node) {
      if (!(this_present_union_node && that_present_union_node))
        return false;
      if (!this.union_node.equals(that.union_node))
        return false;
    }

    boolean this_present_exchange_node = true && this.isSetExchange_node();
    boolean that_present_exchange_node = true && that.isSetExchange_node();
    if (this_present_exchange_node || that_present_exchange_node) {
      if (!(this_present_exchange_node && that_present_exchange_node))
        return false;
      if (!this.exchange_node.equals(that.exchange_node))
        return false;
    }

    boolean this_present_analytic_node = true && this.isSetAnalytic_node();
    boolean that_present_analytic_node = true && that.isSetAnalytic_node();
    if (this_present_analytic_node || that_present_analytic_node) {
      if (!(this_present_analytic_node && that_present_analytic_node))
        return false;
      if (!this.analytic_node.equals(that.analytic_node))
        return false;
    }

    boolean this_present_unnest_node = true && this.isSetUnnest_node();
    boolean that_present_unnest_node = true && that.isSetUnnest_node();
    if (this_present_unnest_node || that_present_unnest_node) {
      if (!(this_present_unnest_node && that_present_unnest_node))
        return false;
      if (!this.unnest_node.equals(that.unnest_node))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_label_detail = true && this.isSetLabel_detail();
    boolean that_present_label_detail = true && that.isSetLabel_detail();
    if (this_present_label_detail || that_present_label_detail) {
      if (!(this_present_label_detail && that_present_label_detail))
        return false;
      if (!this.label_detail.equals(that.label_detail))
        return false;
    }

    boolean this_present_estimated_stats = true && this.isSetEstimated_stats();
    boolean that_present_estimated_stats = true && that.isSetEstimated_stats();
    if (this_present_estimated_stats || that_present_estimated_stats) {
      if (!(this_present_estimated_stats && that_present_estimated_stats))
        return false;
      if (!this.estimated_stats.equals(that.estimated_stats))
        return false;
    }

    boolean this_present_runtime_filters = true && this.isSetRuntime_filters();
    boolean that_present_runtime_filters = true && that.isSetRuntime_filters();
    if (this_present_runtime_filters || that_present_runtime_filters) {
      if (!(this_present_runtime_filters && that_present_runtime_filters))
        return false;
      if (!this.runtime_filters.equals(that.runtime_filters))
        return false;
    }

    boolean this_present_resource_profile = true && this.isSetResource_profile();
    boolean that_present_resource_profile = true && that.isSetResource_profile();
    if (this_present_resource_profile || that_present_resource_profile) {
      if (!(this_present_resource_profile && that_present_resource_profile))
        return false;
      if (!this.resource_profile.equals(that.resource_profile))
        return false;
    }

    boolean this_present_cardinality_check_node = true && this.isSetCardinality_check_node();
    boolean that_present_cardinality_check_node = true && that.isSetCardinality_check_node();
    if (this_present_cardinality_check_node || that_present_cardinality_check_node) {
      if (!(this_present_cardinality_check_node && that_present_cardinality_check_node))
        return false;
      if (!this.cardinality_check_node.equals(that.cardinality_check_node))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_node_id = true;
    list.add(present_node_id);
    if (present_node_id)
      list.add(node_id);

    boolean present_node_type = true && (isSetNode_type());
    list.add(present_node_type);
    if (present_node_type)
      list.add(node_type.getValue());

    boolean present_num_children = true;
    list.add(present_num_children);
    if (present_num_children)
      list.add(num_children);

    boolean present_limit = true;
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    boolean present_row_tuples = true && (isSetRow_tuples());
    list.add(present_row_tuples);
    if (present_row_tuples)
      list.add(row_tuples);

    boolean present_nullable_tuples = true && (isSetNullable_tuples());
    list.add(present_nullable_tuples);
    if (present_nullable_tuples)
      list.add(nullable_tuples);

    boolean present_conjuncts = true && (isSetConjuncts());
    list.add(present_conjuncts);
    if (present_conjuncts)
      list.add(conjuncts);

    boolean present_disable_codegen = true;
    list.add(present_disable_codegen);
    if (present_disable_codegen)
      list.add(disable_codegen);

    boolean present_pipelines = true && (isSetPipelines());
    list.add(present_pipelines);
    if (present_pipelines)
      list.add(pipelines);

    boolean present_hdfs_scan_node = true && (isSetHdfs_scan_node());
    list.add(present_hdfs_scan_node);
    if (present_hdfs_scan_node)
      list.add(hdfs_scan_node);

    boolean present_hbase_scan_node = true && (isSetHbase_scan_node());
    list.add(present_hbase_scan_node);
    if (present_hbase_scan_node)
      list.add(hbase_scan_node);

    boolean present_kudu_scan_node = true && (isSetKudu_scan_node());
    list.add(present_kudu_scan_node);
    if (present_kudu_scan_node)
      list.add(kudu_scan_node);

    boolean present_data_source_node = true && (isSetData_source_node());
    list.add(present_data_source_node);
    if (present_data_source_node)
      list.add(data_source_node);

    boolean present_hash_join_node = true && (isSetHash_join_node());
    list.add(present_hash_join_node);
    if (present_hash_join_node)
      list.add(hash_join_node);

    boolean present_nested_loop_join_node = true && (isSetNested_loop_join_node());
    list.add(present_nested_loop_join_node);
    if (present_nested_loop_join_node)
      list.add(nested_loop_join_node);

    boolean present_agg_node = true && (isSetAgg_node());
    list.add(present_agg_node);
    if (present_agg_node)
      list.add(agg_node);

    boolean present_sort_node = true && (isSetSort_node());
    list.add(present_sort_node);
    if (present_sort_node)
      list.add(sort_node);

    boolean present_union_node = true && (isSetUnion_node());
    list.add(present_union_node);
    if (present_union_node)
      list.add(union_node);

    boolean present_exchange_node = true && (isSetExchange_node());
    list.add(present_exchange_node);
    if (present_exchange_node)
      list.add(exchange_node);

    boolean present_analytic_node = true && (isSetAnalytic_node());
    list.add(present_analytic_node);
    if (present_analytic_node)
      list.add(analytic_node);

    boolean present_unnest_node = true && (isSetUnnest_node());
    list.add(present_unnest_node);
    if (present_unnest_node)
      list.add(unnest_node);

    boolean present_label = true && (isSetLabel());
    list.add(present_label);
    if (present_label)
      list.add(label);

    boolean present_label_detail = true && (isSetLabel_detail());
    list.add(present_label_detail);
    if (present_label_detail)
      list.add(label_detail);

    boolean present_estimated_stats = true && (isSetEstimated_stats());
    list.add(present_estimated_stats);
    if (present_estimated_stats)
      list.add(estimated_stats);

    boolean present_runtime_filters = true && (isSetRuntime_filters());
    list.add(present_runtime_filters);
    if (present_runtime_filters)
      list.add(runtime_filters);

    boolean present_resource_profile = true && (isSetResource_profile());
    list.add(present_resource_profile);
    if (present_resource_profile)
      list.add(resource_profile);

    boolean present_cardinality_check_node = true && (isSetCardinality_check_node());
    list.add(present_cardinality_check_node);
    if (present_cardinality_check_node)
      list.add(cardinality_check_node);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNode_id()).compareTo(other.isSetNode_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_id, other.node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNode_type()).compareTo(other.isSetNode_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_type, other.node_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_children()).compareTo(other.isSetNum_children());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_children()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_children, other.num_children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRow_tuples()).compareTo(other.isSetRow_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRow_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_tuples, other.row_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNullable_tuples()).compareTo(other.isSetNullable_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNullable_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nullable_tuples, other.nullable_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConjuncts()).compareTo(other.isSetConjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conjuncts, other.conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_codegen()).compareTo(other.isSetDisable_codegen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_codegen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_codegen, other.disable_codegen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPipelines()).compareTo(other.isSetPipelines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipelines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipelines, other.pipelines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHdfs_scan_node()).compareTo(other.isSetHdfs_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfs_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_scan_node, other.hdfs_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbase_scan_node()).compareTo(other.isSetHbase_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbase_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbase_scan_node, other.hbase_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_scan_node()).compareTo(other.isSetKudu_scan_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_scan_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_scan_node, other.kudu_scan_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData_source_node()).compareTo(other.isSetData_source_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_node, other.data_source_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHash_join_node()).compareTo(other.isSetHash_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash_join_node, other.hash_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNested_loop_join_node()).compareTo(other.isSetNested_loop_join_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNested_loop_join_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nested_loop_join_node, other.nested_loop_join_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgg_node()).compareTo(other.isSetAgg_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_node, other.agg_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_node()).compareTo(other.isSetSort_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_node, other.sort_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnion_node()).compareTo(other.isSetUnion_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnion_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.union_node, other.union_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchange_node()).compareTo(other.isSetExchange_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange_node, other.exchange_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnalytic_node()).compareTo(other.isSetAnalytic_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnalytic_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analytic_node, other.analytic_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnnest_node()).compareTo(other.isSetUnnest_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnnest_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unnest_node, other.unnest_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel_detail()).compareTo(other.isSetLabel_detail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel_detail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label_detail, other.label_detail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstimated_stats()).compareTo(other.isSetEstimated_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimated_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimated_stats, other.estimated_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_filters()).compareTo(other.isSetRuntime_filters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filters, other.runtime_filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource_profile()).compareTo(other.isSetResource_profile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_profile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_profile, other.resource_profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardinality_check_node()).compareTo(other.isSetCardinality_check_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardinality_check_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardinality_check_node, other.cardinality_check_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanNode(");
    boolean first = true;

    sb.append("node_id:");
    sb.append(this.node_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("node_type:");
    if (this.node_type == null) {
      sb.append("null");
    } else {
      sb.append(this.node_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_children:");
    sb.append(this.num_children);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_tuples:");
    if (this.row_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.row_tuples);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nullable_tuples:");
    if (this.nullable_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.nullable_tuples);
    }
    first = false;
    if (isSetConjuncts()) {
      if (!first) sb.append(", ");
      sb.append("conjuncts:");
      if (this.conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.conjuncts);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("disable_codegen:");
    sb.append(this.disable_codegen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pipelines:");
    if (this.pipelines == null) {
      sb.append("null");
    } else {
      sb.append(this.pipelines);
    }
    first = false;
    if (isSetHdfs_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_scan_node:");
      if (this.hdfs_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfs_scan_node);
      }
      first = false;
    }
    if (isSetHbase_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("hbase_scan_node:");
      if (this.hbase_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.hbase_scan_node);
      }
      first = false;
    }
    if (isSetKudu_scan_node()) {
      if (!first) sb.append(", ");
      sb.append("kudu_scan_node:");
      if (this.kudu_scan_node == null) {
        sb.append("null");
      } else {
        sb.append(this.kudu_scan_node);
      }
      first = false;
    }
    if (isSetData_source_node()) {
      if (!first) sb.append(", ");
      sb.append("data_source_node:");
      if (this.data_source_node == null) {
        sb.append("null");
      } else {
        sb.append(this.data_source_node);
      }
      first = false;
    }
    if (isSetHash_join_node()) {
      if (!first) sb.append(", ");
      sb.append("hash_join_node:");
      if (this.hash_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.hash_join_node);
      }
      first = false;
    }
    if (isSetNested_loop_join_node()) {
      if (!first) sb.append(", ");
      sb.append("nested_loop_join_node:");
      if (this.nested_loop_join_node == null) {
        sb.append("null");
      } else {
        sb.append(this.nested_loop_join_node);
      }
      first = false;
    }
    if (isSetAgg_node()) {
      if (!first) sb.append(", ");
      sb.append("agg_node:");
      if (this.agg_node == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_node);
      }
      first = false;
    }
    if (isSetSort_node()) {
      if (!first) sb.append(", ");
      sb.append("sort_node:");
      if (this.sort_node == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_node);
      }
      first = false;
    }
    if (isSetUnion_node()) {
      if (!first) sb.append(", ");
      sb.append("union_node:");
      if (this.union_node == null) {
        sb.append("null");
      } else {
        sb.append(this.union_node);
      }
      first = false;
    }
    if (isSetExchange_node()) {
      if (!first) sb.append(", ");
      sb.append("exchange_node:");
      if (this.exchange_node == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange_node);
      }
      first = false;
    }
    if (isSetAnalytic_node()) {
      if (!first) sb.append(", ");
      sb.append("analytic_node:");
      if (this.analytic_node == null) {
        sb.append("null");
      } else {
        sb.append(this.analytic_node);
      }
      first = false;
    }
    if (isSetUnnest_node()) {
      if (!first) sb.append(", ");
      sb.append("unnest_node:");
      if (this.unnest_node == null) {
        sb.append("null");
      } else {
        sb.append(this.unnest_node);
      }
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetLabel_detail()) {
      if (!first) sb.append(", ");
      sb.append("label_detail:");
      if (this.label_detail == null) {
        sb.append("null");
      } else {
        sb.append(this.label_detail);
      }
      first = false;
    }
    if (isSetEstimated_stats()) {
      if (!first) sb.append(", ");
      sb.append("estimated_stats:");
      if (this.estimated_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.estimated_stats);
      }
      first = false;
    }
    if (isSetRuntime_filters()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filters:");
      if (this.runtime_filters == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_filters);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("resource_profile:");
    if (this.resource_profile == null) {
      sb.append("null");
    } else {
      sb.append(this.resource_profile);
    }
    first = false;
    if (isSetCardinality_check_node()) {
      if (!first) sb.append(", ");
      sb.append("cardinality_check_node:");
      if (this.cardinality_check_node == null) {
        sb.append("null");
      } else {
        sb.append(this.cardinality_check_node);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetNode_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'node_id' is unset! Struct:" + toString());
    }

    if (!isSetNode_type()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'node_type' is unset! Struct:" + toString());
    }

    if (!isSetNum_children()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_children' is unset! Struct:" + toString());
    }

    if (!isSetLimit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'limit' is unset! Struct:" + toString());
    }

    if (!isSetRow_tuples()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_tuples' is unset! Struct:" + toString());
    }

    if (!isSetNullable_tuples()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nullable_tuples' is unset! Struct:" + toString());
    }

    if (!isSetDisable_codegen()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'disable_codegen' is unset! Struct:" + toString());
    }

    if (!isSetPipelines()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pipelines' is unset! Struct:" + toString());
    }

    if (!isSetResource_profile()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resource_profile' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (hdfs_scan_node != null) {
      hdfs_scan_node.validate();
    }
    if (hbase_scan_node != null) {
      hbase_scan_node.validate();
    }
    if (kudu_scan_node != null) {
      kudu_scan_node.validate();
    }
    if (data_source_node != null) {
      data_source_node.validate();
    }
    if (hash_join_node != null) {
      hash_join_node.validate();
    }
    if (nested_loop_join_node != null) {
      nested_loop_join_node.validate();
    }
    if (agg_node != null) {
      agg_node.validate();
    }
    if (sort_node != null) {
      sort_node.validate();
    }
    if (union_node != null) {
      union_node.validate();
    }
    if (exchange_node != null) {
      exchange_node.validate();
    }
    if (analytic_node != null) {
      analytic_node.validate();
    }
    if (unnest_node != null) {
      unnest_node.validate();
    }
    if (estimated_stats != null) {
      estimated_stats.validate();
    }
    if (resource_profile != null) {
      resource_profile.validate();
    }
    if (cardinality_check_node != null) {
      cardinality_check_node.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanNodeStandardSchemeFactory implements SchemeFactory {
    public TPlanNodeStandardScheme getScheme() {
      return new TPlanNodeStandardScheme();
    }
  }

  private static class TPlanNodeStandardScheme extends StandardScheme<TPlanNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_id = iprot.readI32();
              struct.setNode_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.node_type = org.apache.impala.thrift.TPlanNodeType.findByValue(iprot.readI32());
              struct.setNode_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_children = iprot.readI32();
              struct.setNum_childrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.limit = iprot.readI64();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROW_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list238 = iprot.readListBegin();
                struct.row_tuples = new ArrayList<Integer>(_list238.size);
                int _elem239;
                for (int _i240 = 0; _i240 < _list238.size; ++_i240)
                {
                  _elem239 = iprot.readI32();
                  struct.row_tuples.add(_elem239);
                }
                iprot.readListEnd();
              }
              struct.setRow_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NULLABLE_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list241 = iprot.readListBegin();
                struct.nullable_tuples = new ArrayList<Boolean>(_list241.size);
                boolean _elem242;
                for (int _i243 = 0; _i243 < _list241.size; ++_i243)
                {
                  _elem242 = iprot.readBool();
                  struct.nullable_tuples.add(_elem242);
                }
                iprot.readListEnd();
              }
              struct.setNullable_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list244 = iprot.readListBegin();
                struct.conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>(_list244.size);
                org.apache.impala.thrift.TExpr _elem245;
                for (int _i246 = 0; _i246 < _list244.size; ++_i246)
                {
                  _elem245 = new org.apache.impala.thrift.TExpr();
                  _elem245.read(iprot);
                  struct.conjuncts.add(_elem245);
                }
                iprot.readListEnd();
              }
              struct.setConjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISABLE_CODEGEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_codegen = iprot.readBool();
              struct.setDisable_codegenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PIPELINES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list247 = iprot.readListBegin();
                struct.pipelines = new ArrayList<TPipelineMembership>(_list247.size);
                TPipelineMembership _elem248;
                for (int _i249 = 0; _i249 < _list247.size; ++_i249)
                {
                  _elem248 = new TPipelineMembership();
                  _elem248.read(iprot);
                  struct.pipelines.add(_elem248);
                }
                iprot.readListEnd();
              }
              struct.setPipelinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HDFS_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfs_scan_node = new THdfsScanNode();
              struct.hdfs_scan_node.read(iprot);
              struct.setHdfs_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // HBASE_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hbase_scan_node = new THBaseScanNode();
              struct.hbase_scan_node.read(iprot);
              struct.setHbase_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // KUDU_SCAN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.kudu_scan_node = new TKuduScanNode();
              struct.kudu_scan_node.read(iprot);
              struct.setKudu_scan_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DATA_SOURCE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data_source_node = new TDataSourceScanNode();
              struct.data_source_node.read(iprot);
              struct.setData_source_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HASH_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hash_join_node = new THashJoinNode();
              struct.hash_join_node.read(iprot);
              struct.setHash_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NESTED_LOOP_JOIN_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nested_loop_join_node = new TNestedLoopJoinNode();
              struct.nested_loop_join_node.read(iprot);
              struct.setNested_loop_join_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AGG_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agg_node = new TAggregationNode();
              struct.agg_node.read(iprot);
              struct.setAgg_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SORT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_node = new TSortNode();
              struct.sort_node.read(iprot);
              struct.setSort_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UNION_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.union_node = new TUnionNode();
              struct.union_node.read(iprot);
              struct.setUnion_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXCHANGE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exchange_node = new TExchangeNode();
              struct.exchange_node.read(iprot);
              struct.setExchange_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ANALYTIC_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.analytic_node = new TAnalyticNode();
              struct.analytic_node.read(iprot);
              struct.setAnalytic_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UNNEST_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.unnest_node = new TUnnestNode();
              struct.unnest_node.read(iprot);
              struct.setUnnest_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LABEL_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label_detail = iprot.readString();
              struct.setLabel_detailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ESTIMATED_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.estimated_stats = new org.apache.impala.thrift.TExecStats();
              struct.estimated_stats.read(iprot);
              struct.setEstimated_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // RUNTIME_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                struct.runtime_filters = new ArrayList<TRuntimeFilterDesc>(_list250.size);
                TRuntimeFilterDesc _elem251;
                for (int _i252 = 0; _i252 < _list250.size; ++_i252)
                {
                  _elem251 = new TRuntimeFilterDesc();
                  _elem251.read(iprot);
                  struct.runtime_filters.add(_elem251);
                }
                iprot.readListEnd();
              }
              struct.setRuntime_filtersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // RESOURCE_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_profile = new org.apache.impala.thrift.TBackendResourceProfile();
              struct.resource_profile.read(iprot);
              struct.setResource_profileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CARDINALITY_CHECK_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cardinality_check_node = new TCardinalityCheckNode();
              struct.cardinality_check_node.read(iprot);
              struct.setCardinality_check_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.node_id);
      oprot.writeFieldEnd();
      if (struct.node_type != null) {
        oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.node_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_CHILDREN_FIELD_DESC);
      oprot.writeI32(struct.num_children);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI64(struct.limit);
      oprot.writeFieldEnd();
      if (struct.row_tuples != null) {
        oprot.writeFieldBegin(ROW_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.row_tuples.size()));
          for (int _iter253 : struct.row_tuples)
          {
            oprot.writeI32(_iter253);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nullable_tuples != null) {
        oprot.writeFieldBegin(NULLABLE_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.nullable_tuples.size()));
          for (boolean _iter254 : struct.nullable_tuples)
          {
            oprot.writeBool(_iter254);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.conjuncts != null) {
        if (struct.isSetConjuncts()) {
          oprot.writeFieldBegin(CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.conjuncts.size()));
            for (org.apache.impala.thrift.TExpr _iter255 : struct.conjuncts)
            {
              _iter255.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(DISABLE_CODEGEN_FIELD_DESC);
      oprot.writeBool(struct.disable_codegen);
      oprot.writeFieldEnd();
      if (struct.hdfs_scan_node != null) {
        if (struct.isSetHdfs_scan_node()) {
          oprot.writeFieldBegin(HDFS_SCAN_NODE_FIELD_DESC);
          struct.hdfs_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hbase_scan_node != null) {
        if (struct.isSetHbase_scan_node()) {
          oprot.writeFieldBegin(HBASE_SCAN_NODE_FIELD_DESC);
          struct.hbase_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kudu_scan_node != null) {
        if (struct.isSetKudu_scan_node()) {
          oprot.writeFieldBegin(KUDU_SCAN_NODE_FIELD_DESC);
          struct.kudu_scan_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_source_node != null) {
        if (struct.isSetData_source_node()) {
          oprot.writeFieldBegin(DATA_SOURCE_NODE_FIELD_DESC);
          struct.data_source_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hash_join_node != null) {
        if (struct.isSetHash_join_node()) {
          oprot.writeFieldBegin(HASH_JOIN_NODE_FIELD_DESC);
          struct.hash_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nested_loop_join_node != null) {
        if (struct.isSetNested_loop_join_node()) {
          oprot.writeFieldBegin(NESTED_LOOP_JOIN_NODE_FIELD_DESC);
          struct.nested_loop_join_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.agg_node != null) {
        if (struct.isSetAgg_node()) {
          oprot.writeFieldBegin(AGG_NODE_FIELD_DESC);
          struct.agg_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_node != null) {
        if (struct.isSetSort_node()) {
          oprot.writeFieldBegin(SORT_NODE_FIELD_DESC);
          struct.sort_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.union_node != null) {
        if (struct.isSetUnion_node()) {
          oprot.writeFieldBegin(UNION_NODE_FIELD_DESC);
          struct.union_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchange_node != null) {
        if (struct.isSetExchange_node()) {
          oprot.writeFieldBegin(EXCHANGE_NODE_FIELD_DESC);
          struct.exchange_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.analytic_node != null) {
        if (struct.isSetAnalytic_node()) {
          oprot.writeFieldBegin(ANALYTIC_NODE_FIELD_DESC);
          struct.analytic_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.unnest_node != null) {
        if (struct.isSetUnnest_node()) {
          oprot.writeFieldBegin(UNNEST_NODE_FIELD_DESC);
          struct.unnest_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label_detail != null) {
        if (struct.isSetLabel_detail()) {
          oprot.writeFieldBegin(LABEL_DETAIL_FIELD_DESC);
          oprot.writeString(struct.label_detail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.estimated_stats != null) {
        if (struct.isSetEstimated_stats()) {
          oprot.writeFieldBegin(ESTIMATED_STATS_FIELD_DESC);
          struct.estimated_stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.runtime_filters != null) {
        if (struct.isSetRuntime_filters()) {
          oprot.writeFieldBegin(RUNTIME_FILTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.runtime_filters.size()));
            for (TRuntimeFilterDesc _iter256 : struct.runtime_filters)
            {
              _iter256.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resource_profile != null) {
        oprot.writeFieldBegin(RESOURCE_PROFILE_FIELD_DESC);
        struct.resource_profile.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.cardinality_check_node != null) {
        if (struct.isSetCardinality_check_node()) {
          oprot.writeFieldBegin(CARDINALITY_CHECK_NODE_FIELD_DESC);
          struct.cardinality_check_node.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pipelines != null) {
        oprot.writeFieldBegin(PIPELINES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pipelines.size()));
          for (TPipelineMembership _iter257 : struct.pipelines)
          {
            _iter257.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanNodeTupleSchemeFactory implements SchemeFactory {
    public TPlanNodeTupleScheme getScheme() {
      return new TPlanNodeTupleScheme();
    }
  }

  private static class TPlanNodeTupleScheme extends TupleScheme<TPlanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.node_id);
      oprot.writeI32(struct.node_type.getValue());
      oprot.writeI32(struct.num_children);
      oprot.writeI64(struct.limit);
      {
        oprot.writeI32(struct.row_tuples.size());
        for (int _iter258 : struct.row_tuples)
        {
          oprot.writeI32(_iter258);
        }
      }
      {
        oprot.writeI32(struct.nullable_tuples.size());
        for (boolean _iter259 : struct.nullable_tuples)
        {
          oprot.writeBool(_iter259);
        }
      }
      oprot.writeBool(struct.disable_codegen);
      {
        oprot.writeI32(struct.pipelines.size());
        for (TPipelineMembership _iter260 : struct.pipelines)
        {
          _iter260.write(oprot);
        }
      }
      struct.resource_profile.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetConjuncts()) {
        optionals.set(0);
      }
      if (struct.isSetHdfs_scan_node()) {
        optionals.set(1);
      }
      if (struct.isSetHbase_scan_node()) {
        optionals.set(2);
      }
      if (struct.isSetKudu_scan_node()) {
        optionals.set(3);
      }
      if (struct.isSetData_source_node()) {
        optionals.set(4);
      }
      if (struct.isSetHash_join_node()) {
        optionals.set(5);
      }
      if (struct.isSetNested_loop_join_node()) {
        optionals.set(6);
      }
      if (struct.isSetAgg_node()) {
        optionals.set(7);
      }
      if (struct.isSetSort_node()) {
        optionals.set(8);
      }
      if (struct.isSetUnion_node()) {
        optionals.set(9);
      }
      if (struct.isSetExchange_node()) {
        optionals.set(10);
      }
      if (struct.isSetAnalytic_node()) {
        optionals.set(11);
      }
      if (struct.isSetUnnest_node()) {
        optionals.set(12);
      }
      if (struct.isSetLabel()) {
        optionals.set(13);
      }
      if (struct.isSetLabel_detail()) {
        optionals.set(14);
      }
      if (struct.isSetEstimated_stats()) {
        optionals.set(15);
      }
      if (struct.isSetRuntime_filters()) {
        optionals.set(16);
      }
      if (struct.isSetCardinality_check_node()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetConjuncts()) {
        {
          oprot.writeI32(struct.conjuncts.size());
          for (org.apache.impala.thrift.TExpr _iter261 : struct.conjuncts)
          {
            _iter261.write(oprot);
          }
        }
      }
      if (struct.isSetHdfs_scan_node()) {
        struct.hdfs_scan_node.write(oprot);
      }
      if (struct.isSetHbase_scan_node()) {
        struct.hbase_scan_node.write(oprot);
      }
      if (struct.isSetKudu_scan_node()) {
        struct.kudu_scan_node.write(oprot);
      }
      if (struct.isSetData_source_node()) {
        struct.data_source_node.write(oprot);
      }
      if (struct.isSetHash_join_node()) {
        struct.hash_join_node.write(oprot);
      }
      if (struct.isSetNested_loop_join_node()) {
        struct.nested_loop_join_node.write(oprot);
      }
      if (struct.isSetAgg_node()) {
        struct.agg_node.write(oprot);
      }
      if (struct.isSetSort_node()) {
        struct.sort_node.write(oprot);
      }
      if (struct.isSetUnion_node()) {
        struct.union_node.write(oprot);
      }
      if (struct.isSetExchange_node()) {
        struct.exchange_node.write(oprot);
      }
      if (struct.isSetAnalytic_node()) {
        struct.analytic_node.write(oprot);
      }
      if (struct.isSetUnnest_node()) {
        struct.unnest_node.write(oprot);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetLabel_detail()) {
        oprot.writeString(struct.label_detail);
      }
      if (struct.isSetEstimated_stats()) {
        struct.estimated_stats.write(oprot);
      }
      if (struct.isSetRuntime_filters()) {
        {
          oprot.writeI32(struct.runtime_filters.size());
          for (TRuntimeFilterDesc _iter262 : struct.runtime_filters)
          {
            _iter262.write(oprot);
          }
        }
      }
      if (struct.isSetCardinality_check_node()) {
        struct.cardinality_check_node.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.node_id = iprot.readI32();
      struct.setNode_idIsSet(true);
      struct.node_type = org.apache.impala.thrift.TPlanNodeType.findByValue(iprot.readI32());
      struct.setNode_typeIsSet(true);
      struct.num_children = iprot.readI32();
      struct.setNum_childrenIsSet(true);
      struct.limit = iprot.readI64();
      struct.setLimitIsSet(true);
      {
        org.apache.thrift.protocol.TList _list263 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.row_tuples = new ArrayList<Integer>(_list263.size);
        int _elem264;
        for (int _i265 = 0; _i265 < _list263.size; ++_i265)
        {
          _elem264 = iprot.readI32();
          struct.row_tuples.add(_elem264);
        }
      }
      struct.setRow_tuplesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list266 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.nullable_tuples = new ArrayList<Boolean>(_list266.size);
        boolean _elem267;
        for (int _i268 = 0; _i268 < _list266.size; ++_i268)
        {
          _elem267 = iprot.readBool();
          struct.nullable_tuples.add(_elem267);
        }
      }
      struct.setNullable_tuplesIsSet(true);
      struct.disable_codegen = iprot.readBool();
      struct.setDisable_codegenIsSet(true);
      {
        org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.pipelines = new ArrayList<TPipelineMembership>(_list269.size);
        TPipelineMembership _elem270;
        for (int _i271 = 0; _i271 < _list269.size; ++_i271)
        {
          _elem270 = new TPipelineMembership();
          _elem270.read(iprot);
          struct.pipelines.add(_elem270);
        }
      }
      struct.setPipelinesIsSet(true);
      struct.resource_profile = new org.apache.impala.thrift.TBackendResourceProfile();
      struct.resource_profile.read(iprot);
      struct.setResource_profileIsSet(true);
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list272 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.conjuncts = new ArrayList<org.apache.impala.thrift.TExpr>(_list272.size);
          org.apache.impala.thrift.TExpr _elem273;
          for (int _i274 = 0; _i274 < _list272.size; ++_i274)
          {
            _elem273 = new org.apache.impala.thrift.TExpr();
            _elem273.read(iprot);
            struct.conjuncts.add(_elem273);
          }
        }
        struct.setConjunctsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hdfs_scan_node = new THdfsScanNode();
        struct.hdfs_scan_node.read(iprot);
        struct.setHdfs_scan_nodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hbase_scan_node = new THBaseScanNode();
        struct.hbase_scan_node.read(iprot);
        struct.setHbase_scan_nodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.kudu_scan_node = new TKuduScanNode();
        struct.kudu_scan_node.read(iprot);
        struct.setKudu_scan_nodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.data_source_node = new TDataSourceScanNode();
        struct.data_source_node.read(iprot);
        struct.setData_source_nodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hash_join_node = new THashJoinNode();
        struct.hash_join_node.read(iprot);
        struct.setHash_join_nodeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nested_loop_join_node = new TNestedLoopJoinNode();
        struct.nested_loop_join_node.read(iprot);
        struct.setNested_loop_join_nodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.agg_node = new TAggregationNode();
        struct.agg_node.read(iprot);
        struct.setAgg_nodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sort_node = new TSortNode();
        struct.sort_node.read(iprot);
        struct.setSort_nodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.union_node = new TUnionNode();
        struct.union_node.read(iprot);
        struct.setUnion_nodeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.exchange_node = new TExchangeNode();
        struct.exchange_node.read(iprot);
        struct.setExchange_nodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.analytic_node = new TAnalyticNode();
        struct.analytic_node.read(iprot);
        struct.setAnalytic_nodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.unnest_node = new TUnnestNode();
        struct.unnest_node.read(iprot);
        struct.setUnnest_nodeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(14)) {
        struct.label_detail = iprot.readString();
        struct.setLabel_detailIsSet(true);
      }
      if (incoming.get(15)) {
        struct.estimated_stats = new org.apache.impala.thrift.TExecStats();
        struct.estimated_stats.read(iprot);
        struct.setEstimated_statsIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list275 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.runtime_filters = new ArrayList<TRuntimeFilterDesc>(_list275.size);
          TRuntimeFilterDesc _elem276;
          for (int _i277 = 0; _i277 < _list275.size; ++_i277)
          {
            _elem276 = new TRuntimeFilterDesc();
            _elem276.read(iprot);
            struct.runtime_filters.add(_elem276);
          }
        }
        struct.setRuntime_filtersIsSet(true);
      }
      if (incoming.get(17)) {
        struct.cardinality_check_node = new TCardinalityCheckNode();
        struct.cardinality_check_node.read(iprot);
        struct.setCardinality_check_nodeIsSet(true);
      }
    }
  }

}

