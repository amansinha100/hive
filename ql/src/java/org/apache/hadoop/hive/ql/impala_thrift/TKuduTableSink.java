/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TKuduTableSink implements org.apache.thrift.TBase<TKuduTableSink, TKuduTableSink._Fields>, java.io.Serializable, Cloneable, Comparable<TKuduTableSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TKuduTableSink");

  private static final org.apache.thrift.protocol.TField REFERENCED_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("referenced_columns", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IGNORE_NOT_FOUND_OR_DUPLICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ignore_not_found_or_duplicate", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TKuduTableSinkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TKuduTableSinkTupleSchemeFactory());
  }

  private List<Integer> referenced_columns; // optional
  private boolean ignore_not_found_or_duplicate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REFERENCED_COLUMNS((short)1, "referenced_columns"),
    IGNORE_NOT_FOUND_OR_DUPLICATE((short)2, "ignore_not_found_or_duplicate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REFERENCED_COLUMNS
          return REFERENCED_COLUMNS;
        case 2: // IGNORE_NOT_FOUND_OR_DUPLICATE
          return IGNORE_NOT_FOUND_OR_DUPLICATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IGNORE_NOT_FOUND_OR_DUPLICATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REFERENCED_COLUMNS,_Fields.IGNORE_NOT_FOUND_OR_DUPLICATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REFERENCED_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("referenced_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IGNORE_NOT_FOUND_OR_DUPLICATE, new org.apache.thrift.meta_data.FieldMetaData("ignore_not_found_or_duplicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TKuduTableSink.class, metaDataMap);
  }

  public TKuduTableSink() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TKuduTableSink(TKuduTableSink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReferenced_columns()) {
      List<Integer> __this__referenced_columns = new ArrayList<Integer>(other.referenced_columns);
      this.referenced_columns = __this__referenced_columns;
    }
    this.ignore_not_found_or_duplicate = other.ignore_not_found_or_duplicate;
  }

  public TKuduTableSink deepCopy() {
    return new TKuduTableSink(this);
  }

  @Override
  public void clear() {
    this.referenced_columns = null;
    setIgnore_not_found_or_duplicateIsSet(false);
    this.ignore_not_found_or_duplicate = false;
  }

  public int getReferenced_columnsSize() {
    return (this.referenced_columns == null) ? 0 : this.referenced_columns.size();
  }

  public java.util.Iterator<Integer> getReferenced_columnsIterator() {
    return (this.referenced_columns == null) ? null : this.referenced_columns.iterator();
  }

  public void addToReferenced_columns(int elem) {
    if (this.referenced_columns == null) {
      this.referenced_columns = new ArrayList<Integer>();
    }
    this.referenced_columns.add(elem);
  }

  public List<Integer> getReferenced_columns() {
    return this.referenced_columns;
  }

  public void setReferenced_columns(List<Integer> referenced_columns) {
    this.referenced_columns = referenced_columns;
  }

  public void unsetReferenced_columns() {
    this.referenced_columns = null;
  }

  /** Returns true if field referenced_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetReferenced_columns() {
    return this.referenced_columns != null;
  }

  public void setReferenced_columnsIsSet(boolean value) {
    if (!value) {
      this.referenced_columns = null;
    }
  }

  public boolean isIgnore_not_found_or_duplicate() {
    return this.ignore_not_found_or_duplicate;
  }

  public void setIgnore_not_found_or_duplicate(boolean ignore_not_found_or_duplicate) {
    this.ignore_not_found_or_duplicate = ignore_not_found_or_duplicate;
    setIgnore_not_found_or_duplicateIsSet(true);
  }

  public void unsetIgnore_not_found_or_duplicate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IGNORE_NOT_FOUND_OR_DUPLICATE_ISSET_ID);
  }

  /** Returns true if field ignore_not_found_or_duplicate is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnore_not_found_or_duplicate() {
    return EncodingUtils.testBit(__isset_bitfield, __IGNORE_NOT_FOUND_OR_DUPLICATE_ISSET_ID);
  }

  public void setIgnore_not_found_or_duplicateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IGNORE_NOT_FOUND_OR_DUPLICATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REFERENCED_COLUMNS:
      if (value == null) {
        unsetReferenced_columns();
      } else {
        setReferenced_columns((List<Integer>)value);
      }
      break;

    case IGNORE_NOT_FOUND_OR_DUPLICATE:
      if (value == null) {
        unsetIgnore_not_found_or_duplicate();
      } else {
        setIgnore_not_found_or_duplicate((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REFERENCED_COLUMNS:
      return getReferenced_columns();

    case IGNORE_NOT_FOUND_OR_DUPLICATE:
      return isIgnore_not_found_or_duplicate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REFERENCED_COLUMNS:
      return isSetReferenced_columns();
    case IGNORE_NOT_FOUND_OR_DUPLICATE:
      return isSetIgnore_not_found_or_duplicate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TKuduTableSink)
      return this.equals((TKuduTableSink)that);
    return false;
  }

  public boolean equals(TKuduTableSink that) {
    if (that == null)
      return false;

    boolean this_present_referenced_columns = true && this.isSetReferenced_columns();
    boolean that_present_referenced_columns = true && that.isSetReferenced_columns();
    if (this_present_referenced_columns || that_present_referenced_columns) {
      if (!(this_present_referenced_columns && that_present_referenced_columns))
        return false;
      if (!this.referenced_columns.equals(that.referenced_columns))
        return false;
    }

    boolean this_present_ignore_not_found_or_duplicate = true && this.isSetIgnore_not_found_or_duplicate();
    boolean that_present_ignore_not_found_or_duplicate = true && that.isSetIgnore_not_found_or_duplicate();
    if (this_present_ignore_not_found_or_duplicate || that_present_ignore_not_found_or_duplicate) {
      if (!(this_present_ignore_not_found_or_duplicate && that_present_ignore_not_found_or_duplicate))
        return false;
      if (this.ignore_not_found_or_duplicate != that.ignore_not_found_or_duplicate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_referenced_columns = true && (isSetReferenced_columns());
    list.add(present_referenced_columns);
    if (present_referenced_columns)
      list.add(referenced_columns);

    boolean present_ignore_not_found_or_duplicate = true && (isSetIgnore_not_found_or_duplicate());
    list.add(present_ignore_not_found_or_duplicate);
    if (present_ignore_not_found_or_duplicate)
      list.add(ignore_not_found_or_duplicate);

    return list.hashCode();
  }

  @Override
  public int compareTo(TKuduTableSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReferenced_columns()).compareTo(other.isSetReferenced_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferenced_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referenced_columns, other.referenced_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIgnore_not_found_or_duplicate()).compareTo(other.isSetIgnore_not_found_or_duplicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnore_not_found_or_duplicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignore_not_found_or_duplicate, other.ignore_not_found_or_duplicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TKuduTableSink(");
    boolean first = true;

    if (isSetReferenced_columns()) {
      sb.append("referenced_columns:");
      if (this.referenced_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.referenced_columns);
      }
      first = false;
    }
    if (isSetIgnore_not_found_or_duplicate()) {
      if (!first) sb.append(", ");
      sb.append("ignore_not_found_or_duplicate:");
      sb.append(this.ignore_not_found_or_duplicate);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TKuduTableSinkStandardSchemeFactory implements SchemeFactory {
    public TKuduTableSinkStandardScheme getScheme() {
      return new TKuduTableSinkStandardScheme();
    }
  }

  private static class TKuduTableSinkStandardScheme extends StandardScheme<TKuduTableSink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TKuduTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REFERENCED_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.referenced_columns = new ArrayList<Integer>(_list16.size);
                int _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI32();
                  struct.referenced_columns.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setReferenced_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IGNORE_NOT_FOUND_OR_DUPLICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ignore_not_found_or_duplicate = iprot.readBool();
              struct.setIgnore_not_found_or_duplicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TKuduTableSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.referenced_columns != null) {
        if (struct.isSetReferenced_columns()) {
          oprot.writeFieldBegin(REFERENCED_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.referenced_columns.size()));
            for (int _iter19 : struct.referenced_columns)
            {
              oprot.writeI32(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIgnore_not_found_or_duplicate()) {
        oprot.writeFieldBegin(IGNORE_NOT_FOUND_OR_DUPLICATE_FIELD_DESC);
        oprot.writeBool(struct.ignore_not_found_or_duplicate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TKuduTableSinkTupleSchemeFactory implements SchemeFactory {
    public TKuduTableSinkTupleScheme getScheme() {
      return new TKuduTableSinkTupleScheme();
    }
  }

  private static class TKuduTableSinkTupleScheme extends TupleScheme<TKuduTableSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TKuduTableSink struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReferenced_columns()) {
        optionals.set(0);
      }
      if (struct.isSetIgnore_not_found_or_duplicate()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetReferenced_columns()) {
        {
          oprot.writeI32(struct.referenced_columns.size());
          for (int _iter20 : struct.referenced_columns)
          {
            oprot.writeI32(_iter20);
          }
        }
      }
      if (struct.isSetIgnore_not_found_or_duplicate()) {
        oprot.writeBool(struct.ignore_not_found_or_duplicate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TKuduTableSink struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.referenced_columns = new ArrayList<Integer>(_list21.size);
          int _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI32();
            struct.referenced_columns.add(_elem22);
          }
        }
        struct.setReferenced_columnsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ignore_not_found_or_duplicate = iprot.readBool();
        struct.setIgnore_not_found_or_duplicateIsSet(true);
      }
    }
  }

}

