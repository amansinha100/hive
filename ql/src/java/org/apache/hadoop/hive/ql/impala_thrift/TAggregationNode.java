/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TAggregationNode implements org.apache.thrift.TBase<TAggregationNode, TAggregationNode._Fields>, java.io.Serializable, Cloneable, Comparable<TAggregationNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAggregationNode");

  private static final org.apache.thrift.protocol.TField AGGREGATORS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregators", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ESTIMATED_INPUT_CARDINALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("estimated_input_cardinality", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REPLICATE_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("replicate_input", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAggregationNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAggregationNodeTupleSchemeFactory());
  }

  private List<TAggregator> aggregators; // required
  private long estimated_input_cardinality; // required
  private boolean replicate_input; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGGREGATORS((short)1, "aggregators"),
    ESTIMATED_INPUT_CARDINALITY((short)2, "estimated_input_cardinality"),
    REPLICATE_INPUT((short)3, "replicate_input");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGGREGATORS
          return AGGREGATORS;
        case 2: // ESTIMATED_INPUT_CARDINALITY
          return ESTIMATED_INPUT_CARDINALITY;
        case 3: // REPLICATE_INPUT
          return REPLICATE_INPUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ESTIMATED_INPUT_CARDINALITY_ISSET_ID = 0;
  private static final int __REPLICATE_INPUT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGGREGATORS, new org.apache.thrift.meta_data.FieldMetaData("aggregators", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAggregator.class))));
    tmpMap.put(_Fields.ESTIMATED_INPUT_CARDINALITY, new org.apache.thrift.meta_data.FieldMetaData("estimated_input_cardinality", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPLICATE_INPUT, new org.apache.thrift.meta_data.FieldMetaData("replicate_input", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAggregationNode.class, metaDataMap);
  }

  public TAggregationNode() {
  }

  public TAggregationNode(
    List<TAggregator> aggregators,
    long estimated_input_cardinality,
    boolean replicate_input)
  {
    this();
    this.aggregators = aggregators;
    this.estimated_input_cardinality = estimated_input_cardinality;
    setEstimated_input_cardinalityIsSet(true);
    this.replicate_input = replicate_input;
    setReplicate_inputIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAggregationNode(TAggregationNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAggregators()) {
      List<TAggregator> __this__aggregators = new ArrayList<TAggregator>(other.aggregators.size());
      for (TAggregator other_element : other.aggregators) {
        __this__aggregators.add(new TAggregator(other_element));
      }
      this.aggregators = __this__aggregators;
    }
    this.estimated_input_cardinality = other.estimated_input_cardinality;
    this.replicate_input = other.replicate_input;
  }

  public TAggregationNode deepCopy() {
    return new TAggregationNode(this);
  }

  @Override
  public void clear() {
    this.aggregators = null;
    setEstimated_input_cardinalityIsSet(false);
    this.estimated_input_cardinality = 0;
    setReplicate_inputIsSet(false);
    this.replicate_input = false;
  }

  public int getAggregatorsSize() {
    return (this.aggregators == null) ? 0 : this.aggregators.size();
  }

  public java.util.Iterator<TAggregator> getAggregatorsIterator() {
    return (this.aggregators == null) ? null : this.aggregators.iterator();
  }

  public void addToAggregators(TAggregator elem) {
    if (this.aggregators == null) {
      this.aggregators = new ArrayList<TAggregator>();
    }
    this.aggregators.add(elem);
  }

  public List<TAggregator> getAggregators() {
    return this.aggregators;
  }

  public void setAggregators(List<TAggregator> aggregators) {
    this.aggregators = aggregators;
  }

  public void unsetAggregators() {
    this.aggregators = null;
  }

  /** Returns true if field aggregators is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregators() {
    return this.aggregators != null;
  }

  public void setAggregatorsIsSet(boolean value) {
    if (!value) {
      this.aggregators = null;
    }
  }

  public long getEstimated_input_cardinality() {
    return this.estimated_input_cardinality;
  }

  public void setEstimated_input_cardinality(long estimated_input_cardinality) {
    this.estimated_input_cardinality = estimated_input_cardinality;
    setEstimated_input_cardinalityIsSet(true);
  }

  public void unsetEstimated_input_cardinality() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESTIMATED_INPUT_CARDINALITY_ISSET_ID);
  }

  /** Returns true if field estimated_input_cardinality is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimated_input_cardinality() {
    return EncodingUtils.testBit(__isset_bitfield, __ESTIMATED_INPUT_CARDINALITY_ISSET_ID);
  }

  public void setEstimated_input_cardinalityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESTIMATED_INPUT_CARDINALITY_ISSET_ID, value);
  }

  public boolean isReplicate_input() {
    return this.replicate_input;
  }

  public void setReplicate_input(boolean replicate_input) {
    this.replicate_input = replicate_input;
    setReplicate_inputIsSet(true);
  }

  public void unsetReplicate_input() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICATE_INPUT_ISSET_ID);
  }

  /** Returns true if field replicate_input is set (has been assigned a value) and false otherwise */
  public boolean isSetReplicate_input() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLICATE_INPUT_ISSET_ID);
  }

  public void setReplicate_inputIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICATE_INPUT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AGGREGATORS:
      if (value == null) {
        unsetAggregators();
      } else {
        setAggregators((List<TAggregator>)value);
      }
      break;

    case ESTIMATED_INPUT_CARDINALITY:
      if (value == null) {
        unsetEstimated_input_cardinality();
      } else {
        setEstimated_input_cardinality((Long)value);
      }
      break;

    case REPLICATE_INPUT:
      if (value == null) {
        unsetReplicate_input();
      } else {
        setReplicate_input((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AGGREGATORS:
      return getAggregators();

    case ESTIMATED_INPUT_CARDINALITY:
      return getEstimated_input_cardinality();

    case REPLICATE_INPUT:
      return isReplicate_input();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AGGREGATORS:
      return isSetAggregators();
    case ESTIMATED_INPUT_CARDINALITY:
      return isSetEstimated_input_cardinality();
    case REPLICATE_INPUT:
      return isSetReplicate_input();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAggregationNode)
      return this.equals((TAggregationNode)that);
    return false;
  }

  public boolean equals(TAggregationNode that) {
    if (that == null)
      return false;

    boolean this_present_aggregators = true && this.isSetAggregators();
    boolean that_present_aggregators = true && that.isSetAggregators();
    if (this_present_aggregators || that_present_aggregators) {
      if (!(this_present_aggregators && that_present_aggregators))
        return false;
      if (!this.aggregators.equals(that.aggregators))
        return false;
    }

    boolean this_present_estimated_input_cardinality = true;
    boolean that_present_estimated_input_cardinality = true;
    if (this_present_estimated_input_cardinality || that_present_estimated_input_cardinality) {
      if (!(this_present_estimated_input_cardinality && that_present_estimated_input_cardinality))
        return false;
      if (this.estimated_input_cardinality != that.estimated_input_cardinality)
        return false;
    }

    boolean this_present_replicate_input = true;
    boolean that_present_replicate_input = true;
    if (this_present_replicate_input || that_present_replicate_input) {
      if (!(this_present_replicate_input && that_present_replicate_input))
        return false;
      if (this.replicate_input != that.replicate_input)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_aggregators = true && (isSetAggregators());
    list.add(present_aggregators);
    if (present_aggregators)
      list.add(aggregators);

    boolean present_estimated_input_cardinality = true;
    list.add(present_estimated_input_cardinality);
    if (present_estimated_input_cardinality)
      list.add(estimated_input_cardinality);

    boolean present_replicate_input = true;
    list.add(present_replicate_input);
    if (present_replicate_input)
      list.add(replicate_input);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAggregationNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAggregators()).compareTo(other.isSetAggregators());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregators()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregators, other.aggregators);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstimated_input_cardinality()).compareTo(other.isSetEstimated_input_cardinality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimated_input_cardinality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimated_input_cardinality, other.estimated_input_cardinality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplicate_input()).compareTo(other.isSetReplicate_input());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplicate_input()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicate_input, other.replicate_input);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAggregationNode(");
    boolean first = true;

    sb.append("aggregators:");
    if (this.aggregators == null) {
      sb.append("null");
    } else {
      sb.append(this.aggregators);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("estimated_input_cardinality:");
    sb.append(this.estimated_input_cardinality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replicate_input:");
    sb.append(this.replicate_input);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetAggregators()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'aggregators' is unset! Struct:" + toString());
    }

    if (!isSetEstimated_input_cardinality()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'estimated_input_cardinality' is unset! Struct:" + toString());
    }

    if (!isSetReplicate_input()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'replicate_input' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAggregationNodeStandardSchemeFactory implements SchemeFactory {
    public TAggregationNodeStandardScheme getScheme() {
      return new TAggregationNodeStandardScheme();
    }
  }

  private static class TAggregationNodeStandardScheme extends StandardScheme<TAggregationNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAggregationNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGGREGATORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                struct.aggregators = new ArrayList<TAggregator>(_list134.size);
                TAggregator _elem135;
                for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                {
                  _elem135 = new TAggregator();
                  _elem135.read(iprot);
                  struct.aggregators.add(_elem135);
                }
                iprot.readListEnd();
              }
              struct.setAggregatorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ESTIMATED_INPUT_CARDINALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.estimated_input_cardinality = iprot.readI64();
              struct.setEstimated_input_cardinalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLICATE_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.replicate_input = iprot.readBool();
              struct.setReplicate_inputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAggregationNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.aggregators != null) {
        oprot.writeFieldBegin(AGGREGATORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aggregators.size()));
          for (TAggregator _iter137 : struct.aggregators)
          {
            _iter137.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ESTIMATED_INPUT_CARDINALITY_FIELD_DESC);
      oprot.writeI64(struct.estimated_input_cardinality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPLICATE_INPUT_FIELD_DESC);
      oprot.writeBool(struct.replicate_input);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAggregationNodeTupleSchemeFactory implements SchemeFactory {
    public TAggregationNodeTupleScheme getScheme() {
      return new TAggregationNodeTupleScheme();
    }
  }

  private static class TAggregationNodeTupleScheme extends TupleScheme<TAggregationNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAggregationNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.aggregators.size());
        for (TAggregator _iter138 : struct.aggregators)
        {
          _iter138.write(oprot);
        }
      }
      oprot.writeI64(struct.estimated_input_cardinality);
      oprot.writeBool(struct.replicate_input);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAggregationNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.aggregators = new ArrayList<TAggregator>(_list139.size);
        TAggregator _elem140;
        for (int _i141 = 0; _i141 < _list139.size; ++_i141)
        {
          _elem140 = new TAggregator();
          _elem140.read(iprot);
          struct.aggregators.add(_elem140);
        }
      }
      struct.setAggregatorsIsSet(true);
      struct.estimated_input_cardinality = iprot.readI64();
      struct.setEstimated_input_cardinalityIsSet(true);
      struct.replicate_input = iprot.readBool();
      struct.setReplicate_inputIsSet(true);
    }
  }

}

