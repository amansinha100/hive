/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TEventProcessorMetrics implements org.apache.thrift.TBase<TEventProcessorMetrics, TEventProcessorMetrics._Fields>, java.io.Serializable, Cloneable, Comparable<TEventProcessorMetrics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEventProcessorMetrics");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EVENTS_RECEIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("events_received", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField EVENTS_SKIPPED_FIELD_DESC = new org.apache.thrift.protocol.TField("events_skipped", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EVENTS_FETCH_DURATION_MEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("events_fetch_duration_mean", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField EVENTS_PROCESS_DURATION_MEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("events_process_duration_mean", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField EVENTS_RECEIVED_1MIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("events_received_1min_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField EVENTS_RECEIVED_5MIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("events_received_5min_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField EVENTS_RECEIVED_15MIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("events_received_15min_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField EVENTS_SKIPPED_PER_POLL_MEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("events_skipped_per_poll_mean", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_SYNCED_EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("last_synced_event_id", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEventProcessorMetricsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEventProcessorMetricsTupleSchemeFactory());
  }

  private String status; // required
  private long events_received; // optional
  private long events_skipped; // optional
  private double events_fetch_duration_mean; // optional
  private double events_process_duration_mean; // optional
  private double events_received_1min_rate; // optional
  private double events_received_5min_rate; // optional
  private double events_received_15min_rate; // optional
  private double events_skipped_per_poll_mean; // optional
  private long last_synced_event_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    EVENTS_RECEIVED((short)2, "events_received"),
    EVENTS_SKIPPED((short)3, "events_skipped"),
    EVENTS_FETCH_DURATION_MEAN((short)4, "events_fetch_duration_mean"),
    EVENTS_PROCESS_DURATION_MEAN((short)5, "events_process_duration_mean"),
    EVENTS_RECEIVED_1MIN_RATE((short)6, "events_received_1min_rate"),
    EVENTS_RECEIVED_5MIN_RATE((short)7, "events_received_5min_rate"),
    EVENTS_RECEIVED_15MIN_RATE((short)8, "events_received_15min_rate"),
    EVENTS_SKIPPED_PER_POLL_MEAN((short)9, "events_skipped_per_poll_mean"),
    LAST_SYNCED_EVENT_ID((short)10, "last_synced_event_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // EVENTS_RECEIVED
          return EVENTS_RECEIVED;
        case 3: // EVENTS_SKIPPED
          return EVENTS_SKIPPED;
        case 4: // EVENTS_FETCH_DURATION_MEAN
          return EVENTS_FETCH_DURATION_MEAN;
        case 5: // EVENTS_PROCESS_DURATION_MEAN
          return EVENTS_PROCESS_DURATION_MEAN;
        case 6: // EVENTS_RECEIVED_1MIN_RATE
          return EVENTS_RECEIVED_1MIN_RATE;
        case 7: // EVENTS_RECEIVED_5MIN_RATE
          return EVENTS_RECEIVED_5MIN_RATE;
        case 8: // EVENTS_RECEIVED_15MIN_RATE
          return EVENTS_RECEIVED_15MIN_RATE;
        case 9: // EVENTS_SKIPPED_PER_POLL_MEAN
          return EVENTS_SKIPPED_PER_POLL_MEAN;
        case 10: // LAST_SYNCED_EVENT_ID
          return LAST_SYNCED_EVENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTS_RECEIVED_ISSET_ID = 0;
  private static final int __EVENTS_SKIPPED_ISSET_ID = 1;
  private static final int __EVENTS_FETCH_DURATION_MEAN_ISSET_ID = 2;
  private static final int __EVENTS_PROCESS_DURATION_MEAN_ISSET_ID = 3;
  private static final int __EVENTS_RECEIVED_1MIN_RATE_ISSET_ID = 4;
  private static final int __EVENTS_RECEIVED_5MIN_RATE_ISSET_ID = 5;
  private static final int __EVENTS_RECEIVED_15MIN_RATE_ISSET_ID = 6;
  private static final int __EVENTS_SKIPPED_PER_POLL_MEAN_ISSET_ID = 7;
  private static final int __LAST_SYNCED_EVENT_ID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EVENTS_RECEIVED,_Fields.EVENTS_SKIPPED,_Fields.EVENTS_FETCH_DURATION_MEAN,_Fields.EVENTS_PROCESS_DURATION_MEAN,_Fields.EVENTS_RECEIVED_1MIN_RATE,_Fields.EVENTS_RECEIVED_5MIN_RATE,_Fields.EVENTS_RECEIVED_15MIN_RATE,_Fields.EVENTS_SKIPPED_PER_POLL_MEAN,_Fields.LAST_SYNCED_EVENT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENTS_RECEIVED, new org.apache.thrift.meta_data.FieldMetaData("events_received", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EVENTS_SKIPPED, new org.apache.thrift.meta_data.FieldMetaData("events_skipped", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EVENTS_FETCH_DURATION_MEAN, new org.apache.thrift.meta_data.FieldMetaData("events_fetch_duration_mean", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVENTS_PROCESS_DURATION_MEAN, new org.apache.thrift.meta_data.FieldMetaData("events_process_duration_mean", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVENTS_RECEIVED_1MIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("events_received_1min_rate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVENTS_RECEIVED_5MIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("events_received_5min_rate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVENTS_RECEIVED_15MIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("events_received_15min_rate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EVENTS_SKIPPED_PER_POLL_MEAN, new org.apache.thrift.meta_data.FieldMetaData("events_skipped_per_poll_mean", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_SYNCED_EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("last_synced_event_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEventProcessorMetrics.class, metaDataMap);
  }

  public TEventProcessorMetrics() {
  }

  public TEventProcessorMetrics(
    String status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEventProcessorMetrics(TEventProcessorMetrics other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.events_received = other.events_received;
    this.events_skipped = other.events_skipped;
    this.events_fetch_duration_mean = other.events_fetch_duration_mean;
    this.events_process_duration_mean = other.events_process_duration_mean;
    this.events_received_1min_rate = other.events_received_1min_rate;
    this.events_received_5min_rate = other.events_received_5min_rate;
    this.events_received_15min_rate = other.events_received_15min_rate;
    this.events_skipped_per_poll_mean = other.events_skipped_per_poll_mean;
    this.last_synced_event_id = other.last_synced_event_id;
  }

  public TEventProcessorMetrics deepCopy() {
    return new TEventProcessorMetrics(this);
  }

  @Override
  public void clear() {
    this.status = null;
    setEvents_receivedIsSet(false);
    this.events_received = 0;
    setEvents_skippedIsSet(false);
    this.events_skipped = 0;
    setEvents_fetch_duration_meanIsSet(false);
    this.events_fetch_duration_mean = 0.0;
    setEvents_process_duration_meanIsSet(false);
    this.events_process_duration_mean = 0.0;
    setEvents_received_1min_rateIsSet(false);
    this.events_received_1min_rate = 0.0;
    setEvents_received_5min_rateIsSet(false);
    this.events_received_5min_rate = 0.0;
    setEvents_received_15min_rateIsSet(false);
    this.events_received_15min_rate = 0.0;
    setEvents_skipped_per_poll_meanIsSet(false);
    this.events_skipped_per_poll_mean = 0.0;
    setLast_synced_event_idIsSet(false);
    this.last_synced_event_id = 0;
  }

  public String getStatus() {
    return this.status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getEvents_received() {
    return this.events_received;
  }

  public void setEvents_received(long events_received) {
    this.events_received = events_received;
    setEvents_receivedIsSet(true);
  }

  public void unsetEvents_received() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTS_RECEIVED_ISSET_ID);
  }

  /** Returns true if field events_received is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents_received() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTS_RECEIVED_ISSET_ID);
  }

  public void setEvents_receivedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTS_RECEIVED_ISSET_ID, value);
  }

  public long getEvents_skipped() {
    return this.events_skipped;
  }

  public void setEvents_skipped(long events_skipped) {
    this.events_skipped = events_skipped;
    setEvents_skippedIsSet(true);
  }

  public void unsetEvents_skipped() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTS_SKIPPED_ISSET_ID);
  }

  /** Returns true if field events_skipped is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents_skipped() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTS_SKIPPED_ISSET_ID);
  }

  public void setEvents_skippedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTS_SKIPPED_ISSET_ID, value);
  }

  public double getEvents_fetch_duration_mean() {
    return this.events_fetch_duration_mean;
  }

  public void setEvents_fetch_duration_mean(double events_fetch_duration_mean) {
    this.events_fetch_duration_mean = events_fetch_duration_mean;
    setEvents_fetch_duration_meanIsSet(true);
  }

  public void unsetEvents_fetch_duration_mean() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTS_FETCH_DURATION_MEAN_ISSET_ID);
  }

  /** Returns true if field events_fetch_duration_mean is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents_fetch_duration_mean() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTS_FETCH_DURATION_MEAN_ISSET_ID);
  }

  public void setEvents_fetch_duration_meanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTS_FETCH_DURATION_MEAN_ISSET_ID, value);
  }

  public double getEvents_process_duration_mean() {
    return this.events_process_duration_mean;
  }

  public void setEvents_process_duration_mean(double events_process_duration_mean) {
    this.events_process_duration_mean = events_process_duration_mean;
    setEvents_process_duration_meanIsSet(true);
  }

  public void unsetEvents_process_duration_mean() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTS_PROCESS_DURATION_MEAN_ISSET_ID);
  }

  /** Returns true if field events_process_duration_mean is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents_process_duration_mean() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTS_PROCESS_DURATION_MEAN_ISSET_ID);
  }

  public void setEvents_process_duration_meanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTS_PROCESS_DURATION_MEAN_ISSET_ID, value);
  }

  public double getEvents_received_1min_rate() {
    return this.events_received_1min_rate;
  }

  public void setEvents_received_1min_rate(double events_received_1min_rate) {
    this.events_received_1min_rate = events_received_1min_rate;
    setEvents_received_1min_rateIsSet(true);
  }

  public void unsetEvents_received_1min_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTS_RECEIVED_1MIN_RATE_ISSET_ID);
  }

  /** Returns true if field events_received_1min_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents_received_1min_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTS_RECEIVED_1MIN_RATE_ISSET_ID);
  }

  public void setEvents_received_1min_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTS_RECEIVED_1MIN_RATE_ISSET_ID, value);
  }

  public double getEvents_received_5min_rate() {
    return this.events_received_5min_rate;
  }

  public void setEvents_received_5min_rate(double events_received_5min_rate) {
    this.events_received_5min_rate = events_received_5min_rate;
    setEvents_received_5min_rateIsSet(true);
  }

  public void unsetEvents_received_5min_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTS_RECEIVED_5MIN_RATE_ISSET_ID);
  }

  /** Returns true if field events_received_5min_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents_received_5min_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTS_RECEIVED_5MIN_RATE_ISSET_ID);
  }

  public void setEvents_received_5min_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTS_RECEIVED_5MIN_RATE_ISSET_ID, value);
  }

  public double getEvents_received_15min_rate() {
    return this.events_received_15min_rate;
  }

  public void setEvents_received_15min_rate(double events_received_15min_rate) {
    this.events_received_15min_rate = events_received_15min_rate;
    setEvents_received_15min_rateIsSet(true);
  }

  public void unsetEvents_received_15min_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTS_RECEIVED_15MIN_RATE_ISSET_ID);
  }

  /** Returns true if field events_received_15min_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents_received_15min_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTS_RECEIVED_15MIN_RATE_ISSET_ID);
  }

  public void setEvents_received_15min_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTS_RECEIVED_15MIN_RATE_ISSET_ID, value);
  }

  public double getEvents_skipped_per_poll_mean() {
    return this.events_skipped_per_poll_mean;
  }

  public void setEvents_skipped_per_poll_mean(double events_skipped_per_poll_mean) {
    this.events_skipped_per_poll_mean = events_skipped_per_poll_mean;
    setEvents_skipped_per_poll_meanIsSet(true);
  }

  public void unsetEvents_skipped_per_poll_mean() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTS_SKIPPED_PER_POLL_MEAN_ISSET_ID);
  }

  /** Returns true if field events_skipped_per_poll_mean is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents_skipped_per_poll_mean() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTS_SKIPPED_PER_POLL_MEAN_ISSET_ID);
  }

  public void setEvents_skipped_per_poll_meanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTS_SKIPPED_PER_POLL_MEAN_ISSET_ID, value);
  }

  public long getLast_synced_event_id() {
    return this.last_synced_event_id;
  }

  public void setLast_synced_event_id(long last_synced_event_id) {
    this.last_synced_event_id = last_synced_event_id;
    setLast_synced_event_idIsSet(true);
  }

  public void unsetLast_synced_event_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAST_SYNCED_EVENT_ID_ISSET_ID);
  }

  /** Returns true if field last_synced_event_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_synced_event_id() {
    return EncodingUtils.testBit(__isset_bitfield, __LAST_SYNCED_EVENT_ID_ISSET_ID);
  }

  public void setLast_synced_event_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAST_SYNCED_EVENT_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case EVENTS_RECEIVED:
      if (value == null) {
        unsetEvents_received();
      } else {
        setEvents_received((Long)value);
      }
      break;

    case EVENTS_SKIPPED:
      if (value == null) {
        unsetEvents_skipped();
      } else {
        setEvents_skipped((Long)value);
      }
      break;

    case EVENTS_FETCH_DURATION_MEAN:
      if (value == null) {
        unsetEvents_fetch_duration_mean();
      } else {
        setEvents_fetch_duration_mean((Double)value);
      }
      break;

    case EVENTS_PROCESS_DURATION_MEAN:
      if (value == null) {
        unsetEvents_process_duration_mean();
      } else {
        setEvents_process_duration_mean((Double)value);
      }
      break;

    case EVENTS_RECEIVED_1MIN_RATE:
      if (value == null) {
        unsetEvents_received_1min_rate();
      } else {
        setEvents_received_1min_rate((Double)value);
      }
      break;

    case EVENTS_RECEIVED_5MIN_RATE:
      if (value == null) {
        unsetEvents_received_5min_rate();
      } else {
        setEvents_received_5min_rate((Double)value);
      }
      break;

    case EVENTS_RECEIVED_15MIN_RATE:
      if (value == null) {
        unsetEvents_received_15min_rate();
      } else {
        setEvents_received_15min_rate((Double)value);
      }
      break;

    case EVENTS_SKIPPED_PER_POLL_MEAN:
      if (value == null) {
        unsetEvents_skipped_per_poll_mean();
      } else {
        setEvents_skipped_per_poll_mean((Double)value);
      }
      break;

    case LAST_SYNCED_EVENT_ID:
      if (value == null) {
        unsetLast_synced_event_id();
      } else {
        setLast_synced_event_id((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case EVENTS_RECEIVED:
      return getEvents_received();

    case EVENTS_SKIPPED:
      return getEvents_skipped();

    case EVENTS_FETCH_DURATION_MEAN:
      return getEvents_fetch_duration_mean();

    case EVENTS_PROCESS_DURATION_MEAN:
      return getEvents_process_duration_mean();

    case EVENTS_RECEIVED_1MIN_RATE:
      return getEvents_received_1min_rate();

    case EVENTS_RECEIVED_5MIN_RATE:
      return getEvents_received_5min_rate();

    case EVENTS_RECEIVED_15MIN_RATE:
      return getEvents_received_15min_rate();

    case EVENTS_SKIPPED_PER_POLL_MEAN:
      return getEvents_skipped_per_poll_mean();

    case LAST_SYNCED_EVENT_ID:
      return getLast_synced_event_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case EVENTS_RECEIVED:
      return isSetEvents_received();
    case EVENTS_SKIPPED:
      return isSetEvents_skipped();
    case EVENTS_FETCH_DURATION_MEAN:
      return isSetEvents_fetch_duration_mean();
    case EVENTS_PROCESS_DURATION_MEAN:
      return isSetEvents_process_duration_mean();
    case EVENTS_RECEIVED_1MIN_RATE:
      return isSetEvents_received_1min_rate();
    case EVENTS_RECEIVED_5MIN_RATE:
      return isSetEvents_received_5min_rate();
    case EVENTS_RECEIVED_15MIN_RATE:
      return isSetEvents_received_15min_rate();
    case EVENTS_SKIPPED_PER_POLL_MEAN:
      return isSetEvents_skipped_per_poll_mean();
    case LAST_SYNCED_EVENT_ID:
      return isSetLast_synced_event_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEventProcessorMetrics)
      return this.equals((TEventProcessorMetrics)that);
    return false;
  }

  public boolean equals(TEventProcessorMetrics that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_events_received = true && this.isSetEvents_received();
    boolean that_present_events_received = true && that.isSetEvents_received();
    if (this_present_events_received || that_present_events_received) {
      if (!(this_present_events_received && that_present_events_received))
        return false;
      if (this.events_received != that.events_received)
        return false;
    }

    boolean this_present_events_skipped = true && this.isSetEvents_skipped();
    boolean that_present_events_skipped = true && that.isSetEvents_skipped();
    if (this_present_events_skipped || that_present_events_skipped) {
      if (!(this_present_events_skipped && that_present_events_skipped))
        return false;
      if (this.events_skipped != that.events_skipped)
        return false;
    }

    boolean this_present_events_fetch_duration_mean = true && this.isSetEvents_fetch_duration_mean();
    boolean that_present_events_fetch_duration_mean = true && that.isSetEvents_fetch_duration_mean();
    if (this_present_events_fetch_duration_mean || that_present_events_fetch_duration_mean) {
      if (!(this_present_events_fetch_duration_mean && that_present_events_fetch_duration_mean))
        return false;
      if (this.events_fetch_duration_mean != that.events_fetch_duration_mean)
        return false;
    }

    boolean this_present_events_process_duration_mean = true && this.isSetEvents_process_duration_mean();
    boolean that_present_events_process_duration_mean = true && that.isSetEvents_process_duration_mean();
    if (this_present_events_process_duration_mean || that_present_events_process_duration_mean) {
      if (!(this_present_events_process_duration_mean && that_present_events_process_duration_mean))
        return false;
      if (this.events_process_duration_mean != that.events_process_duration_mean)
        return false;
    }

    boolean this_present_events_received_1min_rate = true && this.isSetEvents_received_1min_rate();
    boolean that_present_events_received_1min_rate = true && that.isSetEvents_received_1min_rate();
    if (this_present_events_received_1min_rate || that_present_events_received_1min_rate) {
      if (!(this_present_events_received_1min_rate && that_present_events_received_1min_rate))
        return false;
      if (this.events_received_1min_rate != that.events_received_1min_rate)
        return false;
    }

    boolean this_present_events_received_5min_rate = true && this.isSetEvents_received_5min_rate();
    boolean that_present_events_received_5min_rate = true && that.isSetEvents_received_5min_rate();
    if (this_present_events_received_5min_rate || that_present_events_received_5min_rate) {
      if (!(this_present_events_received_5min_rate && that_present_events_received_5min_rate))
        return false;
      if (this.events_received_5min_rate != that.events_received_5min_rate)
        return false;
    }

    boolean this_present_events_received_15min_rate = true && this.isSetEvents_received_15min_rate();
    boolean that_present_events_received_15min_rate = true && that.isSetEvents_received_15min_rate();
    if (this_present_events_received_15min_rate || that_present_events_received_15min_rate) {
      if (!(this_present_events_received_15min_rate && that_present_events_received_15min_rate))
        return false;
      if (this.events_received_15min_rate != that.events_received_15min_rate)
        return false;
    }

    boolean this_present_events_skipped_per_poll_mean = true && this.isSetEvents_skipped_per_poll_mean();
    boolean that_present_events_skipped_per_poll_mean = true && that.isSetEvents_skipped_per_poll_mean();
    if (this_present_events_skipped_per_poll_mean || that_present_events_skipped_per_poll_mean) {
      if (!(this_present_events_skipped_per_poll_mean && that_present_events_skipped_per_poll_mean))
        return false;
      if (this.events_skipped_per_poll_mean != that.events_skipped_per_poll_mean)
        return false;
    }

    boolean this_present_last_synced_event_id = true && this.isSetLast_synced_event_id();
    boolean that_present_last_synced_event_id = true && that.isSetLast_synced_event_id();
    if (this_present_last_synced_event_id || that_present_last_synced_event_id) {
      if (!(this_present_last_synced_event_id && that_present_last_synced_event_id))
        return false;
      if (this.last_synced_event_id != that.last_synced_event_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_events_received = true && (isSetEvents_received());
    list.add(present_events_received);
    if (present_events_received)
      list.add(events_received);

    boolean present_events_skipped = true && (isSetEvents_skipped());
    list.add(present_events_skipped);
    if (present_events_skipped)
      list.add(events_skipped);

    boolean present_events_fetch_duration_mean = true && (isSetEvents_fetch_duration_mean());
    list.add(present_events_fetch_duration_mean);
    if (present_events_fetch_duration_mean)
      list.add(events_fetch_duration_mean);

    boolean present_events_process_duration_mean = true && (isSetEvents_process_duration_mean());
    list.add(present_events_process_duration_mean);
    if (present_events_process_duration_mean)
      list.add(events_process_duration_mean);

    boolean present_events_received_1min_rate = true && (isSetEvents_received_1min_rate());
    list.add(present_events_received_1min_rate);
    if (present_events_received_1min_rate)
      list.add(events_received_1min_rate);

    boolean present_events_received_5min_rate = true && (isSetEvents_received_5min_rate());
    list.add(present_events_received_5min_rate);
    if (present_events_received_5min_rate)
      list.add(events_received_5min_rate);

    boolean present_events_received_15min_rate = true && (isSetEvents_received_15min_rate());
    list.add(present_events_received_15min_rate);
    if (present_events_received_15min_rate)
      list.add(events_received_15min_rate);

    boolean present_events_skipped_per_poll_mean = true && (isSetEvents_skipped_per_poll_mean());
    list.add(present_events_skipped_per_poll_mean);
    if (present_events_skipped_per_poll_mean)
      list.add(events_skipped_per_poll_mean);

    boolean present_last_synced_event_id = true && (isSetLast_synced_event_id());
    list.add(present_last_synced_event_id);
    if (present_last_synced_event_id)
      list.add(last_synced_event_id);

    return list.hashCode();
  }

  @Override
  public int compareTo(TEventProcessorMetrics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents_received()).compareTo(other.isSetEvents_received());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents_received()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events_received, other.events_received);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents_skipped()).compareTo(other.isSetEvents_skipped());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents_skipped()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events_skipped, other.events_skipped);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents_fetch_duration_mean()).compareTo(other.isSetEvents_fetch_duration_mean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents_fetch_duration_mean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events_fetch_duration_mean, other.events_fetch_duration_mean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents_process_duration_mean()).compareTo(other.isSetEvents_process_duration_mean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents_process_duration_mean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events_process_duration_mean, other.events_process_duration_mean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents_received_1min_rate()).compareTo(other.isSetEvents_received_1min_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents_received_1min_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events_received_1min_rate, other.events_received_1min_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents_received_5min_rate()).compareTo(other.isSetEvents_received_5min_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents_received_5min_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events_received_5min_rate, other.events_received_5min_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents_received_15min_rate()).compareTo(other.isSetEvents_received_15min_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents_received_15min_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events_received_15min_rate, other.events_received_15min_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvents_skipped_per_poll_mean()).compareTo(other.isSetEvents_skipped_per_poll_mean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents_skipped_per_poll_mean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.events_skipped_per_poll_mean, other.events_skipped_per_poll_mean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_synced_event_id()).compareTo(other.isSetLast_synced_event_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_synced_event_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_synced_event_id, other.last_synced_event_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEventProcessorMetrics(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetEvents_received()) {
      if (!first) sb.append(", ");
      sb.append("events_received:");
      sb.append(this.events_received);
      first = false;
    }
    if (isSetEvents_skipped()) {
      if (!first) sb.append(", ");
      sb.append("events_skipped:");
      sb.append(this.events_skipped);
      first = false;
    }
    if (isSetEvents_fetch_duration_mean()) {
      if (!first) sb.append(", ");
      sb.append("events_fetch_duration_mean:");
      sb.append(this.events_fetch_duration_mean);
      first = false;
    }
    if (isSetEvents_process_duration_mean()) {
      if (!first) sb.append(", ");
      sb.append("events_process_duration_mean:");
      sb.append(this.events_process_duration_mean);
      first = false;
    }
    if (isSetEvents_received_1min_rate()) {
      if (!first) sb.append(", ");
      sb.append("events_received_1min_rate:");
      sb.append(this.events_received_1min_rate);
      first = false;
    }
    if (isSetEvents_received_5min_rate()) {
      if (!first) sb.append(", ");
      sb.append("events_received_5min_rate:");
      sb.append(this.events_received_5min_rate);
      first = false;
    }
    if (isSetEvents_received_15min_rate()) {
      if (!first) sb.append(", ");
      sb.append("events_received_15min_rate:");
      sb.append(this.events_received_15min_rate);
      first = false;
    }
    if (isSetEvents_skipped_per_poll_mean()) {
      if (!first) sb.append(", ");
      sb.append("events_skipped_per_poll_mean:");
      sb.append(this.events_skipped_per_poll_mean);
      first = false;
    }
    if (isSetLast_synced_event_id()) {
      if (!first) sb.append(", ");
      sb.append("last_synced_event_id:");
      sb.append(this.last_synced_event_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEventProcessorMetricsStandardSchemeFactory implements SchemeFactory {
    public TEventProcessorMetricsStandardScheme getScheme() {
      return new TEventProcessorMetricsStandardScheme();
    }
  }

  private static class TEventProcessorMetricsStandardScheme extends StandardScheme<TEventProcessorMetrics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEventProcessorMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENTS_RECEIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.events_received = iprot.readI64();
              struct.setEvents_receivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENTS_SKIPPED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.events_skipped = iprot.readI64();
              struct.setEvents_skippedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENTS_FETCH_DURATION_MEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.events_fetch_duration_mean = iprot.readDouble();
              struct.setEvents_fetch_duration_meanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EVENTS_PROCESS_DURATION_MEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.events_process_duration_mean = iprot.readDouble();
              struct.setEvents_process_duration_meanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EVENTS_RECEIVED_1MIN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.events_received_1min_rate = iprot.readDouble();
              struct.setEvents_received_1min_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EVENTS_RECEIVED_5MIN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.events_received_5min_rate = iprot.readDouble();
              struct.setEvents_received_5min_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EVENTS_RECEIVED_15MIN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.events_received_15min_rate = iprot.readDouble();
              struct.setEvents_received_15min_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EVENTS_SKIPPED_PER_POLL_MEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.events_skipped_per_poll_mean = iprot.readDouble();
              struct.setEvents_skipped_per_poll_meanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_SYNCED_EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_synced_event_id = iprot.readI64();
              struct.setLast_synced_event_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEventProcessorMetrics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEvents_received()) {
        oprot.writeFieldBegin(EVENTS_RECEIVED_FIELD_DESC);
        oprot.writeI64(struct.events_received);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEvents_skipped()) {
        oprot.writeFieldBegin(EVENTS_SKIPPED_FIELD_DESC);
        oprot.writeI64(struct.events_skipped);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEvents_fetch_duration_mean()) {
        oprot.writeFieldBegin(EVENTS_FETCH_DURATION_MEAN_FIELD_DESC);
        oprot.writeDouble(struct.events_fetch_duration_mean);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEvents_process_duration_mean()) {
        oprot.writeFieldBegin(EVENTS_PROCESS_DURATION_MEAN_FIELD_DESC);
        oprot.writeDouble(struct.events_process_duration_mean);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEvents_received_1min_rate()) {
        oprot.writeFieldBegin(EVENTS_RECEIVED_1MIN_RATE_FIELD_DESC);
        oprot.writeDouble(struct.events_received_1min_rate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEvents_received_5min_rate()) {
        oprot.writeFieldBegin(EVENTS_RECEIVED_5MIN_RATE_FIELD_DESC);
        oprot.writeDouble(struct.events_received_5min_rate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEvents_received_15min_rate()) {
        oprot.writeFieldBegin(EVENTS_RECEIVED_15MIN_RATE_FIELD_DESC);
        oprot.writeDouble(struct.events_received_15min_rate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEvents_skipped_per_poll_mean()) {
        oprot.writeFieldBegin(EVENTS_SKIPPED_PER_POLL_MEAN_FIELD_DESC);
        oprot.writeDouble(struct.events_skipped_per_poll_mean);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLast_synced_event_id()) {
        oprot.writeFieldBegin(LAST_SYNCED_EVENT_ID_FIELD_DESC);
        oprot.writeI64(struct.last_synced_event_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEventProcessorMetricsTupleSchemeFactory implements SchemeFactory {
    public TEventProcessorMetricsTupleScheme getScheme() {
      return new TEventProcessorMetricsTupleScheme();
    }
  }

  private static class TEventProcessorMetricsTupleScheme extends TupleScheme<TEventProcessorMetrics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEventProcessorMetrics struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.status);
      BitSet optionals = new BitSet();
      if (struct.isSetEvents_received()) {
        optionals.set(0);
      }
      if (struct.isSetEvents_skipped()) {
        optionals.set(1);
      }
      if (struct.isSetEvents_fetch_duration_mean()) {
        optionals.set(2);
      }
      if (struct.isSetEvents_process_duration_mean()) {
        optionals.set(3);
      }
      if (struct.isSetEvents_received_1min_rate()) {
        optionals.set(4);
      }
      if (struct.isSetEvents_received_5min_rate()) {
        optionals.set(5);
      }
      if (struct.isSetEvents_received_15min_rate()) {
        optionals.set(6);
      }
      if (struct.isSetEvents_skipped_per_poll_mean()) {
        optionals.set(7);
      }
      if (struct.isSetLast_synced_event_id()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetEvents_received()) {
        oprot.writeI64(struct.events_received);
      }
      if (struct.isSetEvents_skipped()) {
        oprot.writeI64(struct.events_skipped);
      }
      if (struct.isSetEvents_fetch_duration_mean()) {
        oprot.writeDouble(struct.events_fetch_duration_mean);
      }
      if (struct.isSetEvents_process_duration_mean()) {
        oprot.writeDouble(struct.events_process_duration_mean);
      }
      if (struct.isSetEvents_received_1min_rate()) {
        oprot.writeDouble(struct.events_received_1min_rate);
      }
      if (struct.isSetEvents_received_5min_rate()) {
        oprot.writeDouble(struct.events_received_5min_rate);
      }
      if (struct.isSetEvents_received_15min_rate()) {
        oprot.writeDouble(struct.events_received_15min_rate);
      }
      if (struct.isSetEvents_skipped_per_poll_mean()) {
        oprot.writeDouble(struct.events_skipped_per_poll_mean);
      }
      if (struct.isSetLast_synced_event_id()) {
        oprot.writeI64(struct.last_synced_event_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEventProcessorMetrics struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = iprot.readString();
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.events_received = iprot.readI64();
        struct.setEvents_receivedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.events_skipped = iprot.readI64();
        struct.setEvents_skippedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.events_fetch_duration_mean = iprot.readDouble();
        struct.setEvents_fetch_duration_meanIsSet(true);
      }
      if (incoming.get(3)) {
        struct.events_process_duration_mean = iprot.readDouble();
        struct.setEvents_process_duration_meanIsSet(true);
      }
      if (incoming.get(4)) {
        struct.events_received_1min_rate = iprot.readDouble();
        struct.setEvents_received_1min_rateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.events_received_5min_rate = iprot.readDouble();
        struct.setEvents_received_5min_rateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.events_received_15min_rate = iprot.readDouble();
        struct.setEvents_received_15min_rateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.events_skipped_per_poll_mean = iprot.readDouble();
        struct.setEvents_skipped_per_poll_meanIsSet(true);
      }
      if (incoming.get(8)) {
        struct.last_synced_event_id = iprot.readI64();
        struct.setLast_synced_event_idIsSet(true);
      }
    }
  }

}

