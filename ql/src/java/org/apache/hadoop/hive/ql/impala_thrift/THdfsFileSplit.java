/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class THdfsFileSplit implements org.apache.thrift.TBase<THdfsFileSplit, THdfsFileSplit._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsFileSplit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsFileSplit");

  private static final org.apache.thrift.protocol.TField RELATIVE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("relative_path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("file_length", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("file_compression", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mtime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField IS_ERASURE_CODED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_erasure_coded", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField PARTITION_PATH_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_path_hash", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THdfsFileSplitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THdfsFileSplitTupleSchemeFactory());
  }

  private String relative_path; // required
  private long offset; // required
  private long length; // required
  private long partition_id; // required
  private long file_length; // required
  private org.apache.impala.thrift.THdfsCompression file_compression; // required
  private long mtime; // required
  private boolean is_erasure_coded; // required
  private int partition_path_hash; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RELATIVE_PATH((short)1, "relative_path"),
    OFFSET((short)2, "offset"),
    LENGTH((short)3, "length"),
    PARTITION_ID((short)4, "partition_id"),
    FILE_LENGTH((short)5, "file_length"),
    /**
     * 
     * @see org.apache.impala.thrift.THdfsCompression
     */
    FILE_COMPRESSION((short)6, "file_compression"),
    MTIME((short)7, "mtime"),
    IS_ERASURE_CODED((short)8, "is_erasure_coded"),
    PARTITION_PATH_HASH((short)9, "partition_path_hash");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATIVE_PATH
          return RELATIVE_PATH;
        case 2: // OFFSET
          return OFFSET;
        case 3: // LENGTH
          return LENGTH;
        case 4: // PARTITION_ID
          return PARTITION_ID;
        case 5: // FILE_LENGTH
          return FILE_LENGTH;
        case 6: // FILE_COMPRESSION
          return FILE_COMPRESSION;
        case 7: // MTIME
          return MTIME;
        case 8: // IS_ERASURE_CODED
          return IS_ERASURE_CODED;
        case 9: // PARTITION_PATH_HASH
          return PARTITION_PATH_HASH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private static final int __PARTITION_ID_ISSET_ID = 2;
  private static final int __FILE_LENGTH_ISSET_ID = 3;
  private static final int __MTIME_ISSET_ID = 4;
  private static final int __IS_ERASURE_CODED_ISSET_ID = 5;
  private static final int __PARTITION_PATH_HASH_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATIVE_PATH, new org.apache.thrift.meta_data.FieldMetaData("relative_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("file_length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_COMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("file_compression", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.THdfsCompression.class)));
    tmpMap.put(_Fields.MTIME, new org.apache.thrift.meta_data.FieldMetaData("mtime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_ERASURE_CODED, new org.apache.thrift.meta_data.FieldMetaData("is_erasure_coded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARTITION_PATH_HASH, new org.apache.thrift.meta_data.FieldMetaData("partition_path_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsFileSplit.class, metaDataMap);
  }

  public THdfsFileSplit() {
  }

  public THdfsFileSplit(
    String relative_path,
    long offset,
    long length,
    long partition_id,
    long file_length,
    org.apache.impala.thrift.THdfsCompression file_compression,
    long mtime,
    boolean is_erasure_coded,
    int partition_path_hash)
  {
    this();
    this.relative_path = relative_path;
    this.offset = offset;
    setOffsetIsSet(true);
    this.length = length;
    setLengthIsSet(true);
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    this.file_length = file_length;
    setFile_lengthIsSet(true);
    this.file_compression = file_compression;
    this.mtime = mtime;
    setMtimeIsSet(true);
    this.is_erasure_coded = is_erasure_coded;
    setIs_erasure_codedIsSet(true);
    this.partition_path_hash = partition_path_hash;
    setPartition_path_hashIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsFileSplit(THdfsFileSplit other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRelative_path()) {
      this.relative_path = other.relative_path;
    }
    this.offset = other.offset;
    this.length = other.length;
    this.partition_id = other.partition_id;
    this.file_length = other.file_length;
    if (other.isSetFile_compression()) {
      this.file_compression = other.file_compression;
    }
    this.mtime = other.mtime;
    this.is_erasure_coded = other.is_erasure_coded;
    this.partition_path_hash = other.partition_path_hash;
  }

  public THdfsFileSplit deepCopy() {
    return new THdfsFileSplit(this);
  }

  @Override
  public void clear() {
    this.relative_path = null;
    setOffsetIsSet(false);
    this.offset = 0;
    setLengthIsSet(false);
    this.length = 0;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setFile_lengthIsSet(false);
    this.file_length = 0;
    this.file_compression = null;
    setMtimeIsSet(false);
    this.mtime = 0;
    setIs_erasure_codedIsSet(false);
    this.is_erasure_coded = false;
    setPartition_path_hashIsSet(false);
    this.partition_path_hash = 0;
  }

  public String getRelative_path() {
    return this.relative_path;
  }

  public void setRelative_path(String relative_path) {
    this.relative_path = relative_path;
  }

  public void unsetRelative_path() {
    this.relative_path = null;
  }

  /** Returns true if field relative_path is set (has been assigned a value) and false otherwise */
  public boolean isSetRelative_path() {
    return this.relative_path != null;
  }

  public void setRelative_pathIsSet(boolean value) {
    if (!value) {
      this.relative_path = null;
    }
  }

  public long getOffset() {
    return this.offset;
  }

  public void setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public long getLength() {
    return this.length;
  }

  public void setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
  }

  public void unsetLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public void setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
  }

  public void unsetPartition_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public long getFile_length() {
    return this.file_length;
  }

  public void setFile_length(long file_length) {
    this.file_length = file_length;
    setFile_lengthIsSet(true);
  }

  public void unsetFile_length() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILE_LENGTH_ISSET_ID);
  }

  /** Returns true if field file_length is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_length() {
    return EncodingUtils.testBit(__isset_bitfield, __FILE_LENGTH_ISSET_ID);
  }

  public void setFile_lengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILE_LENGTH_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.impala.thrift.THdfsCompression
   */
  public org.apache.impala.thrift.THdfsCompression getFile_compression() {
    return this.file_compression;
  }

  /**
   * 
   * @see org.apache.impala.thrift.THdfsCompression
   */
  public void setFile_compression(org.apache.impala.thrift.THdfsCompression file_compression) {
    this.file_compression = file_compression;
  }

  public void unsetFile_compression() {
    this.file_compression = null;
  }

  /** Returns true if field file_compression is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_compression() {
    return this.file_compression != null;
  }

  public void setFile_compressionIsSet(boolean value) {
    if (!value) {
      this.file_compression = null;
    }
  }

  public long getMtime() {
    return this.mtime;
  }

  public void setMtime(long mtime) {
    this.mtime = mtime;
    setMtimeIsSet(true);
  }

  public void unsetMtime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MTIME_ISSET_ID);
  }

  /** Returns true if field mtime is set (has been assigned a value) and false otherwise */
  public boolean isSetMtime() {
    return EncodingUtils.testBit(__isset_bitfield, __MTIME_ISSET_ID);
  }

  public void setMtimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MTIME_ISSET_ID, value);
  }

  public boolean isIs_erasure_coded() {
    return this.is_erasure_coded;
  }

  public void setIs_erasure_coded(boolean is_erasure_coded) {
    this.is_erasure_coded = is_erasure_coded;
    setIs_erasure_codedIsSet(true);
  }

  public void unsetIs_erasure_coded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_ERASURE_CODED_ISSET_ID);
  }

  /** Returns true if field is_erasure_coded is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_erasure_coded() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_ERASURE_CODED_ISSET_ID);
  }

  public void setIs_erasure_codedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_ERASURE_CODED_ISSET_ID, value);
  }

  public int getPartition_path_hash() {
    return this.partition_path_hash;
  }

  public void setPartition_path_hash(int partition_path_hash) {
    this.partition_path_hash = partition_path_hash;
    setPartition_path_hashIsSet(true);
  }

  public void unsetPartition_path_hash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITION_PATH_HASH_ISSET_ID);
  }

  /** Returns true if field partition_path_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_path_hash() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITION_PATH_HASH_ISSET_ID);
  }

  public void setPartition_path_hashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITION_PATH_HASH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATIVE_PATH:
      if (value == null) {
        unsetRelative_path();
      } else {
        setRelative_path((String)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Long)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((Long)value);
      }
      break;

    case FILE_LENGTH:
      if (value == null) {
        unsetFile_length();
      } else {
        setFile_length((Long)value);
      }
      break;

    case FILE_COMPRESSION:
      if (value == null) {
        unsetFile_compression();
      } else {
        setFile_compression((org.apache.impala.thrift.THdfsCompression)value);
      }
      break;

    case MTIME:
      if (value == null) {
        unsetMtime();
      } else {
        setMtime((Long)value);
      }
      break;

    case IS_ERASURE_CODED:
      if (value == null) {
        unsetIs_erasure_coded();
      } else {
        setIs_erasure_coded((Boolean)value);
      }
      break;

    case PARTITION_PATH_HASH:
      if (value == null) {
        unsetPartition_path_hash();
      } else {
        setPartition_path_hash((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATIVE_PATH:
      return getRelative_path();

    case OFFSET:
      return getOffset();

    case LENGTH:
      return getLength();

    case PARTITION_ID:
      return getPartition_id();

    case FILE_LENGTH:
      return getFile_length();

    case FILE_COMPRESSION:
      return getFile_compression();

    case MTIME:
      return getMtime();

    case IS_ERASURE_CODED:
      return isIs_erasure_coded();

    case PARTITION_PATH_HASH:
      return getPartition_path_hash();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATIVE_PATH:
      return isSetRelative_path();
    case OFFSET:
      return isSetOffset();
    case LENGTH:
      return isSetLength();
    case PARTITION_ID:
      return isSetPartition_id();
    case FILE_LENGTH:
      return isSetFile_length();
    case FILE_COMPRESSION:
      return isSetFile_compression();
    case MTIME:
      return isSetMtime();
    case IS_ERASURE_CODED:
      return isSetIs_erasure_coded();
    case PARTITION_PATH_HASH:
      return isSetPartition_path_hash();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THdfsFileSplit)
      return this.equals((THdfsFileSplit)that);
    return false;
  }

  public boolean equals(THdfsFileSplit that) {
    if (that == null)
      return false;

    boolean this_present_relative_path = true && this.isSetRelative_path();
    boolean that_present_relative_path = true && that.isSetRelative_path();
    if (this_present_relative_path || that_present_relative_path) {
      if (!(this_present_relative_path && that_present_relative_path))
        return false;
      if (!this.relative_path.equals(that.relative_path))
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_partition_id = true;
    boolean that_present_partition_id = true;
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_file_length = true;
    boolean that_present_file_length = true;
    if (this_present_file_length || that_present_file_length) {
      if (!(this_present_file_length && that_present_file_length))
        return false;
      if (this.file_length != that.file_length)
        return false;
    }

    boolean this_present_file_compression = true && this.isSetFile_compression();
    boolean that_present_file_compression = true && that.isSetFile_compression();
    if (this_present_file_compression || that_present_file_compression) {
      if (!(this_present_file_compression && that_present_file_compression))
        return false;
      if (!this.file_compression.equals(that.file_compression))
        return false;
    }

    boolean this_present_mtime = true;
    boolean that_present_mtime = true;
    if (this_present_mtime || that_present_mtime) {
      if (!(this_present_mtime && that_present_mtime))
        return false;
      if (this.mtime != that.mtime)
        return false;
    }

    boolean this_present_is_erasure_coded = true;
    boolean that_present_is_erasure_coded = true;
    if (this_present_is_erasure_coded || that_present_is_erasure_coded) {
      if (!(this_present_is_erasure_coded && that_present_is_erasure_coded))
        return false;
      if (this.is_erasure_coded != that.is_erasure_coded)
        return false;
    }

    boolean this_present_partition_path_hash = true;
    boolean that_present_partition_path_hash = true;
    if (this_present_partition_path_hash || that_present_partition_path_hash) {
      if (!(this_present_partition_path_hash && that_present_partition_path_hash))
        return false;
      if (this.partition_path_hash != that.partition_path_hash)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_relative_path = true && (isSetRelative_path());
    list.add(present_relative_path);
    if (present_relative_path)
      list.add(relative_path);

    boolean present_offset = true;
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_length = true;
    list.add(present_length);
    if (present_length)
      list.add(length);

    boolean present_partition_id = true;
    list.add(present_partition_id);
    if (present_partition_id)
      list.add(partition_id);

    boolean present_file_length = true;
    list.add(present_file_length);
    if (present_file_length)
      list.add(file_length);

    boolean present_file_compression = true && (isSetFile_compression());
    list.add(present_file_compression);
    if (present_file_compression)
      list.add(file_compression.getValue());

    boolean present_mtime = true;
    list.add(present_mtime);
    if (present_mtime)
      list.add(mtime);

    boolean present_is_erasure_coded = true;
    list.add(present_is_erasure_coded);
    if (present_is_erasure_coded)
      list.add(is_erasure_coded);

    boolean present_partition_path_hash = true;
    list.add(present_partition_path_hash);
    if (present_partition_path_hash)
      list.add(partition_path_hash);

    return list.hashCode();
  }

  @Override
  public int compareTo(THdfsFileSplit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRelative_path()).compareTo(other.isSetRelative_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelative_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relative_path, other.relative_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_id()).compareTo(other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_length()).compareTo(other.isSetFile_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_length, other.file_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_compression()).compareTo(other.isSetFile_compression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_compression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_compression, other.file_compression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMtime()).compareTo(other.isSetMtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mtime, other.mtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_erasure_coded()).compareTo(other.isSetIs_erasure_coded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_erasure_coded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_erasure_coded, other.is_erasure_coded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_path_hash()).compareTo(other.isSetPartition_path_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_path_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_path_hash, other.partition_path_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THdfsFileSplit(");
    boolean first = true;

    sb.append("relative_path:");
    if (this.relative_path == null) {
      sb.append("null");
    } else {
      sb.append(this.relative_path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_id:");
    sb.append(this.partition_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_length:");
    sb.append(this.file_length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_compression:");
    if (this.file_compression == null) {
      sb.append("null");
    } else {
      sb.append(this.file_compression);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mtime:");
    sb.append(this.mtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_erasure_coded:");
    sb.append(this.is_erasure_coded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_path_hash:");
    sb.append(this.partition_path_hash);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetRelative_path()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'relative_path' is unset! Struct:" + toString());
    }

    if (!isSetOffset()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'offset' is unset! Struct:" + toString());
    }

    if (!isSetLength()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'length' is unset! Struct:" + toString());
    }

    if (!isSetPartition_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_id' is unset! Struct:" + toString());
    }

    if (!isSetFile_length()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_length' is unset! Struct:" + toString());
    }

    if (!isSetFile_compression()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_compression' is unset! Struct:" + toString());
    }

    if (!isSetMtime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mtime' is unset! Struct:" + toString());
    }

    if (!isSetIs_erasure_coded()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_erasure_coded' is unset! Struct:" + toString());
    }

    if (!isSetPartition_path_hash()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_path_hash' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsFileSplitStandardSchemeFactory implements SchemeFactory {
    public THdfsFileSplitStandardScheme getScheme() {
      return new THdfsFileSplitStandardScheme();
    }
  }

  private static class THdfsFileSplitStandardScheme extends StandardScheme<THdfsFileSplit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsFileSplit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATIVE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relative_path = iprot.readString();
              struct.setRelative_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_length = iprot.readI64();
              struct.setFile_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_COMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_compression = org.apache.impala.thrift.THdfsCompression.findByValue(iprot.readI32());
              struct.setFile_compressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mtime = iprot.readI64();
              struct.setMtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_ERASURE_CODED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_erasure_coded = iprot.readBool();
              struct.setIs_erasure_codedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARTITION_PATH_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partition_path_hash = iprot.readI32();
              struct.setPartition_path_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsFileSplit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.relative_path != null) {
        oprot.writeFieldBegin(RELATIVE_PATH_FIELD_DESC);
        oprot.writeString(struct.relative_path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI64(struct.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI64(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
      oprot.writeI64(struct.partition_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_LENGTH_FIELD_DESC);
      oprot.writeI64(struct.file_length);
      oprot.writeFieldEnd();
      if (struct.file_compression != null) {
        oprot.writeFieldBegin(FILE_COMPRESSION_FIELD_DESC);
        oprot.writeI32(struct.file_compression.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MTIME_FIELD_DESC);
      oprot.writeI64(struct.mtime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ERASURE_CODED_FIELD_DESC);
      oprot.writeBool(struct.is_erasure_coded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTITION_PATH_HASH_FIELD_DESC);
      oprot.writeI32(struct.partition_path_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsFileSplitTupleSchemeFactory implements SchemeFactory {
    public THdfsFileSplitTupleScheme getScheme() {
      return new THdfsFileSplitTupleScheme();
    }
  }

  private static class THdfsFileSplitTupleScheme extends TupleScheme<THdfsFileSplit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsFileSplit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.relative_path);
      oprot.writeI64(struct.offset);
      oprot.writeI64(struct.length);
      oprot.writeI64(struct.partition_id);
      oprot.writeI64(struct.file_length);
      oprot.writeI32(struct.file_compression.getValue());
      oprot.writeI64(struct.mtime);
      oprot.writeBool(struct.is_erasure_coded);
      oprot.writeI32(struct.partition_path_hash);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsFileSplit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.relative_path = iprot.readString();
      struct.setRelative_pathIsSet(true);
      struct.offset = iprot.readI64();
      struct.setOffsetIsSet(true);
      struct.length = iprot.readI64();
      struct.setLengthIsSet(true);
      struct.partition_id = iprot.readI64();
      struct.setPartition_idIsSet(true);
      struct.file_length = iprot.readI64();
      struct.setFile_lengthIsSet(true);
      struct.file_compression = org.apache.impala.thrift.THdfsCompression.findByValue(iprot.readI32());
      struct.setFile_compressionIsSet(true);
      struct.mtime = iprot.readI64();
      struct.setMtimeIsSet(true);
      struct.is_erasure_coded = iprot.readBool();
      struct.setIs_erasure_codedIsSet(true);
      struct.partition_path_hash = iprot.readI32();
      struct.setPartition_path_hashIsSet(true);
    }
  }

}

