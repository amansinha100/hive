/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TShutdownParams implements org.apache.thrift.TBase<TShutdownParams, TShutdownParams._Fields>, java.io.Serializable, Cloneable, Comparable<TShutdownParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TShutdownParams");

  private static final org.apache.thrift.protocol.TField BACKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("backend", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DEADLINE_S_FIELD_DESC = new org.apache.thrift.protocol.TField("deadline_s", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TShutdownParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TShutdownParamsTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TNetworkAddress backend; // optional
  private long deadline_s; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BACKEND((short)1, "backend"),
    DEADLINE_S((short)2, "deadline_s");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BACKEND
          return BACKEND;
        case 2: // DEADLINE_S
          return DEADLINE_S;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEADLINE_S_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BACKEND,_Fields.DEADLINE_S};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BACKEND, new org.apache.thrift.meta_data.FieldMetaData("backend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.DEADLINE_S, new org.apache.thrift.meta_data.FieldMetaData("deadline_s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TShutdownParams.class, metaDataMap);
  }

  public TShutdownParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TShutdownParams(TShutdownParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBackend()) {
      this.backend = new org.apache.impala.thrift.TNetworkAddress(other.backend);
    }
    this.deadline_s = other.deadline_s;
  }

  public TShutdownParams deepCopy() {
    return new TShutdownParams(this);
  }

  @Override
  public void clear() {
    this.backend = null;
    setDeadline_sIsSet(false);
    this.deadline_s = 0;
  }

  public org.apache.impala.thrift.TNetworkAddress getBackend() {
    return this.backend;
  }

  public void setBackend(org.apache.impala.thrift.TNetworkAddress backend) {
    this.backend = backend;
  }

  public void unsetBackend() {
    this.backend = null;
  }

  /** Returns true if field backend is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend() {
    return this.backend != null;
  }

  public void setBackendIsSet(boolean value) {
    if (!value) {
      this.backend = null;
    }
  }

  public long getDeadline_s() {
    return this.deadline_s;
  }

  public void setDeadline_s(long deadline_s) {
    this.deadline_s = deadline_s;
    setDeadline_sIsSet(true);
  }

  public void unsetDeadline_s() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEADLINE_S_ISSET_ID);
  }

  /** Returns true if field deadline_s is set (has been assigned a value) and false otherwise */
  public boolean isSetDeadline_s() {
    return EncodingUtils.testBit(__isset_bitfield, __DEADLINE_S_ISSET_ID);
  }

  public void setDeadline_sIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEADLINE_S_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BACKEND:
      if (value == null) {
        unsetBackend();
      } else {
        setBackend((org.apache.impala.thrift.TNetworkAddress)value);
      }
      break;

    case DEADLINE_S:
      if (value == null) {
        unsetDeadline_s();
      } else {
        setDeadline_s((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BACKEND:
      return getBackend();

    case DEADLINE_S:
      return getDeadline_s();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BACKEND:
      return isSetBackend();
    case DEADLINE_S:
      return isSetDeadline_s();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TShutdownParams)
      return this.equals((TShutdownParams)that);
    return false;
  }

  public boolean equals(TShutdownParams that) {
    if (that == null)
      return false;

    boolean this_present_backend = true && this.isSetBackend();
    boolean that_present_backend = true && that.isSetBackend();
    if (this_present_backend || that_present_backend) {
      if (!(this_present_backend && that_present_backend))
        return false;
      if (!this.backend.equals(that.backend))
        return false;
    }

    boolean this_present_deadline_s = true && this.isSetDeadline_s();
    boolean that_present_deadline_s = true && that.isSetDeadline_s();
    if (this_present_deadline_s || that_present_deadline_s) {
      if (!(this_present_deadline_s && that_present_deadline_s))
        return false;
      if (this.deadline_s != that.deadline_s)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_backend = true && (isSetBackend());
    list.add(present_backend);
    if (present_backend)
      list.add(backend);

    boolean present_deadline_s = true && (isSetDeadline_s());
    list.add(present_deadline_s);
    if (present_deadline_s)
      list.add(deadline_s);

    return list.hashCode();
  }

  @Override
  public int compareTo(TShutdownParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBackend()).compareTo(other.isSetBackend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend, other.backend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeadline_s()).compareTo(other.isSetDeadline_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeadline_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deadline_s, other.deadline_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TShutdownParams(");
    boolean first = true;

    if (isSetBackend()) {
      sb.append("backend:");
      if (this.backend == null) {
        sb.append("null");
      } else {
        sb.append(this.backend);
      }
      first = false;
    }
    if (isSetDeadline_s()) {
      if (!first) sb.append(", ");
      sb.append("deadline_s:");
      sb.append(this.deadline_s);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (backend != null) {
      backend.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TShutdownParamsStandardSchemeFactory implements SchemeFactory {
    public TShutdownParamsStandardScheme getScheme() {
      return new TShutdownParamsStandardScheme();
    }
  }

  private static class TShutdownParamsStandardScheme extends StandardScheme<TShutdownParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TShutdownParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BACKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.backend = new org.apache.impala.thrift.TNetworkAddress();
              struct.backend.read(iprot);
              struct.setBackendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEADLINE_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deadline_s = iprot.readI64();
              struct.setDeadline_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TShutdownParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.backend != null) {
        if (struct.isSetBackend()) {
          oprot.writeFieldBegin(BACKEND_FIELD_DESC);
          struct.backend.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeadline_s()) {
        oprot.writeFieldBegin(DEADLINE_S_FIELD_DESC);
        oprot.writeI64(struct.deadline_s);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TShutdownParamsTupleSchemeFactory implements SchemeFactory {
    public TShutdownParamsTupleScheme getScheme() {
      return new TShutdownParamsTupleScheme();
    }
  }

  private static class TShutdownParamsTupleScheme extends TupleScheme<TShutdownParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TShutdownParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBackend()) {
        optionals.set(0);
      }
      if (struct.isSetDeadline_s()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBackend()) {
        struct.backend.write(oprot);
      }
      if (struct.isSetDeadline_s()) {
        oprot.writeI64(struct.deadline_s);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TShutdownParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.backend = new org.apache.impala.thrift.TNetworkAddress();
        struct.backend.read(iprot);
        struct.setBackendIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deadline_s = iprot.readI64();
        struct.setDeadline_sIsSet(true);
      }
    }
  }

}

