/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TPrioritizeLoadRequest implements org.apache.thrift.TBase<TPrioritizeLoadRequest, TPrioritizeLoadRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TPrioritizeLoadRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPrioritizeLoadRequest");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OBJECT_DESCS_FIELD_DESC = new org.apache.thrift.protocol.TField("object_descs", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPrioritizeLoadRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPrioritizeLoadRequestTupleSchemeFactory());
  }

  private CatalogServiceVersion protocol_version; // required
  private TCatalogServiceRequestHeader header; // optional
  private List<org.apache.impala.thrift.TCatalogObject> object_descs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see CatalogServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    HEADER((short)2, "header"),
    OBJECT_DESCS((short)3, "object_descs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // HEADER
          return HEADER;
        case 3: // OBJECT_DESCS
          return OBJECT_DESCS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.HEADER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CatalogServiceVersion.class)));
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCatalogServiceRequestHeader.class)));
    tmpMap.put(_Fields.OBJECT_DESCS, new org.apache.thrift.meta_data.FieldMetaData("object_descs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCatalogObject.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPrioritizeLoadRequest.class, metaDataMap);
  }

  public TPrioritizeLoadRequest() {
    this.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.V1;

  }

  public TPrioritizeLoadRequest(
    CatalogServiceVersion protocol_version,
    List<org.apache.impala.thrift.TCatalogObject> object_descs)
  {
    this();
    this.protocol_version = protocol_version;
    this.object_descs = object_descs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPrioritizeLoadRequest(TPrioritizeLoadRequest other) {
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetHeader()) {
      this.header = new TCatalogServiceRequestHeader(other.header);
    }
    if (other.isSetObject_descs()) {
      List<org.apache.impala.thrift.TCatalogObject> __this__object_descs = new ArrayList<org.apache.impala.thrift.TCatalogObject>(other.object_descs.size());
      for (org.apache.impala.thrift.TCatalogObject other_element : other.object_descs) {
        __this__object_descs.add(new org.apache.impala.thrift.TCatalogObject(other_element));
      }
      this.object_descs = __this__object_descs;
    }
  }

  public TPrioritizeLoadRequest deepCopy() {
    return new TPrioritizeLoadRequest(this);
  }

  @Override
  public void clear() {
    this.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.V1;

    this.header = null;
    this.object_descs = null;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public CatalogServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public void setProtocol_version(CatalogServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public TCatalogServiceRequestHeader getHeader() {
    return this.header;
  }

  public void setHeader(TCatalogServiceRequestHeader header) {
    this.header = header;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public int getObject_descsSize() {
    return (this.object_descs == null) ? 0 : this.object_descs.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TCatalogObject> getObject_descsIterator() {
    return (this.object_descs == null) ? null : this.object_descs.iterator();
  }

  public void addToObject_descs(org.apache.impala.thrift.TCatalogObject elem) {
    if (this.object_descs == null) {
      this.object_descs = new ArrayList<org.apache.impala.thrift.TCatalogObject>();
    }
    this.object_descs.add(elem);
  }

  public List<org.apache.impala.thrift.TCatalogObject> getObject_descs() {
    return this.object_descs;
  }

  public void setObject_descs(List<org.apache.impala.thrift.TCatalogObject> object_descs) {
    this.object_descs = object_descs;
  }

  public void unsetObject_descs() {
    this.object_descs = null;
  }

  /** Returns true if field object_descs is set (has been assigned a value) and false otherwise */
  public boolean isSetObject_descs() {
    return this.object_descs != null;
  }

  public void setObject_descsIsSet(boolean value) {
    if (!value) {
      this.object_descs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((CatalogServiceVersion)value);
      }
      break;

    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((TCatalogServiceRequestHeader)value);
      }
      break;

    case OBJECT_DESCS:
      if (value == null) {
        unsetObject_descs();
      } else {
        setObject_descs((List<org.apache.impala.thrift.TCatalogObject>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case HEADER:
      return getHeader();

    case OBJECT_DESCS:
      return getObject_descs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case HEADER:
      return isSetHeader();
    case OBJECT_DESCS:
      return isSetObject_descs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPrioritizeLoadRequest)
      return this.equals((TPrioritizeLoadRequest)that);
    return false;
  }

  public boolean equals(TPrioritizeLoadRequest that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_object_descs = true && this.isSetObject_descs();
    boolean that_present_object_descs = true && that.isSetObject_descs();
    if (this_present_object_descs || that_present_object_descs) {
      if (!(this_present_object_descs && that_present_object_descs))
        return false;
      if (!this.object_descs.equals(that.object_descs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocol_version = true && (isSetProtocol_version());
    list.add(present_protocol_version);
    if (present_protocol_version)
      list.add(protocol_version.getValue());

    boolean present_header = true && (isSetHeader());
    list.add(present_header);
    if (present_header)
      list.add(header);

    boolean present_object_descs = true && (isSetObject_descs());
    list.add(present_object_descs);
    if (present_object_descs)
      list.add(object_descs);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPrioritizeLoadRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetObject_descs()).compareTo(other.isSetObject_descs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObject_descs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object_descs, other.object_descs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPrioritizeLoadRequest(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetHeader()) {
      if (!first) sb.append(", ");
      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("object_descs:");
    if (this.object_descs == null) {
      sb.append("null");
    } else {
      sb.append(this.object_descs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetProtocol_version()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' is unset! Struct:" + toString());
    }

    if (!isSetObject_descs()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'object_descs' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (header != null) {
      header.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPrioritizeLoadRequestStandardSchemeFactory implements SchemeFactory {
    public TPrioritizeLoadRequestStandardScheme getScheme() {
      return new TPrioritizeLoadRequestStandardScheme();
    }
  }

  private static class TPrioritizeLoadRequestStandardScheme extends StandardScheme<TPrioritizeLoadRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPrioritizeLoadRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new TCatalogServiceRequestHeader();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OBJECT_DESCS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                struct.object_descs = new ArrayList<org.apache.impala.thrift.TCatalogObject>(_list130.size);
                org.apache.impala.thrift.TCatalogObject _elem131;
                for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                {
                  _elem131 = new org.apache.impala.thrift.TCatalogObject();
                  _elem131.read(iprot);
                  struct.object_descs.add(_elem131);
                }
                iprot.readListEnd();
              }
              struct.setObject_descsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPrioritizeLoadRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.header != null) {
        if (struct.isSetHeader()) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.object_descs != null) {
        oprot.writeFieldBegin(OBJECT_DESCS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.object_descs.size()));
          for (org.apache.impala.thrift.TCatalogObject _iter133 : struct.object_descs)
          {
            _iter133.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPrioritizeLoadRequestTupleSchemeFactory implements SchemeFactory {
    public TPrioritizeLoadRequestTupleScheme getScheme() {
      return new TPrioritizeLoadRequestTupleScheme();
    }
  }

  private static class TPrioritizeLoadRequestTupleScheme extends TupleScheme<TPrioritizeLoadRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPrioritizeLoadRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      {
        oprot.writeI32(struct.object_descs.size());
        for (org.apache.impala.thrift.TCatalogObject _iter134 : struct.object_descs)
        {
          _iter134.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPrioritizeLoadRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      {
        org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.object_descs = new ArrayList<org.apache.impala.thrift.TCatalogObject>(_list135.size);
        org.apache.impala.thrift.TCatalogObject _elem136;
        for (int _i137 = 0; _i137 < _list135.size; ++_i137)
        {
          _elem136 = new org.apache.impala.thrift.TCatalogObject();
          _elem136.read(iprot);
          struct.object_descs.add(_elem136);
        }
      }
      struct.setObject_descsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.header = new TCatalogServiceRequestHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
    }
  }

}

