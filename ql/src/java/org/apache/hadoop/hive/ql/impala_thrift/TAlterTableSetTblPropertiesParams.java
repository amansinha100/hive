/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TAlterTableSetTblPropertiesParams implements org.apache.thrift.TBase<TAlterTableSetTblPropertiesParams, TAlterTableSetTblPropertiesParams._Fields>, java.io.Serializable, Cloneable, Comparable<TAlterTableSetTblPropertiesParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlterTableSetTblPropertiesParams");

  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_set", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAlterTableSetTblPropertiesParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAlterTableSetTblPropertiesParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see org.apache.impala.thrift.TTablePropertyType
   */
  public org.apache.impala.thrift.TTablePropertyType target; // required
  public Map<String,String> properties; // required
  public List<List<org.apache.impala.thrift.TPartitionKeyValue>> partition_set; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see org.apache.impala.thrift.TTablePropertyType
     */
    TARGET((short)1, "target"),
    PROPERTIES((short)2, "properties"),
    PARTITION_SET((short)3, "partition_set");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TARGET
          return TARGET;
        case 2: // PROPERTIES
          return PROPERTIES;
        case 3: // PARTITION_SET
          return PARTITION_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PARTITION_SET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TTablePropertyType.class)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITION_SET, new org.apache.thrift.meta_data.FieldMetaData("partition_set", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TPartitionKeyValue.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlterTableSetTblPropertiesParams.class, metaDataMap);
  }

  public TAlterTableSetTblPropertiesParams() {
  }

  public TAlterTableSetTblPropertiesParams(
    org.apache.impala.thrift.TTablePropertyType target,
    Map<String,String> properties)
  {
    this();
    this.target = target;
    this.properties = properties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlterTableSetTblPropertiesParams(TAlterTableSetTblPropertiesParams other) {
    if (other.isSetTarget()) {
      this.target = other.target;
    }
    if (other.isSetProperties()) {
      Map<String,String> __this__properties = new HashMap<String,String>(other.properties);
      this.properties = __this__properties;
    }
    if (other.isSetPartition_set()) {
      List<List<org.apache.impala.thrift.TPartitionKeyValue>> __this__partition_set = new ArrayList<List<org.apache.impala.thrift.TPartitionKeyValue>>(other.partition_set.size());
      for (List<org.apache.impala.thrift.TPartitionKeyValue> other_element : other.partition_set) {
        List<org.apache.impala.thrift.TPartitionKeyValue> __this__partition_set_copy = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>(other_element.size());
        for (org.apache.impala.thrift.TPartitionKeyValue other_element_element : other_element) {
          __this__partition_set_copy.add(new org.apache.impala.thrift.TPartitionKeyValue(other_element_element));
        }
        __this__partition_set.add(__this__partition_set_copy);
      }
      this.partition_set = __this__partition_set;
    }
  }

  public TAlterTableSetTblPropertiesParams deepCopy() {
    return new TAlterTableSetTblPropertiesParams(this);
  }

  @Override
  public void clear() {
    this.target = null;
    this.properties = null;
    this.partition_set = null;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TTablePropertyType
   */
  public org.apache.impala.thrift.TTablePropertyType getTarget() {
    return this.target;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TTablePropertyType
   */
  public TAlterTableSetTblPropertiesParams setTarget(org.apache.impala.thrift.TTablePropertyType target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,String>();
    }
    this.properties.put(key, val);
  }

  public Map<String,String> getProperties() {
    return this.properties;
  }

  public TAlterTableSetTblPropertiesParams setProperties(Map<String,String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public int getPartition_setSize() {
    return (this.partition_set == null) ? 0 : this.partition_set.size();
  }

  public java.util.Iterator<List<org.apache.impala.thrift.TPartitionKeyValue>> getPartition_setIterator() {
    return (this.partition_set == null) ? null : this.partition_set.iterator();
  }

  public void addToPartition_set(List<org.apache.impala.thrift.TPartitionKeyValue> elem) {
    if (this.partition_set == null) {
      this.partition_set = new ArrayList<List<org.apache.impala.thrift.TPartitionKeyValue>>();
    }
    this.partition_set.add(elem);
  }

  public List<List<org.apache.impala.thrift.TPartitionKeyValue>> getPartition_set() {
    return this.partition_set;
  }

  public TAlterTableSetTblPropertiesParams setPartition_set(List<List<org.apache.impala.thrift.TPartitionKeyValue>> partition_set) {
    this.partition_set = partition_set;
    return this;
  }

  public void unsetPartition_set() {
    this.partition_set = null;
  }

  /** Returns true if field partition_set is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_set() {
    return this.partition_set != null;
  }

  public void setPartition_setIsSet(boolean value) {
    if (!value) {
      this.partition_set = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((org.apache.impala.thrift.TTablePropertyType)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,String>)value);
      }
      break;

    case PARTITION_SET:
      if (value == null) {
        unsetPartition_set();
      } else {
        setPartition_set((List<List<org.apache.impala.thrift.TPartitionKeyValue>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TARGET:
      return getTarget();

    case PROPERTIES:
      return getProperties();

    case PARTITION_SET:
      return getPartition_set();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TARGET:
      return isSetTarget();
    case PROPERTIES:
      return isSetProperties();
    case PARTITION_SET:
      return isSetPartition_set();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAlterTableSetTblPropertiesParams)
      return this.equals((TAlterTableSetTblPropertiesParams)that);
    return false;
  }

  public boolean equals(TAlterTableSetTblPropertiesParams that) {
    if (that == null)
      return false;

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_partition_set = true && this.isSetPartition_set();
    boolean that_present_partition_set = true && that.isSetPartition_set();
    if (this_present_partition_set || that_present_partition_set) {
      if (!(this_present_partition_set && that_present_partition_set))
        return false;
      if (!this.partition_set.equals(that.partition_set))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_target = true && (isSetTarget());
    list.add(present_target);
    if (present_target)
      list.add(target.getValue());

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    boolean present_partition_set = true && (isSetPartition_set());
    list.add(present_partition_set);
    if (present_partition_set)
      list.add(partition_set);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAlterTableSetTblPropertiesParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_set()).compareTo(other.isSetPartition_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_set, other.partition_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAlterTableSetTblPropertiesParams(");
    boolean first = true;

    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      sb.append(this.target);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("properties:");
    if (this.properties == null) {
      sb.append("null");
    } else {
      sb.append(this.properties);
    }
    first = false;
    if (isSetPartition_set()) {
      if (!first) sb.append(", ");
      sb.append("partition_set:");
      if (this.partition_set == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_set);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (target == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'target' was not present! Struct: " + toString());
    }
    if (properties == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'properties' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlterTableSetTblPropertiesParamsStandardSchemeFactory implements SchemeFactory {
    public TAlterTableSetTblPropertiesParamsStandardScheme getScheme() {
      return new TAlterTableSetTblPropertiesParamsStandardScheme();
    }
  }

  private static class TAlterTableSetTblPropertiesParamsStandardScheme extends StandardScheme<TAlterTableSetTblPropertiesParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlterTableSetTblPropertiesParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.target = org.apache.impala.thrift.TTablePropertyType.findByValue(iprot.readI32());
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.properties = new HashMap<String,String>(2*_map64.size);
                String _key65;
                String _val66;
                for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                {
                  _key65 = iprot.readString();
                  _val66 = iprot.readString();
                  struct.properties.put(_key65, _val66);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                struct.partition_set = new ArrayList<List<org.apache.impala.thrift.TPartitionKeyValue>>(_list68.size);
                List<org.apache.impala.thrift.TPartitionKeyValue> _elem69;
                for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                {
                  {
                    org.apache.thrift.protocol.TList _list71 = iprot.readListBegin();
                    _elem69 = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>(_list71.size);
                    org.apache.impala.thrift.TPartitionKeyValue _elem72;
                    for (int _i73 = 0; _i73 < _list71.size; ++_i73)
                    {
                      _elem72 = new org.apache.impala.thrift.TPartitionKeyValue();
                      _elem72.read(iprot);
                      _elem69.add(_elem72);
                    }
                    iprot.readListEnd();
                  }
                  struct.partition_set.add(_elem69);
                }
                iprot.readListEnd();
              }
              struct.setPartition_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlterTableSetTblPropertiesParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeI32(struct.target.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.properties != null) {
        oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
          for (Map.Entry<String, String> _iter74 : struct.properties.entrySet())
          {
            oprot.writeString(_iter74.getKey());
            oprot.writeString(_iter74.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.partition_set != null) {
        if (struct.isSetPartition_set()) {
          oprot.writeFieldBegin(PARTITION_SET_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.partition_set.size()));
            for (List<org.apache.impala.thrift.TPartitionKeyValue> _iter75 : struct.partition_set)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter75.size()));
                for (org.apache.impala.thrift.TPartitionKeyValue _iter76 : _iter75)
                {
                  _iter76.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlterTableSetTblPropertiesParamsTupleSchemeFactory implements SchemeFactory {
    public TAlterTableSetTblPropertiesParamsTupleScheme getScheme() {
      return new TAlterTableSetTblPropertiesParamsTupleScheme();
    }
  }

  private static class TAlterTableSetTblPropertiesParamsTupleScheme extends TupleScheme<TAlterTableSetTblPropertiesParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlterTableSetTblPropertiesParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.target.getValue());
      {
        oprot.writeI32(struct.properties.size());
        for (Map.Entry<String, String> _iter77 : struct.properties.entrySet())
        {
          oprot.writeString(_iter77.getKey());
          oprot.writeString(_iter77.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetPartition_set()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPartition_set()) {
        {
          oprot.writeI32(struct.partition_set.size());
          for (List<org.apache.impala.thrift.TPartitionKeyValue> _iter78 : struct.partition_set)
          {
            {
              oprot.writeI32(_iter78.size());
              for (org.apache.impala.thrift.TPartitionKeyValue _iter79 : _iter78)
              {
                _iter79.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlterTableSetTblPropertiesParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.target = org.apache.impala.thrift.TTablePropertyType.findByValue(iprot.readI32());
      struct.setTargetIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.properties = new HashMap<String,String>(2*_map80.size);
        String _key81;
        String _val82;
        for (int _i83 = 0; _i83 < _map80.size; ++_i83)
        {
          _key81 = iprot.readString();
          _val82 = iprot.readString();
          struct.properties.put(_key81, _val82);
        }
      }
      struct.setPropertiesIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.partition_set = new ArrayList<List<org.apache.impala.thrift.TPartitionKeyValue>>(_list84.size);
          List<org.apache.impala.thrift.TPartitionKeyValue> _elem85;
          for (int _i86 = 0; _i86 < _list84.size; ++_i86)
          {
            {
              org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _elem85 = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>(_list87.size);
              org.apache.impala.thrift.TPartitionKeyValue _elem88;
              for (int _i89 = 0; _i89 < _list87.size; ++_i89)
              {
                _elem88 = new org.apache.impala.thrift.TPartitionKeyValue();
                _elem88.read(iprot);
                _elem85.add(_elem88);
              }
            }
            struct.partition_set.add(_elem85);
          }
        }
        struct.setPartition_setIsSet(true);
      }
    }
  }

}

