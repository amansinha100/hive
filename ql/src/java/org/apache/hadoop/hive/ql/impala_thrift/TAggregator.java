/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TAggregator implements org.apache.thrift.TBase<TAggregator, TAggregator._Fields>, java.io.Serializable, Cloneable, Comparable<TAggregator> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAggregator");

  private static final org.apache.thrift.protocol.TField GROUPING_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("grouping_exprs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField AGGREGATE_FUNCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregate_functions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField INTERMEDIATE_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("intermediate_tuple_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OUTPUT_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("output_tuple_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NEED_FINALIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("need_finalize", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField USE_STREAMING_PREAGGREGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("use_streaming_preaggregation", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField RESOURCE_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_profile", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAggregatorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAggregatorTupleSchemeFactory());
  }

  public List<org.apache.impala.thrift.TExpr> grouping_exprs; // optional
  public List<org.apache.impala.thrift.TExpr> aggregate_functions; // required
  public int intermediate_tuple_id; // required
  public int output_tuple_id; // required
  public boolean need_finalize; // required
  public boolean use_streaming_preaggregation; // required
  public org.apache.impala.thrift.TBackendResourceProfile resource_profile; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUPING_EXPRS((short)1, "grouping_exprs"),
    AGGREGATE_FUNCTIONS((short)2, "aggregate_functions"),
    INTERMEDIATE_TUPLE_ID((short)3, "intermediate_tuple_id"),
    OUTPUT_TUPLE_ID((short)4, "output_tuple_id"),
    NEED_FINALIZE((short)5, "need_finalize"),
    USE_STREAMING_PREAGGREGATION((short)6, "use_streaming_preaggregation"),
    RESOURCE_PROFILE((short)7, "resource_profile");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUPING_EXPRS
          return GROUPING_EXPRS;
        case 2: // AGGREGATE_FUNCTIONS
          return AGGREGATE_FUNCTIONS;
        case 3: // INTERMEDIATE_TUPLE_ID
          return INTERMEDIATE_TUPLE_ID;
        case 4: // OUTPUT_TUPLE_ID
          return OUTPUT_TUPLE_ID;
        case 5: // NEED_FINALIZE
          return NEED_FINALIZE;
        case 6: // USE_STREAMING_PREAGGREGATION
          return USE_STREAMING_PREAGGREGATION;
        case 7: // RESOURCE_PROFILE
          return RESOURCE_PROFILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERMEDIATE_TUPLE_ID_ISSET_ID = 0;
  private static final int __OUTPUT_TUPLE_ID_ISSET_ID = 1;
  private static final int __NEED_FINALIZE_ISSET_ID = 2;
  private static final int __USE_STREAMING_PREAGGREGATION_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GROUPING_EXPRS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUPING_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("grouping_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.AGGREGATE_FUNCTIONS, new org.apache.thrift.meta_data.FieldMetaData("aggregate_functions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.INTERMEDIATE_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("intermediate_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.OUTPUT_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("output_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.NEED_FINALIZE, new org.apache.thrift.meta_data.FieldMetaData("need_finalize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_STREAMING_PREAGGREGATION, new org.apache.thrift.meta_data.FieldMetaData("use_streaming_preaggregation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESOURCE_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("resource_profile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TBackendResourceProfile.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAggregator.class, metaDataMap);
  }

  public TAggregator() {
  }

  public TAggregator(
    List<org.apache.impala.thrift.TExpr> aggregate_functions,
    int intermediate_tuple_id,
    int output_tuple_id,
    boolean need_finalize,
    boolean use_streaming_preaggregation,
    org.apache.impala.thrift.TBackendResourceProfile resource_profile)
  {
    this();
    this.aggregate_functions = aggregate_functions;
    this.intermediate_tuple_id = intermediate_tuple_id;
    setIntermediate_tuple_idIsSet(true);
    this.output_tuple_id = output_tuple_id;
    setOutput_tuple_idIsSet(true);
    this.need_finalize = need_finalize;
    setNeed_finalizeIsSet(true);
    this.use_streaming_preaggregation = use_streaming_preaggregation;
    setUse_streaming_preaggregationIsSet(true);
    this.resource_profile = resource_profile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAggregator(TAggregator other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGrouping_exprs()) {
      List<org.apache.impala.thrift.TExpr> __this__grouping_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(other.grouping_exprs.size());
      for (org.apache.impala.thrift.TExpr other_element : other.grouping_exprs) {
        __this__grouping_exprs.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.grouping_exprs = __this__grouping_exprs;
    }
    if (other.isSetAggregate_functions()) {
      List<org.apache.impala.thrift.TExpr> __this__aggregate_functions = new ArrayList<org.apache.impala.thrift.TExpr>(other.aggregate_functions.size());
      for (org.apache.impala.thrift.TExpr other_element : other.aggregate_functions) {
        __this__aggregate_functions.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.aggregate_functions = __this__aggregate_functions;
    }
    this.intermediate_tuple_id = other.intermediate_tuple_id;
    this.output_tuple_id = other.output_tuple_id;
    this.need_finalize = other.need_finalize;
    this.use_streaming_preaggregation = other.use_streaming_preaggregation;
    if (other.isSetResource_profile()) {
      this.resource_profile = new org.apache.impala.thrift.TBackendResourceProfile(other.resource_profile);
    }
  }

  public TAggregator deepCopy() {
    return new TAggregator(this);
  }

  @Override
  public void clear() {
    this.grouping_exprs = null;
    this.aggregate_functions = null;
    setIntermediate_tuple_idIsSet(false);
    this.intermediate_tuple_id = 0;
    setOutput_tuple_idIsSet(false);
    this.output_tuple_id = 0;
    setNeed_finalizeIsSet(false);
    this.need_finalize = false;
    setUse_streaming_preaggregationIsSet(false);
    this.use_streaming_preaggregation = false;
    this.resource_profile = null;
  }

  public int getGrouping_exprsSize() {
    return (this.grouping_exprs == null) ? 0 : this.grouping_exprs.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getGrouping_exprsIterator() {
    return (this.grouping_exprs == null) ? null : this.grouping_exprs.iterator();
  }

  public void addToGrouping_exprs(org.apache.impala.thrift.TExpr elem) {
    if (this.grouping_exprs == null) {
      this.grouping_exprs = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.grouping_exprs.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getGrouping_exprs() {
    return this.grouping_exprs;
  }

  public TAggregator setGrouping_exprs(List<org.apache.impala.thrift.TExpr> grouping_exprs) {
    this.grouping_exprs = grouping_exprs;
    return this;
  }

  public void unsetGrouping_exprs() {
    this.grouping_exprs = null;
  }

  /** Returns true if field grouping_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetGrouping_exprs() {
    return this.grouping_exprs != null;
  }

  public void setGrouping_exprsIsSet(boolean value) {
    if (!value) {
      this.grouping_exprs = null;
    }
  }

  public int getAggregate_functionsSize() {
    return (this.aggregate_functions == null) ? 0 : this.aggregate_functions.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getAggregate_functionsIterator() {
    return (this.aggregate_functions == null) ? null : this.aggregate_functions.iterator();
  }

  public void addToAggregate_functions(org.apache.impala.thrift.TExpr elem) {
    if (this.aggregate_functions == null) {
      this.aggregate_functions = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.aggregate_functions.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getAggregate_functions() {
    return this.aggregate_functions;
  }

  public TAggregator setAggregate_functions(List<org.apache.impala.thrift.TExpr> aggregate_functions) {
    this.aggregate_functions = aggregate_functions;
    return this;
  }

  public void unsetAggregate_functions() {
    this.aggregate_functions = null;
  }

  /** Returns true if field aggregate_functions is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregate_functions() {
    return this.aggregate_functions != null;
  }

  public void setAggregate_functionsIsSet(boolean value) {
    if (!value) {
      this.aggregate_functions = null;
    }
  }

  public int getIntermediate_tuple_id() {
    return this.intermediate_tuple_id;
  }

  public TAggregator setIntermediate_tuple_id(int intermediate_tuple_id) {
    this.intermediate_tuple_id = intermediate_tuple_id;
    setIntermediate_tuple_idIsSet(true);
    return this;
  }

  public void unsetIntermediate_tuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field intermediate_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIntermediate_tuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID);
  }

  public void setIntermediate_tuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERMEDIATE_TUPLE_ID_ISSET_ID, value);
  }

  public int getOutput_tuple_id() {
    return this.output_tuple_id;
  }

  public TAggregator setOutput_tuple_id(int output_tuple_id) {
    this.output_tuple_id = output_tuple_id;
    setOutput_tuple_idIsSet(true);
    return this;
  }

  public void unsetOutput_tuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field output_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_tuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  public void setOutput_tuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID, value);
  }

  public boolean isNeed_finalize() {
    return this.need_finalize;
  }

  public TAggregator setNeed_finalize(boolean need_finalize) {
    this.need_finalize = need_finalize;
    setNeed_finalizeIsSet(true);
    return this;
  }

  public void unsetNeed_finalize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEED_FINALIZE_ISSET_ID);
  }

  /** Returns true if field need_finalize is set (has been assigned a value) and false otherwise */
  public boolean isSetNeed_finalize() {
    return EncodingUtils.testBit(__isset_bitfield, __NEED_FINALIZE_ISSET_ID);
  }

  public void setNeed_finalizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEED_FINALIZE_ISSET_ID, value);
  }

  public boolean isUse_streaming_preaggregation() {
    return this.use_streaming_preaggregation;
  }

  public TAggregator setUse_streaming_preaggregation(boolean use_streaming_preaggregation) {
    this.use_streaming_preaggregation = use_streaming_preaggregation;
    setUse_streaming_preaggregationIsSet(true);
    return this;
  }

  public void unsetUse_streaming_preaggregation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_STREAMING_PREAGGREGATION_ISSET_ID);
  }

  /** Returns true if field use_streaming_preaggregation is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_streaming_preaggregation() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_STREAMING_PREAGGREGATION_ISSET_ID);
  }

  public void setUse_streaming_preaggregationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_STREAMING_PREAGGREGATION_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TBackendResourceProfile getResource_profile() {
    return this.resource_profile;
  }

  public TAggregator setResource_profile(org.apache.impala.thrift.TBackendResourceProfile resource_profile) {
    this.resource_profile = resource_profile;
    return this;
  }

  public void unsetResource_profile() {
    this.resource_profile = null;
  }

  /** Returns true if field resource_profile is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_profile() {
    return this.resource_profile != null;
  }

  public void setResource_profileIsSet(boolean value) {
    if (!value) {
      this.resource_profile = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUPING_EXPRS:
      if (value == null) {
        unsetGrouping_exprs();
      } else {
        setGrouping_exprs((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case AGGREGATE_FUNCTIONS:
      if (value == null) {
        unsetAggregate_functions();
      } else {
        setAggregate_functions((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case INTERMEDIATE_TUPLE_ID:
      if (value == null) {
        unsetIntermediate_tuple_id();
      } else {
        setIntermediate_tuple_id((Integer)value);
      }
      break;

    case OUTPUT_TUPLE_ID:
      if (value == null) {
        unsetOutput_tuple_id();
      } else {
        setOutput_tuple_id((Integer)value);
      }
      break;

    case NEED_FINALIZE:
      if (value == null) {
        unsetNeed_finalize();
      } else {
        setNeed_finalize((Boolean)value);
      }
      break;

    case USE_STREAMING_PREAGGREGATION:
      if (value == null) {
        unsetUse_streaming_preaggregation();
      } else {
        setUse_streaming_preaggregation((Boolean)value);
      }
      break;

    case RESOURCE_PROFILE:
      if (value == null) {
        unsetResource_profile();
      } else {
        setResource_profile((org.apache.impala.thrift.TBackendResourceProfile)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUPING_EXPRS:
      return getGrouping_exprs();

    case AGGREGATE_FUNCTIONS:
      return getAggregate_functions();

    case INTERMEDIATE_TUPLE_ID:
      return getIntermediate_tuple_id();

    case OUTPUT_TUPLE_ID:
      return getOutput_tuple_id();

    case NEED_FINALIZE:
      return isNeed_finalize();

    case USE_STREAMING_PREAGGREGATION:
      return isUse_streaming_preaggregation();

    case RESOURCE_PROFILE:
      return getResource_profile();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUPING_EXPRS:
      return isSetGrouping_exprs();
    case AGGREGATE_FUNCTIONS:
      return isSetAggregate_functions();
    case INTERMEDIATE_TUPLE_ID:
      return isSetIntermediate_tuple_id();
    case OUTPUT_TUPLE_ID:
      return isSetOutput_tuple_id();
    case NEED_FINALIZE:
      return isSetNeed_finalize();
    case USE_STREAMING_PREAGGREGATION:
      return isSetUse_streaming_preaggregation();
    case RESOURCE_PROFILE:
      return isSetResource_profile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAggregator)
      return this.equals((TAggregator)that);
    return false;
  }

  public boolean equals(TAggregator that) {
    if (that == null)
      return false;

    boolean this_present_grouping_exprs = true && this.isSetGrouping_exprs();
    boolean that_present_grouping_exprs = true && that.isSetGrouping_exprs();
    if (this_present_grouping_exprs || that_present_grouping_exprs) {
      if (!(this_present_grouping_exprs && that_present_grouping_exprs))
        return false;
      if (!this.grouping_exprs.equals(that.grouping_exprs))
        return false;
    }

    boolean this_present_aggregate_functions = true && this.isSetAggregate_functions();
    boolean that_present_aggregate_functions = true && that.isSetAggregate_functions();
    if (this_present_aggregate_functions || that_present_aggregate_functions) {
      if (!(this_present_aggregate_functions && that_present_aggregate_functions))
        return false;
      if (!this.aggregate_functions.equals(that.aggregate_functions))
        return false;
    }

    boolean this_present_intermediate_tuple_id = true;
    boolean that_present_intermediate_tuple_id = true;
    if (this_present_intermediate_tuple_id || that_present_intermediate_tuple_id) {
      if (!(this_present_intermediate_tuple_id && that_present_intermediate_tuple_id))
        return false;
      if (this.intermediate_tuple_id != that.intermediate_tuple_id)
        return false;
    }

    boolean this_present_output_tuple_id = true;
    boolean that_present_output_tuple_id = true;
    if (this_present_output_tuple_id || that_present_output_tuple_id) {
      if (!(this_present_output_tuple_id && that_present_output_tuple_id))
        return false;
      if (this.output_tuple_id != that.output_tuple_id)
        return false;
    }

    boolean this_present_need_finalize = true;
    boolean that_present_need_finalize = true;
    if (this_present_need_finalize || that_present_need_finalize) {
      if (!(this_present_need_finalize && that_present_need_finalize))
        return false;
      if (this.need_finalize != that.need_finalize)
        return false;
    }

    boolean this_present_use_streaming_preaggregation = true;
    boolean that_present_use_streaming_preaggregation = true;
    if (this_present_use_streaming_preaggregation || that_present_use_streaming_preaggregation) {
      if (!(this_present_use_streaming_preaggregation && that_present_use_streaming_preaggregation))
        return false;
      if (this.use_streaming_preaggregation != that.use_streaming_preaggregation)
        return false;
    }

    boolean this_present_resource_profile = true && this.isSetResource_profile();
    boolean that_present_resource_profile = true && that.isSetResource_profile();
    if (this_present_resource_profile || that_present_resource_profile) {
      if (!(this_present_resource_profile && that_present_resource_profile))
        return false;
      if (!this.resource_profile.equals(that.resource_profile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_grouping_exprs = true && (isSetGrouping_exprs());
    list.add(present_grouping_exprs);
    if (present_grouping_exprs)
      list.add(grouping_exprs);

    boolean present_aggregate_functions = true && (isSetAggregate_functions());
    list.add(present_aggregate_functions);
    if (present_aggregate_functions)
      list.add(aggregate_functions);

    boolean present_intermediate_tuple_id = true;
    list.add(present_intermediate_tuple_id);
    if (present_intermediate_tuple_id)
      list.add(intermediate_tuple_id);

    boolean present_output_tuple_id = true;
    list.add(present_output_tuple_id);
    if (present_output_tuple_id)
      list.add(output_tuple_id);

    boolean present_need_finalize = true;
    list.add(present_need_finalize);
    if (present_need_finalize)
      list.add(need_finalize);

    boolean present_use_streaming_preaggregation = true;
    list.add(present_use_streaming_preaggregation);
    if (present_use_streaming_preaggregation)
      list.add(use_streaming_preaggregation);

    boolean present_resource_profile = true && (isSetResource_profile());
    list.add(present_resource_profile);
    if (present_resource_profile)
      list.add(resource_profile);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAggregator other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGrouping_exprs()).compareTo(other.isSetGrouping_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrouping_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grouping_exprs, other.grouping_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregate_functions()).compareTo(other.isSetAggregate_functions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregate_functions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregate_functions, other.aggregate_functions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntermediate_tuple_id()).compareTo(other.isSetIntermediate_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntermediate_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intermediate_tuple_id, other.intermediate_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput_tuple_id()).compareTo(other.isSetOutput_tuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_tuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_tuple_id, other.output_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeed_finalize()).compareTo(other.isSetNeed_finalize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeed_finalize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.need_finalize, other.need_finalize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_streaming_preaggregation()).compareTo(other.isSetUse_streaming_preaggregation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_streaming_preaggregation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_streaming_preaggregation, other.use_streaming_preaggregation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource_profile()).compareTo(other.isSetResource_profile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_profile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_profile, other.resource_profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAggregator(");
    boolean first = true;

    if (isSetGrouping_exprs()) {
      sb.append("grouping_exprs:");
      if (this.grouping_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.grouping_exprs);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("aggregate_functions:");
    if (this.aggregate_functions == null) {
      sb.append("null");
    } else {
      sb.append(this.aggregate_functions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intermediate_tuple_id:");
    sb.append(this.intermediate_tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output_tuple_id:");
    sb.append(this.output_tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("need_finalize:");
    sb.append(this.need_finalize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("use_streaming_preaggregation:");
    sb.append(this.use_streaming_preaggregation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resource_profile:");
    if (this.resource_profile == null) {
      sb.append("null");
    } else {
      sb.append(this.resource_profile);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (aggregate_functions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'aggregate_functions' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'intermediate_tuple_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'output_tuple_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'need_finalize' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'use_streaming_preaggregation' because it's a primitive and you chose the non-beans generator.
    if (resource_profile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resource_profile' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (resource_profile != null) {
      resource_profile.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAggregatorStandardSchemeFactory implements SchemeFactory {
    public TAggregatorStandardScheme getScheme() {
      return new TAggregatorStandardScheme();
    }
  }

  private static class TAggregatorStandardScheme extends StandardScheme<TAggregator> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAggregator struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUPING_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                struct.grouping_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list118.size);
                org.apache.impala.thrift.TExpr _elem119;
                for (int _i120 = 0; _i120 < _list118.size; ++_i120)
                {
                  _elem119 = new org.apache.impala.thrift.TExpr();
                  _elem119.read(iprot);
                  struct.grouping_exprs.add(_elem119);
                }
                iprot.readListEnd();
              }
              struct.setGrouping_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGGREGATE_FUNCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list121 = iprot.readListBegin();
                struct.aggregate_functions = new ArrayList<org.apache.impala.thrift.TExpr>(_list121.size);
                org.apache.impala.thrift.TExpr _elem122;
                for (int _i123 = 0; _i123 < _list121.size; ++_i123)
                {
                  _elem122 = new org.apache.impala.thrift.TExpr();
                  _elem122.read(iprot);
                  struct.aggregate_functions.add(_elem122);
                }
                iprot.readListEnd();
              }
              struct.setAggregate_functionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTERMEDIATE_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.intermediate_tuple_id = iprot.readI32();
              struct.setIntermediate_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUTPUT_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_tuple_id = iprot.readI32();
              struct.setOutput_tuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEED_FINALIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.need_finalize = iprot.readBool();
              struct.setNeed_finalizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USE_STREAMING_PREAGGREGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_streaming_preaggregation = iprot.readBool();
              struct.setUse_streaming_preaggregationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESOURCE_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_profile = new org.apache.impala.thrift.TBackendResourceProfile();
              struct.resource_profile.read(iprot);
              struct.setResource_profileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIntermediate_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'intermediate_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOutput_tuple_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNeed_finalize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'need_finalize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUse_streaming_preaggregation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'use_streaming_preaggregation' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAggregator struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.grouping_exprs != null) {
        if (struct.isSetGrouping_exprs()) {
          oprot.writeFieldBegin(GROUPING_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.grouping_exprs.size()));
            for (org.apache.impala.thrift.TExpr _iter124 : struct.grouping_exprs)
            {
              _iter124.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.aggregate_functions != null) {
        oprot.writeFieldBegin(AGGREGATE_FUNCTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.aggregate_functions.size()));
          for (org.apache.impala.thrift.TExpr _iter125 : struct.aggregate_functions)
          {
            _iter125.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERMEDIATE_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.intermediate_tuple_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.output_tuple_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEED_FINALIZE_FIELD_DESC);
      oprot.writeBool(struct.need_finalize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_STREAMING_PREAGGREGATION_FIELD_DESC);
      oprot.writeBool(struct.use_streaming_preaggregation);
      oprot.writeFieldEnd();
      if (struct.resource_profile != null) {
        oprot.writeFieldBegin(RESOURCE_PROFILE_FIELD_DESC);
        struct.resource_profile.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAggregatorTupleSchemeFactory implements SchemeFactory {
    public TAggregatorTupleScheme getScheme() {
      return new TAggregatorTupleScheme();
    }
  }

  private static class TAggregatorTupleScheme extends TupleScheme<TAggregator> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAggregator struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.aggregate_functions.size());
        for (org.apache.impala.thrift.TExpr _iter126 : struct.aggregate_functions)
        {
          _iter126.write(oprot);
        }
      }
      oprot.writeI32(struct.intermediate_tuple_id);
      oprot.writeI32(struct.output_tuple_id);
      oprot.writeBool(struct.need_finalize);
      oprot.writeBool(struct.use_streaming_preaggregation);
      struct.resource_profile.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetGrouping_exprs()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetGrouping_exprs()) {
        {
          oprot.writeI32(struct.grouping_exprs.size());
          for (org.apache.impala.thrift.TExpr _iter127 : struct.grouping_exprs)
          {
            _iter127.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAggregator struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list128 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.aggregate_functions = new ArrayList<org.apache.impala.thrift.TExpr>(_list128.size);
        org.apache.impala.thrift.TExpr _elem129;
        for (int _i130 = 0; _i130 < _list128.size; ++_i130)
        {
          _elem129 = new org.apache.impala.thrift.TExpr();
          _elem129.read(iprot);
          struct.aggregate_functions.add(_elem129);
        }
      }
      struct.setAggregate_functionsIsSet(true);
      struct.intermediate_tuple_id = iprot.readI32();
      struct.setIntermediate_tuple_idIsSet(true);
      struct.output_tuple_id = iprot.readI32();
      struct.setOutput_tuple_idIsSet(true);
      struct.need_finalize = iprot.readBool();
      struct.setNeed_finalizeIsSet(true);
      struct.use_streaming_preaggregation = iprot.readBool();
      struct.setUse_streaming_preaggregationIsSet(true);
      struct.resource_profile = new org.apache.impala.thrift.TBackendResourceProfile();
      struct.resource_profile.read(iprot);
      struct.setResource_profileIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.grouping_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list131.size);
          org.apache.impala.thrift.TExpr _elem132;
          for (int _i133 = 0; _i133 < _list131.size; ++_i133)
          {
            _elem132 = new org.apache.impala.thrift.TExpr();
            _elem132.read(iprot);
            struct.grouping_exprs.add(_elem132);
          }
        }
        struct.setGrouping_exprsIsSet(true);
      }
    }
  }

}

