/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TSortInfo implements org.apache.thrift.TBase<TSortInfo, TSortInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TSortInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSortInfo");

  private static final org.apache.thrift.protocol.TField ORDERING_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("ordering_exprs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IS_ASC_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("is_asc_order", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NULLS_FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("nulls_first", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_TUPLE_SLOT_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_tuple_slot_exprs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SORTING_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sorting_order", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSortInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSortInfoTupleSchemeFactory());
  }

  public List<org.apache.impala.thrift.TExpr> ordering_exprs; // required
  public List<Boolean> is_asc_order; // required
  public List<Boolean> nulls_first; // required
  public List<org.apache.impala.thrift.TExpr> sort_tuple_slot_exprs; // optional
  /**
   * 
   * @see org.apache.impala.thrift.TSortingOrder
   */
  public org.apache.impala.thrift.TSortingOrder sorting_order; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDERING_EXPRS((short)1, "ordering_exprs"),
    IS_ASC_ORDER((short)2, "is_asc_order"),
    NULLS_FIRST((short)3, "nulls_first"),
    SORT_TUPLE_SLOT_EXPRS((short)4, "sort_tuple_slot_exprs"),
    /**
     * 
     * @see org.apache.impala.thrift.TSortingOrder
     */
    SORTING_ORDER((short)5, "sorting_order");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDERING_EXPRS
          return ORDERING_EXPRS;
        case 2: // IS_ASC_ORDER
          return IS_ASC_ORDER;
        case 3: // NULLS_FIRST
          return NULLS_FIRST;
        case 4: // SORT_TUPLE_SLOT_EXPRS
          return SORT_TUPLE_SLOT_EXPRS;
        case 5: // SORTING_ORDER
          return SORTING_ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SORT_TUPLE_SLOT_EXPRS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDERING_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("ordering_exprs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.IS_ASC_ORDER, new org.apache.thrift.meta_data.FieldMetaData("is_asc_order", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.NULLS_FIRST, new org.apache.thrift.meta_data.FieldMetaData("nulls_first", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.SORT_TUPLE_SLOT_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("sort_tuple_slot_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class))));
    tmpMap.put(_Fields.SORTING_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sorting_order", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TSortingOrder.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSortInfo.class, metaDataMap);
  }

  public TSortInfo() {
  }

  public TSortInfo(
    List<org.apache.impala.thrift.TExpr> ordering_exprs,
    List<Boolean> is_asc_order,
    List<Boolean> nulls_first,
    org.apache.impala.thrift.TSortingOrder sorting_order)
  {
    this();
    this.ordering_exprs = ordering_exprs;
    this.is_asc_order = is_asc_order;
    this.nulls_first = nulls_first;
    this.sorting_order = sorting_order;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSortInfo(TSortInfo other) {
    if (other.isSetOrdering_exprs()) {
      List<org.apache.impala.thrift.TExpr> __this__ordering_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(other.ordering_exprs.size());
      for (org.apache.impala.thrift.TExpr other_element : other.ordering_exprs) {
        __this__ordering_exprs.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.ordering_exprs = __this__ordering_exprs;
    }
    if (other.isSetIs_asc_order()) {
      List<Boolean> __this__is_asc_order = new ArrayList<Boolean>(other.is_asc_order);
      this.is_asc_order = __this__is_asc_order;
    }
    if (other.isSetNulls_first()) {
      List<Boolean> __this__nulls_first = new ArrayList<Boolean>(other.nulls_first);
      this.nulls_first = __this__nulls_first;
    }
    if (other.isSetSort_tuple_slot_exprs()) {
      List<org.apache.impala.thrift.TExpr> __this__sort_tuple_slot_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(other.sort_tuple_slot_exprs.size());
      for (org.apache.impala.thrift.TExpr other_element : other.sort_tuple_slot_exprs) {
        __this__sort_tuple_slot_exprs.add(new org.apache.impala.thrift.TExpr(other_element));
      }
      this.sort_tuple_slot_exprs = __this__sort_tuple_slot_exprs;
    }
    if (other.isSetSorting_order()) {
      this.sorting_order = other.sorting_order;
    }
  }

  public TSortInfo deepCopy() {
    return new TSortInfo(this);
  }

  @Override
  public void clear() {
    this.ordering_exprs = null;
    this.is_asc_order = null;
    this.nulls_first = null;
    this.sort_tuple_slot_exprs = null;
    this.sorting_order = null;
  }

  public int getOrdering_exprsSize() {
    return (this.ordering_exprs == null) ? 0 : this.ordering_exprs.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getOrdering_exprsIterator() {
    return (this.ordering_exprs == null) ? null : this.ordering_exprs.iterator();
  }

  public void addToOrdering_exprs(org.apache.impala.thrift.TExpr elem) {
    if (this.ordering_exprs == null) {
      this.ordering_exprs = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.ordering_exprs.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getOrdering_exprs() {
    return this.ordering_exprs;
  }

  public TSortInfo setOrdering_exprs(List<org.apache.impala.thrift.TExpr> ordering_exprs) {
    this.ordering_exprs = ordering_exprs;
    return this;
  }

  public void unsetOrdering_exprs() {
    this.ordering_exprs = null;
  }

  /** Returns true if field ordering_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetOrdering_exprs() {
    return this.ordering_exprs != null;
  }

  public void setOrdering_exprsIsSet(boolean value) {
    if (!value) {
      this.ordering_exprs = null;
    }
  }

  public int getIs_asc_orderSize() {
    return (this.is_asc_order == null) ? 0 : this.is_asc_order.size();
  }

  public java.util.Iterator<Boolean> getIs_asc_orderIterator() {
    return (this.is_asc_order == null) ? null : this.is_asc_order.iterator();
  }

  public void addToIs_asc_order(boolean elem) {
    if (this.is_asc_order == null) {
      this.is_asc_order = new ArrayList<Boolean>();
    }
    this.is_asc_order.add(elem);
  }

  public List<Boolean> getIs_asc_order() {
    return this.is_asc_order;
  }

  public TSortInfo setIs_asc_order(List<Boolean> is_asc_order) {
    this.is_asc_order = is_asc_order;
    return this;
  }

  public void unsetIs_asc_order() {
    this.is_asc_order = null;
  }

  /** Returns true if field is_asc_order is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_asc_order() {
    return this.is_asc_order != null;
  }

  public void setIs_asc_orderIsSet(boolean value) {
    if (!value) {
      this.is_asc_order = null;
    }
  }

  public int getNulls_firstSize() {
    return (this.nulls_first == null) ? 0 : this.nulls_first.size();
  }

  public java.util.Iterator<Boolean> getNulls_firstIterator() {
    return (this.nulls_first == null) ? null : this.nulls_first.iterator();
  }

  public void addToNulls_first(boolean elem) {
    if (this.nulls_first == null) {
      this.nulls_first = new ArrayList<Boolean>();
    }
    this.nulls_first.add(elem);
  }

  public List<Boolean> getNulls_first() {
    return this.nulls_first;
  }

  public TSortInfo setNulls_first(List<Boolean> nulls_first) {
    this.nulls_first = nulls_first;
    return this;
  }

  public void unsetNulls_first() {
    this.nulls_first = null;
  }

  /** Returns true if field nulls_first is set (has been assigned a value) and false otherwise */
  public boolean isSetNulls_first() {
    return this.nulls_first != null;
  }

  public void setNulls_firstIsSet(boolean value) {
    if (!value) {
      this.nulls_first = null;
    }
  }

  public int getSort_tuple_slot_exprsSize() {
    return (this.sort_tuple_slot_exprs == null) ? 0 : this.sort_tuple_slot_exprs.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TExpr> getSort_tuple_slot_exprsIterator() {
    return (this.sort_tuple_slot_exprs == null) ? null : this.sort_tuple_slot_exprs.iterator();
  }

  public void addToSort_tuple_slot_exprs(org.apache.impala.thrift.TExpr elem) {
    if (this.sort_tuple_slot_exprs == null) {
      this.sort_tuple_slot_exprs = new ArrayList<org.apache.impala.thrift.TExpr>();
    }
    this.sort_tuple_slot_exprs.add(elem);
  }

  public List<org.apache.impala.thrift.TExpr> getSort_tuple_slot_exprs() {
    return this.sort_tuple_slot_exprs;
  }

  public TSortInfo setSort_tuple_slot_exprs(List<org.apache.impala.thrift.TExpr> sort_tuple_slot_exprs) {
    this.sort_tuple_slot_exprs = sort_tuple_slot_exprs;
    return this;
  }

  public void unsetSort_tuple_slot_exprs() {
    this.sort_tuple_slot_exprs = null;
  }

  /** Returns true if field sort_tuple_slot_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_tuple_slot_exprs() {
    return this.sort_tuple_slot_exprs != null;
  }

  public void setSort_tuple_slot_exprsIsSet(boolean value) {
    if (!value) {
      this.sort_tuple_slot_exprs = null;
    }
  }

  /**
   * 
   * @see org.apache.impala.thrift.TSortingOrder
   */
  public org.apache.impala.thrift.TSortingOrder getSorting_order() {
    return this.sorting_order;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TSortingOrder
   */
  public TSortInfo setSorting_order(org.apache.impala.thrift.TSortingOrder sorting_order) {
    this.sorting_order = sorting_order;
    return this;
  }

  public void unsetSorting_order() {
    this.sorting_order = null;
  }

  /** Returns true if field sorting_order is set (has been assigned a value) and false otherwise */
  public boolean isSetSorting_order() {
    return this.sorting_order != null;
  }

  public void setSorting_orderIsSet(boolean value) {
    if (!value) {
      this.sorting_order = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDERING_EXPRS:
      if (value == null) {
        unsetOrdering_exprs();
      } else {
        setOrdering_exprs((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case IS_ASC_ORDER:
      if (value == null) {
        unsetIs_asc_order();
      } else {
        setIs_asc_order((List<Boolean>)value);
      }
      break;

    case NULLS_FIRST:
      if (value == null) {
        unsetNulls_first();
      } else {
        setNulls_first((List<Boolean>)value);
      }
      break;

    case SORT_TUPLE_SLOT_EXPRS:
      if (value == null) {
        unsetSort_tuple_slot_exprs();
      } else {
        setSort_tuple_slot_exprs((List<org.apache.impala.thrift.TExpr>)value);
      }
      break;

    case SORTING_ORDER:
      if (value == null) {
        unsetSorting_order();
      } else {
        setSorting_order((org.apache.impala.thrift.TSortingOrder)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDERING_EXPRS:
      return getOrdering_exprs();

    case IS_ASC_ORDER:
      return getIs_asc_order();

    case NULLS_FIRST:
      return getNulls_first();

    case SORT_TUPLE_SLOT_EXPRS:
      return getSort_tuple_slot_exprs();

    case SORTING_ORDER:
      return getSorting_order();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDERING_EXPRS:
      return isSetOrdering_exprs();
    case IS_ASC_ORDER:
      return isSetIs_asc_order();
    case NULLS_FIRST:
      return isSetNulls_first();
    case SORT_TUPLE_SLOT_EXPRS:
      return isSetSort_tuple_slot_exprs();
    case SORTING_ORDER:
      return isSetSorting_order();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSortInfo)
      return this.equals((TSortInfo)that);
    return false;
  }

  public boolean equals(TSortInfo that) {
    if (that == null)
      return false;

    boolean this_present_ordering_exprs = true && this.isSetOrdering_exprs();
    boolean that_present_ordering_exprs = true && that.isSetOrdering_exprs();
    if (this_present_ordering_exprs || that_present_ordering_exprs) {
      if (!(this_present_ordering_exprs && that_present_ordering_exprs))
        return false;
      if (!this.ordering_exprs.equals(that.ordering_exprs))
        return false;
    }

    boolean this_present_is_asc_order = true && this.isSetIs_asc_order();
    boolean that_present_is_asc_order = true && that.isSetIs_asc_order();
    if (this_present_is_asc_order || that_present_is_asc_order) {
      if (!(this_present_is_asc_order && that_present_is_asc_order))
        return false;
      if (!this.is_asc_order.equals(that.is_asc_order))
        return false;
    }

    boolean this_present_nulls_first = true && this.isSetNulls_first();
    boolean that_present_nulls_first = true && that.isSetNulls_first();
    if (this_present_nulls_first || that_present_nulls_first) {
      if (!(this_present_nulls_first && that_present_nulls_first))
        return false;
      if (!this.nulls_first.equals(that.nulls_first))
        return false;
    }

    boolean this_present_sort_tuple_slot_exprs = true && this.isSetSort_tuple_slot_exprs();
    boolean that_present_sort_tuple_slot_exprs = true && that.isSetSort_tuple_slot_exprs();
    if (this_present_sort_tuple_slot_exprs || that_present_sort_tuple_slot_exprs) {
      if (!(this_present_sort_tuple_slot_exprs && that_present_sort_tuple_slot_exprs))
        return false;
      if (!this.sort_tuple_slot_exprs.equals(that.sort_tuple_slot_exprs))
        return false;
    }

    boolean this_present_sorting_order = true && this.isSetSorting_order();
    boolean that_present_sorting_order = true && that.isSetSorting_order();
    if (this_present_sorting_order || that_present_sorting_order) {
      if (!(this_present_sorting_order && that_present_sorting_order))
        return false;
      if (!this.sorting_order.equals(that.sorting_order))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ordering_exprs = true && (isSetOrdering_exprs());
    list.add(present_ordering_exprs);
    if (present_ordering_exprs)
      list.add(ordering_exprs);

    boolean present_is_asc_order = true && (isSetIs_asc_order());
    list.add(present_is_asc_order);
    if (present_is_asc_order)
      list.add(is_asc_order);

    boolean present_nulls_first = true && (isSetNulls_first());
    list.add(present_nulls_first);
    if (present_nulls_first)
      list.add(nulls_first);

    boolean present_sort_tuple_slot_exprs = true && (isSetSort_tuple_slot_exprs());
    list.add(present_sort_tuple_slot_exprs);
    if (present_sort_tuple_slot_exprs)
      list.add(sort_tuple_slot_exprs);

    boolean present_sorting_order = true && (isSetSorting_order());
    list.add(present_sorting_order);
    if (present_sorting_order)
      list.add(sorting_order.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TSortInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrdering_exprs()).compareTo(other.isSetOrdering_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrdering_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ordering_exprs, other.ordering_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_asc_order()).compareTo(other.isSetIs_asc_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_asc_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_asc_order, other.is_asc_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNulls_first()).compareTo(other.isSetNulls_first());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNulls_first()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nulls_first, other.nulls_first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort_tuple_slot_exprs()).compareTo(other.isSetSort_tuple_slot_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_tuple_slot_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_tuple_slot_exprs, other.sort_tuple_slot_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSorting_order()).compareTo(other.isSetSorting_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSorting_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sorting_order, other.sorting_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSortInfo(");
    boolean first = true;

    sb.append("ordering_exprs:");
    if (this.ordering_exprs == null) {
      sb.append("null");
    } else {
      sb.append(this.ordering_exprs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_asc_order:");
    if (this.is_asc_order == null) {
      sb.append("null");
    } else {
      sb.append(this.is_asc_order);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nulls_first:");
    if (this.nulls_first == null) {
      sb.append("null");
    } else {
      sb.append(this.nulls_first);
    }
    first = false;
    if (isSetSort_tuple_slot_exprs()) {
      if (!first) sb.append(", ");
      sb.append("sort_tuple_slot_exprs:");
      if (this.sort_tuple_slot_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_tuple_slot_exprs);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sorting_order:");
    if (this.sorting_order == null) {
      sb.append("null");
    } else {
      sb.append(this.sorting_order);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ordering_exprs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ordering_exprs' was not present! Struct: " + toString());
    }
    if (is_asc_order == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_asc_order' was not present! Struct: " + toString());
    }
    if (nulls_first == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nulls_first' was not present! Struct: " + toString());
    }
    if (sorting_order == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sorting_order' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSortInfoStandardSchemeFactory implements SchemeFactory {
    public TSortInfoStandardScheme getScheme() {
      return new TSortInfoStandardScheme();
    }
  }

  private static class TSortInfoStandardScheme extends StandardScheme<TSortInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSortInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDERING_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                struct.ordering_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list142.size);
                org.apache.impala.thrift.TExpr _elem143;
                for (int _i144 = 0; _i144 < _list142.size; ++_i144)
                {
                  _elem143 = new org.apache.impala.thrift.TExpr();
                  _elem143.read(iprot);
                  struct.ordering_exprs.add(_elem143);
                }
                iprot.readListEnd();
              }
              struct.setOrdering_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_ASC_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list145 = iprot.readListBegin();
                struct.is_asc_order = new ArrayList<Boolean>(_list145.size);
                boolean _elem146;
                for (int _i147 = 0; _i147 < _list145.size; ++_i147)
                {
                  _elem146 = iprot.readBool();
                  struct.is_asc_order.add(_elem146);
                }
                iprot.readListEnd();
              }
              struct.setIs_asc_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NULLS_FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                struct.nulls_first = new ArrayList<Boolean>(_list148.size);
                boolean _elem149;
                for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                {
                  _elem149 = iprot.readBool();
                  struct.nulls_first.add(_elem149);
                }
                iprot.readListEnd();
              }
              struct.setNulls_firstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_TUPLE_SLOT_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list151 = iprot.readListBegin();
                struct.sort_tuple_slot_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list151.size);
                org.apache.impala.thrift.TExpr _elem152;
                for (int _i153 = 0; _i153 < _list151.size; ++_i153)
                {
                  _elem152 = new org.apache.impala.thrift.TExpr();
                  _elem152.read(iprot);
                  struct.sort_tuple_slot_exprs.add(_elem152);
                }
                iprot.readListEnd();
              }
              struct.setSort_tuple_slot_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SORTING_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sorting_order = org.apache.impala.thrift.TSortingOrder.findByValue(iprot.readI32());
              struct.setSorting_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSortInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ordering_exprs != null) {
        oprot.writeFieldBegin(ORDERING_EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ordering_exprs.size()));
          for (org.apache.impala.thrift.TExpr _iter154 : struct.ordering_exprs)
          {
            _iter154.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.is_asc_order != null) {
        oprot.writeFieldBegin(IS_ASC_ORDER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.is_asc_order.size()));
          for (boolean _iter155 : struct.is_asc_order)
          {
            oprot.writeBool(_iter155);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nulls_first != null) {
        oprot.writeFieldBegin(NULLS_FIRST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.nulls_first.size()));
          for (boolean _iter156 : struct.nulls_first)
          {
            oprot.writeBool(_iter156);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sort_tuple_slot_exprs != null) {
        if (struct.isSetSort_tuple_slot_exprs()) {
          oprot.writeFieldBegin(SORT_TUPLE_SLOT_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sort_tuple_slot_exprs.size()));
            for (org.apache.impala.thrift.TExpr _iter157 : struct.sort_tuple_slot_exprs)
            {
              _iter157.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sorting_order != null) {
        oprot.writeFieldBegin(SORTING_ORDER_FIELD_DESC);
        oprot.writeI32(struct.sorting_order.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSortInfoTupleSchemeFactory implements SchemeFactory {
    public TSortInfoTupleScheme getScheme() {
      return new TSortInfoTupleScheme();
    }
  }

  private static class TSortInfoTupleScheme extends TupleScheme<TSortInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSortInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.ordering_exprs.size());
        for (org.apache.impala.thrift.TExpr _iter158 : struct.ordering_exprs)
        {
          _iter158.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.is_asc_order.size());
        for (boolean _iter159 : struct.is_asc_order)
        {
          oprot.writeBool(_iter159);
        }
      }
      {
        oprot.writeI32(struct.nulls_first.size());
        for (boolean _iter160 : struct.nulls_first)
        {
          oprot.writeBool(_iter160);
        }
      }
      oprot.writeI32(struct.sorting_order.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetSort_tuple_slot_exprs()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSort_tuple_slot_exprs()) {
        {
          oprot.writeI32(struct.sort_tuple_slot_exprs.size());
          for (org.apache.impala.thrift.TExpr _iter161 : struct.sort_tuple_slot_exprs)
          {
            _iter161.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSortInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list162 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.ordering_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list162.size);
        org.apache.impala.thrift.TExpr _elem163;
        for (int _i164 = 0; _i164 < _list162.size; ++_i164)
        {
          _elem163 = new org.apache.impala.thrift.TExpr();
          _elem163.read(iprot);
          struct.ordering_exprs.add(_elem163);
        }
      }
      struct.setOrdering_exprsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.is_asc_order = new ArrayList<Boolean>(_list165.size);
        boolean _elem166;
        for (int _i167 = 0; _i167 < _list165.size; ++_i167)
        {
          _elem166 = iprot.readBool();
          struct.is_asc_order.add(_elem166);
        }
      }
      struct.setIs_asc_orderIsSet(true);
      {
        org.apache.thrift.protocol.TList _list168 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.nulls_first = new ArrayList<Boolean>(_list168.size);
        boolean _elem169;
        for (int _i170 = 0; _i170 < _list168.size; ++_i170)
        {
          _elem169 = iprot.readBool();
          struct.nulls_first.add(_elem169);
        }
      }
      struct.setNulls_firstIsSet(true);
      struct.sorting_order = org.apache.impala.thrift.TSortingOrder.findByValue(iprot.readI32());
      struct.setSorting_orderIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sort_tuple_slot_exprs = new ArrayList<org.apache.impala.thrift.TExpr>(_list171.size);
          org.apache.impala.thrift.TExpr _elem172;
          for (int _i173 = 0; _i173 < _list171.size; ++_i173)
          {
            _elem172 = new org.apache.impala.thrift.TExpr();
            _elem172.read(iprot);
            struct.sort_tuple_slot_exprs.add(_elem172);
          }
        }
        struct.setSort_tuple_slot_exprsIsSet(true);
      }
    }
  }

}

