/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TBackendDescriptor implements org.apache.thrift.TBase<TBackendDescriptor, TBackendDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TBackendDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBackendDescriptor");

  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("ip_address", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_COORDINATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("is_coordinator", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_EXECUTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("is_executor", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField DEBUG_HTTP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_http_address", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SECURE_WEBSERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("secure_webserver", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField KRPC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("krpc_address", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ADMIT_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("admit_mem_limit", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField IS_QUIESCING_FIELD_DESC = new org.apache.thrift.protocol.TField("is_quiescing", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField EXECUTOR_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("executor_groups", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ADMIT_NUM_QUERIES_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("admit_num_queries_limit", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBackendDescriptorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBackendDescriptorTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TNetworkAddress address; // required
  private String ip_address; // required
  private boolean is_coordinator; // required
  private boolean is_executor; // required
  private org.apache.impala.thrift.TNetworkAddress debug_http_address; // optional
  private boolean secure_webserver; // optional
  private org.apache.impala.thrift.TNetworkAddress krpc_address; // optional
  private long admit_mem_limit; // required
  private boolean is_quiescing; // required
  private List<TExecutorGroupDesc> executor_groups; // required
  private long admit_num_queries_limit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDRESS((short)1, "address"),
    IP_ADDRESS((short)2, "ip_address"),
    IS_COORDINATOR((short)3, "is_coordinator"),
    IS_EXECUTOR((short)4, "is_executor"),
    DEBUG_HTTP_ADDRESS((short)5, "debug_http_address"),
    SECURE_WEBSERVER((short)6, "secure_webserver"),
    KRPC_ADDRESS((short)7, "krpc_address"),
    ADMIT_MEM_LIMIT((short)8, "admit_mem_limit"),
    IS_QUIESCING((short)9, "is_quiescing"),
    EXECUTOR_GROUPS((short)10, "executor_groups"),
    ADMIT_NUM_QUERIES_LIMIT((short)11, "admit_num_queries_limit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESS
          return ADDRESS;
        case 2: // IP_ADDRESS
          return IP_ADDRESS;
        case 3: // IS_COORDINATOR
          return IS_COORDINATOR;
        case 4: // IS_EXECUTOR
          return IS_EXECUTOR;
        case 5: // DEBUG_HTTP_ADDRESS
          return DEBUG_HTTP_ADDRESS;
        case 6: // SECURE_WEBSERVER
          return SECURE_WEBSERVER;
        case 7: // KRPC_ADDRESS
          return KRPC_ADDRESS;
        case 8: // ADMIT_MEM_LIMIT
          return ADMIT_MEM_LIMIT;
        case 9: // IS_QUIESCING
          return IS_QUIESCING;
        case 10: // EXECUTOR_GROUPS
          return EXECUTOR_GROUPS;
        case 11: // ADMIT_NUM_QUERIES_LIMIT
          return ADMIT_NUM_QUERIES_LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_COORDINATOR_ISSET_ID = 0;
  private static final int __IS_EXECUTOR_ISSET_ID = 1;
  private static final int __SECURE_WEBSERVER_ISSET_ID = 2;
  private static final int __ADMIT_MEM_LIMIT_ISSET_ID = 3;
  private static final int __IS_QUIESCING_ISSET_ID = 4;
  private static final int __ADMIT_NUM_QUERIES_LIMIT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEBUG_HTTP_ADDRESS,_Fields.SECURE_WEBSERVER,_Fields.KRPC_ADDRESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("ip_address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_COORDINATOR, new org.apache.thrift.meta_data.FieldMetaData("is_coordinator", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_EXECUTOR, new org.apache.thrift.meta_data.FieldMetaData("is_executor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEBUG_HTTP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("debug_http_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.SECURE_WEBSERVER, new org.apache.thrift.meta_data.FieldMetaData("secure_webserver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KRPC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("krpc_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.ADMIT_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("admit_mem_limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_QUIESCING, new org.apache.thrift.meta_data.FieldMetaData("is_quiescing", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXECUTOR_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("executor_groups", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExecutorGroupDesc.class))));
    tmpMap.put(_Fields.ADMIT_NUM_QUERIES_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("admit_num_queries_limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBackendDescriptor.class, metaDataMap);
  }

  public TBackendDescriptor() {
  }

  public TBackendDescriptor(
    org.apache.impala.thrift.TNetworkAddress address,
    String ip_address,
    boolean is_coordinator,
    boolean is_executor,
    long admit_mem_limit,
    boolean is_quiescing,
    List<TExecutorGroupDesc> executor_groups,
    long admit_num_queries_limit)
  {
    this();
    this.address = address;
    this.ip_address = ip_address;
    this.is_coordinator = is_coordinator;
    setIs_coordinatorIsSet(true);
    this.is_executor = is_executor;
    setIs_executorIsSet(true);
    this.admit_mem_limit = admit_mem_limit;
    setAdmit_mem_limitIsSet(true);
    this.is_quiescing = is_quiescing;
    setIs_quiescingIsSet(true);
    this.executor_groups = executor_groups;
    this.admit_num_queries_limit = admit_num_queries_limit;
    setAdmit_num_queries_limitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBackendDescriptor(TBackendDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAddress()) {
      this.address = new org.apache.impala.thrift.TNetworkAddress(other.address);
    }
    if (other.isSetIp_address()) {
      this.ip_address = other.ip_address;
    }
    this.is_coordinator = other.is_coordinator;
    this.is_executor = other.is_executor;
    if (other.isSetDebug_http_address()) {
      this.debug_http_address = new org.apache.impala.thrift.TNetworkAddress(other.debug_http_address);
    }
    this.secure_webserver = other.secure_webserver;
    if (other.isSetKrpc_address()) {
      this.krpc_address = new org.apache.impala.thrift.TNetworkAddress(other.krpc_address);
    }
    this.admit_mem_limit = other.admit_mem_limit;
    this.is_quiescing = other.is_quiescing;
    if (other.isSetExecutor_groups()) {
      List<TExecutorGroupDesc> __this__executor_groups = new ArrayList<TExecutorGroupDesc>(other.executor_groups.size());
      for (TExecutorGroupDesc other_element : other.executor_groups) {
        __this__executor_groups.add(new TExecutorGroupDesc(other_element));
      }
      this.executor_groups = __this__executor_groups;
    }
    this.admit_num_queries_limit = other.admit_num_queries_limit;
  }

  public TBackendDescriptor deepCopy() {
    return new TBackendDescriptor(this);
  }

  @Override
  public void clear() {
    this.address = null;
    this.ip_address = null;
    setIs_coordinatorIsSet(false);
    this.is_coordinator = false;
    setIs_executorIsSet(false);
    this.is_executor = false;
    this.debug_http_address = null;
    setSecure_webserverIsSet(false);
    this.secure_webserver = false;
    this.krpc_address = null;
    setAdmit_mem_limitIsSet(false);
    this.admit_mem_limit = 0;
    setIs_quiescingIsSet(false);
    this.is_quiescing = false;
    this.executor_groups = null;
    setAdmit_num_queries_limitIsSet(false);
    this.admit_num_queries_limit = 0;
  }

  public org.apache.impala.thrift.TNetworkAddress getAddress() {
    return this.address;
  }

  public void setAddress(org.apache.impala.thrift.TNetworkAddress address) {
    this.address = address;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getIp_address() {
    return this.ip_address;
  }

  public void setIp_address(String ip_address) {
    this.ip_address = ip_address;
  }

  public void unsetIp_address() {
    this.ip_address = null;
  }

  /** Returns true if field ip_address is set (has been assigned a value) and false otherwise */
  public boolean isSetIp_address() {
    return this.ip_address != null;
  }

  public void setIp_addressIsSet(boolean value) {
    if (!value) {
      this.ip_address = null;
    }
  }

  public boolean isIs_coordinator() {
    return this.is_coordinator;
  }

  public void setIs_coordinator(boolean is_coordinator) {
    this.is_coordinator = is_coordinator;
    setIs_coordinatorIsSet(true);
  }

  public void unsetIs_coordinator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_COORDINATOR_ISSET_ID);
  }

  /** Returns true if field is_coordinator is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_coordinator() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_COORDINATOR_ISSET_ID);
  }

  public void setIs_coordinatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_COORDINATOR_ISSET_ID, value);
  }

  public boolean isIs_executor() {
    return this.is_executor;
  }

  public void setIs_executor(boolean is_executor) {
    this.is_executor = is_executor;
    setIs_executorIsSet(true);
  }

  public void unsetIs_executor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_EXECUTOR_ISSET_ID);
  }

  /** Returns true if field is_executor is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_executor() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_EXECUTOR_ISSET_ID);
  }

  public void setIs_executorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_EXECUTOR_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TNetworkAddress getDebug_http_address() {
    return this.debug_http_address;
  }

  public void setDebug_http_address(org.apache.impala.thrift.TNetworkAddress debug_http_address) {
    this.debug_http_address = debug_http_address;
  }

  public void unsetDebug_http_address() {
    this.debug_http_address = null;
  }

  /** Returns true if field debug_http_address is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_http_address() {
    return this.debug_http_address != null;
  }

  public void setDebug_http_addressIsSet(boolean value) {
    if (!value) {
      this.debug_http_address = null;
    }
  }

  public boolean isSecure_webserver() {
    return this.secure_webserver;
  }

  public void setSecure_webserver(boolean secure_webserver) {
    this.secure_webserver = secure_webserver;
    setSecure_webserverIsSet(true);
  }

  public void unsetSecure_webserver() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECURE_WEBSERVER_ISSET_ID);
  }

  /** Returns true if field secure_webserver is set (has been assigned a value) and false otherwise */
  public boolean isSetSecure_webserver() {
    return EncodingUtils.testBit(__isset_bitfield, __SECURE_WEBSERVER_ISSET_ID);
  }

  public void setSecure_webserverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECURE_WEBSERVER_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TNetworkAddress getKrpc_address() {
    return this.krpc_address;
  }

  public void setKrpc_address(org.apache.impala.thrift.TNetworkAddress krpc_address) {
    this.krpc_address = krpc_address;
  }

  public void unsetKrpc_address() {
    this.krpc_address = null;
  }

  /** Returns true if field krpc_address is set (has been assigned a value) and false otherwise */
  public boolean isSetKrpc_address() {
    return this.krpc_address != null;
  }

  public void setKrpc_addressIsSet(boolean value) {
    if (!value) {
      this.krpc_address = null;
    }
  }

  public long getAdmit_mem_limit() {
    return this.admit_mem_limit;
  }

  public void setAdmit_mem_limit(long admit_mem_limit) {
    this.admit_mem_limit = admit_mem_limit;
    setAdmit_mem_limitIsSet(true);
  }

  public void unsetAdmit_mem_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADMIT_MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field admit_mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetAdmit_mem_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __ADMIT_MEM_LIMIT_ISSET_ID);
  }

  public void setAdmit_mem_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADMIT_MEM_LIMIT_ISSET_ID, value);
  }

  public boolean isIs_quiescing() {
    return this.is_quiescing;
  }

  public void setIs_quiescing(boolean is_quiescing) {
    this.is_quiescing = is_quiescing;
    setIs_quiescingIsSet(true);
  }

  public void unsetIs_quiescing() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_QUIESCING_ISSET_ID);
  }

  /** Returns true if field is_quiescing is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_quiescing() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_QUIESCING_ISSET_ID);
  }

  public void setIs_quiescingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_QUIESCING_ISSET_ID, value);
  }

  public int getExecutor_groupsSize() {
    return (this.executor_groups == null) ? 0 : this.executor_groups.size();
  }

  public java.util.Iterator<TExecutorGroupDesc> getExecutor_groupsIterator() {
    return (this.executor_groups == null) ? null : this.executor_groups.iterator();
  }

  public void addToExecutor_groups(TExecutorGroupDesc elem) {
    if (this.executor_groups == null) {
      this.executor_groups = new ArrayList<TExecutorGroupDesc>();
    }
    this.executor_groups.add(elem);
  }

  public List<TExecutorGroupDesc> getExecutor_groups() {
    return this.executor_groups;
  }

  public void setExecutor_groups(List<TExecutorGroupDesc> executor_groups) {
    this.executor_groups = executor_groups;
  }

  public void unsetExecutor_groups() {
    this.executor_groups = null;
  }

  /** Returns true if field executor_groups is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutor_groups() {
    return this.executor_groups != null;
  }

  public void setExecutor_groupsIsSet(boolean value) {
    if (!value) {
      this.executor_groups = null;
    }
  }

  public long getAdmit_num_queries_limit() {
    return this.admit_num_queries_limit;
  }

  public void setAdmit_num_queries_limit(long admit_num_queries_limit) {
    this.admit_num_queries_limit = admit_num_queries_limit;
    setAdmit_num_queries_limitIsSet(true);
  }

  public void unsetAdmit_num_queries_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADMIT_NUM_QUERIES_LIMIT_ISSET_ID);
  }

  /** Returns true if field admit_num_queries_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetAdmit_num_queries_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __ADMIT_NUM_QUERIES_LIMIT_ISSET_ID);
  }

  public void setAdmit_num_queries_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADMIT_NUM_QUERIES_LIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((org.apache.impala.thrift.TNetworkAddress)value);
      }
      break;

    case IP_ADDRESS:
      if (value == null) {
        unsetIp_address();
      } else {
        setIp_address((String)value);
      }
      break;

    case IS_COORDINATOR:
      if (value == null) {
        unsetIs_coordinator();
      } else {
        setIs_coordinator((Boolean)value);
      }
      break;

    case IS_EXECUTOR:
      if (value == null) {
        unsetIs_executor();
      } else {
        setIs_executor((Boolean)value);
      }
      break;

    case DEBUG_HTTP_ADDRESS:
      if (value == null) {
        unsetDebug_http_address();
      } else {
        setDebug_http_address((org.apache.impala.thrift.TNetworkAddress)value);
      }
      break;

    case SECURE_WEBSERVER:
      if (value == null) {
        unsetSecure_webserver();
      } else {
        setSecure_webserver((Boolean)value);
      }
      break;

    case KRPC_ADDRESS:
      if (value == null) {
        unsetKrpc_address();
      } else {
        setKrpc_address((org.apache.impala.thrift.TNetworkAddress)value);
      }
      break;

    case ADMIT_MEM_LIMIT:
      if (value == null) {
        unsetAdmit_mem_limit();
      } else {
        setAdmit_mem_limit((Long)value);
      }
      break;

    case IS_QUIESCING:
      if (value == null) {
        unsetIs_quiescing();
      } else {
        setIs_quiescing((Boolean)value);
      }
      break;

    case EXECUTOR_GROUPS:
      if (value == null) {
        unsetExecutor_groups();
      } else {
        setExecutor_groups((List<TExecutorGroupDesc>)value);
      }
      break;

    case ADMIT_NUM_QUERIES_LIMIT:
      if (value == null) {
        unsetAdmit_num_queries_limit();
      } else {
        setAdmit_num_queries_limit((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESS:
      return getAddress();

    case IP_ADDRESS:
      return getIp_address();

    case IS_COORDINATOR:
      return isIs_coordinator();

    case IS_EXECUTOR:
      return isIs_executor();

    case DEBUG_HTTP_ADDRESS:
      return getDebug_http_address();

    case SECURE_WEBSERVER:
      return isSecure_webserver();

    case KRPC_ADDRESS:
      return getKrpc_address();

    case ADMIT_MEM_LIMIT:
      return getAdmit_mem_limit();

    case IS_QUIESCING:
      return isIs_quiescing();

    case EXECUTOR_GROUPS:
      return getExecutor_groups();

    case ADMIT_NUM_QUERIES_LIMIT:
      return getAdmit_num_queries_limit();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADDRESS:
      return isSetAddress();
    case IP_ADDRESS:
      return isSetIp_address();
    case IS_COORDINATOR:
      return isSetIs_coordinator();
    case IS_EXECUTOR:
      return isSetIs_executor();
    case DEBUG_HTTP_ADDRESS:
      return isSetDebug_http_address();
    case SECURE_WEBSERVER:
      return isSetSecure_webserver();
    case KRPC_ADDRESS:
      return isSetKrpc_address();
    case ADMIT_MEM_LIMIT:
      return isSetAdmit_mem_limit();
    case IS_QUIESCING:
      return isSetIs_quiescing();
    case EXECUTOR_GROUPS:
      return isSetExecutor_groups();
    case ADMIT_NUM_QUERIES_LIMIT:
      return isSetAdmit_num_queries_limit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBackendDescriptor)
      return this.equals((TBackendDescriptor)that);
    return false;
  }

  public boolean equals(TBackendDescriptor that) {
    if (that == null)
      return false;

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_ip_address = true && this.isSetIp_address();
    boolean that_present_ip_address = true && that.isSetIp_address();
    if (this_present_ip_address || that_present_ip_address) {
      if (!(this_present_ip_address && that_present_ip_address))
        return false;
      if (!this.ip_address.equals(that.ip_address))
        return false;
    }

    boolean this_present_is_coordinator = true;
    boolean that_present_is_coordinator = true;
    if (this_present_is_coordinator || that_present_is_coordinator) {
      if (!(this_present_is_coordinator && that_present_is_coordinator))
        return false;
      if (this.is_coordinator != that.is_coordinator)
        return false;
    }

    boolean this_present_is_executor = true;
    boolean that_present_is_executor = true;
    if (this_present_is_executor || that_present_is_executor) {
      if (!(this_present_is_executor && that_present_is_executor))
        return false;
      if (this.is_executor != that.is_executor)
        return false;
    }

    boolean this_present_debug_http_address = true && this.isSetDebug_http_address();
    boolean that_present_debug_http_address = true && that.isSetDebug_http_address();
    if (this_present_debug_http_address || that_present_debug_http_address) {
      if (!(this_present_debug_http_address && that_present_debug_http_address))
        return false;
      if (!this.debug_http_address.equals(that.debug_http_address))
        return false;
    }

    boolean this_present_secure_webserver = true && this.isSetSecure_webserver();
    boolean that_present_secure_webserver = true && that.isSetSecure_webserver();
    if (this_present_secure_webserver || that_present_secure_webserver) {
      if (!(this_present_secure_webserver && that_present_secure_webserver))
        return false;
      if (this.secure_webserver != that.secure_webserver)
        return false;
    }

    boolean this_present_krpc_address = true && this.isSetKrpc_address();
    boolean that_present_krpc_address = true && that.isSetKrpc_address();
    if (this_present_krpc_address || that_present_krpc_address) {
      if (!(this_present_krpc_address && that_present_krpc_address))
        return false;
      if (!this.krpc_address.equals(that.krpc_address))
        return false;
    }

    boolean this_present_admit_mem_limit = true;
    boolean that_present_admit_mem_limit = true;
    if (this_present_admit_mem_limit || that_present_admit_mem_limit) {
      if (!(this_present_admit_mem_limit && that_present_admit_mem_limit))
        return false;
      if (this.admit_mem_limit != that.admit_mem_limit)
        return false;
    }

    boolean this_present_is_quiescing = true;
    boolean that_present_is_quiescing = true;
    if (this_present_is_quiescing || that_present_is_quiescing) {
      if (!(this_present_is_quiescing && that_present_is_quiescing))
        return false;
      if (this.is_quiescing != that.is_quiescing)
        return false;
    }

    boolean this_present_executor_groups = true && this.isSetExecutor_groups();
    boolean that_present_executor_groups = true && that.isSetExecutor_groups();
    if (this_present_executor_groups || that_present_executor_groups) {
      if (!(this_present_executor_groups && that_present_executor_groups))
        return false;
      if (!this.executor_groups.equals(that.executor_groups))
        return false;
    }

    boolean this_present_admit_num_queries_limit = true;
    boolean that_present_admit_num_queries_limit = true;
    if (this_present_admit_num_queries_limit || that_present_admit_num_queries_limit) {
      if (!(this_present_admit_num_queries_limit && that_present_admit_num_queries_limit))
        return false;
      if (this.admit_num_queries_limit != that.admit_num_queries_limit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_ip_address = true && (isSetIp_address());
    list.add(present_ip_address);
    if (present_ip_address)
      list.add(ip_address);

    boolean present_is_coordinator = true;
    list.add(present_is_coordinator);
    if (present_is_coordinator)
      list.add(is_coordinator);

    boolean present_is_executor = true;
    list.add(present_is_executor);
    if (present_is_executor)
      list.add(is_executor);

    boolean present_debug_http_address = true && (isSetDebug_http_address());
    list.add(present_debug_http_address);
    if (present_debug_http_address)
      list.add(debug_http_address);

    boolean present_secure_webserver = true && (isSetSecure_webserver());
    list.add(present_secure_webserver);
    if (present_secure_webserver)
      list.add(secure_webserver);

    boolean present_krpc_address = true && (isSetKrpc_address());
    list.add(present_krpc_address);
    if (present_krpc_address)
      list.add(krpc_address);

    boolean present_admit_mem_limit = true;
    list.add(present_admit_mem_limit);
    if (present_admit_mem_limit)
      list.add(admit_mem_limit);

    boolean present_is_quiescing = true;
    list.add(present_is_quiescing);
    if (present_is_quiescing)
      list.add(is_quiescing);

    boolean present_executor_groups = true && (isSetExecutor_groups());
    list.add(present_executor_groups);
    if (present_executor_groups)
      list.add(executor_groups);

    boolean present_admit_num_queries_limit = true;
    list.add(present_admit_num_queries_limit);
    if (present_admit_num_queries_limit)
      list.add(admit_num_queries_limit);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBackendDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp_address()).compareTo(other.isSetIp_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip_address, other.ip_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_coordinator()).compareTo(other.isSetIs_coordinator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_coordinator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_coordinator, other.is_coordinator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_executor()).compareTo(other.isSetIs_executor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_executor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_executor, other.is_executor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_http_address()).compareTo(other.isSetDebug_http_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_http_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_http_address, other.debug_http_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecure_webserver()).compareTo(other.isSetSecure_webserver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecure_webserver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secure_webserver, other.secure_webserver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKrpc_address()).compareTo(other.isSetKrpc_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKrpc_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krpc_address, other.krpc_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdmit_mem_limit()).compareTo(other.isSetAdmit_mem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdmit_mem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admit_mem_limit, other.admit_mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_quiescing()).compareTo(other.isSetIs_quiescing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_quiescing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_quiescing, other.is_quiescing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecutor_groups()).compareTo(other.isSetExecutor_groups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutor_groups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executor_groups, other.executor_groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdmit_num_queries_limit()).compareTo(other.isSetAdmit_num_queries_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdmit_num_queries_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admit_num_queries_limit, other.admit_num_queries_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBackendDescriptor(");
    boolean first = true;

    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip_address:");
    if (this.ip_address == null) {
      sb.append("null");
    } else {
      sb.append(this.ip_address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_coordinator:");
    sb.append(this.is_coordinator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_executor:");
    sb.append(this.is_executor);
    first = false;
    if (isSetDebug_http_address()) {
      if (!first) sb.append(", ");
      sb.append("debug_http_address:");
      if (this.debug_http_address == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_http_address);
      }
      first = false;
    }
    if (isSetSecure_webserver()) {
      if (!first) sb.append(", ");
      sb.append("secure_webserver:");
      sb.append(this.secure_webserver);
      first = false;
    }
    if (isSetKrpc_address()) {
      if (!first) sb.append(", ");
      sb.append("krpc_address:");
      if (this.krpc_address == null) {
        sb.append("null");
      } else {
        sb.append(this.krpc_address);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("admit_mem_limit:");
    sb.append(this.admit_mem_limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_quiescing:");
    sb.append(this.is_quiescing);
    first = false;
    if (!first) sb.append(", ");
    sb.append("executor_groups:");
    if (this.executor_groups == null) {
      sb.append("null");
    } else {
      sb.append(this.executor_groups);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("admit_num_queries_limit:");
    sb.append(this.admit_num_queries_limit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetAddress()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'address' is unset! Struct:" + toString());
    }

    if (!isSetIp_address()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ip_address' is unset! Struct:" + toString());
    }

    if (!isSetIs_coordinator()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_coordinator' is unset! Struct:" + toString());
    }

    if (!isSetIs_executor()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_executor' is unset! Struct:" + toString());
    }

    if (!isSetAdmit_mem_limit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'admit_mem_limit' is unset! Struct:" + toString());
    }

    if (!isSetIs_quiescing()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_quiescing' is unset! Struct:" + toString());
    }

    if (!isSetExecutor_groups()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executor_groups' is unset! Struct:" + toString());
    }

    if (!isSetAdmit_num_queries_limit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'admit_num_queries_limit' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (address != null) {
      address.validate();
    }
    if (debug_http_address != null) {
      debug_http_address.validate();
    }
    if (krpc_address != null) {
      krpc_address.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBackendDescriptorStandardSchemeFactory implements SchemeFactory {
    public TBackendDescriptorStandardScheme getScheme() {
      return new TBackendDescriptorStandardScheme();
    }
  }

  private static class TBackendDescriptorStandardScheme extends StandardScheme<TBackendDescriptor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBackendDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.address = new org.apache.impala.thrift.TNetworkAddress();
              struct.address.read(iprot);
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip_address = iprot.readString();
              struct.setIp_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_COORDINATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_coordinator = iprot.readBool();
              struct.setIs_coordinatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_EXECUTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_executor = iprot.readBool();
              struct.setIs_executorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEBUG_HTTP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.debug_http_address = new org.apache.impala.thrift.TNetworkAddress();
              struct.debug_http_address.read(iprot);
              struct.setDebug_http_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SECURE_WEBSERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.secure_webserver = iprot.readBool();
              struct.setSecure_webserverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KRPC_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.krpc_address = new org.apache.impala.thrift.TNetworkAddress();
              struct.krpc_address.read(iprot);
              struct.setKrpc_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADMIT_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.admit_mem_limit = iprot.readI64();
              struct.setAdmit_mem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_QUIESCING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_quiescing = iprot.readBool();
              struct.setIs_quiescingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXECUTOR_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.executor_groups = new ArrayList<TExecutorGroupDesc>(_list0.size);
                TExecutorGroupDesc _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TExecutorGroupDesc();
                  _elem1.read(iprot);
                  struct.executor_groups.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setExecutor_groupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADMIT_NUM_QUERIES_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.admit_num_queries_limit = iprot.readI64();
              struct.setAdmit_num_queries_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBackendDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        struct.address.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ip_address != null) {
        oprot.writeFieldBegin(IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.ip_address);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_COORDINATOR_FIELD_DESC);
      oprot.writeBool(struct.is_coordinator);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_EXECUTOR_FIELD_DESC);
      oprot.writeBool(struct.is_executor);
      oprot.writeFieldEnd();
      if (struct.debug_http_address != null) {
        if (struct.isSetDebug_http_address()) {
          oprot.writeFieldBegin(DEBUG_HTTP_ADDRESS_FIELD_DESC);
          struct.debug_http_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSecure_webserver()) {
        oprot.writeFieldBegin(SECURE_WEBSERVER_FIELD_DESC);
        oprot.writeBool(struct.secure_webserver);
        oprot.writeFieldEnd();
      }
      if (struct.krpc_address != null) {
        if (struct.isSetKrpc_address()) {
          oprot.writeFieldBegin(KRPC_ADDRESS_FIELD_DESC);
          struct.krpc_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ADMIT_MEM_LIMIT_FIELD_DESC);
      oprot.writeI64(struct.admit_mem_limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_QUIESCING_FIELD_DESC);
      oprot.writeBool(struct.is_quiescing);
      oprot.writeFieldEnd();
      if (struct.executor_groups != null) {
        oprot.writeFieldBegin(EXECUTOR_GROUPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.executor_groups.size()));
          for (TExecutorGroupDesc _iter3 : struct.executor_groups)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ADMIT_NUM_QUERIES_LIMIT_FIELD_DESC);
      oprot.writeI64(struct.admit_num_queries_limit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBackendDescriptorTupleSchemeFactory implements SchemeFactory {
    public TBackendDescriptorTupleScheme getScheme() {
      return new TBackendDescriptorTupleScheme();
    }
  }

  private static class TBackendDescriptorTupleScheme extends TupleScheme<TBackendDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBackendDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.address.write(oprot);
      oprot.writeString(struct.ip_address);
      oprot.writeBool(struct.is_coordinator);
      oprot.writeBool(struct.is_executor);
      oprot.writeI64(struct.admit_mem_limit);
      oprot.writeBool(struct.is_quiescing);
      {
        oprot.writeI32(struct.executor_groups.size());
        for (TExecutorGroupDesc _iter4 : struct.executor_groups)
        {
          _iter4.write(oprot);
        }
      }
      oprot.writeI64(struct.admit_num_queries_limit);
      BitSet optionals = new BitSet();
      if (struct.isSetDebug_http_address()) {
        optionals.set(0);
      }
      if (struct.isSetSecure_webserver()) {
        optionals.set(1);
      }
      if (struct.isSetKrpc_address()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDebug_http_address()) {
        struct.debug_http_address.write(oprot);
      }
      if (struct.isSetSecure_webserver()) {
        oprot.writeBool(struct.secure_webserver);
      }
      if (struct.isSetKrpc_address()) {
        struct.krpc_address.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBackendDescriptor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.address = new org.apache.impala.thrift.TNetworkAddress();
      struct.address.read(iprot);
      struct.setAddressIsSet(true);
      struct.ip_address = iprot.readString();
      struct.setIp_addressIsSet(true);
      struct.is_coordinator = iprot.readBool();
      struct.setIs_coordinatorIsSet(true);
      struct.is_executor = iprot.readBool();
      struct.setIs_executorIsSet(true);
      struct.admit_mem_limit = iprot.readI64();
      struct.setAdmit_mem_limitIsSet(true);
      struct.is_quiescing = iprot.readBool();
      struct.setIs_quiescingIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.executor_groups = new ArrayList<TExecutorGroupDesc>(_list5.size);
        TExecutorGroupDesc _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new TExecutorGroupDesc();
          _elem6.read(iprot);
          struct.executor_groups.add(_elem6);
        }
      }
      struct.setExecutor_groupsIsSet(true);
      struct.admit_num_queries_limit = iprot.readI64();
      struct.setAdmit_num_queries_limitIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.debug_http_address = new org.apache.impala.thrift.TNetworkAddress();
        struct.debug_http_address.read(iprot);
        struct.setDebug_http_addressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.secure_webserver = iprot.readBool();
        struct.setSecure_webserverIsSet(true);
      }
      if (incoming.get(2)) {
        struct.krpc_address = new org.apache.impala.thrift.TNetworkAddress();
        struct.krpc_address.read(iprot);
        struct.setKrpc_addressIsSet(true);
      }
    }
  }

}

