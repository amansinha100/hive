/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TPlanExecInfo implements org.apache.thrift.TBase<TPlanExecInfo, TPlanExecInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanExecInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanExecInfo");

  private static final org.apache.thrift.protocol.TField FRAGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fragments", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PER_NODE_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("per_node_scan_ranges", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanExecInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanExecInfoTupleSchemeFactory());
  }

  public List<org.apache.impala.thrift.TPlanFragment> fragments; // required
  public Map<Integer,org.apache.impala.thrift.TScanRangeSpec> per_node_scan_ranges; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAGMENTS((short)1, "fragments"),
    PER_NODE_SCAN_RANGES((short)2, "per_node_scan_ranges");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRAGMENTS
          return FRAGMENTS;
        case 2: // PER_NODE_SCAN_RANGES
          return PER_NODE_SCAN_RANGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PER_NODE_SCAN_RANGES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAGMENTS, new org.apache.thrift.meta_data.FieldMetaData("fragments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TPlanFragment.class))));
    tmpMap.put(_Fields.PER_NODE_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("per_node_scan_ranges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TScanRangeSpec.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanExecInfo.class, metaDataMap);
  }

  public TPlanExecInfo() {
  }

  public TPlanExecInfo(
    List<org.apache.impala.thrift.TPlanFragment> fragments)
  {
    this();
    this.fragments = fragments;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanExecInfo(TPlanExecInfo other) {
    if (other.isSetFragments()) {
      List<org.apache.impala.thrift.TPlanFragment> __this__fragments = new ArrayList<org.apache.impala.thrift.TPlanFragment>(other.fragments.size());
      for (org.apache.impala.thrift.TPlanFragment other_element : other.fragments) {
        __this__fragments.add(new org.apache.impala.thrift.TPlanFragment(other_element));
      }
      this.fragments = __this__fragments;
    }
    if (other.isSetPer_node_scan_ranges()) {
      Map<Integer,org.apache.impala.thrift.TScanRangeSpec> __this__per_node_scan_ranges = new HashMap<Integer,org.apache.impala.thrift.TScanRangeSpec>(other.per_node_scan_ranges.size());
      for (Map.Entry<Integer, org.apache.impala.thrift.TScanRangeSpec> other_element : other.per_node_scan_ranges.entrySet()) {

        Integer other_element_key = other_element.getKey();
        org.apache.impala.thrift.TScanRangeSpec other_element_value = other_element.getValue();

        Integer __this__per_node_scan_ranges_copy_key = other_element_key;

        org.apache.impala.thrift.TScanRangeSpec __this__per_node_scan_ranges_copy_value = new org.apache.impala.thrift.TScanRangeSpec(other_element_value);

        __this__per_node_scan_ranges.put(__this__per_node_scan_ranges_copy_key, __this__per_node_scan_ranges_copy_value);
      }
      this.per_node_scan_ranges = __this__per_node_scan_ranges;
    }
  }

  public TPlanExecInfo deepCopy() {
    return new TPlanExecInfo(this);
  }

  @Override
  public void clear() {
    this.fragments = null;
    this.per_node_scan_ranges = null;
  }

  public int getFragmentsSize() {
    return (this.fragments == null) ? 0 : this.fragments.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TPlanFragment> getFragmentsIterator() {
    return (this.fragments == null) ? null : this.fragments.iterator();
  }

  public void addToFragments(org.apache.impala.thrift.TPlanFragment elem) {
    if (this.fragments == null) {
      this.fragments = new ArrayList<org.apache.impala.thrift.TPlanFragment>();
    }
    this.fragments.add(elem);
  }

  public List<org.apache.impala.thrift.TPlanFragment> getFragments() {
    return this.fragments;
  }

  public TPlanExecInfo setFragments(List<org.apache.impala.thrift.TPlanFragment> fragments) {
    this.fragments = fragments;
    return this;
  }

  public void unsetFragments() {
    this.fragments = null;
  }

  /** Returns true if field fragments is set (has been assigned a value) and false otherwise */
  public boolean isSetFragments() {
    return this.fragments != null;
  }

  public void setFragmentsIsSet(boolean value) {
    if (!value) {
      this.fragments = null;
    }
  }

  public int getPer_node_scan_rangesSize() {
    return (this.per_node_scan_ranges == null) ? 0 : this.per_node_scan_ranges.size();
  }

  public void putToPer_node_scan_ranges(int key, org.apache.impala.thrift.TScanRangeSpec val) {
    if (this.per_node_scan_ranges == null) {
      this.per_node_scan_ranges = new HashMap<Integer,org.apache.impala.thrift.TScanRangeSpec>();
    }
    this.per_node_scan_ranges.put(key, val);
  }

  public Map<Integer,org.apache.impala.thrift.TScanRangeSpec> getPer_node_scan_ranges() {
    return this.per_node_scan_ranges;
  }

  public TPlanExecInfo setPer_node_scan_ranges(Map<Integer,org.apache.impala.thrift.TScanRangeSpec> per_node_scan_ranges) {
    this.per_node_scan_ranges = per_node_scan_ranges;
    return this;
  }

  public void unsetPer_node_scan_ranges() {
    this.per_node_scan_ranges = null;
  }

  /** Returns true if field per_node_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_node_scan_ranges() {
    return this.per_node_scan_ranges != null;
  }

  public void setPer_node_scan_rangesIsSet(boolean value) {
    if (!value) {
      this.per_node_scan_ranges = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRAGMENTS:
      if (value == null) {
        unsetFragments();
      } else {
        setFragments((List<org.apache.impala.thrift.TPlanFragment>)value);
      }
      break;

    case PER_NODE_SCAN_RANGES:
      if (value == null) {
        unsetPer_node_scan_ranges();
      } else {
        setPer_node_scan_ranges((Map<Integer,org.apache.impala.thrift.TScanRangeSpec>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAGMENTS:
      return getFragments();

    case PER_NODE_SCAN_RANGES:
      return getPer_node_scan_ranges();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRAGMENTS:
      return isSetFragments();
    case PER_NODE_SCAN_RANGES:
      return isSetPer_node_scan_ranges();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanExecInfo)
      return this.equals((TPlanExecInfo)that);
    return false;
  }

  public boolean equals(TPlanExecInfo that) {
    if (that == null)
      return false;

    boolean this_present_fragments = true && this.isSetFragments();
    boolean that_present_fragments = true && that.isSetFragments();
    if (this_present_fragments || that_present_fragments) {
      if (!(this_present_fragments && that_present_fragments))
        return false;
      if (!this.fragments.equals(that.fragments))
        return false;
    }

    boolean this_present_per_node_scan_ranges = true && this.isSetPer_node_scan_ranges();
    boolean that_present_per_node_scan_ranges = true && that.isSetPer_node_scan_ranges();
    if (this_present_per_node_scan_ranges || that_present_per_node_scan_ranges) {
      if (!(this_present_per_node_scan_ranges && that_present_per_node_scan_ranges))
        return false;
      if (!this.per_node_scan_ranges.equals(that.per_node_scan_ranges))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fragments = true && (isSetFragments());
    list.add(present_fragments);
    if (present_fragments)
      list.add(fragments);

    boolean present_per_node_scan_ranges = true && (isSetPer_node_scan_ranges());
    list.add(present_per_node_scan_ranges);
    if (present_per_node_scan_ranges)
      list.add(per_node_scan_ranges);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlanExecInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFragments()).compareTo(other.isSetFragments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragments, other.fragments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPer_node_scan_ranges()).compareTo(other.isSetPer_node_scan_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_node_scan_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_node_scan_ranges, other.per_node_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanExecInfo(");
    boolean first = true;

    sb.append("fragments:");
    if (this.fragments == null) {
      sb.append("null");
    } else {
      sb.append(this.fragments);
    }
    first = false;
    if (isSetPer_node_scan_ranges()) {
      if (!first) sb.append(", ");
      sb.append("per_node_scan_ranges:");
      if (this.per_node_scan_ranges == null) {
        sb.append("null");
      } else {
        sb.append(this.per_node_scan_ranges);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fragments == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragments' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanExecInfoStandardSchemeFactory implements SchemeFactory {
    public TPlanExecInfoStandardScheme getScheme() {
      return new TPlanExecInfoStandardScheme();
    }
  }

  private static class TPlanExecInfoStandardScheme extends StandardScheme<TPlanExecInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanExecInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRAGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.fragments = new ArrayList<org.apache.impala.thrift.TPlanFragment>(_list24.size);
                org.apache.impala.thrift.TPlanFragment _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new org.apache.impala.thrift.TPlanFragment();
                  _elem25.read(iprot);
                  struct.fragments.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setFragmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PER_NODE_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
                struct.per_node_scan_ranges = new HashMap<Integer,org.apache.impala.thrift.TScanRangeSpec>(2*_map27.size);
                int _key28;
                org.apache.impala.thrift.TScanRangeSpec _val29;
                for (int _i30 = 0; _i30 < _map27.size; ++_i30)
                {
                  _key28 = iprot.readI32();
                  _val29 = new org.apache.impala.thrift.TScanRangeSpec();
                  _val29.read(iprot);
                  struct.per_node_scan_ranges.put(_key28, _val29);
                }
                iprot.readMapEnd();
              }
              struct.setPer_node_scan_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanExecInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fragments != null) {
        oprot.writeFieldBegin(FRAGMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fragments.size()));
          for (org.apache.impala.thrift.TPlanFragment _iter31 : struct.fragments)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.per_node_scan_ranges != null) {
        if (struct.isSetPer_node_scan_ranges()) {
          oprot.writeFieldBegin(PER_NODE_SCAN_RANGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.per_node_scan_ranges.size()));
            for (Map.Entry<Integer, org.apache.impala.thrift.TScanRangeSpec> _iter32 : struct.per_node_scan_ranges.entrySet())
            {
              oprot.writeI32(_iter32.getKey());
              _iter32.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanExecInfoTupleSchemeFactory implements SchemeFactory {
    public TPlanExecInfoTupleScheme getScheme() {
      return new TPlanExecInfoTupleScheme();
    }
  }

  private static class TPlanExecInfoTupleScheme extends TupleScheme<TPlanExecInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanExecInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.fragments.size());
        for (org.apache.impala.thrift.TPlanFragment _iter33 : struct.fragments)
        {
          _iter33.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetPer_node_scan_ranges()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPer_node_scan_ranges()) {
        {
          oprot.writeI32(struct.per_node_scan_ranges.size());
          for (Map.Entry<Integer, org.apache.impala.thrift.TScanRangeSpec> _iter34 : struct.per_node_scan_ranges.entrySet())
          {
            oprot.writeI32(_iter34.getKey());
            _iter34.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanExecInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.fragments = new ArrayList<org.apache.impala.thrift.TPlanFragment>(_list35.size);
        org.apache.impala.thrift.TPlanFragment _elem36;
        for (int _i37 = 0; _i37 < _list35.size; ++_i37)
        {
          _elem36 = new org.apache.impala.thrift.TPlanFragment();
          _elem36.read(iprot);
          struct.fragments.add(_elem36);
        }
      }
      struct.setFragmentsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.per_node_scan_ranges = new HashMap<Integer,org.apache.impala.thrift.TScanRangeSpec>(2*_map38.size);
          int _key39;
          org.apache.impala.thrift.TScanRangeSpec _val40;
          for (int _i41 = 0; _i41 < _map38.size; ++_i41)
          {
            _key39 = iprot.readI32();
            _val40 = new org.apache.impala.thrift.TScanRangeSpec();
            _val40.read(iprot);
            struct.per_node_scan_ranges.put(_key39, _val40);
          }
        }
        struct.setPer_node_scan_rangesIsSet(true);
      }
    }
  }

}

