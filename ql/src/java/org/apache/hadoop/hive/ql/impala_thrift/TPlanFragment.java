/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TPlanFragment implements org.apache.thrift.TBase<TPlanFragment, TPlanFragment._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragment");

  private static final org.apache.thrift.protocol.TField IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("idx", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("display_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("plan", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField OUTPUT_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("output_sink", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField MIN_MEM_RESERVATION_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("min_mem_reservation_bytes", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField INITIAL_MEM_RESERVATION_TOTAL_CLAIMS_FIELD_DESC = new org.apache.thrift.protocol.TField("initial_mem_reservation_total_claims", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTERS_RESERVATION_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filters_reservation_bytes", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField THREAD_RESERVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("thread_reservation", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanFragmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanFragmentTupleSchemeFactory());
  }

  public int idx; // required
  public String display_name; // required
  public org.apache.impala.thrift.TPlan plan; // optional
  public org.apache.impala.thrift.TDataSink output_sink; // optional
  public org.apache.impala.thrift.TDataPartition partition; // required
  public long min_mem_reservation_bytes; // optional
  public long initial_mem_reservation_total_claims; // optional
  public long runtime_filters_reservation_bytes; // optional
  public long thread_reservation; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IDX((short)1, "idx"),
    DISPLAY_NAME((short)2, "display_name"),
    PLAN((short)3, "plan"),
    OUTPUT_SINK((short)5, "output_sink"),
    PARTITION((short)6, "partition"),
    MIN_MEM_RESERVATION_BYTES((short)7, "min_mem_reservation_bytes"),
    INITIAL_MEM_RESERVATION_TOTAL_CLAIMS((short)8, "initial_mem_reservation_total_claims"),
    RUNTIME_FILTERS_RESERVATION_BYTES((short)9, "runtime_filters_reservation_bytes"),
    THREAD_RESERVATION((short)10, "thread_reservation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IDX
          return IDX;
        case 2: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 3: // PLAN
          return PLAN;
        case 5: // OUTPUT_SINK
          return OUTPUT_SINK;
        case 6: // PARTITION
          return PARTITION;
        case 7: // MIN_MEM_RESERVATION_BYTES
          return MIN_MEM_RESERVATION_BYTES;
        case 8: // INITIAL_MEM_RESERVATION_TOTAL_CLAIMS
          return INITIAL_MEM_RESERVATION_TOTAL_CLAIMS;
        case 9: // RUNTIME_FILTERS_RESERVATION_BYTES
          return RUNTIME_FILTERS_RESERVATION_BYTES;
        case 10: // THREAD_RESERVATION
          return THREAD_RESERVATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDX_ISSET_ID = 0;
  private static final int __MIN_MEM_RESERVATION_BYTES_ISSET_ID = 1;
  private static final int __INITIAL_MEM_RESERVATION_TOTAL_CLAIMS_ISSET_ID = 2;
  private static final int __RUNTIME_FILTERS_RESERVATION_BYTES_ISSET_ID = 3;
  private static final int __THREAD_RESERVATION_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PLAN,_Fields.OUTPUT_SINK,_Fields.MIN_MEM_RESERVATION_BYTES,_Fields.INITIAL_MEM_RESERVATION_TOTAL_CLAIMS,_Fields.RUNTIME_FILTERS_RESERVATION_BYTES,_Fields.THREAD_RESERVATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IDX, new org.apache.thrift.meta_data.FieldMetaData("idx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TFragmentIdx")));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("display_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN, new org.apache.thrift.meta_data.FieldMetaData("plan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TPlan.class)));
    tmpMap.put(_Fields.OUTPUT_SINK, new org.apache.thrift.meta_data.FieldMetaData("output_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDataSink.class)));
    tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDataPartition.class)));
    tmpMap.put(_Fields.MIN_MEM_RESERVATION_BYTES, new org.apache.thrift.meta_data.FieldMetaData("min_mem_reservation_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INITIAL_MEM_RESERVATION_TOTAL_CLAIMS, new org.apache.thrift.meta_data.FieldMetaData("initial_mem_reservation_total_claims", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUNTIME_FILTERS_RESERVATION_BYTES, new org.apache.thrift.meta_data.FieldMetaData("runtime_filters_reservation_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.THREAD_RESERVATION, new org.apache.thrift.meta_data.FieldMetaData("thread_reservation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragment.class, metaDataMap);
  }

  public TPlanFragment() {
  }

  public TPlanFragment(
    int idx,
    String display_name,
    org.apache.impala.thrift.TDataPartition partition)
  {
    this();
    this.idx = idx;
    setIdxIsSet(true);
    this.display_name = display_name;
    this.partition = partition;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragment(TPlanFragment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.idx = other.idx;
    if (other.isSetDisplay_name()) {
      this.display_name = other.display_name;
    }
    if (other.isSetPlan()) {
      this.plan = new org.apache.impala.thrift.TPlan(other.plan);
    }
    if (other.isSetOutput_sink()) {
      this.output_sink = new org.apache.impala.thrift.TDataSink(other.output_sink);
    }
    if (other.isSetPartition()) {
      this.partition = new org.apache.impala.thrift.TDataPartition(other.partition);
    }
    this.min_mem_reservation_bytes = other.min_mem_reservation_bytes;
    this.initial_mem_reservation_total_claims = other.initial_mem_reservation_total_claims;
    this.runtime_filters_reservation_bytes = other.runtime_filters_reservation_bytes;
    this.thread_reservation = other.thread_reservation;
  }

  public TPlanFragment deepCopy() {
    return new TPlanFragment(this);
  }

  @Override
  public void clear() {
    setIdxIsSet(false);
    this.idx = 0;
    this.display_name = null;
    this.plan = null;
    this.output_sink = null;
    this.partition = null;
    setMin_mem_reservation_bytesIsSet(false);
    this.min_mem_reservation_bytes = 0;
    setInitial_mem_reservation_total_claimsIsSet(false);
    this.initial_mem_reservation_total_claims = 0;
    setRuntime_filters_reservation_bytesIsSet(false);
    this.runtime_filters_reservation_bytes = 0;
    setThread_reservationIsSet(false);
    this.thread_reservation = 0;
  }

  public int getIdx() {
    return this.idx;
  }

  public TPlanFragment setIdx(int idx) {
    this.idx = idx;
    setIdxIsSet(true);
    return this;
  }

  public void unsetIdx() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDX_ISSET_ID);
  }

  /** Returns true if field idx is set (has been assigned a value) and false otherwise */
  public boolean isSetIdx() {
    return EncodingUtils.testBit(__isset_bitfield, __IDX_ISSET_ID);
  }

  public void setIdxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDX_ISSET_ID, value);
  }

  public String getDisplay_name() {
    return this.display_name;
  }

  public TPlanFragment setDisplay_name(String display_name) {
    this.display_name = display_name;
    return this;
  }

  public void unsetDisplay_name() {
    this.display_name = null;
  }

  /** Returns true if field display_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay_name() {
    return this.display_name != null;
  }

  public void setDisplay_nameIsSet(boolean value) {
    if (!value) {
      this.display_name = null;
    }
  }

  public org.apache.impala.thrift.TPlan getPlan() {
    return this.plan;
  }

  public TPlanFragment setPlan(org.apache.impala.thrift.TPlan plan) {
    this.plan = plan;
    return this;
  }

  public void unsetPlan() {
    this.plan = null;
  }

  /** Returns true if field plan is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan() {
    return this.plan != null;
  }

  public void setPlanIsSet(boolean value) {
    if (!value) {
      this.plan = null;
    }
  }

  public org.apache.impala.thrift.TDataSink getOutput_sink() {
    return this.output_sink;
  }

  public TPlanFragment setOutput_sink(org.apache.impala.thrift.TDataSink output_sink) {
    this.output_sink = output_sink;
    return this;
  }

  public void unsetOutput_sink() {
    this.output_sink = null;
  }

  /** Returns true if field output_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_sink() {
    return this.output_sink != null;
  }

  public void setOutput_sinkIsSet(boolean value) {
    if (!value) {
      this.output_sink = null;
    }
  }

  public org.apache.impala.thrift.TDataPartition getPartition() {
    return this.partition;
  }

  public TPlanFragment setPartition(org.apache.impala.thrift.TDataPartition partition) {
    this.partition = partition;
    return this;
  }

  public void unsetPartition() {
    this.partition = null;
  }

  /** Returns true if field partition is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition() {
    return this.partition != null;
  }

  public void setPartitionIsSet(boolean value) {
    if (!value) {
      this.partition = null;
    }
  }

  public long getMin_mem_reservation_bytes() {
    return this.min_mem_reservation_bytes;
  }

  public TPlanFragment setMin_mem_reservation_bytes(long min_mem_reservation_bytes) {
    this.min_mem_reservation_bytes = min_mem_reservation_bytes;
    setMin_mem_reservation_bytesIsSet(true);
    return this;
  }

  public void unsetMin_mem_reservation_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_MEM_RESERVATION_BYTES_ISSET_ID);
  }

  /** Returns true if field min_mem_reservation_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_mem_reservation_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_MEM_RESERVATION_BYTES_ISSET_ID);
  }

  public void setMin_mem_reservation_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_MEM_RESERVATION_BYTES_ISSET_ID, value);
  }

  public long getInitial_mem_reservation_total_claims() {
    return this.initial_mem_reservation_total_claims;
  }

  public TPlanFragment setInitial_mem_reservation_total_claims(long initial_mem_reservation_total_claims) {
    this.initial_mem_reservation_total_claims = initial_mem_reservation_total_claims;
    setInitial_mem_reservation_total_claimsIsSet(true);
    return this;
  }

  public void unsetInitial_mem_reservation_total_claims() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIAL_MEM_RESERVATION_TOTAL_CLAIMS_ISSET_ID);
  }

  /** Returns true if field initial_mem_reservation_total_claims is set (has been assigned a value) and false otherwise */
  public boolean isSetInitial_mem_reservation_total_claims() {
    return EncodingUtils.testBit(__isset_bitfield, __INITIAL_MEM_RESERVATION_TOTAL_CLAIMS_ISSET_ID);
  }

  public void setInitial_mem_reservation_total_claimsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIAL_MEM_RESERVATION_TOTAL_CLAIMS_ISSET_ID, value);
  }

  public long getRuntime_filters_reservation_bytes() {
    return this.runtime_filters_reservation_bytes;
  }

  public TPlanFragment setRuntime_filters_reservation_bytes(long runtime_filters_reservation_bytes) {
    this.runtime_filters_reservation_bytes = runtime_filters_reservation_bytes;
    setRuntime_filters_reservation_bytesIsSet(true);
    return this;
  }

  public void unsetRuntime_filters_reservation_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUNTIME_FILTERS_RESERVATION_BYTES_ISSET_ID);
  }

  /** Returns true if field runtime_filters_reservation_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filters_reservation_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __RUNTIME_FILTERS_RESERVATION_BYTES_ISSET_ID);
  }

  public void setRuntime_filters_reservation_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUNTIME_FILTERS_RESERVATION_BYTES_ISSET_ID, value);
  }

  public long getThread_reservation() {
    return this.thread_reservation;
  }

  public TPlanFragment setThread_reservation(long thread_reservation) {
    this.thread_reservation = thread_reservation;
    setThread_reservationIsSet(true);
    return this;
  }

  public void unsetThread_reservation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREAD_RESERVATION_ISSET_ID);
  }

  /** Returns true if field thread_reservation is set (has been assigned a value) and false otherwise */
  public boolean isSetThread_reservation() {
    return EncodingUtils.testBit(__isset_bitfield, __THREAD_RESERVATION_ISSET_ID);
  }

  public void setThread_reservationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREAD_RESERVATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IDX:
      if (value == null) {
        unsetIdx();
      } else {
        setIdx((Integer)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplay_name();
      } else {
        setDisplay_name((String)value);
      }
      break;

    case PLAN:
      if (value == null) {
        unsetPlan();
      } else {
        setPlan((org.apache.impala.thrift.TPlan)value);
      }
      break;

    case OUTPUT_SINK:
      if (value == null) {
        unsetOutput_sink();
      } else {
        setOutput_sink((org.apache.impala.thrift.TDataSink)value);
      }
      break;

    case PARTITION:
      if (value == null) {
        unsetPartition();
      } else {
        setPartition((org.apache.impala.thrift.TDataPartition)value);
      }
      break;

    case MIN_MEM_RESERVATION_BYTES:
      if (value == null) {
        unsetMin_mem_reservation_bytes();
      } else {
        setMin_mem_reservation_bytes((Long)value);
      }
      break;

    case INITIAL_MEM_RESERVATION_TOTAL_CLAIMS:
      if (value == null) {
        unsetInitial_mem_reservation_total_claims();
      } else {
        setInitial_mem_reservation_total_claims((Long)value);
      }
      break;

    case RUNTIME_FILTERS_RESERVATION_BYTES:
      if (value == null) {
        unsetRuntime_filters_reservation_bytes();
      } else {
        setRuntime_filters_reservation_bytes((Long)value);
      }
      break;

    case THREAD_RESERVATION:
      if (value == null) {
        unsetThread_reservation();
      } else {
        setThread_reservation((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IDX:
      return getIdx();

    case DISPLAY_NAME:
      return getDisplay_name();

    case PLAN:
      return getPlan();

    case OUTPUT_SINK:
      return getOutput_sink();

    case PARTITION:
      return getPartition();

    case MIN_MEM_RESERVATION_BYTES:
      return getMin_mem_reservation_bytes();

    case INITIAL_MEM_RESERVATION_TOTAL_CLAIMS:
      return getInitial_mem_reservation_total_claims();

    case RUNTIME_FILTERS_RESERVATION_BYTES:
      return getRuntime_filters_reservation_bytes();

    case THREAD_RESERVATION:
      return getThread_reservation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IDX:
      return isSetIdx();
    case DISPLAY_NAME:
      return isSetDisplay_name();
    case PLAN:
      return isSetPlan();
    case OUTPUT_SINK:
      return isSetOutput_sink();
    case PARTITION:
      return isSetPartition();
    case MIN_MEM_RESERVATION_BYTES:
      return isSetMin_mem_reservation_bytes();
    case INITIAL_MEM_RESERVATION_TOTAL_CLAIMS:
      return isSetInitial_mem_reservation_total_claims();
    case RUNTIME_FILTERS_RESERVATION_BYTES:
      return isSetRuntime_filters_reservation_bytes();
    case THREAD_RESERVATION:
      return isSetThread_reservation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanFragment)
      return this.equals((TPlanFragment)that);
    return false;
  }

  public boolean equals(TPlanFragment that) {
    if (that == null)
      return false;

    boolean this_present_idx = true;
    boolean that_present_idx = true;
    if (this_present_idx || that_present_idx) {
      if (!(this_present_idx && that_present_idx))
        return false;
      if (this.idx != that.idx)
        return false;
    }

    boolean this_present_display_name = true && this.isSetDisplay_name();
    boolean that_present_display_name = true && that.isSetDisplay_name();
    if (this_present_display_name || that_present_display_name) {
      if (!(this_present_display_name && that_present_display_name))
        return false;
      if (!this.display_name.equals(that.display_name))
        return false;
    }

    boolean this_present_plan = true && this.isSetPlan();
    boolean that_present_plan = true && that.isSetPlan();
    if (this_present_plan || that_present_plan) {
      if (!(this_present_plan && that_present_plan))
        return false;
      if (!this.plan.equals(that.plan))
        return false;
    }

    boolean this_present_output_sink = true && this.isSetOutput_sink();
    boolean that_present_output_sink = true && that.isSetOutput_sink();
    if (this_present_output_sink || that_present_output_sink) {
      if (!(this_present_output_sink && that_present_output_sink))
        return false;
      if (!this.output_sink.equals(that.output_sink))
        return false;
    }

    boolean this_present_partition = true && this.isSetPartition();
    boolean that_present_partition = true && that.isSetPartition();
    if (this_present_partition || that_present_partition) {
      if (!(this_present_partition && that_present_partition))
        return false;
      if (!this.partition.equals(that.partition))
        return false;
    }

    boolean this_present_min_mem_reservation_bytes = true && this.isSetMin_mem_reservation_bytes();
    boolean that_present_min_mem_reservation_bytes = true && that.isSetMin_mem_reservation_bytes();
    if (this_present_min_mem_reservation_bytes || that_present_min_mem_reservation_bytes) {
      if (!(this_present_min_mem_reservation_bytes && that_present_min_mem_reservation_bytes))
        return false;
      if (this.min_mem_reservation_bytes != that.min_mem_reservation_bytes)
        return false;
    }

    boolean this_present_initial_mem_reservation_total_claims = true && this.isSetInitial_mem_reservation_total_claims();
    boolean that_present_initial_mem_reservation_total_claims = true && that.isSetInitial_mem_reservation_total_claims();
    if (this_present_initial_mem_reservation_total_claims || that_present_initial_mem_reservation_total_claims) {
      if (!(this_present_initial_mem_reservation_total_claims && that_present_initial_mem_reservation_total_claims))
        return false;
      if (this.initial_mem_reservation_total_claims != that.initial_mem_reservation_total_claims)
        return false;
    }

    boolean this_present_runtime_filters_reservation_bytes = true && this.isSetRuntime_filters_reservation_bytes();
    boolean that_present_runtime_filters_reservation_bytes = true && that.isSetRuntime_filters_reservation_bytes();
    if (this_present_runtime_filters_reservation_bytes || that_present_runtime_filters_reservation_bytes) {
      if (!(this_present_runtime_filters_reservation_bytes && that_present_runtime_filters_reservation_bytes))
        return false;
      if (this.runtime_filters_reservation_bytes != that.runtime_filters_reservation_bytes)
        return false;
    }

    boolean this_present_thread_reservation = true && this.isSetThread_reservation();
    boolean that_present_thread_reservation = true && that.isSetThread_reservation();
    if (this_present_thread_reservation || that_present_thread_reservation) {
      if (!(this_present_thread_reservation && that_present_thread_reservation))
        return false;
      if (this.thread_reservation != that.thread_reservation)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_idx = true;
    list.add(present_idx);
    if (present_idx)
      list.add(idx);

    boolean present_display_name = true && (isSetDisplay_name());
    list.add(present_display_name);
    if (present_display_name)
      list.add(display_name);

    boolean present_plan = true && (isSetPlan());
    list.add(present_plan);
    if (present_plan)
      list.add(plan);

    boolean present_output_sink = true && (isSetOutput_sink());
    list.add(present_output_sink);
    if (present_output_sink)
      list.add(output_sink);

    boolean present_partition = true && (isSetPartition());
    list.add(present_partition);
    if (present_partition)
      list.add(partition);

    boolean present_min_mem_reservation_bytes = true && (isSetMin_mem_reservation_bytes());
    list.add(present_min_mem_reservation_bytes);
    if (present_min_mem_reservation_bytes)
      list.add(min_mem_reservation_bytes);

    boolean present_initial_mem_reservation_total_claims = true && (isSetInitial_mem_reservation_total_claims());
    list.add(present_initial_mem_reservation_total_claims);
    if (present_initial_mem_reservation_total_claims)
      list.add(initial_mem_reservation_total_claims);

    boolean present_runtime_filters_reservation_bytes = true && (isSetRuntime_filters_reservation_bytes());
    list.add(present_runtime_filters_reservation_bytes);
    if (present_runtime_filters_reservation_bytes)
      list.add(runtime_filters_reservation_bytes);

    boolean present_thread_reservation = true && (isSetThread_reservation());
    list.add(present_thread_reservation);
    if (present_thread_reservation)
      list.add(thread_reservation);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlanFragment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIdx()).compareTo(other.isSetIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idx, other.idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplay_name()).compareTo(other.isSetDisplay_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display_name, other.display_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlan()).compareTo(other.isSetPlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan, other.plan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput_sink()).compareTo(other.isSetOutput_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_sink, other.output_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition()).compareTo(other.isSetPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, other.partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_mem_reservation_bytes()).compareTo(other.isSetMin_mem_reservation_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_mem_reservation_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_mem_reservation_bytes, other.min_mem_reservation_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitial_mem_reservation_total_claims()).compareTo(other.isSetInitial_mem_reservation_total_claims());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitial_mem_reservation_total_claims()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initial_mem_reservation_total_claims, other.initial_mem_reservation_total_claims);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_filters_reservation_bytes()).compareTo(other.isSetRuntime_filters_reservation_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filters_reservation_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filters_reservation_bytes, other.runtime_filters_reservation_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThread_reservation()).compareTo(other.isSetThread_reservation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThread_reservation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thread_reservation, other.thread_reservation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanFragment(");
    boolean first = true;

    sb.append("idx:");
    sb.append(this.idx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("display_name:");
    if (this.display_name == null) {
      sb.append("null");
    } else {
      sb.append(this.display_name);
    }
    first = false;
    if (isSetPlan()) {
      if (!first) sb.append(", ");
      sb.append("plan:");
      if (this.plan == null) {
        sb.append("null");
      } else {
        sb.append(this.plan);
      }
      first = false;
    }
    if (isSetOutput_sink()) {
      if (!first) sb.append(", ");
      sb.append("output_sink:");
      if (this.output_sink == null) {
        sb.append("null");
      } else {
        sb.append(this.output_sink);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("partition:");
    if (this.partition == null) {
      sb.append("null");
    } else {
      sb.append(this.partition);
    }
    first = false;
    if (isSetMin_mem_reservation_bytes()) {
      if (!first) sb.append(", ");
      sb.append("min_mem_reservation_bytes:");
      sb.append(this.min_mem_reservation_bytes);
      first = false;
    }
    if (isSetInitial_mem_reservation_total_claims()) {
      if (!first) sb.append(", ");
      sb.append("initial_mem_reservation_total_claims:");
      sb.append(this.initial_mem_reservation_total_claims);
      first = false;
    }
    if (isSetRuntime_filters_reservation_bytes()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filters_reservation_bytes:");
      sb.append(this.runtime_filters_reservation_bytes);
      first = false;
    }
    if (isSetThread_reservation()) {
      if (!first) sb.append(", ");
      sb.append("thread_reservation:");
      sb.append(this.thread_reservation);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'idx' because it's a primitive and you chose the non-beans generator.
    if (display_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'display_name' was not present! Struct: " + toString());
    }
    if (partition == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (plan != null) {
      plan.validate();
    }
    if (output_sink != null) {
      output_sink.validate();
    }
    if (partition != null) {
      partition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentStandardSchemeFactory implements SchemeFactory {
    public TPlanFragmentStandardScheme getScheme() {
      return new TPlanFragmentStandardScheme();
    }
  }

  private static class TPlanFragmentStandardScheme extends StandardScheme<TPlanFragment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idx = iprot.readI32();
              struct.setIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.display_name = iprot.readString();
              struct.setDisplay_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.plan = new org.apache.impala.thrift.TPlan();
              struct.plan.read(iprot);
              struct.setPlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTPUT_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.output_sink = new org.apache.impala.thrift.TDataSink();
              struct.output_sink.read(iprot);
              struct.setOutput_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition = new org.apache.impala.thrift.TDataPartition();
              struct.partition.read(iprot);
              struct.setPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MIN_MEM_RESERVATION_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_mem_reservation_bytes = iprot.readI64();
              struct.setMin_mem_reservation_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INITIAL_MEM_RESERVATION_TOTAL_CLAIMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.initial_mem_reservation_total_claims = iprot.readI64();
              struct.setInitial_mem_reservation_total_claimsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RUNTIME_FILTERS_RESERVATION_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.runtime_filters_reservation_bytes = iprot.readI64();
              struct.setRuntime_filters_reservation_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // THREAD_RESERVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.thread_reservation = iprot.readI64();
              struct.setThread_reservationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIdx()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'idx' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IDX_FIELD_DESC);
      oprot.writeI32(struct.idx);
      oprot.writeFieldEnd();
      if (struct.display_name != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.display_name);
        oprot.writeFieldEnd();
      }
      if (struct.plan != null) {
        if (struct.isSetPlan()) {
          oprot.writeFieldBegin(PLAN_FIELD_DESC);
          struct.plan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.output_sink != null) {
        if (struct.isSetOutput_sink()) {
          oprot.writeFieldBegin(OUTPUT_SINK_FIELD_DESC);
          struct.output_sink.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition != null) {
        oprot.writeFieldBegin(PARTITION_FIELD_DESC);
        struct.partition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMin_mem_reservation_bytes()) {
        oprot.writeFieldBegin(MIN_MEM_RESERVATION_BYTES_FIELD_DESC);
        oprot.writeI64(struct.min_mem_reservation_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInitial_mem_reservation_total_claims()) {
        oprot.writeFieldBegin(INITIAL_MEM_RESERVATION_TOTAL_CLAIMS_FIELD_DESC);
        oprot.writeI64(struct.initial_mem_reservation_total_claims);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_filters_reservation_bytes()) {
        oprot.writeFieldBegin(RUNTIME_FILTERS_RESERVATION_BYTES_FIELD_DESC);
        oprot.writeI64(struct.runtime_filters_reservation_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThread_reservation()) {
        oprot.writeFieldBegin(THREAD_RESERVATION_FIELD_DESC);
        oprot.writeI64(struct.thread_reservation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentTupleSchemeFactory implements SchemeFactory {
    public TPlanFragmentTupleScheme getScheme() {
      return new TPlanFragmentTupleScheme();
    }
  }

  private static class TPlanFragmentTupleScheme extends TupleScheme<TPlanFragment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.idx);
      oprot.writeString(struct.display_name);
      struct.partition.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetPlan()) {
        optionals.set(0);
      }
      if (struct.isSetOutput_sink()) {
        optionals.set(1);
      }
      if (struct.isSetMin_mem_reservation_bytes()) {
        optionals.set(2);
      }
      if (struct.isSetInitial_mem_reservation_total_claims()) {
        optionals.set(3);
      }
      if (struct.isSetRuntime_filters_reservation_bytes()) {
        optionals.set(4);
      }
      if (struct.isSetThread_reservation()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPlan()) {
        struct.plan.write(oprot);
      }
      if (struct.isSetOutput_sink()) {
        struct.output_sink.write(oprot);
      }
      if (struct.isSetMin_mem_reservation_bytes()) {
        oprot.writeI64(struct.min_mem_reservation_bytes);
      }
      if (struct.isSetInitial_mem_reservation_total_claims()) {
        oprot.writeI64(struct.initial_mem_reservation_total_claims);
      }
      if (struct.isSetRuntime_filters_reservation_bytes()) {
        oprot.writeI64(struct.runtime_filters_reservation_bytes);
      }
      if (struct.isSetThread_reservation()) {
        oprot.writeI64(struct.thread_reservation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.idx = iprot.readI32();
      struct.setIdxIsSet(true);
      struct.display_name = iprot.readString();
      struct.setDisplay_nameIsSet(true);
      struct.partition = new org.apache.impala.thrift.TDataPartition();
      struct.partition.read(iprot);
      struct.setPartitionIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.plan = new org.apache.impala.thrift.TPlan();
        struct.plan.read(iprot);
        struct.setPlanIsSet(true);
      }
      if (incoming.get(1)) {
        struct.output_sink = new org.apache.impala.thrift.TDataSink();
        struct.output_sink.read(iprot);
        struct.setOutput_sinkIsSet(true);
      }
      if (incoming.get(2)) {
        struct.min_mem_reservation_bytes = iprot.readI64();
        struct.setMin_mem_reservation_bytesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.initial_mem_reservation_total_claims = iprot.readI64();
        struct.setInitial_mem_reservation_total_claimsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.runtime_filters_reservation_bytes = iprot.readI64();
        struct.setRuntime_filters_reservation_bytesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.thread_reservation = iprot.readI64();
        struct.setThread_reservationIsSet(true);
      }
    }
  }

}

