/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TDdlExecResponse implements org.apache.thrift.TBase<TDdlExecResponse, TDdlExecResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TDdlExecResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDdlExecResponse");

  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_TABLE_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("new_table_created", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("result_set", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TABLE_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_create_time", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDdlExecResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDdlExecResponseTupleSchemeFactory());
  }

  private TCatalogUpdateResult result; // required
  private boolean new_table_created; // optional
  private org.apache.impala.thrift.TResultSet result_set; // optional
  private String table_name; // optional
  private long table_create_time; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT((short)1, "result"),
    NEW_TABLE_CREATED((short)2, "new_table_created"),
    RESULT_SET((short)3, "result_set"),
    TABLE_NAME((short)4, "table_name"),
    TABLE_CREATE_TIME((short)5, "table_create_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
          return RESULT;
        case 2: // NEW_TABLE_CREATED
          return NEW_TABLE_CREATED;
        case 3: // RESULT_SET
          return RESULT_SET;
        case 4: // TABLE_NAME
          return TABLE_NAME;
        case 5: // TABLE_CREATE_TIME
          return TABLE_CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEW_TABLE_CREATED_ISSET_ID = 0;
  private static final int __TABLE_CREATE_TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NEW_TABLE_CREATED,_Fields.RESULT_SET,_Fields.TABLE_NAME,_Fields.TABLE_CREATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCatalogUpdateResult.class)));
    tmpMap.put(_Fields.NEW_TABLE_CREATED, new org.apache.thrift.meta_data.FieldMetaData("new_table_created", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESULT_SET, new org.apache.thrift.meta_data.FieldMetaData("result_set", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TResultSet.class)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("table_create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDdlExecResponse.class, metaDataMap);
  }

  public TDdlExecResponse() {
  }

  public TDdlExecResponse(
    TCatalogUpdateResult result)
  {
    this();
    this.result = result;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDdlExecResponse(TDdlExecResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResult()) {
      this.result = new TCatalogUpdateResult(other.result);
    }
    this.new_table_created = other.new_table_created;
    if (other.isSetResult_set()) {
      this.result_set = new org.apache.impala.thrift.TResultSet(other.result_set);
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    this.table_create_time = other.table_create_time;
  }

  public TDdlExecResponse deepCopy() {
    return new TDdlExecResponse(this);
  }

  @Override
  public void clear() {
    this.result = null;
    setNew_table_createdIsSet(false);
    this.new_table_created = false;
    this.result_set = null;
    this.table_name = null;
    setTable_create_timeIsSet(false);
    this.table_create_time = 0;
  }

  public TCatalogUpdateResult getResult() {
    return this.result;
  }

  public void setResult(TCatalogUpdateResult result) {
    this.result = result;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public boolean isNew_table_created() {
    return this.new_table_created;
  }

  public void setNew_table_created(boolean new_table_created) {
    this.new_table_created = new_table_created;
    setNew_table_createdIsSet(true);
  }

  public void unsetNew_table_created() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEW_TABLE_CREATED_ISSET_ID);
  }

  /** Returns true if field new_table_created is set (has been assigned a value) and false otherwise */
  public boolean isSetNew_table_created() {
    return EncodingUtils.testBit(__isset_bitfield, __NEW_TABLE_CREATED_ISSET_ID);
  }

  public void setNew_table_createdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEW_TABLE_CREATED_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TResultSet getResult_set() {
    return this.result_set;
  }

  public void setResult_set(org.apache.impala.thrift.TResultSet result_set) {
    this.result_set = result_set;
  }

  public void unsetResult_set() {
    this.result_set = null;
  }

  /** Returns true if field result_set is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_set() {
    return this.result_set != null;
  }

  public void setResult_setIsSet(boolean value) {
    if (!value) {
      this.result_set = null;
    }
  }

  public String getTable_name() {
    return this.table_name;
  }

  public void setTable_name(String table_name) {
    this.table_name = table_name;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public long getTable_create_time() {
    return this.table_create_time;
  }

  public void setTable_create_time(long table_create_time) {
    this.table_create_time = table_create_time;
    setTable_create_timeIsSet(true);
  }

  public void unsetTable_create_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TABLE_CREATE_TIME_ISSET_ID);
  }

  /** Returns true if field table_create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_create_time() {
    return EncodingUtils.testBit(__isset_bitfield, __TABLE_CREATE_TIME_ISSET_ID);
  }

  public void setTable_create_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TABLE_CREATE_TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((TCatalogUpdateResult)value);
      }
      break;

    case NEW_TABLE_CREATED:
      if (value == null) {
        unsetNew_table_created();
      } else {
        setNew_table_created((Boolean)value);
      }
      break;

    case RESULT_SET:
      if (value == null) {
        unsetResult_set();
      } else {
        setResult_set((org.apache.impala.thrift.TResultSet)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((String)value);
      }
      break;

    case TABLE_CREATE_TIME:
      if (value == null) {
        unsetTable_create_time();
      } else {
        setTable_create_time((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return getResult();

    case NEW_TABLE_CREATED:
      return isNew_table_created();

    case RESULT_SET:
      return getResult_set();

    case TABLE_NAME:
      return getTable_name();

    case TABLE_CREATE_TIME:
      return getTable_create_time();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case NEW_TABLE_CREATED:
      return isSetNew_table_created();
    case RESULT_SET:
      return isSetResult_set();
    case TABLE_NAME:
      return isSetTable_name();
    case TABLE_CREATE_TIME:
      return isSetTable_create_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDdlExecResponse)
      return this.equals((TDdlExecResponse)that);
    return false;
  }

  public boolean equals(TDdlExecResponse that) {
    if (that == null)
      return false;

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_new_table_created = true && this.isSetNew_table_created();
    boolean that_present_new_table_created = true && that.isSetNew_table_created();
    if (this_present_new_table_created || that_present_new_table_created) {
      if (!(this_present_new_table_created && that_present_new_table_created))
        return false;
      if (this.new_table_created != that.new_table_created)
        return false;
    }

    boolean this_present_result_set = true && this.isSetResult_set();
    boolean that_present_result_set = true && that.isSetResult_set();
    if (this_present_result_set || that_present_result_set) {
      if (!(this_present_result_set && that_present_result_set))
        return false;
      if (!this.result_set.equals(that.result_set))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_table_create_time = true && this.isSetTable_create_time();
    boolean that_present_table_create_time = true && that.isSetTable_create_time();
    if (this_present_table_create_time || that_present_table_create_time) {
      if (!(this_present_table_create_time && that_present_table_create_time))
        return false;
      if (this.table_create_time != that.table_create_time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_new_table_created = true && (isSetNew_table_created());
    list.add(present_new_table_created);
    if (present_new_table_created)
      list.add(new_table_created);

    boolean present_result_set = true && (isSetResult_set());
    list.add(present_result_set);
    if (present_result_set)
      list.add(result_set);

    boolean present_table_name = true && (isSetTable_name());
    list.add(present_table_name);
    if (present_table_name)
      list.add(table_name);

    boolean present_table_create_time = true && (isSetTable_create_time());
    list.add(present_table_create_time);
    if (present_table_create_time)
      list.add(table_create_time);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDdlExecResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNew_table_created()).compareTo(other.isSetNew_table_created());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNew_table_created()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_table_created, other.new_table_created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_set()).compareTo(other.isSetResult_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_set, other.result_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_create_time()).compareTo(other.isSetTable_create_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_create_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_create_time, other.table_create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDdlExecResponse(");
    boolean first = true;

    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (isSetNew_table_created()) {
      if (!first) sb.append(", ");
      sb.append("new_table_created:");
      sb.append(this.new_table_created);
      first = false;
    }
    if (isSetResult_set()) {
      if (!first) sb.append(", ");
      sb.append("result_set:");
      if (this.result_set == null) {
        sb.append("null");
      } else {
        sb.append(this.result_set);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetTable_create_time()) {
      if (!first) sb.append(", ");
      sb.append("table_create_time:");
      sb.append(this.table_create_time);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetResult()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'result' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (result != null) {
      result.validate();
    }
    if (result_set != null) {
      result_set.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDdlExecResponseStandardSchemeFactory implements SchemeFactory {
    public TDdlExecResponseStandardScheme getScheme() {
      return new TDdlExecResponseStandardScheme();
    }
  }

  private static class TDdlExecResponseStandardScheme extends StandardScheme<TDdlExecResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDdlExecResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result = new TCatalogUpdateResult();
              struct.result.read(iprot);
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_TABLE_CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.new_table_created = iprot.readBool();
              struct.setNew_table_createdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_set = new org.apache.impala.thrift.TResultSet();
              struct.result_set.read(iprot);
              struct.setResult_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TABLE_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_create_time = iprot.readI64();
              struct.setTable_create_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDdlExecResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        struct.result.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNew_table_created()) {
        oprot.writeFieldBegin(NEW_TABLE_CREATED_FIELD_DESC);
        oprot.writeBool(struct.new_table_created);
        oprot.writeFieldEnd();
      }
      if (struct.result_set != null) {
        if (struct.isSetResult_set()) {
          oprot.writeFieldBegin(RESULT_SET_FIELD_DESC);
          struct.result_set.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTable_create_time()) {
        oprot.writeFieldBegin(TABLE_CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.table_create_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDdlExecResponseTupleSchemeFactory implements SchemeFactory {
    public TDdlExecResponseTupleScheme getScheme() {
      return new TDdlExecResponseTupleScheme();
    }
  }

  private static class TDdlExecResponseTupleScheme extends TupleScheme<TDdlExecResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDdlExecResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.result.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetNew_table_created()) {
        optionals.set(0);
      }
      if (struct.isSetResult_set()) {
        optionals.set(1);
      }
      if (struct.isSetTable_name()) {
        optionals.set(2);
      }
      if (struct.isSetTable_create_time()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNew_table_created()) {
        oprot.writeBool(struct.new_table_created);
      }
      if (struct.isSetResult_set()) {
        struct.result_set.write(oprot);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetTable_create_time()) {
        oprot.writeI64(struct.table_create_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDdlExecResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.result = new TCatalogUpdateResult();
      struct.result.read(iprot);
      struct.setResultIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.new_table_created = iprot.readBool();
        struct.setNew_table_createdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.result_set = new org.apache.impala.thrift.TResultSet();
        struct.result_set.read(iprot);
        struct.setResult_setIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.table_create_time = iprot.readI64();
        struct.setTable_create_timeIsSet(true);
      }
    }
  }

}

