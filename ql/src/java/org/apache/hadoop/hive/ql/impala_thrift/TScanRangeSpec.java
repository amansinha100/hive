/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TScanRangeSpec implements org.apache.thrift.TBase<TScanRangeSpec, TScanRangeSpec._Fields>, java.io.Serializable, Cloneable, Comparable<TScanRangeSpec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TScanRangeSpec");

  private static final org.apache.thrift.protocol.TField CONCRETE_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("concrete_ranges", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SPLIT_SPECS_FIELD_DESC = new org.apache.thrift.protocol.TField("split_specs", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TScanRangeSpecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TScanRangeSpecTupleSchemeFactory());
  }

  public List<TScanRangeLocationList> concrete_ranges; // optional
  public List<org.apache.impala.thrift.TFileSplitGeneratorSpec> split_specs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONCRETE_RANGES((short)1, "concrete_ranges"),
    SPLIT_SPECS((short)2, "split_specs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONCRETE_RANGES
          return CONCRETE_RANGES;
        case 2: // SPLIT_SPECS
          return SPLIT_SPECS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CONCRETE_RANGES,_Fields.SPLIT_SPECS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONCRETE_RANGES, new org.apache.thrift.meta_data.FieldMetaData("concrete_ranges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TScanRangeLocationList.class))));
    tmpMap.put(_Fields.SPLIT_SPECS, new org.apache.thrift.meta_data.FieldMetaData("split_specs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TFileSplitGeneratorSpec.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TScanRangeSpec.class, metaDataMap);
  }

  public TScanRangeSpec() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TScanRangeSpec(TScanRangeSpec other) {
    if (other.isSetConcrete_ranges()) {
      List<TScanRangeLocationList> __this__concrete_ranges = new ArrayList<TScanRangeLocationList>(other.concrete_ranges.size());
      for (TScanRangeLocationList other_element : other.concrete_ranges) {
        __this__concrete_ranges.add(new TScanRangeLocationList(other_element));
      }
      this.concrete_ranges = __this__concrete_ranges;
    }
    if (other.isSetSplit_specs()) {
      List<org.apache.impala.thrift.TFileSplitGeneratorSpec> __this__split_specs = new ArrayList<org.apache.impala.thrift.TFileSplitGeneratorSpec>(other.split_specs.size());
      for (org.apache.impala.thrift.TFileSplitGeneratorSpec other_element : other.split_specs) {
        __this__split_specs.add(new org.apache.impala.thrift.TFileSplitGeneratorSpec(other_element));
      }
      this.split_specs = __this__split_specs;
    }
  }

  public TScanRangeSpec deepCopy() {
    return new TScanRangeSpec(this);
  }

  @Override
  public void clear() {
    this.concrete_ranges = null;
    this.split_specs = null;
  }

  public int getConcrete_rangesSize() {
    return (this.concrete_ranges == null) ? 0 : this.concrete_ranges.size();
  }

  public java.util.Iterator<TScanRangeLocationList> getConcrete_rangesIterator() {
    return (this.concrete_ranges == null) ? null : this.concrete_ranges.iterator();
  }

  public void addToConcrete_ranges(TScanRangeLocationList elem) {
    if (this.concrete_ranges == null) {
      this.concrete_ranges = new ArrayList<TScanRangeLocationList>();
    }
    this.concrete_ranges.add(elem);
  }

  public List<TScanRangeLocationList> getConcrete_ranges() {
    return this.concrete_ranges;
  }

  public TScanRangeSpec setConcrete_ranges(List<TScanRangeLocationList> concrete_ranges) {
    this.concrete_ranges = concrete_ranges;
    return this;
  }

  public void unsetConcrete_ranges() {
    this.concrete_ranges = null;
  }

  /** Returns true if field concrete_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetConcrete_ranges() {
    return this.concrete_ranges != null;
  }

  public void setConcrete_rangesIsSet(boolean value) {
    if (!value) {
      this.concrete_ranges = null;
    }
  }

  public int getSplit_specsSize() {
    return (this.split_specs == null) ? 0 : this.split_specs.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TFileSplitGeneratorSpec> getSplit_specsIterator() {
    return (this.split_specs == null) ? null : this.split_specs.iterator();
  }

  public void addToSplit_specs(org.apache.impala.thrift.TFileSplitGeneratorSpec elem) {
    if (this.split_specs == null) {
      this.split_specs = new ArrayList<org.apache.impala.thrift.TFileSplitGeneratorSpec>();
    }
    this.split_specs.add(elem);
  }

  public List<org.apache.impala.thrift.TFileSplitGeneratorSpec> getSplit_specs() {
    return this.split_specs;
  }

  public TScanRangeSpec setSplit_specs(List<org.apache.impala.thrift.TFileSplitGeneratorSpec> split_specs) {
    this.split_specs = split_specs;
    return this;
  }

  public void unsetSplit_specs() {
    this.split_specs = null;
  }

  /** Returns true if field split_specs is set (has been assigned a value) and false otherwise */
  public boolean isSetSplit_specs() {
    return this.split_specs != null;
  }

  public void setSplit_specsIsSet(boolean value) {
    if (!value) {
      this.split_specs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONCRETE_RANGES:
      if (value == null) {
        unsetConcrete_ranges();
      } else {
        setConcrete_ranges((List<TScanRangeLocationList>)value);
      }
      break;

    case SPLIT_SPECS:
      if (value == null) {
        unsetSplit_specs();
      } else {
        setSplit_specs((List<org.apache.impala.thrift.TFileSplitGeneratorSpec>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONCRETE_RANGES:
      return getConcrete_ranges();

    case SPLIT_SPECS:
      return getSplit_specs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONCRETE_RANGES:
      return isSetConcrete_ranges();
    case SPLIT_SPECS:
      return isSetSplit_specs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TScanRangeSpec)
      return this.equals((TScanRangeSpec)that);
    return false;
  }

  public boolean equals(TScanRangeSpec that) {
    if (that == null)
      return false;

    boolean this_present_concrete_ranges = true && this.isSetConcrete_ranges();
    boolean that_present_concrete_ranges = true && that.isSetConcrete_ranges();
    if (this_present_concrete_ranges || that_present_concrete_ranges) {
      if (!(this_present_concrete_ranges && that_present_concrete_ranges))
        return false;
      if (!this.concrete_ranges.equals(that.concrete_ranges))
        return false;
    }

    boolean this_present_split_specs = true && this.isSetSplit_specs();
    boolean that_present_split_specs = true && that.isSetSplit_specs();
    if (this_present_split_specs || that_present_split_specs) {
      if (!(this_present_split_specs && that_present_split_specs))
        return false;
      if (!this.split_specs.equals(that.split_specs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_concrete_ranges = true && (isSetConcrete_ranges());
    list.add(present_concrete_ranges);
    if (present_concrete_ranges)
      list.add(concrete_ranges);

    boolean present_split_specs = true && (isSetSplit_specs());
    list.add(present_split_specs);
    if (present_split_specs)
      list.add(split_specs);

    return list.hashCode();
  }

  @Override
  public int compareTo(TScanRangeSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConcrete_ranges()).compareTo(other.isSetConcrete_ranges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConcrete_ranges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concrete_ranges, other.concrete_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSplit_specs()).compareTo(other.isSetSplit_specs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplit_specs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.split_specs, other.split_specs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TScanRangeSpec(");
    boolean first = true;

    if (isSetConcrete_ranges()) {
      sb.append("concrete_ranges:");
      if (this.concrete_ranges == null) {
        sb.append("null");
      } else {
        sb.append(this.concrete_ranges);
      }
      first = false;
    }
    if (isSetSplit_specs()) {
      if (!first) sb.append(", ");
      sb.append("split_specs:");
      if (this.split_specs == null) {
        sb.append("null");
      } else {
        sb.append(this.split_specs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TScanRangeSpecStandardSchemeFactory implements SchemeFactory {
    public TScanRangeSpecStandardScheme getScheme() {
      return new TScanRangeSpecStandardScheme();
    }
  }

  private static class TScanRangeSpecStandardScheme extends StandardScheme<TScanRangeSpec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TScanRangeSpec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONCRETE_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.concrete_ranges = new ArrayList<TScanRangeLocationList>(_list8.size);
                TScanRangeLocationList _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TScanRangeLocationList();
                  _elem9.read(iprot);
                  struct.concrete_ranges.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setConcrete_rangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPLIT_SPECS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.split_specs = new ArrayList<org.apache.impala.thrift.TFileSplitGeneratorSpec>(_list11.size);
                org.apache.impala.thrift.TFileSplitGeneratorSpec _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new org.apache.impala.thrift.TFileSplitGeneratorSpec();
                  _elem12.read(iprot);
                  struct.split_specs.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setSplit_specsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TScanRangeSpec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.concrete_ranges != null) {
        if (struct.isSetConcrete_ranges()) {
          oprot.writeFieldBegin(CONCRETE_RANGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.concrete_ranges.size()));
            for (TScanRangeLocationList _iter14 : struct.concrete_ranges)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.split_specs != null) {
        if (struct.isSetSplit_specs()) {
          oprot.writeFieldBegin(SPLIT_SPECS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.split_specs.size()));
            for (org.apache.impala.thrift.TFileSplitGeneratorSpec _iter15 : struct.split_specs)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TScanRangeSpecTupleSchemeFactory implements SchemeFactory {
    public TScanRangeSpecTupleScheme getScheme() {
      return new TScanRangeSpecTupleScheme();
    }
  }

  private static class TScanRangeSpecTupleScheme extends TupleScheme<TScanRangeSpec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TScanRangeSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConcrete_ranges()) {
        optionals.set(0);
      }
      if (struct.isSetSplit_specs()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetConcrete_ranges()) {
        {
          oprot.writeI32(struct.concrete_ranges.size());
          for (TScanRangeLocationList _iter16 : struct.concrete_ranges)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetSplit_specs()) {
        {
          oprot.writeI32(struct.split_specs.size());
          for (org.apache.impala.thrift.TFileSplitGeneratorSpec _iter17 : struct.split_specs)
          {
            _iter17.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TScanRangeSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.concrete_ranges = new ArrayList<TScanRangeLocationList>(_list18.size);
          TScanRangeLocationList _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new TScanRangeLocationList();
            _elem19.read(iprot);
            struct.concrete_ranges.add(_elem19);
          }
        }
        struct.setConcrete_rangesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.split_specs = new ArrayList<org.apache.impala.thrift.TFileSplitGeneratorSpec>(_list21.size);
          org.apache.impala.thrift.TFileSplitGeneratorSpec _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new org.apache.impala.thrift.TFileSplitGeneratorSpec();
            _elem22.read(iprot);
            struct.split_specs.add(_elem22);
          }
        }
        struct.setSplit_specsIsSet(true);
      }
    }
  }

}

