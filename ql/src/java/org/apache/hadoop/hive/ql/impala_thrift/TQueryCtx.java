/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TQueryCtx implements org.apache.thrift.TBase<TQueryCtx, TQueryCtx._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryCtx> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryCtx");

  private static final org.apache.thrift.protocol.TField CLIENT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("client_request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField NOW_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("now_string", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COORD_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("coord_address", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField COORD_KRPC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("coord_krpc_address", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TABLES_MISSING_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("tables_missing_stats", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DISABLE_SPILLING_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_spilling", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField PARENT_QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_query_id", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField TABLES_WITH_CORRUPT_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("tables_with_corrupt_stats", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_timestamp", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField DESC_TBL_TESTONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl_testonly", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField DESC_TBL_SERIALIZED_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl_serialized", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField START_UNIX_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("start_unix_millis", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField DISABLE_CODEGEN_HINT_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_codegen_hint", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField TABLES_MISSING_DISKIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tables_missing_diskids", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField REQUEST_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("request_pool", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField UTC_TIMESTAMP_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("utc_timestamp_string", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField LOCAL_TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("local_time_zone", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DISABLE_HBASE_NUM_ROWS_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_hbase_num_rows_estimate", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField TRACE_RESOURCE_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("trace_resource_usage", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField STATUS_REPORT_INTERVAL_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("status_report_interval_ms", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField STATUS_REPORT_MAX_RETRY_S_FIELD_DESC = new org.apache.thrift.protocol.TField("status_report_max_retry_s", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction_id", org.apache.thrift.protocol.TType.I64, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueryCtxStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueryCtxTupleSchemeFactory());
  }

  public TClientRequest client_request; // required
  public org.apache.impala.thrift.TUniqueId query_id; // required
  public TSessionState session; // required
  public String now_string; // required
  public int pid; // required
  public org.apache.impala.thrift.TNetworkAddress coord_address; // optional
  public org.apache.impala.thrift.TNetworkAddress coord_krpc_address; // optional
  public List<org.apache.impala.thrift.TTableName> tables_missing_stats; // optional
  public boolean disable_spilling; // optional
  public org.apache.impala.thrift.TUniqueId parent_query_id; // optional
  public List<org.apache.impala.thrift.TTableName> tables_with_corrupt_stats; // optional
  public long snapshot_timestamp; // optional
  public org.apache.impala.thrift.TDescriptorTable desc_tbl_testonly; // optional
  public org.apache.impala.thrift.TDescriptorTableSerialized desc_tbl_serialized; // optional
  public long start_unix_millis; // required
  public boolean disable_codegen_hint; // optional
  public List<org.apache.impala.thrift.TTableName> tables_missing_diskids; // optional
  public String request_pool; // optional
  public String utc_timestamp_string; // required
  public String local_time_zone; // required
  public boolean disable_hbase_num_rows_estimate; // optional
  public boolean trace_resource_usage; // required
  public int status_report_interval_ms; // optional
  public int status_report_max_retry_s; // optional
  public long transaction_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_REQUEST((short)1, "client_request"),
    QUERY_ID((short)2, "query_id"),
    SESSION((short)3, "session"),
    NOW_STRING((short)4, "now_string"),
    PID((short)5, "pid"),
    COORD_ADDRESS((short)6, "coord_address"),
    COORD_KRPC_ADDRESS((short)7, "coord_krpc_address"),
    TABLES_MISSING_STATS((short)8, "tables_missing_stats"),
    DISABLE_SPILLING((short)9, "disable_spilling"),
    PARENT_QUERY_ID((short)10, "parent_query_id"),
    TABLES_WITH_CORRUPT_STATS((short)11, "tables_with_corrupt_stats"),
    SNAPSHOT_TIMESTAMP((short)12, "snapshot_timestamp"),
    DESC_TBL_TESTONLY((short)13, "desc_tbl_testonly"),
    DESC_TBL_SERIALIZED((short)24, "desc_tbl_serialized"),
    START_UNIX_MILLIS((short)14, "start_unix_millis"),
    DISABLE_CODEGEN_HINT((short)15, "disable_codegen_hint"),
    TABLES_MISSING_DISKIDS((short)16, "tables_missing_diskids"),
    REQUEST_POOL((short)17, "request_pool"),
    UTC_TIMESTAMP_STRING((short)18, "utc_timestamp_string"),
    LOCAL_TIME_ZONE((short)19, "local_time_zone"),
    DISABLE_HBASE_NUM_ROWS_ESTIMATE((short)20, "disable_hbase_num_rows_estimate"),
    TRACE_RESOURCE_USAGE((short)21, "trace_resource_usage"),
    STATUS_REPORT_INTERVAL_MS((short)22, "status_report_interval_ms"),
    STATUS_REPORT_MAX_RETRY_S((short)23, "status_report_max_retry_s"),
    TRANSACTION_ID((short)25, "transaction_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_REQUEST
          return CLIENT_REQUEST;
        case 2: // QUERY_ID
          return QUERY_ID;
        case 3: // SESSION
          return SESSION;
        case 4: // NOW_STRING
          return NOW_STRING;
        case 5: // PID
          return PID;
        case 6: // COORD_ADDRESS
          return COORD_ADDRESS;
        case 7: // COORD_KRPC_ADDRESS
          return COORD_KRPC_ADDRESS;
        case 8: // TABLES_MISSING_STATS
          return TABLES_MISSING_STATS;
        case 9: // DISABLE_SPILLING
          return DISABLE_SPILLING;
        case 10: // PARENT_QUERY_ID
          return PARENT_QUERY_ID;
        case 11: // TABLES_WITH_CORRUPT_STATS
          return TABLES_WITH_CORRUPT_STATS;
        case 12: // SNAPSHOT_TIMESTAMP
          return SNAPSHOT_TIMESTAMP;
        case 13: // DESC_TBL_TESTONLY
          return DESC_TBL_TESTONLY;
        case 24: // DESC_TBL_SERIALIZED
          return DESC_TBL_SERIALIZED;
        case 14: // START_UNIX_MILLIS
          return START_UNIX_MILLIS;
        case 15: // DISABLE_CODEGEN_HINT
          return DISABLE_CODEGEN_HINT;
        case 16: // TABLES_MISSING_DISKIDS
          return TABLES_MISSING_DISKIDS;
        case 17: // REQUEST_POOL
          return REQUEST_POOL;
        case 18: // UTC_TIMESTAMP_STRING
          return UTC_TIMESTAMP_STRING;
        case 19: // LOCAL_TIME_ZONE
          return LOCAL_TIME_ZONE;
        case 20: // DISABLE_HBASE_NUM_ROWS_ESTIMATE
          return DISABLE_HBASE_NUM_ROWS_ESTIMATE;
        case 21: // TRACE_RESOURCE_USAGE
          return TRACE_RESOURCE_USAGE;
        case 22: // STATUS_REPORT_INTERVAL_MS
          return STATUS_REPORT_INTERVAL_MS;
        case 23: // STATUS_REPORT_MAX_RETRY_S
          return STATUS_REPORT_MAX_RETRY_S;
        case 25: // TRANSACTION_ID
          return TRANSACTION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __DISABLE_SPILLING_ISSET_ID = 1;
  private static final int __SNAPSHOT_TIMESTAMP_ISSET_ID = 2;
  private static final int __START_UNIX_MILLIS_ISSET_ID = 3;
  private static final int __DISABLE_CODEGEN_HINT_ISSET_ID = 4;
  private static final int __DISABLE_HBASE_NUM_ROWS_ESTIMATE_ISSET_ID = 5;
  private static final int __TRACE_RESOURCE_USAGE_ISSET_ID = 6;
  private static final int __STATUS_REPORT_INTERVAL_MS_ISSET_ID = 7;
  private static final int __STATUS_REPORT_MAX_RETRY_S_ISSET_ID = 8;
  private static final int __TRANSACTION_ID_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COORD_ADDRESS,_Fields.COORD_KRPC_ADDRESS,_Fields.TABLES_MISSING_STATS,_Fields.DISABLE_SPILLING,_Fields.PARENT_QUERY_ID,_Fields.TABLES_WITH_CORRUPT_STATS,_Fields.SNAPSHOT_TIMESTAMP,_Fields.DESC_TBL_TESTONLY,_Fields.DESC_TBL_SERIALIZED,_Fields.DISABLE_CODEGEN_HINT,_Fields.TABLES_MISSING_DISKIDS,_Fields.REQUEST_POOL,_Fields.DISABLE_HBASE_NUM_ROWS_ESTIMATE,_Fields.STATUS_REPORT_INTERVAL_MS,_Fields.STATUS_REPORT_MAX_RETRY_S,_Fields.TRANSACTION_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("client_request", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClientRequest.class)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSessionState.class)));
    tmpMap.put(_Fields.NOW_STRING, new org.apache.thrift.meta_data.FieldMetaData("now_string", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COORD_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("coord_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.COORD_KRPC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("coord_krpc_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.TABLES_MISSING_STATS, new org.apache.thrift.meta_data.FieldMetaData("tables_missing_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class))));
    tmpMap.put(_Fields.DISABLE_SPILLING, new org.apache.thrift.meta_data.FieldMetaData("disable_spilling", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARENT_QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("parent_query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.TABLES_WITH_CORRUPT_STATS, new org.apache.thrift.meta_data.FieldMetaData("tables_with_corrupt_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class))));
    tmpMap.put(_Fields.SNAPSHOT_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("snapshot_timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DESC_TBL_TESTONLY, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl_testonly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.DESC_TBL_SERIALIZED, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl_serialized", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDescriptorTableSerialized.class)));
    tmpMap.put(_Fields.START_UNIX_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("start_unix_millis", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISABLE_CODEGEN_HINT, new org.apache.thrift.meta_data.FieldMetaData("disable_codegen_hint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TABLES_MISSING_DISKIDS, new org.apache.thrift.meta_data.FieldMetaData("tables_missing_diskids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class))));
    tmpMap.put(_Fields.REQUEST_POOL, new org.apache.thrift.meta_data.FieldMetaData("request_pool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UTC_TIMESTAMP_STRING, new org.apache.thrift.meta_data.FieldMetaData("utc_timestamp_string", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL_TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("local_time_zone", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISABLE_HBASE_NUM_ROWS_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("disable_hbase_num_rows_estimate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRACE_RESOURCE_USAGE, new org.apache.thrift.meta_data.FieldMetaData("trace_resource_usage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_REPORT_INTERVAL_MS, new org.apache.thrift.meta_data.FieldMetaData("status_report_interval_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS_REPORT_MAX_RETRY_S, new org.apache.thrift.meta_data.FieldMetaData("status_report_max_retry_s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transaction_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryCtx.class, metaDataMap);
  }

  public TQueryCtx() {
    this.snapshot_timestamp = -1L;

    this.disable_codegen_hint = false;

    this.disable_hbase_num_rows_estimate = false;

    this.trace_resource_usage = false;

  }

  public TQueryCtx(
    TClientRequest client_request,
    org.apache.impala.thrift.TUniqueId query_id,
    TSessionState session,
    String now_string,
    int pid,
    long start_unix_millis,
    String utc_timestamp_string,
    String local_time_zone,
    boolean trace_resource_usage)
  {
    this();
    this.client_request = client_request;
    this.query_id = query_id;
    this.session = session;
    this.now_string = now_string;
    this.pid = pid;
    setPidIsSet(true);
    this.start_unix_millis = start_unix_millis;
    setStart_unix_millisIsSet(true);
    this.utc_timestamp_string = utc_timestamp_string;
    this.local_time_zone = local_time_zone;
    this.trace_resource_usage = trace_resource_usage;
    setTrace_resource_usageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryCtx(TQueryCtx other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClient_request()) {
      this.client_request = new TClientRequest(other.client_request);
    }
    if (other.isSetQuery_id()) {
      this.query_id = new org.apache.impala.thrift.TUniqueId(other.query_id);
    }
    if (other.isSetSession()) {
      this.session = new TSessionState(other.session);
    }
    if (other.isSetNow_string()) {
      this.now_string = other.now_string;
    }
    this.pid = other.pid;
    if (other.isSetCoord_address()) {
      this.coord_address = new org.apache.impala.thrift.TNetworkAddress(other.coord_address);
    }
    if (other.isSetCoord_krpc_address()) {
      this.coord_krpc_address = new org.apache.impala.thrift.TNetworkAddress(other.coord_krpc_address);
    }
    if (other.isSetTables_missing_stats()) {
      List<org.apache.impala.thrift.TTableName> __this__tables_missing_stats = new ArrayList<org.apache.impala.thrift.TTableName>(other.tables_missing_stats.size());
      for (org.apache.impala.thrift.TTableName other_element : other.tables_missing_stats) {
        __this__tables_missing_stats.add(new org.apache.impala.thrift.TTableName(other_element));
      }
      this.tables_missing_stats = __this__tables_missing_stats;
    }
    this.disable_spilling = other.disable_spilling;
    if (other.isSetParent_query_id()) {
      this.parent_query_id = new org.apache.impala.thrift.TUniqueId(other.parent_query_id);
    }
    if (other.isSetTables_with_corrupt_stats()) {
      List<org.apache.impala.thrift.TTableName> __this__tables_with_corrupt_stats = new ArrayList<org.apache.impala.thrift.TTableName>(other.tables_with_corrupt_stats.size());
      for (org.apache.impala.thrift.TTableName other_element : other.tables_with_corrupt_stats) {
        __this__tables_with_corrupt_stats.add(new org.apache.impala.thrift.TTableName(other_element));
      }
      this.tables_with_corrupt_stats = __this__tables_with_corrupt_stats;
    }
    this.snapshot_timestamp = other.snapshot_timestamp;
    if (other.isSetDesc_tbl_testonly()) {
      this.desc_tbl_testonly = new org.apache.impala.thrift.TDescriptorTable(other.desc_tbl_testonly);
    }
    if (other.isSetDesc_tbl_serialized()) {
      this.desc_tbl_serialized = new org.apache.impala.thrift.TDescriptorTableSerialized(other.desc_tbl_serialized);
    }
    this.start_unix_millis = other.start_unix_millis;
    this.disable_codegen_hint = other.disable_codegen_hint;
    if (other.isSetTables_missing_diskids()) {
      List<org.apache.impala.thrift.TTableName> __this__tables_missing_diskids = new ArrayList<org.apache.impala.thrift.TTableName>(other.tables_missing_diskids.size());
      for (org.apache.impala.thrift.TTableName other_element : other.tables_missing_diskids) {
        __this__tables_missing_diskids.add(new org.apache.impala.thrift.TTableName(other_element));
      }
      this.tables_missing_diskids = __this__tables_missing_diskids;
    }
    if (other.isSetRequest_pool()) {
      this.request_pool = other.request_pool;
    }
    if (other.isSetUtc_timestamp_string()) {
      this.utc_timestamp_string = other.utc_timestamp_string;
    }
    if (other.isSetLocal_time_zone()) {
      this.local_time_zone = other.local_time_zone;
    }
    this.disable_hbase_num_rows_estimate = other.disable_hbase_num_rows_estimate;
    this.trace_resource_usage = other.trace_resource_usage;
    this.status_report_interval_ms = other.status_report_interval_ms;
    this.status_report_max_retry_s = other.status_report_max_retry_s;
    this.transaction_id = other.transaction_id;
  }

  public TQueryCtx deepCopy() {
    return new TQueryCtx(this);
  }

  @Override
  public void clear() {
    this.client_request = null;
    this.query_id = null;
    this.session = null;
    this.now_string = null;
    setPidIsSet(false);
    this.pid = 0;
    this.coord_address = null;
    this.coord_krpc_address = null;
    this.tables_missing_stats = null;
    setDisable_spillingIsSet(false);
    this.disable_spilling = false;
    this.parent_query_id = null;
    this.tables_with_corrupt_stats = null;
    this.snapshot_timestamp = -1L;

    this.desc_tbl_testonly = null;
    this.desc_tbl_serialized = null;
    setStart_unix_millisIsSet(false);
    this.start_unix_millis = 0;
    this.disable_codegen_hint = false;

    this.tables_missing_diskids = null;
    this.request_pool = null;
    this.utc_timestamp_string = null;
    this.local_time_zone = null;
    this.disable_hbase_num_rows_estimate = false;

    this.trace_resource_usage = false;

    setStatus_report_interval_msIsSet(false);
    this.status_report_interval_ms = 0;
    setStatus_report_max_retry_sIsSet(false);
    this.status_report_max_retry_s = 0;
    setTransaction_idIsSet(false);
    this.transaction_id = 0;
  }

  public TClientRequest getClient_request() {
    return this.client_request;
  }

  public TQueryCtx setClient_request(TClientRequest client_request) {
    this.client_request = client_request;
    return this;
  }

  public void unsetClient_request() {
    this.client_request = null;
  }

  /** Returns true if field client_request is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_request() {
    return this.client_request != null;
  }

  public void setClient_requestIsSet(boolean value) {
    if (!value) {
      this.client_request = null;
    }
  }

  public org.apache.impala.thrift.TUniqueId getQuery_id() {
    return this.query_id;
  }

  public TQueryCtx setQuery_id(org.apache.impala.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQuery_id() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_id() {
    return this.query_id != null;
  }

  public void setQuery_idIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  public TSessionState getSession() {
    return this.session;
  }

  public TQueryCtx setSession(TSessionState session) {
    this.session = session;
    return this;
  }

  public void unsetSession() {
    this.session = null;
  }

  /** Returns true if field session is set (has been assigned a value) and false otherwise */
  public boolean isSetSession() {
    return this.session != null;
  }

  public void setSessionIsSet(boolean value) {
    if (!value) {
      this.session = null;
    }
  }

  public String getNow_string() {
    return this.now_string;
  }

  public TQueryCtx setNow_string(String now_string) {
    this.now_string = now_string;
    return this;
  }

  public void unsetNow_string() {
    this.now_string = null;
  }

  /** Returns true if field now_string is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_string() {
    return this.now_string != null;
  }

  public void setNow_stringIsSet(boolean value) {
    if (!value) {
      this.now_string = null;
    }
  }

  public int getPid() {
    return this.pid;
  }

  public TQueryCtx setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TNetworkAddress getCoord_address() {
    return this.coord_address;
  }

  public TQueryCtx setCoord_address(org.apache.impala.thrift.TNetworkAddress coord_address) {
    this.coord_address = coord_address;
    return this;
  }

  public void unsetCoord_address() {
    this.coord_address = null;
  }

  /** Returns true if field coord_address is set (has been assigned a value) and false otherwise */
  public boolean isSetCoord_address() {
    return this.coord_address != null;
  }

  public void setCoord_addressIsSet(boolean value) {
    if (!value) {
      this.coord_address = null;
    }
  }

  public org.apache.impala.thrift.TNetworkAddress getCoord_krpc_address() {
    return this.coord_krpc_address;
  }

  public TQueryCtx setCoord_krpc_address(org.apache.impala.thrift.TNetworkAddress coord_krpc_address) {
    this.coord_krpc_address = coord_krpc_address;
    return this;
  }

  public void unsetCoord_krpc_address() {
    this.coord_krpc_address = null;
  }

  /** Returns true if field coord_krpc_address is set (has been assigned a value) and false otherwise */
  public boolean isSetCoord_krpc_address() {
    return this.coord_krpc_address != null;
  }

  public void setCoord_krpc_addressIsSet(boolean value) {
    if (!value) {
      this.coord_krpc_address = null;
    }
  }

  public int getTables_missing_statsSize() {
    return (this.tables_missing_stats == null) ? 0 : this.tables_missing_stats.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TTableName> getTables_missing_statsIterator() {
    return (this.tables_missing_stats == null) ? null : this.tables_missing_stats.iterator();
  }

  public void addToTables_missing_stats(org.apache.impala.thrift.TTableName elem) {
    if (this.tables_missing_stats == null) {
      this.tables_missing_stats = new ArrayList<org.apache.impala.thrift.TTableName>();
    }
    this.tables_missing_stats.add(elem);
  }

  public List<org.apache.impala.thrift.TTableName> getTables_missing_stats() {
    return this.tables_missing_stats;
  }

  public TQueryCtx setTables_missing_stats(List<org.apache.impala.thrift.TTableName> tables_missing_stats) {
    this.tables_missing_stats = tables_missing_stats;
    return this;
  }

  public void unsetTables_missing_stats() {
    this.tables_missing_stats = null;
  }

  /** Returns true if field tables_missing_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetTables_missing_stats() {
    return this.tables_missing_stats != null;
  }

  public void setTables_missing_statsIsSet(boolean value) {
    if (!value) {
      this.tables_missing_stats = null;
    }
  }

  public boolean isDisable_spilling() {
    return this.disable_spilling;
  }

  public TQueryCtx setDisable_spilling(boolean disable_spilling) {
    this.disable_spilling = disable_spilling;
    setDisable_spillingIsSet(true);
    return this;
  }

  public void unsetDisable_spilling() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLE_SPILLING_ISSET_ID);
  }

  /** Returns true if field disable_spilling is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_spilling() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLE_SPILLING_ISSET_ID);
  }

  public void setDisable_spillingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLE_SPILLING_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TUniqueId getParent_query_id() {
    return this.parent_query_id;
  }

  public TQueryCtx setParent_query_id(org.apache.impala.thrift.TUniqueId parent_query_id) {
    this.parent_query_id = parent_query_id;
    return this;
  }

  public void unsetParent_query_id() {
    this.parent_query_id = null;
  }

  /** Returns true if field parent_query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetParent_query_id() {
    return this.parent_query_id != null;
  }

  public void setParent_query_idIsSet(boolean value) {
    if (!value) {
      this.parent_query_id = null;
    }
  }

  public int getTables_with_corrupt_statsSize() {
    return (this.tables_with_corrupt_stats == null) ? 0 : this.tables_with_corrupt_stats.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TTableName> getTables_with_corrupt_statsIterator() {
    return (this.tables_with_corrupt_stats == null) ? null : this.tables_with_corrupt_stats.iterator();
  }

  public void addToTables_with_corrupt_stats(org.apache.impala.thrift.TTableName elem) {
    if (this.tables_with_corrupt_stats == null) {
      this.tables_with_corrupt_stats = new ArrayList<org.apache.impala.thrift.TTableName>();
    }
    this.tables_with_corrupt_stats.add(elem);
  }

  public List<org.apache.impala.thrift.TTableName> getTables_with_corrupt_stats() {
    return this.tables_with_corrupt_stats;
  }

  public TQueryCtx setTables_with_corrupt_stats(List<org.apache.impala.thrift.TTableName> tables_with_corrupt_stats) {
    this.tables_with_corrupt_stats = tables_with_corrupt_stats;
    return this;
  }

  public void unsetTables_with_corrupt_stats() {
    this.tables_with_corrupt_stats = null;
  }

  /** Returns true if field tables_with_corrupt_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetTables_with_corrupt_stats() {
    return this.tables_with_corrupt_stats != null;
  }

  public void setTables_with_corrupt_statsIsSet(boolean value) {
    if (!value) {
      this.tables_with_corrupt_stats = null;
    }
  }

  public long getSnapshot_timestamp() {
    return this.snapshot_timestamp;
  }

  public TQueryCtx setSnapshot_timestamp(long snapshot_timestamp) {
    this.snapshot_timestamp = snapshot_timestamp;
    setSnapshot_timestampIsSet(true);
    return this;
  }

  public void unsetSnapshot_timestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SNAPSHOT_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field snapshot_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshot_timestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __SNAPSHOT_TIMESTAMP_ISSET_ID);
  }

  public void setSnapshot_timestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SNAPSHOT_TIMESTAMP_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TDescriptorTable getDesc_tbl_testonly() {
    return this.desc_tbl_testonly;
  }

  public TQueryCtx setDesc_tbl_testonly(org.apache.impala.thrift.TDescriptorTable desc_tbl_testonly) {
    this.desc_tbl_testonly = desc_tbl_testonly;
    return this;
  }

  public void unsetDesc_tbl_testonly() {
    this.desc_tbl_testonly = null;
  }

  /** Returns true if field desc_tbl_testonly is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl_testonly() {
    return this.desc_tbl_testonly != null;
  }

  public void setDesc_tbl_testonlyIsSet(boolean value) {
    if (!value) {
      this.desc_tbl_testonly = null;
    }
  }

  public org.apache.impala.thrift.TDescriptorTableSerialized getDesc_tbl_serialized() {
    return this.desc_tbl_serialized;
  }

  public TQueryCtx setDesc_tbl_serialized(org.apache.impala.thrift.TDescriptorTableSerialized desc_tbl_serialized) {
    this.desc_tbl_serialized = desc_tbl_serialized;
    return this;
  }

  public void unsetDesc_tbl_serialized() {
    this.desc_tbl_serialized = null;
  }

  /** Returns true if field desc_tbl_serialized is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc_tbl_serialized() {
    return this.desc_tbl_serialized != null;
  }

  public void setDesc_tbl_serializedIsSet(boolean value) {
    if (!value) {
      this.desc_tbl_serialized = null;
    }
  }

  public long getStart_unix_millis() {
    return this.start_unix_millis;
  }

  public TQueryCtx setStart_unix_millis(long start_unix_millis) {
    this.start_unix_millis = start_unix_millis;
    setStart_unix_millisIsSet(true);
    return this;
  }

  public void unsetStart_unix_millis() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_UNIX_MILLIS_ISSET_ID);
  }

  /** Returns true if field start_unix_millis is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_unix_millis() {
    return EncodingUtils.testBit(__isset_bitfield, __START_UNIX_MILLIS_ISSET_ID);
  }

  public void setStart_unix_millisIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_UNIX_MILLIS_ISSET_ID, value);
  }

  public boolean isDisable_codegen_hint() {
    return this.disable_codegen_hint;
  }

  public TQueryCtx setDisable_codegen_hint(boolean disable_codegen_hint) {
    this.disable_codegen_hint = disable_codegen_hint;
    setDisable_codegen_hintIsSet(true);
    return this;
  }

  public void unsetDisable_codegen_hint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLE_CODEGEN_HINT_ISSET_ID);
  }

  /** Returns true if field disable_codegen_hint is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_codegen_hint() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLE_CODEGEN_HINT_ISSET_ID);
  }

  public void setDisable_codegen_hintIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLE_CODEGEN_HINT_ISSET_ID, value);
  }

  public int getTables_missing_diskidsSize() {
    return (this.tables_missing_diskids == null) ? 0 : this.tables_missing_diskids.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TTableName> getTables_missing_diskidsIterator() {
    return (this.tables_missing_diskids == null) ? null : this.tables_missing_diskids.iterator();
  }

  public void addToTables_missing_diskids(org.apache.impala.thrift.TTableName elem) {
    if (this.tables_missing_diskids == null) {
      this.tables_missing_diskids = new ArrayList<org.apache.impala.thrift.TTableName>();
    }
    this.tables_missing_diskids.add(elem);
  }

  public List<org.apache.impala.thrift.TTableName> getTables_missing_diskids() {
    return this.tables_missing_diskids;
  }

  public TQueryCtx setTables_missing_diskids(List<org.apache.impala.thrift.TTableName> tables_missing_diskids) {
    this.tables_missing_diskids = tables_missing_diskids;
    return this;
  }

  public void unsetTables_missing_diskids() {
    this.tables_missing_diskids = null;
  }

  /** Returns true if field tables_missing_diskids is set (has been assigned a value) and false otherwise */
  public boolean isSetTables_missing_diskids() {
    return this.tables_missing_diskids != null;
  }

  public void setTables_missing_diskidsIsSet(boolean value) {
    if (!value) {
      this.tables_missing_diskids = null;
    }
  }

  public String getRequest_pool() {
    return this.request_pool;
  }

  public TQueryCtx setRequest_pool(String request_pool) {
    this.request_pool = request_pool;
    return this;
  }

  public void unsetRequest_pool() {
    this.request_pool = null;
  }

  /** Returns true if field request_pool is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_pool() {
    return this.request_pool != null;
  }

  public void setRequest_poolIsSet(boolean value) {
    if (!value) {
      this.request_pool = null;
    }
  }

  public String getUtc_timestamp_string() {
    return this.utc_timestamp_string;
  }

  public TQueryCtx setUtc_timestamp_string(String utc_timestamp_string) {
    this.utc_timestamp_string = utc_timestamp_string;
    return this;
  }

  public void unsetUtc_timestamp_string() {
    this.utc_timestamp_string = null;
  }

  /** Returns true if field utc_timestamp_string is set (has been assigned a value) and false otherwise */
  public boolean isSetUtc_timestamp_string() {
    return this.utc_timestamp_string != null;
  }

  public void setUtc_timestamp_stringIsSet(boolean value) {
    if (!value) {
      this.utc_timestamp_string = null;
    }
  }

  public String getLocal_time_zone() {
    return this.local_time_zone;
  }

  public TQueryCtx setLocal_time_zone(String local_time_zone) {
    this.local_time_zone = local_time_zone;
    return this;
  }

  public void unsetLocal_time_zone() {
    this.local_time_zone = null;
  }

  /** Returns true if field local_time_zone is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_time_zone() {
    return this.local_time_zone != null;
  }

  public void setLocal_time_zoneIsSet(boolean value) {
    if (!value) {
      this.local_time_zone = null;
    }
  }

  public boolean isDisable_hbase_num_rows_estimate() {
    return this.disable_hbase_num_rows_estimate;
  }

  public TQueryCtx setDisable_hbase_num_rows_estimate(boolean disable_hbase_num_rows_estimate) {
    this.disable_hbase_num_rows_estimate = disable_hbase_num_rows_estimate;
    setDisable_hbase_num_rows_estimateIsSet(true);
    return this;
  }

  public void unsetDisable_hbase_num_rows_estimate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLE_HBASE_NUM_ROWS_ESTIMATE_ISSET_ID);
  }

  /** Returns true if field disable_hbase_num_rows_estimate is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_hbase_num_rows_estimate() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLE_HBASE_NUM_ROWS_ESTIMATE_ISSET_ID);
  }

  public void setDisable_hbase_num_rows_estimateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLE_HBASE_NUM_ROWS_ESTIMATE_ISSET_ID, value);
  }

  public boolean isTrace_resource_usage() {
    return this.trace_resource_usage;
  }

  public TQueryCtx setTrace_resource_usage(boolean trace_resource_usage) {
    this.trace_resource_usage = trace_resource_usage;
    setTrace_resource_usageIsSet(true);
    return this;
  }

  public void unsetTrace_resource_usage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACE_RESOURCE_USAGE_ISSET_ID);
  }

  /** Returns true if field trace_resource_usage is set (has been assigned a value) and false otherwise */
  public boolean isSetTrace_resource_usage() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACE_RESOURCE_USAGE_ISSET_ID);
  }

  public void setTrace_resource_usageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACE_RESOURCE_USAGE_ISSET_ID, value);
  }

  public int getStatus_report_interval_ms() {
    return this.status_report_interval_ms;
  }

  public TQueryCtx setStatus_report_interval_ms(int status_report_interval_ms) {
    this.status_report_interval_ms = status_report_interval_ms;
    setStatus_report_interval_msIsSet(true);
    return this;
  }

  public void unsetStatus_report_interval_ms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_REPORT_INTERVAL_MS_ISSET_ID);
  }

  /** Returns true if field status_report_interval_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus_report_interval_ms() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_REPORT_INTERVAL_MS_ISSET_ID);
  }

  public void setStatus_report_interval_msIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_REPORT_INTERVAL_MS_ISSET_ID, value);
  }

  public int getStatus_report_max_retry_s() {
    return this.status_report_max_retry_s;
  }

  public TQueryCtx setStatus_report_max_retry_s(int status_report_max_retry_s) {
    this.status_report_max_retry_s = status_report_max_retry_s;
    setStatus_report_max_retry_sIsSet(true);
    return this;
  }

  public void unsetStatus_report_max_retry_s() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_REPORT_MAX_RETRY_S_ISSET_ID);
  }

  /** Returns true if field status_report_max_retry_s is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus_report_max_retry_s() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_REPORT_MAX_RETRY_S_ISSET_ID);
  }

  public void setStatus_report_max_retry_sIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_REPORT_MAX_RETRY_S_ISSET_ID, value);
  }

  public long getTransaction_id() {
    return this.transaction_id;
  }

  public TQueryCtx setTransaction_id(long transaction_id) {
    this.transaction_id = transaction_id;
    setTransaction_idIsSet(true);
    return this;
  }

  public void unsetTransaction_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  /** Returns true if field transaction_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTransaction_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  public void setTransaction_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_REQUEST:
      if (value == null) {
        unsetClient_request();
      } else {
        setClient_request((TClientRequest)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQuery_id();
      } else {
        setQuery_id((org.apache.impala.thrift.TUniqueId)value);
      }
      break;

    case SESSION:
      if (value == null) {
        unsetSession();
      } else {
        setSession((TSessionState)value);
      }
      break;

    case NOW_STRING:
      if (value == null) {
        unsetNow_string();
      } else {
        setNow_string((String)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case COORD_ADDRESS:
      if (value == null) {
        unsetCoord_address();
      } else {
        setCoord_address((org.apache.impala.thrift.TNetworkAddress)value);
      }
      break;

    case COORD_KRPC_ADDRESS:
      if (value == null) {
        unsetCoord_krpc_address();
      } else {
        setCoord_krpc_address((org.apache.impala.thrift.TNetworkAddress)value);
      }
      break;

    case TABLES_MISSING_STATS:
      if (value == null) {
        unsetTables_missing_stats();
      } else {
        setTables_missing_stats((List<org.apache.impala.thrift.TTableName>)value);
      }
      break;

    case DISABLE_SPILLING:
      if (value == null) {
        unsetDisable_spilling();
      } else {
        setDisable_spilling((Boolean)value);
      }
      break;

    case PARENT_QUERY_ID:
      if (value == null) {
        unsetParent_query_id();
      } else {
        setParent_query_id((org.apache.impala.thrift.TUniqueId)value);
      }
      break;

    case TABLES_WITH_CORRUPT_STATS:
      if (value == null) {
        unsetTables_with_corrupt_stats();
      } else {
        setTables_with_corrupt_stats((List<org.apache.impala.thrift.TTableName>)value);
      }
      break;

    case SNAPSHOT_TIMESTAMP:
      if (value == null) {
        unsetSnapshot_timestamp();
      } else {
        setSnapshot_timestamp((Long)value);
      }
      break;

    case DESC_TBL_TESTONLY:
      if (value == null) {
        unsetDesc_tbl_testonly();
      } else {
        setDesc_tbl_testonly((org.apache.impala.thrift.TDescriptorTable)value);
      }
      break;

    case DESC_TBL_SERIALIZED:
      if (value == null) {
        unsetDesc_tbl_serialized();
      } else {
        setDesc_tbl_serialized((org.apache.impala.thrift.TDescriptorTableSerialized)value);
      }
      break;

    case START_UNIX_MILLIS:
      if (value == null) {
        unsetStart_unix_millis();
      } else {
        setStart_unix_millis((Long)value);
      }
      break;

    case DISABLE_CODEGEN_HINT:
      if (value == null) {
        unsetDisable_codegen_hint();
      } else {
        setDisable_codegen_hint((Boolean)value);
      }
      break;

    case TABLES_MISSING_DISKIDS:
      if (value == null) {
        unsetTables_missing_diskids();
      } else {
        setTables_missing_diskids((List<org.apache.impala.thrift.TTableName>)value);
      }
      break;

    case REQUEST_POOL:
      if (value == null) {
        unsetRequest_pool();
      } else {
        setRequest_pool((String)value);
      }
      break;

    case UTC_TIMESTAMP_STRING:
      if (value == null) {
        unsetUtc_timestamp_string();
      } else {
        setUtc_timestamp_string((String)value);
      }
      break;

    case LOCAL_TIME_ZONE:
      if (value == null) {
        unsetLocal_time_zone();
      } else {
        setLocal_time_zone((String)value);
      }
      break;

    case DISABLE_HBASE_NUM_ROWS_ESTIMATE:
      if (value == null) {
        unsetDisable_hbase_num_rows_estimate();
      } else {
        setDisable_hbase_num_rows_estimate((Boolean)value);
      }
      break;

    case TRACE_RESOURCE_USAGE:
      if (value == null) {
        unsetTrace_resource_usage();
      } else {
        setTrace_resource_usage((Boolean)value);
      }
      break;

    case STATUS_REPORT_INTERVAL_MS:
      if (value == null) {
        unsetStatus_report_interval_ms();
      } else {
        setStatus_report_interval_ms((Integer)value);
      }
      break;

    case STATUS_REPORT_MAX_RETRY_S:
      if (value == null) {
        unsetStatus_report_max_retry_s();
      } else {
        setStatus_report_max_retry_s((Integer)value);
      }
      break;

    case TRANSACTION_ID:
      if (value == null) {
        unsetTransaction_id();
      } else {
        setTransaction_id((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_REQUEST:
      return getClient_request();

    case QUERY_ID:
      return getQuery_id();

    case SESSION:
      return getSession();

    case NOW_STRING:
      return getNow_string();

    case PID:
      return getPid();

    case COORD_ADDRESS:
      return getCoord_address();

    case COORD_KRPC_ADDRESS:
      return getCoord_krpc_address();

    case TABLES_MISSING_STATS:
      return getTables_missing_stats();

    case DISABLE_SPILLING:
      return isDisable_spilling();

    case PARENT_QUERY_ID:
      return getParent_query_id();

    case TABLES_WITH_CORRUPT_STATS:
      return getTables_with_corrupt_stats();

    case SNAPSHOT_TIMESTAMP:
      return getSnapshot_timestamp();

    case DESC_TBL_TESTONLY:
      return getDesc_tbl_testonly();

    case DESC_TBL_SERIALIZED:
      return getDesc_tbl_serialized();

    case START_UNIX_MILLIS:
      return getStart_unix_millis();

    case DISABLE_CODEGEN_HINT:
      return isDisable_codegen_hint();

    case TABLES_MISSING_DISKIDS:
      return getTables_missing_diskids();

    case REQUEST_POOL:
      return getRequest_pool();

    case UTC_TIMESTAMP_STRING:
      return getUtc_timestamp_string();

    case LOCAL_TIME_ZONE:
      return getLocal_time_zone();

    case DISABLE_HBASE_NUM_ROWS_ESTIMATE:
      return isDisable_hbase_num_rows_estimate();

    case TRACE_RESOURCE_USAGE:
      return isTrace_resource_usage();

    case STATUS_REPORT_INTERVAL_MS:
      return getStatus_report_interval_ms();

    case STATUS_REPORT_MAX_RETRY_S:
      return getStatus_report_max_retry_s();

    case TRANSACTION_ID:
      return getTransaction_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_REQUEST:
      return isSetClient_request();
    case QUERY_ID:
      return isSetQuery_id();
    case SESSION:
      return isSetSession();
    case NOW_STRING:
      return isSetNow_string();
    case PID:
      return isSetPid();
    case COORD_ADDRESS:
      return isSetCoord_address();
    case COORD_KRPC_ADDRESS:
      return isSetCoord_krpc_address();
    case TABLES_MISSING_STATS:
      return isSetTables_missing_stats();
    case DISABLE_SPILLING:
      return isSetDisable_spilling();
    case PARENT_QUERY_ID:
      return isSetParent_query_id();
    case TABLES_WITH_CORRUPT_STATS:
      return isSetTables_with_corrupt_stats();
    case SNAPSHOT_TIMESTAMP:
      return isSetSnapshot_timestamp();
    case DESC_TBL_TESTONLY:
      return isSetDesc_tbl_testonly();
    case DESC_TBL_SERIALIZED:
      return isSetDesc_tbl_serialized();
    case START_UNIX_MILLIS:
      return isSetStart_unix_millis();
    case DISABLE_CODEGEN_HINT:
      return isSetDisable_codegen_hint();
    case TABLES_MISSING_DISKIDS:
      return isSetTables_missing_diskids();
    case REQUEST_POOL:
      return isSetRequest_pool();
    case UTC_TIMESTAMP_STRING:
      return isSetUtc_timestamp_string();
    case LOCAL_TIME_ZONE:
      return isSetLocal_time_zone();
    case DISABLE_HBASE_NUM_ROWS_ESTIMATE:
      return isSetDisable_hbase_num_rows_estimate();
    case TRACE_RESOURCE_USAGE:
      return isSetTrace_resource_usage();
    case STATUS_REPORT_INTERVAL_MS:
      return isSetStatus_report_interval_ms();
    case STATUS_REPORT_MAX_RETRY_S:
      return isSetStatus_report_max_retry_s();
    case TRANSACTION_ID:
      return isSetTransaction_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueryCtx)
      return this.equals((TQueryCtx)that);
    return false;
  }

  public boolean equals(TQueryCtx that) {
    if (that == null)
      return false;

    boolean this_present_client_request = true && this.isSetClient_request();
    boolean that_present_client_request = true && that.isSetClient_request();
    if (this_present_client_request || that_present_client_request) {
      if (!(this_present_client_request && that_present_client_request))
        return false;
      if (!this.client_request.equals(that.client_request))
        return false;
    }

    boolean this_present_query_id = true && this.isSetQuery_id();
    boolean that_present_query_id = true && that.isSetQuery_id();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_session = true && this.isSetSession();
    boolean that_present_session = true && that.isSetSession();
    if (this_present_session || that_present_session) {
      if (!(this_present_session && that_present_session))
        return false;
      if (!this.session.equals(that.session))
        return false;
    }

    boolean this_present_now_string = true && this.isSetNow_string();
    boolean that_present_now_string = true && that.isSetNow_string();
    if (this_present_now_string || that_present_now_string) {
      if (!(this_present_now_string && that_present_now_string))
        return false;
      if (!this.now_string.equals(that.now_string))
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_coord_address = true && this.isSetCoord_address();
    boolean that_present_coord_address = true && that.isSetCoord_address();
    if (this_present_coord_address || that_present_coord_address) {
      if (!(this_present_coord_address && that_present_coord_address))
        return false;
      if (!this.coord_address.equals(that.coord_address))
        return false;
    }

    boolean this_present_coord_krpc_address = true && this.isSetCoord_krpc_address();
    boolean that_present_coord_krpc_address = true && that.isSetCoord_krpc_address();
    if (this_present_coord_krpc_address || that_present_coord_krpc_address) {
      if (!(this_present_coord_krpc_address && that_present_coord_krpc_address))
        return false;
      if (!this.coord_krpc_address.equals(that.coord_krpc_address))
        return false;
    }

    boolean this_present_tables_missing_stats = true && this.isSetTables_missing_stats();
    boolean that_present_tables_missing_stats = true && that.isSetTables_missing_stats();
    if (this_present_tables_missing_stats || that_present_tables_missing_stats) {
      if (!(this_present_tables_missing_stats && that_present_tables_missing_stats))
        return false;
      if (!this.tables_missing_stats.equals(that.tables_missing_stats))
        return false;
    }

    boolean this_present_disable_spilling = true && this.isSetDisable_spilling();
    boolean that_present_disable_spilling = true && that.isSetDisable_spilling();
    if (this_present_disable_spilling || that_present_disable_spilling) {
      if (!(this_present_disable_spilling && that_present_disable_spilling))
        return false;
      if (this.disable_spilling != that.disable_spilling)
        return false;
    }

    boolean this_present_parent_query_id = true && this.isSetParent_query_id();
    boolean that_present_parent_query_id = true && that.isSetParent_query_id();
    if (this_present_parent_query_id || that_present_parent_query_id) {
      if (!(this_present_parent_query_id && that_present_parent_query_id))
        return false;
      if (!this.parent_query_id.equals(that.parent_query_id))
        return false;
    }

    boolean this_present_tables_with_corrupt_stats = true && this.isSetTables_with_corrupt_stats();
    boolean that_present_tables_with_corrupt_stats = true && that.isSetTables_with_corrupt_stats();
    if (this_present_tables_with_corrupt_stats || that_present_tables_with_corrupt_stats) {
      if (!(this_present_tables_with_corrupt_stats && that_present_tables_with_corrupt_stats))
        return false;
      if (!this.tables_with_corrupt_stats.equals(that.tables_with_corrupt_stats))
        return false;
    }

    boolean this_present_snapshot_timestamp = true && this.isSetSnapshot_timestamp();
    boolean that_present_snapshot_timestamp = true && that.isSetSnapshot_timestamp();
    if (this_present_snapshot_timestamp || that_present_snapshot_timestamp) {
      if (!(this_present_snapshot_timestamp && that_present_snapshot_timestamp))
        return false;
      if (this.snapshot_timestamp != that.snapshot_timestamp)
        return false;
    }

    boolean this_present_desc_tbl_testonly = true && this.isSetDesc_tbl_testonly();
    boolean that_present_desc_tbl_testonly = true && that.isSetDesc_tbl_testonly();
    if (this_present_desc_tbl_testonly || that_present_desc_tbl_testonly) {
      if (!(this_present_desc_tbl_testonly && that_present_desc_tbl_testonly))
        return false;
      if (!this.desc_tbl_testonly.equals(that.desc_tbl_testonly))
        return false;
    }

    boolean this_present_desc_tbl_serialized = true && this.isSetDesc_tbl_serialized();
    boolean that_present_desc_tbl_serialized = true && that.isSetDesc_tbl_serialized();
    if (this_present_desc_tbl_serialized || that_present_desc_tbl_serialized) {
      if (!(this_present_desc_tbl_serialized && that_present_desc_tbl_serialized))
        return false;
      if (!this.desc_tbl_serialized.equals(that.desc_tbl_serialized))
        return false;
    }

    boolean this_present_start_unix_millis = true;
    boolean that_present_start_unix_millis = true;
    if (this_present_start_unix_millis || that_present_start_unix_millis) {
      if (!(this_present_start_unix_millis && that_present_start_unix_millis))
        return false;
      if (this.start_unix_millis != that.start_unix_millis)
        return false;
    }

    boolean this_present_disable_codegen_hint = true && this.isSetDisable_codegen_hint();
    boolean that_present_disable_codegen_hint = true && that.isSetDisable_codegen_hint();
    if (this_present_disable_codegen_hint || that_present_disable_codegen_hint) {
      if (!(this_present_disable_codegen_hint && that_present_disable_codegen_hint))
        return false;
      if (this.disable_codegen_hint != that.disable_codegen_hint)
        return false;
    }

    boolean this_present_tables_missing_diskids = true && this.isSetTables_missing_diskids();
    boolean that_present_tables_missing_diskids = true && that.isSetTables_missing_diskids();
    if (this_present_tables_missing_diskids || that_present_tables_missing_diskids) {
      if (!(this_present_tables_missing_diskids && that_present_tables_missing_diskids))
        return false;
      if (!this.tables_missing_diskids.equals(that.tables_missing_diskids))
        return false;
    }

    boolean this_present_request_pool = true && this.isSetRequest_pool();
    boolean that_present_request_pool = true && that.isSetRequest_pool();
    if (this_present_request_pool || that_present_request_pool) {
      if (!(this_present_request_pool && that_present_request_pool))
        return false;
      if (!this.request_pool.equals(that.request_pool))
        return false;
    }

    boolean this_present_utc_timestamp_string = true && this.isSetUtc_timestamp_string();
    boolean that_present_utc_timestamp_string = true && that.isSetUtc_timestamp_string();
    if (this_present_utc_timestamp_string || that_present_utc_timestamp_string) {
      if (!(this_present_utc_timestamp_string && that_present_utc_timestamp_string))
        return false;
      if (!this.utc_timestamp_string.equals(that.utc_timestamp_string))
        return false;
    }

    boolean this_present_local_time_zone = true && this.isSetLocal_time_zone();
    boolean that_present_local_time_zone = true && that.isSetLocal_time_zone();
    if (this_present_local_time_zone || that_present_local_time_zone) {
      if (!(this_present_local_time_zone && that_present_local_time_zone))
        return false;
      if (!this.local_time_zone.equals(that.local_time_zone))
        return false;
    }

    boolean this_present_disable_hbase_num_rows_estimate = true && this.isSetDisable_hbase_num_rows_estimate();
    boolean that_present_disable_hbase_num_rows_estimate = true && that.isSetDisable_hbase_num_rows_estimate();
    if (this_present_disable_hbase_num_rows_estimate || that_present_disable_hbase_num_rows_estimate) {
      if (!(this_present_disable_hbase_num_rows_estimate && that_present_disable_hbase_num_rows_estimate))
        return false;
      if (this.disable_hbase_num_rows_estimate != that.disable_hbase_num_rows_estimate)
        return false;
    }

    boolean this_present_trace_resource_usage = true;
    boolean that_present_trace_resource_usage = true;
    if (this_present_trace_resource_usage || that_present_trace_resource_usage) {
      if (!(this_present_trace_resource_usage && that_present_trace_resource_usage))
        return false;
      if (this.trace_resource_usage != that.trace_resource_usage)
        return false;
    }

    boolean this_present_status_report_interval_ms = true && this.isSetStatus_report_interval_ms();
    boolean that_present_status_report_interval_ms = true && that.isSetStatus_report_interval_ms();
    if (this_present_status_report_interval_ms || that_present_status_report_interval_ms) {
      if (!(this_present_status_report_interval_ms && that_present_status_report_interval_ms))
        return false;
      if (this.status_report_interval_ms != that.status_report_interval_ms)
        return false;
    }

    boolean this_present_status_report_max_retry_s = true && this.isSetStatus_report_max_retry_s();
    boolean that_present_status_report_max_retry_s = true && that.isSetStatus_report_max_retry_s();
    if (this_present_status_report_max_retry_s || that_present_status_report_max_retry_s) {
      if (!(this_present_status_report_max_retry_s && that_present_status_report_max_retry_s))
        return false;
      if (this.status_report_max_retry_s != that.status_report_max_retry_s)
        return false;
    }

    boolean this_present_transaction_id = true && this.isSetTransaction_id();
    boolean that_present_transaction_id = true && that.isSetTransaction_id();
    if (this_present_transaction_id || that_present_transaction_id) {
      if (!(this_present_transaction_id && that_present_transaction_id))
        return false;
      if (this.transaction_id != that.transaction_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_client_request = true && (isSetClient_request());
    list.add(present_client_request);
    if (present_client_request)
      list.add(client_request);

    boolean present_query_id = true && (isSetQuery_id());
    list.add(present_query_id);
    if (present_query_id)
      list.add(query_id);

    boolean present_session = true && (isSetSession());
    list.add(present_session);
    if (present_session)
      list.add(session);

    boolean present_now_string = true && (isSetNow_string());
    list.add(present_now_string);
    if (present_now_string)
      list.add(now_string);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_coord_address = true && (isSetCoord_address());
    list.add(present_coord_address);
    if (present_coord_address)
      list.add(coord_address);

    boolean present_coord_krpc_address = true && (isSetCoord_krpc_address());
    list.add(present_coord_krpc_address);
    if (present_coord_krpc_address)
      list.add(coord_krpc_address);

    boolean present_tables_missing_stats = true && (isSetTables_missing_stats());
    list.add(present_tables_missing_stats);
    if (present_tables_missing_stats)
      list.add(tables_missing_stats);

    boolean present_disable_spilling = true && (isSetDisable_spilling());
    list.add(present_disable_spilling);
    if (present_disable_spilling)
      list.add(disable_spilling);

    boolean present_parent_query_id = true && (isSetParent_query_id());
    list.add(present_parent_query_id);
    if (present_parent_query_id)
      list.add(parent_query_id);

    boolean present_tables_with_corrupt_stats = true && (isSetTables_with_corrupt_stats());
    list.add(present_tables_with_corrupt_stats);
    if (present_tables_with_corrupt_stats)
      list.add(tables_with_corrupt_stats);

    boolean present_snapshot_timestamp = true && (isSetSnapshot_timestamp());
    list.add(present_snapshot_timestamp);
    if (present_snapshot_timestamp)
      list.add(snapshot_timestamp);

    boolean present_desc_tbl_testonly = true && (isSetDesc_tbl_testonly());
    list.add(present_desc_tbl_testonly);
    if (present_desc_tbl_testonly)
      list.add(desc_tbl_testonly);

    boolean present_desc_tbl_serialized = true && (isSetDesc_tbl_serialized());
    list.add(present_desc_tbl_serialized);
    if (present_desc_tbl_serialized)
      list.add(desc_tbl_serialized);

    boolean present_start_unix_millis = true;
    list.add(present_start_unix_millis);
    if (present_start_unix_millis)
      list.add(start_unix_millis);

    boolean present_disable_codegen_hint = true && (isSetDisable_codegen_hint());
    list.add(present_disable_codegen_hint);
    if (present_disable_codegen_hint)
      list.add(disable_codegen_hint);

    boolean present_tables_missing_diskids = true && (isSetTables_missing_diskids());
    list.add(present_tables_missing_diskids);
    if (present_tables_missing_diskids)
      list.add(tables_missing_diskids);

    boolean present_request_pool = true && (isSetRequest_pool());
    list.add(present_request_pool);
    if (present_request_pool)
      list.add(request_pool);

    boolean present_utc_timestamp_string = true && (isSetUtc_timestamp_string());
    list.add(present_utc_timestamp_string);
    if (present_utc_timestamp_string)
      list.add(utc_timestamp_string);

    boolean present_local_time_zone = true && (isSetLocal_time_zone());
    list.add(present_local_time_zone);
    if (present_local_time_zone)
      list.add(local_time_zone);

    boolean present_disable_hbase_num_rows_estimate = true && (isSetDisable_hbase_num_rows_estimate());
    list.add(present_disable_hbase_num_rows_estimate);
    if (present_disable_hbase_num_rows_estimate)
      list.add(disable_hbase_num_rows_estimate);

    boolean present_trace_resource_usage = true;
    list.add(present_trace_resource_usage);
    if (present_trace_resource_usage)
      list.add(trace_resource_usage);

    boolean present_status_report_interval_ms = true && (isSetStatus_report_interval_ms());
    list.add(present_status_report_interval_ms);
    if (present_status_report_interval_ms)
      list.add(status_report_interval_ms);

    boolean present_status_report_max_retry_s = true && (isSetStatus_report_max_retry_s());
    list.add(present_status_report_max_retry_s);
    if (present_status_report_max_retry_s)
      list.add(status_report_max_retry_s);

    boolean present_transaction_id = true && (isSetTransaction_id());
    list.add(present_transaction_id);
    if (present_transaction_id)
      list.add(transaction_id);

    return list.hashCode();
  }

  @Override
  public int compareTo(TQueryCtx other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClient_request()).compareTo(other.isSetClient_request());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_request()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_request, other.client_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_id()).compareTo(other.isSetQuery_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_string()).compareTo(other.isSetNow_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_string, other.now_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoord_address()).compareTo(other.isSetCoord_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoord_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coord_address, other.coord_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoord_krpc_address()).compareTo(other.isSetCoord_krpc_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoord_krpc_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coord_krpc_address, other.coord_krpc_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTables_missing_stats()).compareTo(other.isSetTables_missing_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables_missing_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables_missing_stats, other.tables_missing_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_spilling()).compareTo(other.isSetDisable_spilling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_spilling()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_spilling, other.disable_spilling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParent_query_id()).compareTo(other.isSetParent_query_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent_query_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_query_id, other.parent_query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTables_with_corrupt_stats()).compareTo(other.isSetTables_with_corrupt_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables_with_corrupt_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables_with_corrupt_stats, other.tables_with_corrupt_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshot_timestamp()).compareTo(other.isSetSnapshot_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshot_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_timestamp, other.snapshot_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc_tbl_testonly()).compareTo(other.isSetDesc_tbl_testonly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl_testonly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl_testonly, other.desc_tbl_testonly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc_tbl_serialized()).compareTo(other.isSetDesc_tbl_serialized());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc_tbl_serialized()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl_serialized, other.desc_tbl_serialized);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_unix_millis()).compareTo(other.isSetStart_unix_millis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_unix_millis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_unix_millis, other.start_unix_millis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_codegen_hint()).compareTo(other.isSetDisable_codegen_hint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_codegen_hint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_codegen_hint, other.disable_codegen_hint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTables_missing_diskids()).compareTo(other.isSetTables_missing_diskids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables_missing_diskids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables_missing_diskids, other.tables_missing_diskids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_pool()).compareTo(other.isSetRequest_pool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_pool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_pool, other.request_pool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtc_timestamp_string()).compareTo(other.isSetUtc_timestamp_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtc_timestamp_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utc_timestamp_string, other.utc_timestamp_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_time_zone()).compareTo(other.isSetLocal_time_zone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_time_zone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_time_zone, other.local_time_zone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_hbase_num_rows_estimate()).compareTo(other.isSetDisable_hbase_num_rows_estimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_hbase_num_rows_estimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_hbase_num_rows_estimate, other.disable_hbase_num_rows_estimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrace_resource_usage()).compareTo(other.isSetTrace_resource_usage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace_resource_usage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace_resource_usage, other.trace_resource_usage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus_report_interval_ms()).compareTo(other.isSetStatus_report_interval_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus_report_interval_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status_report_interval_ms, other.status_report_interval_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus_report_max_retry_s()).compareTo(other.isSetStatus_report_max_retry_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus_report_max_retry_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status_report_max_retry_s, other.status_report_max_retry_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransaction_id()).compareTo(other.isSetTransaction_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransaction_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction_id, other.transaction_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueryCtx(");
    boolean first = true;

    sb.append("client_request:");
    if (this.client_request == null) {
      sb.append("null");
    } else {
      sb.append(this.client_request);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_id:");
    if (this.query_id == null) {
      sb.append("null");
    } else {
      sb.append(this.query_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("session:");
    if (this.session == null) {
      sb.append("null");
    } else {
      sb.append(this.session);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("now_string:");
    if (this.now_string == null) {
      sb.append("null");
    } else {
      sb.append(this.now_string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (isSetCoord_address()) {
      if (!first) sb.append(", ");
      sb.append("coord_address:");
      if (this.coord_address == null) {
        sb.append("null");
      } else {
        sb.append(this.coord_address);
      }
      first = false;
    }
    if (isSetCoord_krpc_address()) {
      if (!first) sb.append(", ");
      sb.append("coord_krpc_address:");
      if (this.coord_krpc_address == null) {
        sb.append("null");
      } else {
        sb.append(this.coord_krpc_address);
      }
      first = false;
    }
    if (isSetTables_missing_stats()) {
      if (!first) sb.append(", ");
      sb.append("tables_missing_stats:");
      if (this.tables_missing_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.tables_missing_stats);
      }
      first = false;
    }
    if (isSetDisable_spilling()) {
      if (!first) sb.append(", ");
      sb.append("disable_spilling:");
      sb.append(this.disable_spilling);
      first = false;
    }
    if (isSetParent_query_id()) {
      if (!first) sb.append(", ");
      sb.append("parent_query_id:");
      if (this.parent_query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.parent_query_id);
      }
      first = false;
    }
    if (isSetTables_with_corrupt_stats()) {
      if (!first) sb.append(", ");
      sb.append("tables_with_corrupt_stats:");
      if (this.tables_with_corrupt_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.tables_with_corrupt_stats);
      }
      first = false;
    }
    if (isSetSnapshot_timestamp()) {
      if (!first) sb.append(", ");
      sb.append("snapshot_timestamp:");
      sb.append(this.snapshot_timestamp);
      first = false;
    }
    if (isSetDesc_tbl_testonly()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl_testonly:");
      if (this.desc_tbl_testonly == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl_testonly);
      }
      first = false;
    }
    if (isSetDesc_tbl_serialized()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl_serialized:");
      if (this.desc_tbl_serialized == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl_serialized);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("start_unix_millis:");
    sb.append(this.start_unix_millis);
    first = false;
    if (isSetDisable_codegen_hint()) {
      if (!first) sb.append(", ");
      sb.append("disable_codegen_hint:");
      sb.append(this.disable_codegen_hint);
      first = false;
    }
    if (isSetTables_missing_diskids()) {
      if (!first) sb.append(", ");
      sb.append("tables_missing_diskids:");
      if (this.tables_missing_diskids == null) {
        sb.append("null");
      } else {
        sb.append(this.tables_missing_diskids);
      }
      first = false;
    }
    if (isSetRequest_pool()) {
      if (!first) sb.append(", ");
      sb.append("request_pool:");
      if (this.request_pool == null) {
        sb.append("null");
      } else {
        sb.append(this.request_pool);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("utc_timestamp_string:");
    if (this.utc_timestamp_string == null) {
      sb.append("null");
    } else {
      sb.append(this.utc_timestamp_string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("local_time_zone:");
    if (this.local_time_zone == null) {
      sb.append("null");
    } else {
      sb.append(this.local_time_zone);
    }
    first = false;
    if (isSetDisable_hbase_num_rows_estimate()) {
      if (!first) sb.append(", ");
      sb.append("disable_hbase_num_rows_estimate:");
      sb.append(this.disable_hbase_num_rows_estimate);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("trace_resource_usage:");
    sb.append(this.trace_resource_usage);
    first = false;
    if (isSetStatus_report_interval_ms()) {
      if (!first) sb.append(", ");
      sb.append("status_report_interval_ms:");
      sb.append(this.status_report_interval_ms);
      first = false;
    }
    if (isSetStatus_report_max_retry_s()) {
      if (!first) sb.append(", ");
      sb.append("status_report_max_retry_s:");
      sb.append(this.status_report_max_retry_s);
      first = false;
    }
    if (isSetTransaction_id()) {
      if (!first) sb.append(", ");
      sb.append("transaction_id:");
      sb.append(this.transaction_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (client_request == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'client_request' was not present! Struct: " + toString());
    }
    if (query_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_id' was not present! Struct: " + toString());
    }
    if (session == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'session' was not present! Struct: " + toString());
    }
    if (now_string == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'now_string' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'start_unix_millis' because it's a primitive and you chose the non-beans generator.
    if (utc_timestamp_string == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'utc_timestamp_string' was not present! Struct: " + toString());
    }
    if (local_time_zone == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'local_time_zone' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'trace_resource_usage' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (client_request != null) {
      client_request.validate();
    }
    if (query_id != null) {
      query_id.validate();
    }
    if (session != null) {
      session.validate();
    }
    if (coord_address != null) {
      coord_address.validate();
    }
    if (coord_krpc_address != null) {
      coord_krpc_address.validate();
    }
    if (parent_query_id != null) {
      parent_query_id.validate();
    }
    if (desc_tbl_testonly != null) {
      desc_tbl_testonly.validate();
    }
    if (desc_tbl_serialized != null) {
      desc_tbl_serialized.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryCtxStandardSchemeFactory implements SchemeFactory {
    public TQueryCtxStandardScheme getScheme() {
      return new TQueryCtxStandardScheme();
    }
  }

  private static class TQueryCtxStandardScheme extends StandardScheme<TQueryCtx> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryCtx struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.client_request = new TClientRequest();
              struct.client_request.read(iprot);
              struct.setClient_requestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new org.apache.impala.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQuery_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.session = new TSessionState();
              struct.session.read(iprot);
              struct.setSessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOW_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.now_string = iprot.readString();
              struct.setNow_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COORD_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coord_address = new org.apache.impala.thrift.TNetworkAddress();
              struct.coord_address.read(iprot);
              struct.setCoord_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COORD_KRPC_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coord_krpc_address = new org.apache.impala.thrift.TNetworkAddress();
              struct.coord_krpc_address.read(iprot);
              struct.setCoord_krpc_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLES_MISSING_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tables_missing_stats = new ArrayList<org.apache.impala.thrift.TTableName>(_list0.size);
                org.apache.impala.thrift.TTableName _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new org.apache.impala.thrift.TTableName();
                  _elem1.read(iprot);
                  struct.tables_missing_stats.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTables_missing_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DISABLE_SPILLING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_spilling = iprot.readBool();
              struct.setDisable_spillingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PARENT_QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parent_query_id = new org.apache.impala.thrift.TUniqueId();
              struct.parent_query_id.read(iprot);
              struct.setParent_query_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TABLES_WITH_CORRUPT_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.tables_with_corrupt_stats = new ArrayList<org.apache.impala.thrift.TTableName>(_list3.size);
                org.apache.impala.thrift.TTableName _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new org.apache.impala.thrift.TTableName();
                  _elem4.read(iprot);
                  struct.tables_with_corrupt_stats.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setTables_with_corrupt_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SNAPSHOT_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.snapshot_timestamp = iprot.readI64();
              struct.setSnapshot_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DESC_TBL_TESTONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl_testonly = new org.apache.impala.thrift.TDescriptorTable();
              struct.desc_tbl_testonly.read(iprot);
              struct.setDesc_tbl_testonlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DESC_TBL_SERIALIZED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl_serialized = new org.apache.impala.thrift.TDescriptorTableSerialized();
              struct.desc_tbl_serialized.read(iprot);
              struct.setDesc_tbl_serializedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // START_UNIX_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_unix_millis = iprot.readI64();
              struct.setStart_unix_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DISABLE_CODEGEN_HINT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_codegen_hint = iprot.readBool();
              struct.setDisable_codegen_hintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TABLES_MISSING_DISKIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.tables_missing_diskids = new ArrayList<org.apache.impala.thrift.TTableName>(_list6.size);
                org.apache.impala.thrift.TTableName _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new org.apache.impala.thrift.TTableName();
                  _elem7.read(iprot);
                  struct.tables_missing_diskids.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setTables_missing_diskidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REQUEST_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.request_pool = iprot.readString();
              struct.setRequest_poolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UTC_TIMESTAMP_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.utc_timestamp_string = iprot.readString();
              struct.setUtc_timestamp_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LOCAL_TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.local_time_zone = iprot.readString();
              struct.setLocal_time_zoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DISABLE_HBASE_NUM_ROWS_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_hbase_num_rows_estimate = iprot.readBool();
              struct.setDisable_hbase_num_rows_estimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TRACE_RESOURCE_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.trace_resource_usage = iprot.readBool();
              struct.setTrace_resource_usageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // STATUS_REPORT_INTERVAL_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status_report_interval_ms = iprot.readI32();
              struct.setStatus_report_interval_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // STATUS_REPORT_MAX_RETRY_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status_report_max_retry_s = iprot.readI32();
              struct.setStatus_report_max_retry_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transaction_id = iprot.readI64();
              struct.setTransaction_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStart_unix_millis()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_unix_millis' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTrace_resource_usage()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'trace_resource_usage' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryCtx struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.client_request != null) {
        oprot.writeFieldBegin(CLIENT_REQUEST_FIELD_DESC);
        struct.client_request.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query_id != null) {
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        struct.query_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.session != null) {
        oprot.writeFieldBegin(SESSION_FIELD_DESC);
        struct.session.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.now_string != null) {
        oprot.writeFieldBegin(NOW_STRING_FIELD_DESC);
        oprot.writeString(struct.now_string);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.coord_address != null) {
        if (struct.isSetCoord_address()) {
          oprot.writeFieldBegin(COORD_ADDRESS_FIELD_DESC);
          struct.coord_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coord_krpc_address != null) {
        if (struct.isSetCoord_krpc_address()) {
          oprot.writeFieldBegin(COORD_KRPC_ADDRESS_FIELD_DESC);
          struct.coord_krpc_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tables_missing_stats != null) {
        if (struct.isSetTables_missing_stats()) {
          oprot.writeFieldBegin(TABLES_MISSING_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tables_missing_stats.size()));
            for (org.apache.impala.thrift.TTableName _iter9 : struct.tables_missing_stats)
            {
              _iter9.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisable_spilling()) {
        oprot.writeFieldBegin(DISABLE_SPILLING_FIELD_DESC);
        oprot.writeBool(struct.disable_spilling);
        oprot.writeFieldEnd();
      }
      if (struct.parent_query_id != null) {
        if (struct.isSetParent_query_id()) {
          oprot.writeFieldBegin(PARENT_QUERY_ID_FIELD_DESC);
          struct.parent_query_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tables_with_corrupt_stats != null) {
        if (struct.isSetTables_with_corrupt_stats()) {
          oprot.writeFieldBegin(TABLES_WITH_CORRUPT_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tables_with_corrupt_stats.size()));
            for (org.apache.impala.thrift.TTableName _iter10 : struct.tables_with_corrupt_stats)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSnapshot_timestamp()) {
        oprot.writeFieldBegin(SNAPSHOT_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.snapshot_timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.desc_tbl_testonly != null) {
        if (struct.isSetDesc_tbl_testonly()) {
          oprot.writeFieldBegin(DESC_TBL_TESTONLY_FIELD_DESC);
          struct.desc_tbl_testonly.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(START_UNIX_MILLIS_FIELD_DESC);
      oprot.writeI64(struct.start_unix_millis);
      oprot.writeFieldEnd();
      if (struct.isSetDisable_codegen_hint()) {
        oprot.writeFieldBegin(DISABLE_CODEGEN_HINT_FIELD_DESC);
        oprot.writeBool(struct.disable_codegen_hint);
        oprot.writeFieldEnd();
      }
      if (struct.tables_missing_diskids != null) {
        if (struct.isSetTables_missing_diskids()) {
          oprot.writeFieldBegin(TABLES_MISSING_DISKIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tables_missing_diskids.size()));
            for (org.apache.impala.thrift.TTableName _iter11 : struct.tables_missing_diskids)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.request_pool != null) {
        if (struct.isSetRequest_pool()) {
          oprot.writeFieldBegin(REQUEST_POOL_FIELD_DESC);
          oprot.writeString(struct.request_pool);
          oprot.writeFieldEnd();
        }
      }
      if (struct.utc_timestamp_string != null) {
        oprot.writeFieldBegin(UTC_TIMESTAMP_STRING_FIELD_DESC);
        oprot.writeString(struct.utc_timestamp_string);
        oprot.writeFieldEnd();
      }
      if (struct.local_time_zone != null) {
        oprot.writeFieldBegin(LOCAL_TIME_ZONE_FIELD_DESC);
        oprot.writeString(struct.local_time_zone);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable_hbase_num_rows_estimate()) {
        oprot.writeFieldBegin(DISABLE_HBASE_NUM_ROWS_ESTIMATE_FIELD_DESC);
        oprot.writeBool(struct.disable_hbase_num_rows_estimate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRACE_RESOURCE_USAGE_FIELD_DESC);
      oprot.writeBool(struct.trace_resource_usage);
      oprot.writeFieldEnd();
      if (struct.isSetStatus_report_interval_ms()) {
        oprot.writeFieldBegin(STATUS_REPORT_INTERVAL_MS_FIELD_DESC);
        oprot.writeI32(struct.status_report_interval_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus_report_max_retry_s()) {
        oprot.writeFieldBegin(STATUS_REPORT_MAX_RETRY_S_FIELD_DESC);
        oprot.writeI32(struct.status_report_max_retry_s);
        oprot.writeFieldEnd();
      }
      if (struct.desc_tbl_serialized != null) {
        if (struct.isSetDesc_tbl_serialized()) {
          oprot.writeFieldBegin(DESC_TBL_SERIALIZED_FIELD_DESC);
          struct.desc_tbl_serialized.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTransaction_id()) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        oprot.writeI64(struct.transaction_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryCtxTupleSchemeFactory implements SchemeFactory {
    public TQueryCtxTupleScheme getScheme() {
      return new TQueryCtxTupleScheme();
    }
  }

  private static class TQueryCtxTupleScheme extends TupleScheme<TQueryCtx> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.client_request.write(oprot);
      struct.query_id.write(oprot);
      struct.session.write(oprot);
      oprot.writeString(struct.now_string);
      oprot.writeI32(struct.pid);
      oprot.writeI64(struct.start_unix_millis);
      oprot.writeString(struct.utc_timestamp_string);
      oprot.writeString(struct.local_time_zone);
      oprot.writeBool(struct.trace_resource_usage);
      BitSet optionals = new BitSet();
      if (struct.isSetCoord_address()) {
        optionals.set(0);
      }
      if (struct.isSetCoord_krpc_address()) {
        optionals.set(1);
      }
      if (struct.isSetTables_missing_stats()) {
        optionals.set(2);
      }
      if (struct.isSetDisable_spilling()) {
        optionals.set(3);
      }
      if (struct.isSetParent_query_id()) {
        optionals.set(4);
      }
      if (struct.isSetTables_with_corrupt_stats()) {
        optionals.set(5);
      }
      if (struct.isSetSnapshot_timestamp()) {
        optionals.set(6);
      }
      if (struct.isSetDesc_tbl_testonly()) {
        optionals.set(7);
      }
      if (struct.isSetDesc_tbl_serialized()) {
        optionals.set(8);
      }
      if (struct.isSetDisable_codegen_hint()) {
        optionals.set(9);
      }
      if (struct.isSetTables_missing_diskids()) {
        optionals.set(10);
      }
      if (struct.isSetRequest_pool()) {
        optionals.set(11);
      }
      if (struct.isSetDisable_hbase_num_rows_estimate()) {
        optionals.set(12);
      }
      if (struct.isSetStatus_report_interval_ms()) {
        optionals.set(13);
      }
      if (struct.isSetStatus_report_max_retry_s()) {
        optionals.set(14);
      }
      if (struct.isSetTransaction_id()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetCoord_address()) {
        struct.coord_address.write(oprot);
      }
      if (struct.isSetCoord_krpc_address()) {
        struct.coord_krpc_address.write(oprot);
      }
      if (struct.isSetTables_missing_stats()) {
        {
          oprot.writeI32(struct.tables_missing_stats.size());
          for (org.apache.impala.thrift.TTableName _iter12 : struct.tables_missing_stats)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetDisable_spilling()) {
        oprot.writeBool(struct.disable_spilling);
      }
      if (struct.isSetParent_query_id()) {
        struct.parent_query_id.write(oprot);
      }
      if (struct.isSetTables_with_corrupt_stats()) {
        {
          oprot.writeI32(struct.tables_with_corrupt_stats.size());
          for (org.apache.impala.thrift.TTableName _iter13 : struct.tables_with_corrupt_stats)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetSnapshot_timestamp()) {
        oprot.writeI64(struct.snapshot_timestamp);
      }
      if (struct.isSetDesc_tbl_testonly()) {
        struct.desc_tbl_testonly.write(oprot);
      }
      if (struct.isSetDesc_tbl_serialized()) {
        struct.desc_tbl_serialized.write(oprot);
      }
      if (struct.isSetDisable_codegen_hint()) {
        oprot.writeBool(struct.disable_codegen_hint);
      }
      if (struct.isSetTables_missing_diskids()) {
        {
          oprot.writeI32(struct.tables_missing_diskids.size());
          for (org.apache.impala.thrift.TTableName _iter14 : struct.tables_missing_diskids)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetRequest_pool()) {
        oprot.writeString(struct.request_pool);
      }
      if (struct.isSetDisable_hbase_num_rows_estimate()) {
        oprot.writeBool(struct.disable_hbase_num_rows_estimate);
      }
      if (struct.isSetStatus_report_interval_ms()) {
        oprot.writeI32(struct.status_report_interval_ms);
      }
      if (struct.isSetStatus_report_max_retry_s()) {
        oprot.writeI32(struct.status_report_max_retry_s);
      }
      if (struct.isSetTransaction_id()) {
        oprot.writeI64(struct.transaction_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryCtx struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.client_request = new TClientRequest();
      struct.client_request.read(iprot);
      struct.setClient_requestIsSet(true);
      struct.query_id = new org.apache.impala.thrift.TUniqueId();
      struct.query_id.read(iprot);
      struct.setQuery_idIsSet(true);
      struct.session = new TSessionState();
      struct.session.read(iprot);
      struct.setSessionIsSet(true);
      struct.now_string = iprot.readString();
      struct.setNow_stringIsSet(true);
      struct.pid = iprot.readI32();
      struct.setPidIsSet(true);
      struct.start_unix_millis = iprot.readI64();
      struct.setStart_unix_millisIsSet(true);
      struct.utc_timestamp_string = iprot.readString();
      struct.setUtc_timestamp_stringIsSet(true);
      struct.local_time_zone = iprot.readString();
      struct.setLocal_time_zoneIsSet(true);
      struct.trace_resource_usage = iprot.readBool();
      struct.setTrace_resource_usageIsSet(true);
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.coord_address = new org.apache.impala.thrift.TNetworkAddress();
        struct.coord_address.read(iprot);
        struct.setCoord_addressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.coord_krpc_address = new org.apache.impala.thrift.TNetworkAddress();
        struct.coord_krpc_address.read(iprot);
        struct.setCoord_krpc_addressIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tables_missing_stats = new ArrayList<org.apache.impala.thrift.TTableName>(_list15.size);
          org.apache.impala.thrift.TTableName _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new org.apache.impala.thrift.TTableName();
            _elem16.read(iprot);
            struct.tables_missing_stats.add(_elem16);
          }
        }
        struct.setTables_missing_statsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.disable_spilling = iprot.readBool();
        struct.setDisable_spillingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.parent_query_id = new org.apache.impala.thrift.TUniqueId();
        struct.parent_query_id.read(iprot);
        struct.setParent_query_idIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tables_with_corrupt_stats = new ArrayList<org.apache.impala.thrift.TTableName>(_list18.size);
          org.apache.impala.thrift.TTableName _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new org.apache.impala.thrift.TTableName();
            _elem19.read(iprot);
            struct.tables_with_corrupt_stats.add(_elem19);
          }
        }
        struct.setTables_with_corrupt_statsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.snapshot_timestamp = iprot.readI64();
        struct.setSnapshot_timestampIsSet(true);
      }
      if (incoming.get(7)) {
        struct.desc_tbl_testonly = new org.apache.impala.thrift.TDescriptorTable();
        struct.desc_tbl_testonly.read(iprot);
        struct.setDesc_tbl_testonlyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.desc_tbl_serialized = new org.apache.impala.thrift.TDescriptorTableSerialized();
        struct.desc_tbl_serialized.read(iprot);
        struct.setDesc_tbl_serializedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.disable_codegen_hint = iprot.readBool();
        struct.setDisable_codegen_hintIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tables_missing_diskids = new ArrayList<org.apache.impala.thrift.TTableName>(_list21.size);
          org.apache.impala.thrift.TTableName _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new org.apache.impala.thrift.TTableName();
            _elem22.read(iprot);
            struct.tables_missing_diskids.add(_elem22);
          }
        }
        struct.setTables_missing_diskidsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.request_pool = iprot.readString();
        struct.setRequest_poolIsSet(true);
      }
      if (incoming.get(12)) {
        struct.disable_hbase_num_rows_estimate = iprot.readBool();
        struct.setDisable_hbase_num_rows_estimateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.status_report_interval_ms = iprot.readI32();
        struct.setStatus_report_interval_msIsSet(true);
      }
      if (incoming.get(14)) {
        struct.status_report_max_retry_s = iprot.readI32();
        struct.setStatus_report_max_retry_sIsSet(true);
      }
      if (incoming.get(15)) {
        struct.transaction_id = iprot.readI64();
        struct.setTransaction_idIsSet(true);
      }
    }
  }

}

