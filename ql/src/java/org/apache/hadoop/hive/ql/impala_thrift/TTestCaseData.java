/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TTestCaseData implements org.apache.thrift.TBase<TTestCaseData, TTestCaseData._Fields>, java.io.Serializable, Cloneable, Comparable<TTestCaseData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTestCaseData");

  private static final org.apache.thrift.protocol.TField QUERY_STMT_FIELD_DESC = new org.apache.thrift.protocol.TField("query_stmt", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TABLES_AND_VIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("tables_and_views", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DBS_FIELD_DESC = new org.apache.thrift.protocol.TField("dbs", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TESTCASE_DATA_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("testcase_data_path", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IMPALA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("impala_version", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTestCaseDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTestCaseDataTupleSchemeFactory());
  }

  private String query_stmt; // required
  private List<org.apache.impala.thrift.TTable> tables_and_views; // optional
  private List<org.apache.impala.thrift.TDatabase> dbs; // optional
  private String testcase_data_path; // required
  private String impala_version; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_STMT((short)1, "query_stmt"),
    TABLES_AND_VIEWS((short)2, "tables_and_views"),
    DBS((short)3, "dbs"),
    TESTCASE_DATA_PATH((short)4, "testcase_data_path"),
    IMPALA_VERSION((short)5, "impala_version");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_STMT
          return QUERY_STMT;
        case 2: // TABLES_AND_VIEWS
          return TABLES_AND_VIEWS;
        case 3: // DBS
          return DBS;
        case 4: // TESTCASE_DATA_PATH
          return TESTCASE_DATA_PATH;
        case 5: // IMPALA_VERSION
          return IMPALA_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TABLES_AND_VIEWS,_Fields.DBS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_STMT, new org.apache.thrift.meta_data.FieldMetaData("query_stmt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLES_AND_VIEWS, new org.apache.thrift.meta_data.FieldMetaData("tables_and_views", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTable.class))));
    tmpMap.put(_Fields.DBS, new org.apache.thrift.meta_data.FieldMetaData("dbs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDatabase.class))));
    tmpMap.put(_Fields.TESTCASE_DATA_PATH, new org.apache.thrift.meta_data.FieldMetaData("testcase_data_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPALA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("impala_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTestCaseData.class, metaDataMap);
  }

  public TTestCaseData() {
  }

  public TTestCaseData(
    String query_stmt,
    String testcase_data_path,
    String impala_version)
  {
    this();
    this.query_stmt = query_stmt;
    this.testcase_data_path = testcase_data_path;
    this.impala_version = impala_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTestCaseData(TTestCaseData other) {
    if (other.isSetQuery_stmt()) {
      this.query_stmt = other.query_stmt;
    }
    if (other.isSetTables_and_views()) {
      List<org.apache.impala.thrift.TTable> __this__tables_and_views = new ArrayList<org.apache.impala.thrift.TTable>(other.tables_and_views.size());
      for (org.apache.impala.thrift.TTable other_element : other.tables_and_views) {
        __this__tables_and_views.add(new org.apache.impala.thrift.TTable(other_element));
      }
      this.tables_and_views = __this__tables_and_views;
    }
    if (other.isSetDbs()) {
      List<org.apache.impala.thrift.TDatabase> __this__dbs = new ArrayList<org.apache.impala.thrift.TDatabase>(other.dbs.size());
      for (org.apache.impala.thrift.TDatabase other_element : other.dbs) {
        __this__dbs.add(new org.apache.impala.thrift.TDatabase(other_element));
      }
      this.dbs = __this__dbs;
    }
    if (other.isSetTestcase_data_path()) {
      this.testcase_data_path = other.testcase_data_path;
    }
    if (other.isSetImpala_version()) {
      this.impala_version = other.impala_version;
    }
  }

  public TTestCaseData deepCopy() {
    return new TTestCaseData(this);
  }

  @Override
  public void clear() {
    this.query_stmt = null;
    this.tables_and_views = null;
    this.dbs = null;
    this.testcase_data_path = null;
    this.impala_version = null;
  }

  public String getQuery_stmt() {
    return this.query_stmt;
  }

  public void setQuery_stmt(String query_stmt) {
    this.query_stmt = query_stmt;
  }

  public void unsetQuery_stmt() {
    this.query_stmt = null;
  }

  /** Returns true if field query_stmt is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_stmt() {
    return this.query_stmt != null;
  }

  public void setQuery_stmtIsSet(boolean value) {
    if (!value) {
      this.query_stmt = null;
    }
  }

  public int getTables_and_viewsSize() {
    return (this.tables_and_views == null) ? 0 : this.tables_and_views.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TTable> getTables_and_viewsIterator() {
    return (this.tables_and_views == null) ? null : this.tables_and_views.iterator();
  }

  public void addToTables_and_views(org.apache.impala.thrift.TTable elem) {
    if (this.tables_and_views == null) {
      this.tables_and_views = new ArrayList<org.apache.impala.thrift.TTable>();
    }
    this.tables_and_views.add(elem);
  }

  public List<org.apache.impala.thrift.TTable> getTables_and_views() {
    return this.tables_and_views;
  }

  public void setTables_and_views(List<org.apache.impala.thrift.TTable> tables_and_views) {
    this.tables_and_views = tables_and_views;
  }

  public void unsetTables_and_views() {
    this.tables_and_views = null;
  }

  /** Returns true if field tables_and_views is set (has been assigned a value) and false otherwise */
  public boolean isSetTables_and_views() {
    return this.tables_and_views != null;
  }

  public void setTables_and_viewsIsSet(boolean value) {
    if (!value) {
      this.tables_and_views = null;
    }
  }

  public int getDbsSize() {
    return (this.dbs == null) ? 0 : this.dbs.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TDatabase> getDbsIterator() {
    return (this.dbs == null) ? null : this.dbs.iterator();
  }

  public void addToDbs(org.apache.impala.thrift.TDatabase elem) {
    if (this.dbs == null) {
      this.dbs = new ArrayList<org.apache.impala.thrift.TDatabase>();
    }
    this.dbs.add(elem);
  }

  public List<org.apache.impala.thrift.TDatabase> getDbs() {
    return this.dbs;
  }

  public void setDbs(List<org.apache.impala.thrift.TDatabase> dbs) {
    this.dbs = dbs;
  }

  public void unsetDbs() {
    this.dbs = null;
  }

  /** Returns true if field dbs is set (has been assigned a value) and false otherwise */
  public boolean isSetDbs() {
    return this.dbs != null;
  }

  public void setDbsIsSet(boolean value) {
    if (!value) {
      this.dbs = null;
    }
  }

  public String getTestcase_data_path() {
    return this.testcase_data_path;
  }

  public void setTestcase_data_path(String testcase_data_path) {
    this.testcase_data_path = testcase_data_path;
  }

  public void unsetTestcase_data_path() {
    this.testcase_data_path = null;
  }

  /** Returns true if field testcase_data_path is set (has been assigned a value) and false otherwise */
  public boolean isSetTestcase_data_path() {
    return this.testcase_data_path != null;
  }

  public void setTestcase_data_pathIsSet(boolean value) {
    if (!value) {
      this.testcase_data_path = null;
    }
  }

  public String getImpala_version() {
    return this.impala_version;
  }

  public void setImpala_version(String impala_version) {
    this.impala_version = impala_version;
  }

  public void unsetImpala_version() {
    this.impala_version = null;
  }

  /** Returns true if field impala_version is set (has been assigned a value) and false otherwise */
  public boolean isSetImpala_version() {
    return this.impala_version != null;
  }

  public void setImpala_versionIsSet(boolean value) {
    if (!value) {
      this.impala_version = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY_STMT:
      if (value == null) {
        unsetQuery_stmt();
      } else {
        setQuery_stmt((String)value);
      }
      break;

    case TABLES_AND_VIEWS:
      if (value == null) {
        unsetTables_and_views();
      } else {
        setTables_and_views((List<org.apache.impala.thrift.TTable>)value);
      }
      break;

    case DBS:
      if (value == null) {
        unsetDbs();
      } else {
        setDbs((List<org.apache.impala.thrift.TDatabase>)value);
      }
      break;

    case TESTCASE_DATA_PATH:
      if (value == null) {
        unsetTestcase_data_path();
      } else {
        setTestcase_data_path((String)value);
      }
      break;

    case IMPALA_VERSION:
      if (value == null) {
        unsetImpala_version();
      } else {
        setImpala_version((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_STMT:
      return getQuery_stmt();

    case TABLES_AND_VIEWS:
      return getTables_and_views();

    case DBS:
      return getDbs();

    case TESTCASE_DATA_PATH:
      return getTestcase_data_path();

    case IMPALA_VERSION:
      return getImpala_version();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY_STMT:
      return isSetQuery_stmt();
    case TABLES_AND_VIEWS:
      return isSetTables_and_views();
    case DBS:
      return isSetDbs();
    case TESTCASE_DATA_PATH:
      return isSetTestcase_data_path();
    case IMPALA_VERSION:
      return isSetImpala_version();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTestCaseData)
      return this.equals((TTestCaseData)that);
    return false;
  }

  public boolean equals(TTestCaseData that) {
    if (that == null)
      return false;

    boolean this_present_query_stmt = true && this.isSetQuery_stmt();
    boolean that_present_query_stmt = true && that.isSetQuery_stmt();
    if (this_present_query_stmt || that_present_query_stmt) {
      if (!(this_present_query_stmt && that_present_query_stmt))
        return false;
      if (!this.query_stmt.equals(that.query_stmt))
        return false;
    }

    boolean this_present_tables_and_views = true && this.isSetTables_and_views();
    boolean that_present_tables_and_views = true && that.isSetTables_and_views();
    if (this_present_tables_and_views || that_present_tables_and_views) {
      if (!(this_present_tables_and_views && that_present_tables_and_views))
        return false;
      if (!this.tables_and_views.equals(that.tables_and_views))
        return false;
    }

    boolean this_present_dbs = true && this.isSetDbs();
    boolean that_present_dbs = true && that.isSetDbs();
    if (this_present_dbs || that_present_dbs) {
      if (!(this_present_dbs && that_present_dbs))
        return false;
      if (!this.dbs.equals(that.dbs))
        return false;
    }

    boolean this_present_testcase_data_path = true && this.isSetTestcase_data_path();
    boolean that_present_testcase_data_path = true && that.isSetTestcase_data_path();
    if (this_present_testcase_data_path || that_present_testcase_data_path) {
      if (!(this_present_testcase_data_path && that_present_testcase_data_path))
        return false;
      if (!this.testcase_data_path.equals(that.testcase_data_path))
        return false;
    }

    boolean this_present_impala_version = true && this.isSetImpala_version();
    boolean that_present_impala_version = true && that.isSetImpala_version();
    if (this_present_impala_version || that_present_impala_version) {
      if (!(this_present_impala_version && that_present_impala_version))
        return false;
      if (!this.impala_version.equals(that.impala_version))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_query_stmt = true && (isSetQuery_stmt());
    list.add(present_query_stmt);
    if (present_query_stmt)
      list.add(query_stmt);

    boolean present_tables_and_views = true && (isSetTables_and_views());
    list.add(present_tables_and_views);
    if (present_tables_and_views)
      list.add(tables_and_views);

    boolean present_dbs = true && (isSetDbs());
    list.add(present_dbs);
    if (present_dbs)
      list.add(dbs);

    boolean present_testcase_data_path = true && (isSetTestcase_data_path());
    list.add(present_testcase_data_path);
    if (present_testcase_data_path)
      list.add(testcase_data_path);

    boolean present_impala_version = true && (isSetImpala_version());
    list.add(present_impala_version);
    if (present_impala_version)
      list.add(impala_version);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTestCaseData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery_stmt()).compareTo(other.isSetQuery_stmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_stmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_stmt, other.query_stmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTables_and_views()).compareTo(other.isSetTables_and_views());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables_and_views()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables_and_views, other.tables_and_views);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDbs()).compareTo(other.isSetDbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbs, other.dbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestcase_data_path()).compareTo(other.isSetTestcase_data_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestcase_data_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testcase_data_path, other.testcase_data_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImpala_version()).compareTo(other.isSetImpala_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpala_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impala_version, other.impala_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTestCaseData(");
    boolean first = true;

    sb.append("query_stmt:");
    if (this.query_stmt == null) {
      sb.append("null");
    } else {
      sb.append(this.query_stmt);
    }
    first = false;
    if (isSetTables_and_views()) {
      if (!first) sb.append(", ");
      sb.append("tables_and_views:");
      if (this.tables_and_views == null) {
        sb.append("null");
      } else {
        sb.append(this.tables_and_views);
      }
      first = false;
    }
    if (isSetDbs()) {
      if (!first) sb.append(", ");
      sb.append("dbs:");
      if (this.dbs == null) {
        sb.append("null");
      } else {
        sb.append(this.dbs);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("testcase_data_path:");
    if (this.testcase_data_path == null) {
      sb.append("null");
    } else {
      sb.append(this.testcase_data_path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("impala_version:");
    if (this.impala_version == null) {
      sb.append("null");
    } else {
      sb.append(this.impala_version);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetQuery_stmt()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_stmt' is unset! Struct:" + toString());
    }

    if (!isSetTestcase_data_path()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'testcase_data_path' is unset! Struct:" + toString());
    }

    if (!isSetImpala_version()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'impala_version' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTestCaseDataStandardSchemeFactory implements SchemeFactory {
    public TTestCaseDataStandardScheme getScheme() {
      return new TTestCaseDataStandardScheme();
    }
  }

  private static class TTestCaseDataStandardScheme extends StandardScheme<TTestCaseData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTestCaseData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_STMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_stmt = iprot.readString();
              struct.setQuery_stmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLES_AND_VIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list276 = iprot.readListBegin();
                struct.tables_and_views = new ArrayList<org.apache.impala.thrift.TTable>(_list276.size);
                org.apache.impala.thrift.TTable _elem277;
                for (int _i278 = 0; _i278 < _list276.size; ++_i278)
                {
                  _elem277 = new org.apache.impala.thrift.TTable();
                  _elem277.read(iprot);
                  struct.tables_and_views.add(_elem277);
                }
                iprot.readListEnd();
              }
              struct.setTables_and_viewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DBS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list279 = iprot.readListBegin();
                struct.dbs = new ArrayList<org.apache.impala.thrift.TDatabase>(_list279.size);
                org.apache.impala.thrift.TDatabase _elem280;
                for (int _i281 = 0; _i281 < _list279.size; ++_i281)
                {
                  _elem280 = new org.apache.impala.thrift.TDatabase();
                  _elem280.read(iprot);
                  struct.dbs.add(_elem280);
                }
                iprot.readListEnd();
              }
              struct.setDbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TESTCASE_DATA_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.testcase_data_path = iprot.readString();
              struct.setTestcase_data_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMPALA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.impala_version = iprot.readString();
              struct.setImpala_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTestCaseData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query_stmt != null) {
        oprot.writeFieldBegin(QUERY_STMT_FIELD_DESC);
        oprot.writeString(struct.query_stmt);
        oprot.writeFieldEnd();
      }
      if (struct.tables_and_views != null) {
        if (struct.isSetTables_and_views()) {
          oprot.writeFieldBegin(TABLES_AND_VIEWS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tables_and_views.size()));
            for (org.apache.impala.thrift.TTable _iter282 : struct.tables_and_views)
            {
              _iter282.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dbs != null) {
        if (struct.isSetDbs()) {
          oprot.writeFieldBegin(DBS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dbs.size()));
            for (org.apache.impala.thrift.TDatabase _iter283 : struct.dbs)
            {
              _iter283.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.testcase_data_path != null) {
        oprot.writeFieldBegin(TESTCASE_DATA_PATH_FIELD_DESC);
        oprot.writeString(struct.testcase_data_path);
        oprot.writeFieldEnd();
      }
      if (struct.impala_version != null) {
        oprot.writeFieldBegin(IMPALA_VERSION_FIELD_DESC);
        oprot.writeString(struct.impala_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTestCaseDataTupleSchemeFactory implements SchemeFactory {
    public TTestCaseDataTupleScheme getScheme() {
      return new TTestCaseDataTupleScheme();
    }
  }

  private static class TTestCaseDataTupleScheme extends TupleScheme<TTestCaseData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTestCaseData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.query_stmt);
      oprot.writeString(struct.testcase_data_path);
      oprot.writeString(struct.impala_version);
      BitSet optionals = new BitSet();
      if (struct.isSetTables_and_views()) {
        optionals.set(0);
      }
      if (struct.isSetDbs()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTables_and_views()) {
        {
          oprot.writeI32(struct.tables_and_views.size());
          for (org.apache.impala.thrift.TTable _iter284 : struct.tables_and_views)
          {
            _iter284.write(oprot);
          }
        }
      }
      if (struct.isSetDbs()) {
        {
          oprot.writeI32(struct.dbs.size());
          for (org.apache.impala.thrift.TDatabase _iter285 : struct.dbs)
          {
            _iter285.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTestCaseData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.query_stmt = iprot.readString();
      struct.setQuery_stmtIsSet(true);
      struct.testcase_data_path = iprot.readString();
      struct.setTestcase_data_pathIsSet(true);
      struct.impala_version = iprot.readString();
      struct.setImpala_versionIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list286 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tables_and_views = new ArrayList<org.apache.impala.thrift.TTable>(_list286.size);
          org.apache.impala.thrift.TTable _elem287;
          for (int _i288 = 0; _i288 < _list286.size; ++_i288)
          {
            _elem287 = new org.apache.impala.thrift.TTable();
            _elem287.read(iprot);
            struct.tables_and_views.add(_elem287);
          }
        }
        struct.setTables_and_viewsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list289 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dbs = new ArrayList<org.apache.impala.thrift.TDatabase>(_list289.size);
          org.apache.impala.thrift.TDatabase _elem290;
          for (int _i291 = 0; _i291 < _list289.size; ++_i291)
          {
            _elem290 = new org.apache.impala.thrift.TDatabase();
            _elem290.read(iprot);
            struct.dbs.add(_elem290);
          }
        }
        struct.setDbsIsSet(true);
      }
    }
  }

}

