/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TBackendGflags implements org.apache.thrift.TBase<TBackendGflags, TBackendGflags._Fields>, java.io.Serializable, Cloneable, Comparable<TBackendGflags> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBackendGflags");

  private static final org.apache.thrift.protocol.TField SENTRY_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sentry_config", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOAD_AUTH_TO_LOCAL_RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("load_auth_to_local_rules", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField NON_IMPALA_JAVA_VLOG_FIELD_DESC = new org.apache.thrift.protocol.TField("non_impala_java_vlog", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IMPALA_LOG_LVL_FIELD_DESC = new org.apache.thrift.protocol.TField("impala_log_lvl", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField INC_STATS_SIZE_LIMIT_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("inc_stats_size_limit_bytes", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField LINEAGE_EVENT_LOG_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("lineage_event_log_dir", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOAD_CATALOG_IN_BACKGROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("load_catalog_in_background", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField NUM_METADATA_LOADING_THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_metadata_loading_threads", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("principal", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("server_name", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField AUTHORIZATION_POLICY_PROVIDER_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_policy_provider_class", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField KUDU_MASTER_HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_master_hosts", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField LOCAL_LIBRARY_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("local_library_path", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField READ_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("read_size", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField KUDU_OPERATION_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_operation_timeout_ms", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField INITIAL_HMS_CNXN_TIMEOUT_S_FIELD_DESC = new org.apache.thrift.protocol.TField("initial_hms_cnxn_timeout_s", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ENABLE_STATS_EXTRAPOLATION_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_stats_extrapolation", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField SENTRY_CATALOG_POLLING_FREQUENCY_S_FIELD_DESC = new org.apache.thrift.protocol.TField("sentry_catalog_polling_frequency_s", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField MAX_HDFS_PARTITIONS_PARALLEL_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("max_hdfs_partitions_parallel_load", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("max_nonhdfs_partitions_parallel_load", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField RESERVED_WORDS_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("reserved_words_version", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField MAX_FILTER_ERROR_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_filter_error_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField MIN_BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("min_buffer_size", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField ENABLE_ORC_SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_orc_scanner", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField AUTHORIZED_PROXY_GROUP_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("authorized_proxy_group_config", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField USE_LOCAL_CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("use_local_catalog", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_catalog_data_ops_debug_only", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField LOCAL_CATALOG_CACHE_MB_FIELD_DESC = new org.apache.thrift.protocol.TField("local_catalog_cache_mb", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField LOCAL_CATALOG_CACHE_EXPIRATION_S_FIELD_DESC = new org.apache.thrift.protocol.TField("local_catalog_cache_expiration_s", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField CATALOG_TOPIC_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog_topic_mode", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField INVALIDATE_TABLES_TIMEOUT_S_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidate_tables_timeout_s", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField INVALIDATE_TABLES_ON_MEMORY_PRESSURE_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidate_tables_on_memory_pressure", org.apache.thrift.protocol.TType.BOOL, (short)34);
  private static final org.apache.thrift.protocol.TField INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidate_tables_gc_old_gen_full_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidate_tables_fraction_on_memory_pressure", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField LOCAL_CATALOG_MAX_FETCH_RETRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("local_catalog_max_fetch_retries", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_scanner_thread_estimated_bytes_per_column", org.apache.thrift.protocol.TType.I64, (short)38);
  private static final org.apache.thrift.protocol.TField KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_scanner_thread_max_estimated_bytes", org.apache.thrift.protocol.TType.I64, (short)39);
  private static final org.apache.thrift.protocol.TField CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog_max_parallel_partial_fetch_rpc", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S_FIELD_DESC = new org.apache.thrift.protocol.TField("catalog_partial_fetch_rpc_queue_timeout_s", org.apache.thrift.protocol.TType.I64, (short)41);
  private static final org.apache.thrift.protocol.TField EXCHG_NODE_BUFFER_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("exchg_node_buffer_size_bytes", org.apache.thrift.protocol.TType.I64, (short)42);
  private static final org.apache.thrift.protocol.TField KUDU_MUTATION_BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_mutation_buffer_size", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField KUDU_ERROR_BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_error_buffer_size", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField HMS_EVENT_POLLING_INTERVAL_S_FIELD_DESC = new org.apache.thrift.protocol.TField("hms_event_polling_interval_s", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField IMPALA_BUILD_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("impala_build_version", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField AUTHORIZATION_FACTORY_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_factory_class", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField UNLOCK_MT_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("unlock_mt_dop", org.apache.thrift.protocol.TType.BOOL, (short)48);
  private static final org.apache.thrift.protocol.TField RANGER_SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ranger_service_type", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField RANGER_APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ranger_app_id", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField AUTHORIZATION_PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization_provider", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField RECURSIVELY_LIST_PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("recursively_list_partitions", org.apache.thrift.protocol.TType.BOOL, (short)52);
  private static final org.apache.thrift.protocol.TField QUERY_EVENT_HOOK_CLASSES_FIELD_DESC = new org.apache.thrift.protocol.TField("query_event_hook_classes", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField QUERY_EVENT_HOOK_NTHREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_event_hook_nthreads", org.apache.thrift.protocol.TType.I32, (short)54);
  private static final org.apache.thrift.protocol.TField IS_EXECUTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("is_executor", org.apache.thrift.protocol.TType.BOOL, (short)55);
  private static final org.apache.thrift.protocol.TField USE_DEDICATED_COORDINATOR_ESTIMATES_FIELD_DESC = new org.apache.thrift.protocol.TField("use_dedicated_coordinator_estimates", org.apache.thrift.protocol.TType.BOOL, (short)56);
  private static final org.apache.thrift.protocol.TField BLACKLISTED_DBS_FIELD_DESC = new org.apache.thrift.protocol.TField("blacklisted_dbs", org.apache.thrift.protocol.TType.STRING, (short)57);
  private static final org.apache.thrift.protocol.TField BLACKLISTED_TABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("blacklisted_tables", org.apache.thrift.protocol.TType.STRING, (short)58);
  private static final org.apache.thrift.protocol.TField UNLOCK_ZORDER_SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("unlock_zorder_sort", org.apache.thrift.protocol.TType.BOOL, (short)59);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBackendGflagsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBackendGflagsTupleSchemeFactory());
  }

  private String sentry_config; // required
  private boolean load_auth_to_local_rules; // required
  private int non_impala_java_vlog; // required
  private int impala_log_lvl; // required
  private long inc_stats_size_limit_bytes; // required
  private String lineage_event_log_dir; // required
  private boolean load_catalog_in_background; // required
  private int num_metadata_loading_threads; // required
  private String principal; // required
  private String server_name; // required
  private String authorization_policy_provider_class; // required
  private String kudu_master_hosts; // required
  private String local_library_path; // required
  private int read_size; // required
  private int kudu_operation_timeout_ms; // required
  private int initial_hms_cnxn_timeout_s; // required
  private boolean enable_stats_extrapolation; // required
  private long sentry_catalog_polling_frequency_s; // required
  private int max_hdfs_partitions_parallel_load; // required
  private int max_nonhdfs_partitions_parallel_load; // required
  private TReservedWordsVersion reserved_words_version; // required
  private double max_filter_error_rate; // required
  private long min_buffer_size; // required
  private boolean enable_orc_scanner; // required
  private String authorized_proxy_group_config; // required
  private boolean use_local_catalog; // required
  private boolean disable_catalog_data_ops_debug_only; // required
  private int local_catalog_cache_mb; // required
  private int local_catalog_cache_expiration_s; // required
  private String catalog_topic_mode; // required
  private int invalidate_tables_timeout_s; // required
  private boolean invalidate_tables_on_memory_pressure; // required
  private double invalidate_tables_gc_old_gen_full_threshold; // required
  private double invalidate_tables_fraction_on_memory_pressure; // required
  private int local_catalog_max_fetch_retries; // required
  private long kudu_scanner_thread_estimated_bytes_per_column; // required
  private long kudu_scanner_thread_max_estimated_bytes; // required
  private int catalog_max_parallel_partial_fetch_rpc; // required
  private long catalog_partial_fetch_rpc_queue_timeout_s; // required
  private long exchg_node_buffer_size_bytes; // required
  private int kudu_mutation_buffer_size; // required
  private int kudu_error_buffer_size; // required
  private int hms_event_polling_interval_s; // required
  private String impala_build_version; // required
  private String authorization_factory_class; // required
  private boolean unlock_mt_dop; // required
  private String ranger_service_type; // required
  private String ranger_app_id; // required
  private String authorization_provider; // required
  private boolean recursively_list_partitions; // required
  private String query_event_hook_classes; // required
  private int query_event_hook_nthreads; // required
  private boolean is_executor; // required
  private boolean use_dedicated_coordinator_estimates; // required
  private String blacklisted_dbs; // required
  private String blacklisted_tables; // required
  private boolean unlock_zorder_sort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENTRY_CONFIG((short)1, "sentry_config"),
    LOAD_AUTH_TO_LOCAL_RULES((short)2, "load_auth_to_local_rules"),
    NON_IMPALA_JAVA_VLOG((short)3, "non_impala_java_vlog"),
    IMPALA_LOG_LVL((short)4, "impala_log_lvl"),
    INC_STATS_SIZE_LIMIT_BYTES((short)5, "inc_stats_size_limit_bytes"),
    LINEAGE_EVENT_LOG_DIR((short)6, "lineage_event_log_dir"),
    LOAD_CATALOG_IN_BACKGROUND((short)7, "load_catalog_in_background"),
    NUM_METADATA_LOADING_THREADS((short)8, "num_metadata_loading_threads"),
    PRINCIPAL((short)9, "principal"),
    SERVER_NAME((short)11, "server_name"),
    AUTHORIZATION_POLICY_PROVIDER_CLASS((short)12, "authorization_policy_provider_class"),
    KUDU_MASTER_HOSTS((short)13, "kudu_master_hosts"),
    LOCAL_LIBRARY_PATH((short)14, "local_library_path"),
    READ_SIZE((short)15, "read_size"),
    KUDU_OPERATION_TIMEOUT_MS((short)16, "kudu_operation_timeout_ms"),
    INITIAL_HMS_CNXN_TIMEOUT_S((short)17, "initial_hms_cnxn_timeout_s"),
    ENABLE_STATS_EXTRAPOLATION((short)18, "enable_stats_extrapolation"),
    SENTRY_CATALOG_POLLING_FREQUENCY_S((short)19, "sentry_catalog_polling_frequency_s"),
    MAX_HDFS_PARTITIONS_PARALLEL_LOAD((short)20, "max_hdfs_partitions_parallel_load"),
    MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD((short)21, "max_nonhdfs_partitions_parallel_load"),
    /**
     * 
     * @see TReservedWordsVersion
     */
    RESERVED_WORDS_VERSION((short)22, "reserved_words_version"),
    MAX_FILTER_ERROR_RATE((short)23, "max_filter_error_rate"),
    MIN_BUFFER_SIZE((short)24, "min_buffer_size"),
    ENABLE_ORC_SCANNER((short)25, "enable_orc_scanner"),
    AUTHORIZED_PROXY_GROUP_CONFIG((short)26, "authorized_proxy_group_config"),
    USE_LOCAL_CATALOG((short)27, "use_local_catalog"),
    DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY((short)28, "disable_catalog_data_ops_debug_only"),
    LOCAL_CATALOG_CACHE_MB((short)29, "local_catalog_cache_mb"),
    LOCAL_CATALOG_CACHE_EXPIRATION_S((short)30, "local_catalog_cache_expiration_s"),
    CATALOG_TOPIC_MODE((short)32, "catalog_topic_mode"),
    INVALIDATE_TABLES_TIMEOUT_S((short)33, "invalidate_tables_timeout_s"),
    INVALIDATE_TABLES_ON_MEMORY_PRESSURE((short)34, "invalidate_tables_on_memory_pressure"),
    INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD((short)35, "invalidate_tables_gc_old_gen_full_threshold"),
    INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE((short)36, "invalidate_tables_fraction_on_memory_pressure"),
    LOCAL_CATALOG_MAX_FETCH_RETRIES((short)37, "local_catalog_max_fetch_retries"),
    KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN((short)38, "kudu_scanner_thread_estimated_bytes_per_column"),
    KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES((short)39, "kudu_scanner_thread_max_estimated_bytes"),
    CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC((short)40, "catalog_max_parallel_partial_fetch_rpc"),
    CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S((short)41, "catalog_partial_fetch_rpc_queue_timeout_s"),
    EXCHG_NODE_BUFFER_SIZE_BYTES((short)42, "exchg_node_buffer_size_bytes"),
    KUDU_MUTATION_BUFFER_SIZE((short)43, "kudu_mutation_buffer_size"),
    KUDU_ERROR_BUFFER_SIZE((short)44, "kudu_error_buffer_size"),
    HMS_EVENT_POLLING_INTERVAL_S((short)45, "hms_event_polling_interval_s"),
    IMPALA_BUILD_VERSION((short)46, "impala_build_version"),
    AUTHORIZATION_FACTORY_CLASS((short)47, "authorization_factory_class"),
    UNLOCK_MT_DOP((short)48, "unlock_mt_dop"),
    RANGER_SERVICE_TYPE((short)49, "ranger_service_type"),
    RANGER_APP_ID((short)50, "ranger_app_id"),
    AUTHORIZATION_PROVIDER((short)51, "authorization_provider"),
    RECURSIVELY_LIST_PARTITIONS((short)52, "recursively_list_partitions"),
    QUERY_EVENT_HOOK_CLASSES((short)53, "query_event_hook_classes"),
    QUERY_EVENT_HOOK_NTHREADS((short)54, "query_event_hook_nthreads"),
    IS_EXECUTOR((short)55, "is_executor"),
    USE_DEDICATED_COORDINATOR_ESTIMATES((short)56, "use_dedicated_coordinator_estimates"),
    BLACKLISTED_DBS((short)57, "blacklisted_dbs"),
    BLACKLISTED_TABLES((short)58, "blacklisted_tables"),
    UNLOCK_ZORDER_SORT((short)59, "unlock_zorder_sort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENTRY_CONFIG
          return SENTRY_CONFIG;
        case 2: // LOAD_AUTH_TO_LOCAL_RULES
          return LOAD_AUTH_TO_LOCAL_RULES;
        case 3: // NON_IMPALA_JAVA_VLOG
          return NON_IMPALA_JAVA_VLOG;
        case 4: // IMPALA_LOG_LVL
          return IMPALA_LOG_LVL;
        case 5: // INC_STATS_SIZE_LIMIT_BYTES
          return INC_STATS_SIZE_LIMIT_BYTES;
        case 6: // LINEAGE_EVENT_LOG_DIR
          return LINEAGE_EVENT_LOG_DIR;
        case 7: // LOAD_CATALOG_IN_BACKGROUND
          return LOAD_CATALOG_IN_BACKGROUND;
        case 8: // NUM_METADATA_LOADING_THREADS
          return NUM_METADATA_LOADING_THREADS;
        case 9: // PRINCIPAL
          return PRINCIPAL;
        case 11: // SERVER_NAME
          return SERVER_NAME;
        case 12: // AUTHORIZATION_POLICY_PROVIDER_CLASS
          return AUTHORIZATION_POLICY_PROVIDER_CLASS;
        case 13: // KUDU_MASTER_HOSTS
          return KUDU_MASTER_HOSTS;
        case 14: // LOCAL_LIBRARY_PATH
          return LOCAL_LIBRARY_PATH;
        case 15: // READ_SIZE
          return READ_SIZE;
        case 16: // KUDU_OPERATION_TIMEOUT_MS
          return KUDU_OPERATION_TIMEOUT_MS;
        case 17: // INITIAL_HMS_CNXN_TIMEOUT_S
          return INITIAL_HMS_CNXN_TIMEOUT_S;
        case 18: // ENABLE_STATS_EXTRAPOLATION
          return ENABLE_STATS_EXTRAPOLATION;
        case 19: // SENTRY_CATALOG_POLLING_FREQUENCY_S
          return SENTRY_CATALOG_POLLING_FREQUENCY_S;
        case 20: // MAX_HDFS_PARTITIONS_PARALLEL_LOAD
          return MAX_HDFS_PARTITIONS_PARALLEL_LOAD;
        case 21: // MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD
          return MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD;
        case 22: // RESERVED_WORDS_VERSION
          return RESERVED_WORDS_VERSION;
        case 23: // MAX_FILTER_ERROR_RATE
          return MAX_FILTER_ERROR_RATE;
        case 24: // MIN_BUFFER_SIZE
          return MIN_BUFFER_SIZE;
        case 25: // ENABLE_ORC_SCANNER
          return ENABLE_ORC_SCANNER;
        case 26: // AUTHORIZED_PROXY_GROUP_CONFIG
          return AUTHORIZED_PROXY_GROUP_CONFIG;
        case 27: // USE_LOCAL_CATALOG
          return USE_LOCAL_CATALOG;
        case 28: // DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY
          return DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY;
        case 29: // LOCAL_CATALOG_CACHE_MB
          return LOCAL_CATALOG_CACHE_MB;
        case 30: // LOCAL_CATALOG_CACHE_EXPIRATION_S
          return LOCAL_CATALOG_CACHE_EXPIRATION_S;
        case 32: // CATALOG_TOPIC_MODE
          return CATALOG_TOPIC_MODE;
        case 33: // INVALIDATE_TABLES_TIMEOUT_S
          return INVALIDATE_TABLES_TIMEOUT_S;
        case 34: // INVALIDATE_TABLES_ON_MEMORY_PRESSURE
          return INVALIDATE_TABLES_ON_MEMORY_PRESSURE;
        case 35: // INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD
          return INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD;
        case 36: // INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE
          return INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE;
        case 37: // LOCAL_CATALOG_MAX_FETCH_RETRIES
          return LOCAL_CATALOG_MAX_FETCH_RETRIES;
        case 38: // KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN
          return KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN;
        case 39: // KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES
          return KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES;
        case 40: // CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC
          return CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC;
        case 41: // CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S
          return CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S;
        case 42: // EXCHG_NODE_BUFFER_SIZE_BYTES
          return EXCHG_NODE_BUFFER_SIZE_BYTES;
        case 43: // KUDU_MUTATION_BUFFER_SIZE
          return KUDU_MUTATION_BUFFER_SIZE;
        case 44: // KUDU_ERROR_BUFFER_SIZE
          return KUDU_ERROR_BUFFER_SIZE;
        case 45: // HMS_EVENT_POLLING_INTERVAL_S
          return HMS_EVENT_POLLING_INTERVAL_S;
        case 46: // IMPALA_BUILD_VERSION
          return IMPALA_BUILD_VERSION;
        case 47: // AUTHORIZATION_FACTORY_CLASS
          return AUTHORIZATION_FACTORY_CLASS;
        case 48: // UNLOCK_MT_DOP
          return UNLOCK_MT_DOP;
        case 49: // RANGER_SERVICE_TYPE
          return RANGER_SERVICE_TYPE;
        case 50: // RANGER_APP_ID
          return RANGER_APP_ID;
        case 51: // AUTHORIZATION_PROVIDER
          return AUTHORIZATION_PROVIDER;
        case 52: // RECURSIVELY_LIST_PARTITIONS
          return RECURSIVELY_LIST_PARTITIONS;
        case 53: // QUERY_EVENT_HOOK_CLASSES
          return QUERY_EVENT_HOOK_CLASSES;
        case 54: // QUERY_EVENT_HOOK_NTHREADS
          return QUERY_EVENT_HOOK_NTHREADS;
        case 55: // IS_EXECUTOR
          return IS_EXECUTOR;
        case 56: // USE_DEDICATED_COORDINATOR_ESTIMATES
          return USE_DEDICATED_COORDINATOR_ESTIMATES;
        case 57: // BLACKLISTED_DBS
          return BLACKLISTED_DBS;
        case 58: // BLACKLISTED_TABLES
          return BLACKLISTED_TABLES;
        case 59: // UNLOCK_ZORDER_SORT
          return UNLOCK_ZORDER_SORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOAD_AUTH_TO_LOCAL_RULES_ISSET_ID = 0;
  private static final int __NON_IMPALA_JAVA_VLOG_ISSET_ID = 1;
  private static final int __IMPALA_LOG_LVL_ISSET_ID = 2;
  private static final int __INC_STATS_SIZE_LIMIT_BYTES_ISSET_ID = 3;
  private static final int __LOAD_CATALOG_IN_BACKGROUND_ISSET_ID = 4;
  private static final int __NUM_METADATA_LOADING_THREADS_ISSET_ID = 5;
  private static final int __READ_SIZE_ISSET_ID = 6;
  private static final int __KUDU_OPERATION_TIMEOUT_MS_ISSET_ID = 7;
  private static final int __INITIAL_HMS_CNXN_TIMEOUT_S_ISSET_ID = 8;
  private static final int __ENABLE_STATS_EXTRAPOLATION_ISSET_ID = 9;
  private static final int __SENTRY_CATALOG_POLLING_FREQUENCY_S_ISSET_ID = 10;
  private static final int __MAX_HDFS_PARTITIONS_PARALLEL_LOAD_ISSET_ID = 11;
  private static final int __MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD_ISSET_ID = 12;
  private static final int __MAX_FILTER_ERROR_RATE_ISSET_ID = 13;
  private static final int __MIN_BUFFER_SIZE_ISSET_ID = 14;
  private static final int __ENABLE_ORC_SCANNER_ISSET_ID = 15;
  private static final int __USE_LOCAL_CATALOG_ISSET_ID = 16;
  private static final int __DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY_ISSET_ID = 17;
  private static final int __LOCAL_CATALOG_CACHE_MB_ISSET_ID = 18;
  private static final int __LOCAL_CATALOG_CACHE_EXPIRATION_S_ISSET_ID = 19;
  private static final int __INVALIDATE_TABLES_TIMEOUT_S_ISSET_ID = 20;
  private static final int __INVALIDATE_TABLES_ON_MEMORY_PRESSURE_ISSET_ID = 21;
  private static final int __INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD_ISSET_ID = 22;
  private static final int __INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE_ISSET_ID = 23;
  private static final int __LOCAL_CATALOG_MAX_FETCH_RETRIES_ISSET_ID = 24;
  private static final int __KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN_ISSET_ID = 25;
  private static final int __KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES_ISSET_ID = 26;
  private static final int __CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC_ISSET_ID = 27;
  private static final int __CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S_ISSET_ID = 28;
  private static final int __EXCHG_NODE_BUFFER_SIZE_BYTES_ISSET_ID = 29;
  private static final int __KUDU_MUTATION_BUFFER_SIZE_ISSET_ID = 30;
  private static final int __KUDU_ERROR_BUFFER_SIZE_ISSET_ID = 31;
  private static final int __HMS_EVENT_POLLING_INTERVAL_S_ISSET_ID = 32;
  private static final int __UNLOCK_MT_DOP_ISSET_ID = 33;
  private static final int __RECURSIVELY_LIST_PARTITIONS_ISSET_ID = 34;
  private static final int __QUERY_EVENT_HOOK_NTHREADS_ISSET_ID = 35;
  private static final int __IS_EXECUTOR_ISSET_ID = 36;
  private static final int __USE_DEDICATED_COORDINATOR_ESTIMATES_ISSET_ID = 37;
  private static final int __UNLOCK_ZORDER_SORT_ISSET_ID = 38;
  private long __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENTRY_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("sentry_config", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_AUTH_TO_LOCAL_RULES, new org.apache.thrift.meta_data.FieldMetaData("load_auth_to_local_rules", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NON_IMPALA_JAVA_VLOG, new org.apache.thrift.meta_data.FieldMetaData("non_impala_java_vlog", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMPALA_LOG_LVL, new org.apache.thrift.meta_data.FieldMetaData("impala_log_lvl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INC_STATS_SIZE_LIMIT_BYTES, new org.apache.thrift.meta_data.FieldMetaData("inc_stats_size_limit_bytes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LINEAGE_EVENT_LOG_DIR, new org.apache.thrift.meta_data.FieldMetaData("lineage_event_log_dir", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_CATALOG_IN_BACKGROUND, new org.apache.thrift.meta_data.FieldMetaData("load_catalog_in_background", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NUM_METADATA_LOADING_THREADS, new org.apache.thrift.meta_data.FieldMetaData("num_metadata_loading_threads", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("principal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("server_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORIZATION_POLICY_PROVIDER_CLASS, new org.apache.thrift.meta_data.FieldMetaData("authorization_policy_provider_class", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KUDU_MASTER_HOSTS, new org.apache.thrift.meta_data.FieldMetaData("kudu_master_hosts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCAL_LIBRARY_PATH, new org.apache.thrift.meta_data.FieldMetaData("local_library_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.READ_SIZE, new org.apache.thrift.meta_data.FieldMetaData("read_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KUDU_OPERATION_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("kudu_operation_timeout_ms", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INITIAL_HMS_CNXN_TIMEOUT_S, new org.apache.thrift.meta_data.FieldMetaData("initial_hms_cnxn_timeout_s", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_STATS_EXTRAPOLATION, new org.apache.thrift.meta_data.FieldMetaData("enable_stats_extrapolation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SENTRY_CATALOG_POLLING_FREQUENCY_S, new org.apache.thrift.meta_data.FieldMetaData("sentry_catalog_polling_frequency_s", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_HDFS_PARTITIONS_PARALLEL_LOAD, new org.apache.thrift.meta_data.FieldMetaData("max_hdfs_partitions_parallel_load", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD, new org.apache.thrift.meta_data.FieldMetaData("max_nonhdfs_partitions_parallel_load", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESERVED_WORDS_VERSION, new org.apache.thrift.meta_data.FieldMetaData("reserved_words_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TReservedWordsVersion.class)));
    tmpMap.put(_Fields.MAX_FILTER_ERROR_RATE, new org.apache.thrift.meta_data.FieldMetaData("max_filter_error_rate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("min_buffer_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_ORC_SCANNER, new org.apache.thrift.meta_data.FieldMetaData("enable_orc_scanner", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AUTHORIZED_PROXY_GROUP_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("authorized_proxy_group_config", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_LOCAL_CATALOG, new org.apache.thrift.meta_data.FieldMetaData("use_local_catalog", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY, new org.apache.thrift.meta_data.FieldMetaData("disable_catalog_data_ops_debug_only", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOCAL_CATALOG_CACHE_MB, new org.apache.thrift.meta_data.FieldMetaData("local_catalog_cache_mb", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCAL_CATALOG_CACHE_EXPIRATION_S, new org.apache.thrift.meta_data.FieldMetaData("local_catalog_cache_expiration_s", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATALOG_TOPIC_MODE, new org.apache.thrift.meta_data.FieldMetaData("catalog_topic_mode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVALIDATE_TABLES_TIMEOUT_S, new org.apache.thrift.meta_data.FieldMetaData("invalidate_tables_timeout_s", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INVALIDATE_TABLES_ON_MEMORY_PRESSURE, new org.apache.thrift.meta_data.FieldMetaData("invalidate_tables_on_memory_pressure", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("invalidate_tables_gc_old_gen_full_threshold", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE, new org.apache.thrift.meta_data.FieldMetaData("invalidate_tables_fraction_on_memory_pressure", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOCAL_CATALOG_MAX_FETCH_RETRIES, new org.apache.thrift.meta_data.FieldMetaData("local_catalog_max_fetch_retries", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("kudu_scanner_thread_estimated_bytes_per_column", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("kudu_scanner_thread_max_estimated_bytes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC, new org.apache.thrift.meta_data.FieldMetaData("catalog_max_parallel_partial_fetch_rpc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S, new org.apache.thrift.meta_data.FieldMetaData("catalog_partial_fetch_rpc_queue_timeout_s", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXCHG_NODE_BUFFER_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("exchg_node_buffer_size_bytes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KUDU_MUTATION_BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("kudu_mutation_buffer_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KUDU_ERROR_BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("kudu_error_buffer_size", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HMS_EVENT_POLLING_INTERVAL_S, new org.apache.thrift.meta_data.FieldMetaData("hms_event_polling_interval_s", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMPALA_BUILD_VERSION, new org.apache.thrift.meta_data.FieldMetaData("impala_build_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORIZATION_FACTORY_CLASS, new org.apache.thrift.meta_data.FieldMetaData("authorization_factory_class", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNLOCK_MT_DOP, new org.apache.thrift.meta_data.FieldMetaData("unlock_mt_dop", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RANGER_SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ranger_service_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANGER_APP_ID, new org.apache.thrift.meta_data.FieldMetaData("ranger_app_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORIZATION_PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("authorization_provider", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECURSIVELY_LIST_PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("recursively_list_partitions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUERY_EVENT_HOOK_CLASSES, new org.apache.thrift.meta_data.FieldMetaData("query_event_hook_classes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_EVENT_HOOK_NTHREADS, new org.apache.thrift.meta_data.FieldMetaData("query_event_hook_nthreads", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_EXECUTOR, new org.apache.thrift.meta_data.FieldMetaData("is_executor", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_DEDICATED_COORDINATOR_ESTIMATES, new org.apache.thrift.meta_data.FieldMetaData("use_dedicated_coordinator_estimates", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BLACKLISTED_DBS, new org.apache.thrift.meta_data.FieldMetaData("blacklisted_dbs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLACKLISTED_TABLES, new org.apache.thrift.meta_data.FieldMetaData("blacklisted_tables", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNLOCK_ZORDER_SORT, new org.apache.thrift.meta_data.FieldMetaData("unlock_zorder_sort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBackendGflags.class, metaDataMap);
  }

  public TBackendGflags() {
  }

  public TBackendGflags(
    String sentry_config,
    boolean load_auth_to_local_rules,
    int non_impala_java_vlog,
    int impala_log_lvl,
    long inc_stats_size_limit_bytes,
    String lineage_event_log_dir,
    boolean load_catalog_in_background,
    int num_metadata_loading_threads,
    String principal,
    String server_name,
    String authorization_policy_provider_class,
    String kudu_master_hosts,
    String local_library_path,
    int read_size,
    int kudu_operation_timeout_ms,
    int initial_hms_cnxn_timeout_s,
    boolean enable_stats_extrapolation,
    long sentry_catalog_polling_frequency_s,
    int max_hdfs_partitions_parallel_load,
    int max_nonhdfs_partitions_parallel_load,
    TReservedWordsVersion reserved_words_version,
    double max_filter_error_rate,
    long min_buffer_size,
    boolean enable_orc_scanner,
    String authorized_proxy_group_config,
    boolean use_local_catalog,
    boolean disable_catalog_data_ops_debug_only,
    int local_catalog_cache_mb,
    int local_catalog_cache_expiration_s,
    String catalog_topic_mode,
    int invalidate_tables_timeout_s,
    boolean invalidate_tables_on_memory_pressure,
    double invalidate_tables_gc_old_gen_full_threshold,
    double invalidate_tables_fraction_on_memory_pressure,
    int local_catalog_max_fetch_retries,
    long kudu_scanner_thread_estimated_bytes_per_column,
    long kudu_scanner_thread_max_estimated_bytes,
    int catalog_max_parallel_partial_fetch_rpc,
    long catalog_partial_fetch_rpc_queue_timeout_s,
    long exchg_node_buffer_size_bytes,
    int kudu_mutation_buffer_size,
    int kudu_error_buffer_size,
    int hms_event_polling_interval_s,
    String impala_build_version,
    String authorization_factory_class,
    boolean unlock_mt_dop,
    String ranger_service_type,
    String ranger_app_id,
    String authorization_provider,
    boolean recursively_list_partitions,
    String query_event_hook_classes,
    int query_event_hook_nthreads,
    boolean is_executor,
    boolean use_dedicated_coordinator_estimates,
    String blacklisted_dbs,
    String blacklisted_tables,
    boolean unlock_zorder_sort)
  {
    this();
    this.sentry_config = sentry_config;
    this.load_auth_to_local_rules = load_auth_to_local_rules;
    setLoad_auth_to_local_rulesIsSet(true);
    this.non_impala_java_vlog = non_impala_java_vlog;
    setNon_impala_java_vlogIsSet(true);
    this.impala_log_lvl = impala_log_lvl;
    setImpala_log_lvlIsSet(true);
    this.inc_stats_size_limit_bytes = inc_stats_size_limit_bytes;
    setInc_stats_size_limit_bytesIsSet(true);
    this.lineage_event_log_dir = lineage_event_log_dir;
    this.load_catalog_in_background = load_catalog_in_background;
    setLoad_catalog_in_backgroundIsSet(true);
    this.num_metadata_loading_threads = num_metadata_loading_threads;
    setNum_metadata_loading_threadsIsSet(true);
    this.principal = principal;
    this.server_name = server_name;
    this.authorization_policy_provider_class = authorization_policy_provider_class;
    this.kudu_master_hosts = kudu_master_hosts;
    this.local_library_path = local_library_path;
    this.read_size = read_size;
    setRead_sizeIsSet(true);
    this.kudu_operation_timeout_ms = kudu_operation_timeout_ms;
    setKudu_operation_timeout_msIsSet(true);
    this.initial_hms_cnxn_timeout_s = initial_hms_cnxn_timeout_s;
    setInitial_hms_cnxn_timeout_sIsSet(true);
    this.enable_stats_extrapolation = enable_stats_extrapolation;
    setEnable_stats_extrapolationIsSet(true);
    this.sentry_catalog_polling_frequency_s = sentry_catalog_polling_frequency_s;
    setSentry_catalog_polling_frequency_sIsSet(true);
    this.max_hdfs_partitions_parallel_load = max_hdfs_partitions_parallel_load;
    setMax_hdfs_partitions_parallel_loadIsSet(true);
    this.max_nonhdfs_partitions_parallel_load = max_nonhdfs_partitions_parallel_load;
    setMax_nonhdfs_partitions_parallel_loadIsSet(true);
    this.reserved_words_version = reserved_words_version;
    this.max_filter_error_rate = max_filter_error_rate;
    setMax_filter_error_rateIsSet(true);
    this.min_buffer_size = min_buffer_size;
    setMin_buffer_sizeIsSet(true);
    this.enable_orc_scanner = enable_orc_scanner;
    setEnable_orc_scannerIsSet(true);
    this.authorized_proxy_group_config = authorized_proxy_group_config;
    this.use_local_catalog = use_local_catalog;
    setUse_local_catalogIsSet(true);
    this.disable_catalog_data_ops_debug_only = disable_catalog_data_ops_debug_only;
    setDisable_catalog_data_ops_debug_onlyIsSet(true);
    this.local_catalog_cache_mb = local_catalog_cache_mb;
    setLocal_catalog_cache_mbIsSet(true);
    this.local_catalog_cache_expiration_s = local_catalog_cache_expiration_s;
    setLocal_catalog_cache_expiration_sIsSet(true);
    this.catalog_topic_mode = catalog_topic_mode;
    this.invalidate_tables_timeout_s = invalidate_tables_timeout_s;
    setInvalidate_tables_timeout_sIsSet(true);
    this.invalidate_tables_on_memory_pressure = invalidate_tables_on_memory_pressure;
    setInvalidate_tables_on_memory_pressureIsSet(true);
    this.invalidate_tables_gc_old_gen_full_threshold = invalidate_tables_gc_old_gen_full_threshold;
    setInvalidate_tables_gc_old_gen_full_thresholdIsSet(true);
    this.invalidate_tables_fraction_on_memory_pressure = invalidate_tables_fraction_on_memory_pressure;
    setInvalidate_tables_fraction_on_memory_pressureIsSet(true);
    this.local_catalog_max_fetch_retries = local_catalog_max_fetch_retries;
    setLocal_catalog_max_fetch_retriesIsSet(true);
    this.kudu_scanner_thread_estimated_bytes_per_column = kudu_scanner_thread_estimated_bytes_per_column;
    setKudu_scanner_thread_estimated_bytes_per_columnIsSet(true);
    this.kudu_scanner_thread_max_estimated_bytes = kudu_scanner_thread_max_estimated_bytes;
    setKudu_scanner_thread_max_estimated_bytesIsSet(true);
    this.catalog_max_parallel_partial_fetch_rpc = catalog_max_parallel_partial_fetch_rpc;
    setCatalog_max_parallel_partial_fetch_rpcIsSet(true);
    this.catalog_partial_fetch_rpc_queue_timeout_s = catalog_partial_fetch_rpc_queue_timeout_s;
    setCatalog_partial_fetch_rpc_queue_timeout_sIsSet(true);
    this.exchg_node_buffer_size_bytes = exchg_node_buffer_size_bytes;
    setExchg_node_buffer_size_bytesIsSet(true);
    this.kudu_mutation_buffer_size = kudu_mutation_buffer_size;
    setKudu_mutation_buffer_sizeIsSet(true);
    this.kudu_error_buffer_size = kudu_error_buffer_size;
    setKudu_error_buffer_sizeIsSet(true);
    this.hms_event_polling_interval_s = hms_event_polling_interval_s;
    setHms_event_polling_interval_sIsSet(true);
    this.impala_build_version = impala_build_version;
    this.authorization_factory_class = authorization_factory_class;
    this.unlock_mt_dop = unlock_mt_dop;
    setUnlock_mt_dopIsSet(true);
    this.ranger_service_type = ranger_service_type;
    this.ranger_app_id = ranger_app_id;
    this.authorization_provider = authorization_provider;
    this.recursively_list_partitions = recursively_list_partitions;
    setRecursively_list_partitionsIsSet(true);
    this.query_event_hook_classes = query_event_hook_classes;
    this.query_event_hook_nthreads = query_event_hook_nthreads;
    setQuery_event_hook_nthreadsIsSet(true);
    this.is_executor = is_executor;
    setIs_executorIsSet(true);
    this.use_dedicated_coordinator_estimates = use_dedicated_coordinator_estimates;
    setUse_dedicated_coordinator_estimatesIsSet(true);
    this.blacklisted_dbs = blacklisted_dbs;
    this.blacklisted_tables = blacklisted_tables;
    this.unlock_zorder_sort = unlock_zorder_sort;
    setUnlock_zorder_sortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBackendGflags(TBackendGflags other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSentry_config()) {
      this.sentry_config = other.sentry_config;
    }
    this.load_auth_to_local_rules = other.load_auth_to_local_rules;
    this.non_impala_java_vlog = other.non_impala_java_vlog;
    this.impala_log_lvl = other.impala_log_lvl;
    this.inc_stats_size_limit_bytes = other.inc_stats_size_limit_bytes;
    if (other.isSetLineage_event_log_dir()) {
      this.lineage_event_log_dir = other.lineage_event_log_dir;
    }
    this.load_catalog_in_background = other.load_catalog_in_background;
    this.num_metadata_loading_threads = other.num_metadata_loading_threads;
    if (other.isSetPrincipal()) {
      this.principal = other.principal;
    }
    if (other.isSetServer_name()) {
      this.server_name = other.server_name;
    }
    if (other.isSetAuthorization_policy_provider_class()) {
      this.authorization_policy_provider_class = other.authorization_policy_provider_class;
    }
    if (other.isSetKudu_master_hosts()) {
      this.kudu_master_hosts = other.kudu_master_hosts;
    }
    if (other.isSetLocal_library_path()) {
      this.local_library_path = other.local_library_path;
    }
    this.read_size = other.read_size;
    this.kudu_operation_timeout_ms = other.kudu_operation_timeout_ms;
    this.initial_hms_cnxn_timeout_s = other.initial_hms_cnxn_timeout_s;
    this.enable_stats_extrapolation = other.enable_stats_extrapolation;
    this.sentry_catalog_polling_frequency_s = other.sentry_catalog_polling_frequency_s;
    this.max_hdfs_partitions_parallel_load = other.max_hdfs_partitions_parallel_load;
    this.max_nonhdfs_partitions_parallel_load = other.max_nonhdfs_partitions_parallel_load;
    if (other.isSetReserved_words_version()) {
      this.reserved_words_version = other.reserved_words_version;
    }
    this.max_filter_error_rate = other.max_filter_error_rate;
    this.min_buffer_size = other.min_buffer_size;
    this.enable_orc_scanner = other.enable_orc_scanner;
    if (other.isSetAuthorized_proxy_group_config()) {
      this.authorized_proxy_group_config = other.authorized_proxy_group_config;
    }
    this.use_local_catalog = other.use_local_catalog;
    this.disable_catalog_data_ops_debug_only = other.disable_catalog_data_ops_debug_only;
    this.local_catalog_cache_mb = other.local_catalog_cache_mb;
    this.local_catalog_cache_expiration_s = other.local_catalog_cache_expiration_s;
    if (other.isSetCatalog_topic_mode()) {
      this.catalog_topic_mode = other.catalog_topic_mode;
    }
    this.invalidate_tables_timeout_s = other.invalidate_tables_timeout_s;
    this.invalidate_tables_on_memory_pressure = other.invalidate_tables_on_memory_pressure;
    this.invalidate_tables_gc_old_gen_full_threshold = other.invalidate_tables_gc_old_gen_full_threshold;
    this.invalidate_tables_fraction_on_memory_pressure = other.invalidate_tables_fraction_on_memory_pressure;
    this.local_catalog_max_fetch_retries = other.local_catalog_max_fetch_retries;
    this.kudu_scanner_thread_estimated_bytes_per_column = other.kudu_scanner_thread_estimated_bytes_per_column;
    this.kudu_scanner_thread_max_estimated_bytes = other.kudu_scanner_thread_max_estimated_bytes;
    this.catalog_max_parallel_partial_fetch_rpc = other.catalog_max_parallel_partial_fetch_rpc;
    this.catalog_partial_fetch_rpc_queue_timeout_s = other.catalog_partial_fetch_rpc_queue_timeout_s;
    this.exchg_node_buffer_size_bytes = other.exchg_node_buffer_size_bytes;
    this.kudu_mutation_buffer_size = other.kudu_mutation_buffer_size;
    this.kudu_error_buffer_size = other.kudu_error_buffer_size;
    this.hms_event_polling_interval_s = other.hms_event_polling_interval_s;
    if (other.isSetImpala_build_version()) {
      this.impala_build_version = other.impala_build_version;
    }
    if (other.isSetAuthorization_factory_class()) {
      this.authorization_factory_class = other.authorization_factory_class;
    }
    this.unlock_mt_dop = other.unlock_mt_dop;
    if (other.isSetRanger_service_type()) {
      this.ranger_service_type = other.ranger_service_type;
    }
    if (other.isSetRanger_app_id()) {
      this.ranger_app_id = other.ranger_app_id;
    }
    if (other.isSetAuthorization_provider()) {
      this.authorization_provider = other.authorization_provider;
    }
    this.recursively_list_partitions = other.recursively_list_partitions;
    if (other.isSetQuery_event_hook_classes()) {
      this.query_event_hook_classes = other.query_event_hook_classes;
    }
    this.query_event_hook_nthreads = other.query_event_hook_nthreads;
    this.is_executor = other.is_executor;
    this.use_dedicated_coordinator_estimates = other.use_dedicated_coordinator_estimates;
    if (other.isSetBlacklisted_dbs()) {
      this.blacklisted_dbs = other.blacklisted_dbs;
    }
    if (other.isSetBlacklisted_tables()) {
      this.blacklisted_tables = other.blacklisted_tables;
    }
    this.unlock_zorder_sort = other.unlock_zorder_sort;
  }

  public TBackendGflags deepCopy() {
    return new TBackendGflags(this);
  }

  @Override
  public void clear() {
    this.sentry_config = null;
    setLoad_auth_to_local_rulesIsSet(false);
    this.load_auth_to_local_rules = false;
    setNon_impala_java_vlogIsSet(false);
    this.non_impala_java_vlog = 0;
    setImpala_log_lvlIsSet(false);
    this.impala_log_lvl = 0;
    setInc_stats_size_limit_bytesIsSet(false);
    this.inc_stats_size_limit_bytes = 0;
    this.lineage_event_log_dir = null;
    setLoad_catalog_in_backgroundIsSet(false);
    this.load_catalog_in_background = false;
    setNum_metadata_loading_threadsIsSet(false);
    this.num_metadata_loading_threads = 0;
    this.principal = null;
    this.server_name = null;
    this.authorization_policy_provider_class = null;
    this.kudu_master_hosts = null;
    this.local_library_path = null;
    setRead_sizeIsSet(false);
    this.read_size = 0;
    setKudu_operation_timeout_msIsSet(false);
    this.kudu_operation_timeout_ms = 0;
    setInitial_hms_cnxn_timeout_sIsSet(false);
    this.initial_hms_cnxn_timeout_s = 0;
    setEnable_stats_extrapolationIsSet(false);
    this.enable_stats_extrapolation = false;
    setSentry_catalog_polling_frequency_sIsSet(false);
    this.sentry_catalog_polling_frequency_s = 0;
    setMax_hdfs_partitions_parallel_loadIsSet(false);
    this.max_hdfs_partitions_parallel_load = 0;
    setMax_nonhdfs_partitions_parallel_loadIsSet(false);
    this.max_nonhdfs_partitions_parallel_load = 0;
    this.reserved_words_version = null;
    setMax_filter_error_rateIsSet(false);
    this.max_filter_error_rate = 0.0;
    setMin_buffer_sizeIsSet(false);
    this.min_buffer_size = 0;
    setEnable_orc_scannerIsSet(false);
    this.enable_orc_scanner = false;
    this.authorized_proxy_group_config = null;
    setUse_local_catalogIsSet(false);
    this.use_local_catalog = false;
    setDisable_catalog_data_ops_debug_onlyIsSet(false);
    this.disable_catalog_data_ops_debug_only = false;
    setLocal_catalog_cache_mbIsSet(false);
    this.local_catalog_cache_mb = 0;
    setLocal_catalog_cache_expiration_sIsSet(false);
    this.local_catalog_cache_expiration_s = 0;
    this.catalog_topic_mode = null;
    setInvalidate_tables_timeout_sIsSet(false);
    this.invalidate_tables_timeout_s = 0;
    setInvalidate_tables_on_memory_pressureIsSet(false);
    this.invalidate_tables_on_memory_pressure = false;
    setInvalidate_tables_gc_old_gen_full_thresholdIsSet(false);
    this.invalidate_tables_gc_old_gen_full_threshold = 0.0;
    setInvalidate_tables_fraction_on_memory_pressureIsSet(false);
    this.invalidate_tables_fraction_on_memory_pressure = 0.0;
    setLocal_catalog_max_fetch_retriesIsSet(false);
    this.local_catalog_max_fetch_retries = 0;
    setKudu_scanner_thread_estimated_bytes_per_columnIsSet(false);
    this.kudu_scanner_thread_estimated_bytes_per_column = 0;
    setKudu_scanner_thread_max_estimated_bytesIsSet(false);
    this.kudu_scanner_thread_max_estimated_bytes = 0;
    setCatalog_max_parallel_partial_fetch_rpcIsSet(false);
    this.catalog_max_parallel_partial_fetch_rpc = 0;
    setCatalog_partial_fetch_rpc_queue_timeout_sIsSet(false);
    this.catalog_partial_fetch_rpc_queue_timeout_s = 0;
    setExchg_node_buffer_size_bytesIsSet(false);
    this.exchg_node_buffer_size_bytes = 0;
    setKudu_mutation_buffer_sizeIsSet(false);
    this.kudu_mutation_buffer_size = 0;
    setKudu_error_buffer_sizeIsSet(false);
    this.kudu_error_buffer_size = 0;
    setHms_event_polling_interval_sIsSet(false);
    this.hms_event_polling_interval_s = 0;
    this.impala_build_version = null;
    this.authorization_factory_class = null;
    setUnlock_mt_dopIsSet(false);
    this.unlock_mt_dop = false;
    this.ranger_service_type = null;
    this.ranger_app_id = null;
    this.authorization_provider = null;
    setRecursively_list_partitionsIsSet(false);
    this.recursively_list_partitions = false;
    this.query_event_hook_classes = null;
    setQuery_event_hook_nthreadsIsSet(false);
    this.query_event_hook_nthreads = 0;
    setIs_executorIsSet(false);
    this.is_executor = false;
    setUse_dedicated_coordinator_estimatesIsSet(false);
    this.use_dedicated_coordinator_estimates = false;
    this.blacklisted_dbs = null;
    this.blacklisted_tables = null;
    setUnlock_zorder_sortIsSet(false);
    this.unlock_zorder_sort = false;
  }

  public String getSentry_config() {
    return this.sentry_config;
  }

  public void setSentry_config(String sentry_config) {
    this.sentry_config = sentry_config;
  }

  public void unsetSentry_config() {
    this.sentry_config = null;
  }

  /** Returns true if field sentry_config is set (has been assigned a value) and false otherwise */
  public boolean isSetSentry_config() {
    return this.sentry_config != null;
  }

  public void setSentry_configIsSet(boolean value) {
    if (!value) {
      this.sentry_config = null;
    }
  }

  public boolean isLoad_auth_to_local_rules() {
    return this.load_auth_to_local_rules;
  }

  public void setLoad_auth_to_local_rules(boolean load_auth_to_local_rules) {
    this.load_auth_to_local_rules = load_auth_to_local_rules;
    setLoad_auth_to_local_rulesIsSet(true);
  }

  public void unsetLoad_auth_to_local_rules() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOAD_AUTH_TO_LOCAL_RULES_ISSET_ID);
  }

  /** Returns true if field load_auth_to_local_rules is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_auth_to_local_rules() {
    return EncodingUtils.testBit(__isset_bitfield, __LOAD_AUTH_TO_LOCAL_RULES_ISSET_ID);
  }

  public void setLoad_auth_to_local_rulesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOAD_AUTH_TO_LOCAL_RULES_ISSET_ID, value);
  }

  public int getNon_impala_java_vlog() {
    return this.non_impala_java_vlog;
  }

  public void setNon_impala_java_vlog(int non_impala_java_vlog) {
    this.non_impala_java_vlog = non_impala_java_vlog;
    setNon_impala_java_vlogIsSet(true);
  }

  public void unsetNon_impala_java_vlog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NON_IMPALA_JAVA_VLOG_ISSET_ID);
  }

  /** Returns true if field non_impala_java_vlog is set (has been assigned a value) and false otherwise */
  public boolean isSetNon_impala_java_vlog() {
    return EncodingUtils.testBit(__isset_bitfield, __NON_IMPALA_JAVA_VLOG_ISSET_ID);
  }

  public void setNon_impala_java_vlogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NON_IMPALA_JAVA_VLOG_ISSET_ID, value);
  }

  public int getImpala_log_lvl() {
    return this.impala_log_lvl;
  }

  public void setImpala_log_lvl(int impala_log_lvl) {
    this.impala_log_lvl = impala_log_lvl;
    setImpala_log_lvlIsSet(true);
  }

  public void unsetImpala_log_lvl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMPALA_LOG_LVL_ISSET_ID);
  }

  /** Returns true if field impala_log_lvl is set (has been assigned a value) and false otherwise */
  public boolean isSetImpala_log_lvl() {
    return EncodingUtils.testBit(__isset_bitfield, __IMPALA_LOG_LVL_ISSET_ID);
  }

  public void setImpala_log_lvlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMPALA_LOG_LVL_ISSET_ID, value);
  }

  public long getInc_stats_size_limit_bytes() {
    return this.inc_stats_size_limit_bytes;
  }

  public void setInc_stats_size_limit_bytes(long inc_stats_size_limit_bytes) {
    this.inc_stats_size_limit_bytes = inc_stats_size_limit_bytes;
    setInc_stats_size_limit_bytesIsSet(true);
  }

  public void unsetInc_stats_size_limit_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INC_STATS_SIZE_LIMIT_BYTES_ISSET_ID);
  }

  /** Returns true if field inc_stats_size_limit_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetInc_stats_size_limit_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __INC_STATS_SIZE_LIMIT_BYTES_ISSET_ID);
  }

  public void setInc_stats_size_limit_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INC_STATS_SIZE_LIMIT_BYTES_ISSET_ID, value);
  }

  public String getLineage_event_log_dir() {
    return this.lineage_event_log_dir;
  }

  public void setLineage_event_log_dir(String lineage_event_log_dir) {
    this.lineage_event_log_dir = lineage_event_log_dir;
  }

  public void unsetLineage_event_log_dir() {
    this.lineage_event_log_dir = null;
  }

  /** Returns true if field lineage_event_log_dir is set (has been assigned a value) and false otherwise */
  public boolean isSetLineage_event_log_dir() {
    return this.lineage_event_log_dir != null;
  }

  public void setLineage_event_log_dirIsSet(boolean value) {
    if (!value) {
      this.lineage_event_log_dir = null;
    }
  }

  public boolean isLoad_catalog_in_background() {
    return this.load_catalog_in_background;
  }

  public void setLoad_catalog_in_background(boolean load_catalog_in_background) {
    this.load_catalog_in_background = load_catalog_in_background;
    setLoad_catalog_in_backgroundIsSet(true);
  }

  public void unsetLoad_catalog_in_background() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOAD_CATALOG_IN_BACKGROUND_ISSET_ID);
  }

  /** Returns true if field load_catalog_in_background is set (has been assigned a value) and false otherwise */
  public boolean isSetLoad_catalog_in_background() {
    return EncodingUtils.testBit(__isset_bitfield, __LOAD_CATALOG_IN_BACKGROUND_ISSET_ID);
  }

  public void setLoad_catalog_in_backgroundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOAD_CATALOG_IN_BACKGROUND_ISSET_ID, value);
  }

  public int getNum_metadata_loading_threads() {
    return this.num_metadata_loading_threads;
  }

  public void setNum_metadata_loading_threads(int num_metadata_loading_threads) {
    this.num_metadata_loading_threads = num_metadata_loading_threads;
    setNum_metadata_loading_threadsIsSet(true);
  }

  public void unsetNum_metadata_loading_threads() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_METADATA_LOADING_THREADS_ISSET_ID);
  }

  /** Returns true if field num_metadata_loading_threads is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_metadata_loading_threads() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_METADATA_LOADING_THREADS_ISSET_ID);
  }

  public void setNum_metadata_loading_threadsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_METADATA_LOADING_THREADS_ISSET_ID, value);
  }

  public String getPrincipal() {
    return this.principal;
  }

  public void setPrincipal(String principal) {
    this.principal = principal;
  }

  public void unsetPrincipal() {
    this.principal = null;
  }

  /** Returns true if field principal is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal() {
    return this.principal != null;
  }

  public void setPrincipalIsSet(boolean value) {
    if (!value) {
      this.principal = null;
    }
  }

  public String getServer_name() {
    return this.server_name;
  }

  public void setServer_name(String server_name) {
    this.server_name = server_name;
  }

  public void unsetServer_name() {
    this.server_name = null;
  }

  /** Returns true if field server_name is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_name() {
    return this.server_name != null;
  }

  public void setServer_nameIsSet(boolean value) {
    if (!value) {
      this.server_name = null;
    }
  }

  public String getAuthorization_policy_provider_class() {
    return this.authorization_policy_provider_class;
  }

  public void setAuthorization_policy_provider_class(String authorization_policy_provider_class) {
    this.authorization_policy_provider_class = authorization_policy_provider_class;
  }

  public void unsetAuthorization_policy_provider_class() {
    this.authorization_policy_provider_class = null;
  }

  /** Returns true if field authorization_policy_provider_class is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorization_policy_provider_class() {
    return this.authorization_policy_provider_class != null;
  }

  public void setAuthorization_policy_provider_classIsSet(boolean value) {
    if (!value) {
      this.authorization_policy_provider_class = null;
    }
  }

  public String getKudu_master_hosts() {
    return this.kudu_master_hosts;
  }

  public void setKudu_master_hosts(String kudu_master_hosts) {
    this.kudu_master_hosts = kudu_master_hosts;
  }

  public void unsetKudu_master_hosts() {
    this.kudu_master_hosts = null;
  }

  /** Returns true if field kudu_master_hosts is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_master_hosts() {
    return this.kudu_master_hosts != null;
  }

  public void setKudu_master_hostsIsSet(boolean value) {
    if (!value) {
      this.kudu_master_hosts = null;
    }
  }

  public String getLocal_library_path() {
    return this.local_library_path;
  }

  public void setLocal_library_path(String local_library_path) {
    this.local_library_path = local_library_path;
  }

  public void unsetLocal_library_path() {
    this.local_library_path = null;
  }

  /** Returns true if field local_library_path is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_library_path() {
    return this.local_library_path != null;
  }

  public void setLocal_library_pathIsSet(boolean value) {
    if (!value) {
      this.local_library_path = null;
    }
  }

  public int getRead_size() {
    return this.read_size;
  }

  public void setRead_size(int read_size) {
    this.read_size = read_size;
    setRead_sizeIsSet(true);
  }

  public void unsetRead_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READ_SIZE_ISSET_ID);
  }

  /** Returns true if field read_size is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_size() {
    return EncodingUtils.testBit(__isset_bitfield, __READ_SIZE_ISSET_ID);
  }

  public void setRead_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READ_SIZE_ISSET_ID, value);
  }

  public int getKudu_operation_timeout_ms() {
    return this.kudu_operation_timeout_ms;
  }

  public void setKudu_operation_timeout_ms(int kudu_operation_timeout_ms) {
    this.kudu_operation_timeout_ms = kudu_operation_timeout_ms;
    setKudu_operation_timeout_msIsSet(true);
  }

  public void unsetKudu_operation_timeout_ms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KUDU_OPERATION_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field kudu_operation_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_operation_timeout_ms() {
    return EncodingUtils.testBit(__isset_bitfield, __KUDU_OPERATION_TIMEOUT_MS_ISSET_ID);
  }

  public void setKudu_operation_timeout_msIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KUDU_OPERATION_TIMEOUT_MS_ISSET_ID, value);
  }

  public int getInitial_hms_cnxn_timeout_s() {
    return this.initial_hms_cnxn_timeout_s;
  }

  public void setInitial_hms_cnxn_timeout_s(int initial_hms_cnxn_timeout_s) {
    this.initial_hms_cnxn_timeout_s = initial_hms_cnxn_timeout_s;
    setInitial_hms_cnxn_timeout_sIsSet(true);
  }

  public void unsetInitial_hms_cnxn_timeout_s() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIAL_HMS_CNXN_TIMEOUT_S_ISSET_ID);
  }

  /** Returns true if field initial_hms_cnxn_timeout_s is set (has been assigned a value) and false otherwise */
  public boolean isSetInitial_hms_cnxn_timeout_s() {
    return EncodingUtils.testBit(__isset_bitfield, __INITIAL_HMS_CNXN_TIMEOUT_S_ISSET_ID);
  }

  public void setInitial_hms_cnxn_timeout_sIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIAL_HMS_CNXN_TIMEOUT_S_ISSET_ID, value);
  }

  public boolean isEnable_stats_extrapolation() {
    return this.enable_stats_extrapolation;
  }

  public void setEnable_stats_extrapolation(boolean enable_stats_extrapolation) {
    this.enable_stats_extrapolation = enable_stats_extrapolation;
    setEnable_stats_extrapolationIsSet(true);
  }

  public void unsetEnable_stats_extrapolation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLE_STATS_EXTRAPOLATION_ISSET_ID);
  }

  /** Returns true if field enable_stats_extrapolation is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_stats_extrapolation() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLE_STATS_EXTRAPOLATION_ISSET_ID);
  }

  public void setEnable_stats_extrapolationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLE_STATS_EXTRAPOLATION_ISSET_ID, value);
  }

  public long getSentry_catalog_polling_frequency_s() {
    return this.sentry_catalog_polling_frequency_s;
  }

  public void setSentry_catalog_polling_frequency_s(long sentry_catalog_polling_frequency_s) {
    this.sentry_catalog_polling_frequency_s = sentry_catalog_polling_frequency_s;
    setSentry_catalog_polling_frequency_sIsSet(true);
  }

  public void unsetSentry_catalog_polling_frequency_s() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENTRY_CATALOG_POLLING_FREQUENCY_S_ISSET_ID);
  }

  /** Returns true if field sentry_catalog_polling_frequency_s is set (has been assigned a value) and false otherwise */
  public boolean isSetSentry_catalog_polling_frequency_s() {
    return EncodingUtils.testBit(__isset_bitfield, __SENTRY_CATALOG_POLLING_FREQUENCY_S_ISSET_ID);
  }

  public void setSentry_catalog_polling_frequency_sIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENTRY_CATALOG_POLLING_FREQUENCY_S_ISSET_ID, value);
  }

  public int getMax_hdfs_partitions_parallel_load() {
    return this.max_hdfs_partitions_parallel_load;
  }

  public void setMax_hdfs_partitions_parallel_load(int max_hdfs_partitions_parallel_load) {
    this.max_hdfs_partitions_parallel_load = max_hdfs_partitions_parallel_load;
    setMax_hdfs_partitions_parallel_loadIsSet(true);
  }

  public void unsetMax_hdfs_partitions_parallel_load() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_HDFS_PARTITIONS_PARALLEL_LOAD_ISSET_ID);
  }

  /** Returns true if field max_hdfs_partitions_parallel_load is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_hdfs_partitions_parallel_load() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_HDFS_PARTITIONS_PARALLEL_LOAD_ISSET_ID);
  }

  public void setMax_hdfs_partitions_parallel_loadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_HDFS_PARTITIONS_PARALLEL_LOAD_ISSET_ID, value);
  }

  public int getMax_nonhdfs_partitions_parallel_load() {
    return this.max_nonhdfs_partitions_parallel_load;
  }

  public void setMax_nonhdfs_partitions_parallel_load(int max_nonhdfs_partitions_parallel_load) {
    this.max_nonhdfs_partitions_parallel_load = max_nonhdfs_partitions_parallel_load;
    setMax_nonhdfs_partitions_parallel_loadIsSet(true);
  }

  public void unsetMax_nonhdfs_partitions_parallel_load() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD_ISSET_ID);
  }

  /** Returns true if field max_nonhdfs_partitions_parallel_load is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_nonhdfs_partitions_parallel_load() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD_ISSET_ID);
  }

  public void setMax_nonhdfs_partitions_parallel_loadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD_ISSET_ID, value);
  }

  /**
   * 
   * @see TReservedWordsVersion
   */
  public TReservedWordsVersion getReserved_words_version() {
    return this.reserved_words_version;
  }

  /**
   * 
   * @see TReservedWordsVersion
   */
  public void setReserved_words_version(TReservedWordsVersion reserved_words_version) {
    this.reserved_words_version = reserved_words_version;
  }

  public void unsetReserved_words_version() {
    this.reserved_words_version = null;
  }

  /** Returns true if field reserved_words_version is set (has been assigned a value) and false otherwise */
  public boolean isSetReserved_words_version() {
    return this.reserved_words_version != null;
  }

  public void setReserved_words_versionIsSet(boolean value) {
    if (!value) {
      this.reserved_words_version = null;
    }
  }

  public double getMax_filter_error_rate() {
    return this.max_filter_error_rate;
  }

  public void setMax_filter_error_rate(double max_filter_error_rate) {
    this.max_filter_error_rate = max_filter_error_rate;
    setMax_filter_error_rateIsSet(true);
  }

  public void unsetMax_filter_error_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_FILTER_ERROR_RATE_ISSET_ID);
  }

  /** Returns true if field max_filter_error_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_filter_error_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_FILTER_ERROR_RATE_ISSET_ID);
  }

  public void setMax_filter_error_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_FILTER_ERROR_RATE_ISSET_ID, value);
  }

  public long getMin_buffer_size() {
    return this.min_buffer_size;
  }

  public void setMin_buffer_size(long min_buffer_size) {
    this.min_buffer_size = min_buffer_size;
    setMin_buffer_sizeIsSet(true);
  }

  public void unsetMin_buffer_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_BUFFER_SIZE_ISSET_ID);
  }

  /** Returns true if field min_buffer_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_buffer_size() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_BUFFER_SIZE_ISSET_ID);
  }

  public void setMin_buffer_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_BUFFER_SIZE_ISSET_ID, value);
  }

  public boolean isEnable_orc_scanner() {
    return this.enable_orc_scanner;
  }

  public void setEnable_orc_scanner(boolean enable_orc_scanner) {
    this.enable_orc_scanner = enable_orc_scanner;
    setEnable_orc_scannerIsSet(true);
  }

  public void unsetEnable_orc_scanner() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENABLE_ORC_SCANNER_ISSET_ID);
  }

  /** Returns true if field enable_orc_scanner is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_orc_scanner() {
    return EncodingUtils.testBit(__isset_bitfield, __ENABLE_ORC_SCANNER_ISSET_ID);
  }

  public void setEnable_orc_scannerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENABLE_ORC_SCANNER_ISSET_ID, value);
  }

  public String getAuthorized_proxy_group_config() {
    return this.authorized_proxy_group_config;
  }

  public void setAuthorized_proxy_group_config(String authorized_proxy_group_config) {
    this.authorized_proxy_group_config = authorized_proxy_group_config;
  }

  public void unsetAuthorized_proxy_group_config() {
    this.authorized_proxy_group_config = null;
  }

  /** Returns true if field authorized_proxy_group_config is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorized_proxy_group_config() {
    return this.authorized_proxy_group_config != null;
  }

  public void setAuthorized_proxy_group_configIsSet(boolean value) {
    if (!value) {
      this.authorized_proxy_group_config = null;
    }
  }

  public boolean isUse_local_catalog() {
    return this.use_local_catalog;
  }

  public void setUse_local_catalog(boolean use_local_catalog) {
    this.use_local_catalog = use_local_catalog;
    setUse_local_catalogIsSet(true);
  }

  public void unsetUse_local_catalog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_LOCAL_CATALOG_ISSET_ID);
  }

  /** Returns true if field use_local_catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_local_catalog() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_LOCAL_CATALOG_ISSET_ID);
  }

  public void setUse_local_catalogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_LOCAL_CATALOG_ISSET_ID, value);
  }

  public boolean isDisable_catalog_data_ops_debug_only() {
    return this.disable_catalog_data_ops_debug_only;
  }

  public void setDisable_catalog_data_ops_debug_only(boolean disable_catalog_data_ops_debug_only) {
    this.disable_catalog_data_ops_debug_only = disable_catalog_data_ops_debug_only;
    setDisable_catalog_data_ops_debug_onlyIsSet(true);
  }

  public void unsetDisable_catalog_data_ops_debug_only() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY_ISSET_ID);
  }

  /** Returns true if field disable_catalog_data_ops_debug_only is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_catalog_data_ops_debug_only() {
    return EncodingUtils.testBit(__isset_bitfield, __DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY_ISSET_ID);
  }

  public void setDisable_catalog_data_ops_debug_onlyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY_ISSET_ID, value);
  }

  public int getLocal_catalog_cache_mb() {
    return this.local_catalog_cache_mb;
  }

  public void setLocal_catalog_cache_mb(int local_catalog_cache_mb) {
    this.local_catalog_cache_mb = local_catalog_cache_mb;
    setLocal_catalog_cache_mbIsSet(true);
  }

  public void unsetLocal_catalog_cache_mb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCAL_CATALOG_CACHE_MB_ISSET_ID);
  }

  /** Returns true if field local_catalog_cache_mb is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_catalog_cache_mb() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCAL_CATALOG_CACHE_MB_ISSET_ID);
  }

  public void setLocal_catalog_cache_mbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCAL_CATALOG_CACHE_MB_ISSET_ID, value);
  }

  public int getLocal_catalog_cache_expiration_s() {
    return this.local_catalog_cache_expiration_s;
  }

  public void setLocal_catalog_cache_expiration_s(int local_catalog_cache_expiration_s) {
    this.local_catalog_cache_expiration_s = local_catalog_cache_expiration_s;
    setLocal_catalog_cache_expiration_sIsSet(true);
  }

  public void unsetLocal_catalog_cache_expiration_s() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCAL_CATALOG_CACHE_EXPIRATION_S_ISSET_ID);
  }

  /** Returns true if field local_catalog_cache_expiration_s is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_catalog_cache_expiration_s() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCAL_CATALOG_CACHE_EXPIRATION_S_ISSET_ID);
  }

  public void setLocal_catalog_cache_expiration_sIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCAL_CATALOG_CACHE_EXPIRATION_S_ISSET_ID, value);
  }

  public String getCatalog_topic_mode() {
    return this.catalog_topic_mode;
  }

  public void setCatalog_topic_mode(String catalog_topic_mode) {
    this.catalog_topic_mode = catalog_topic_mode;
  }

  public void unsetCatalog_topic_mode() {
    this.catalog_topic_mode = null;
  }

  /** Returns true if field catalog_topic_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog_topic_mode() {
    return this.catalog_topic_mode != null;
  }

  public void setCatalog_topic_modeIsSet(boolean value) {
    if (!value) {
      this.catalog_topic_mode = null;
    }
  }

  public int getInvalidate_tables_timeout_s() {
    return this.invalidate_tables_timeout_s;
  }

  public void setInvalidate_tables_timeout_s(int invalidate_tables_timeout_s) {
    this.invalidate_tables_timeout_s = invalidate_tables_timeout_s;
    setInvalidate_tables_timeout_sIsSet(true);
  }

  public void unsetInvalidate_tables_timeout_s() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVALIDATE_TABLES_TIMEOUT_S_ISSET_ID);
  }

  /** Returns true if field invalidate_tables_timeout_s is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidate_tables_timeout_s() {
    return EncodingUtils.testBit(__isset_bitfield, __INVALIDATE_TABLES_TIMEOUT_S_ISSET_ID);
  }

  public void setInvalidate_tables_timeout_sIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVALIDATE_TABLES_TIMEOUT_S_ISSET_ID, value);
  }

  public boolean isInvalidate_tables_on_memory_pressure() {
    return this.invalidate_tables_on_memory_pressure;
  }

  public void setInvalidate_tables_on_memory_pressure(boolean invalidate_tables_on_memory_pressure) {
    this.invalidate_tables_on_memory_pressure = invalidate_tables_on_memory_pressure;
    setInvalidate_tables_on_memory_pressureIsSet(true);
  }

  public void unsetInvalidate_tables_on_memory_pressure() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVALIDATE_TABLES_ON_MEMORY_PRESSURE_ISSET_ID);
  }

  /** Returns true if field invalidate_tables_on_memory_pressure is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidate_tables_on_memory_pressure() {
    return EncodingUtils.testBit(__isset_bitfield, __INVALIDATE_TABLES_ON_MEMORY_PRESSURE_ISSET_ID);
  }

  public void setInvalidate_tables_on_memory_pressureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVALIDATE_TABLES_ON_MEMORY_PRESSURE_ISSET_ID, value);
  }

  public double getInvalidate_tables_gc_old_gen_full_threshold() {
    return this.invalidate_tables_gc_old_gen_full_threshold;
  }

  public void setInvalidate_tables_gc_old_gen_full_threshold(double invalidate_tables_gc_old_gen_full_threshold) {
    this.invalidate_tables_gc_old_gen_full_threshold = invalidate_tables_gc_old_gen_full_threshold;
    setInvalidate_tables_gc_old_gen_full_thresholdIsSet(true);
  }

  public void unsetInvalidate_tables_gc_old_gen_full_threshold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field invalidate_tables_gc_old_gen_full_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidate_tables_gc_old_gen_full_threshold() {
    return EncodingUtils.testBit(__isset_bitfield, __INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD_ISSET_ID);
  }

  public void setInvalidate_tables_gc_old_gen_full_thresholdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD_ISSET_ID, value);
  }

  public double getInvalidate_tables_fraction_on_memory_pressure() {
    return this.invalidate_tables_fraction_on_memory_pressure;
  }

  public void setInvalidate_tables_fraction_on_memory_pressure(double invalidate_tables_fraction_on_memory_pressure) {
    this.invalidate_tables_fraction_on_memory_pressure = invalidate_tables_fraction_on_memory_pressure;
    setInvalidate_tables_fraction_on_memory_pressureIsSet(true);
  }

  public void unsetInvalidate_tables_fraction_on_memory_pressure() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE_ISSET_ID);
  }

  /** Returns true if field invalidate_tables_fraction_on_memory_pressure is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidate_tables_fraction_on_memory_pressure() {
    return EncodingUtils.testBit(__isset_bitfield, __INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE_ISSET_ID);
  }

  public void setInvalidate_tables_fraction_on_memory_pressureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE_ISSET_ID, value);
  }

  public int getLocal_catalog_max_fetch_retries() {
    return this.local_catalog_max_fetch_retries;
  }

  public void setLocal_catalog_max_fetch_retries(int local_catalog_max_fetch_retries) {
    this.local_catalog_max_fetch_retries = local_catalog_max_fetch_retries;
    setLocal_catalog_max_fetch_retriesIsSet(true);
  }

  public void unsetLocal_catalog_max_fetch_retries() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCAL_CATALOG_MAX_FETCH_RETRIES_ISSET_ID);
  }

  /** Returns true if field local_catalog_max_fetch_retries is set (has been assigned a value) and false otherwise */
  public boolean isSetLocal_catalog_max_fetch_retries() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCAL_CATALOG_MAX_FETCH_RETRIES_ISSET_ID);
  }

  public void setLocal_catalog_max_fetch_retriesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCAL_CATALOG_MAX_FETCH_RETRIES_ISSET_ID, value);
  }

  public long getKudu_scanner_thread_estimated_bytes_per_column() {
    return this.kudu_scanner_thread_estimated_bytes_per_column;
  }

  public void setKudu_scanner_thread_estimated_bytes_per_column(long kudu_scanner_thread_estimated_bytes_per_column) {
    this.kudu_scanner_thread_estimated_bytes_per_column = kudu_scanner_thread_estimated_bytes_per_column;
    setKudu_scanner_thread_estimated_bytes_per_columnIsSet(true);
  }

  public void unsetKudu_scanner_thread_estimated_bytes_per_column() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN_ISSET_ID);
  }

  /** Returns true if field kudu_scanner_thread_estimated_bytes_per_column is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_scanner_thread_estimated_bytes_per_column() {
    return EncodingUtils.testBit(__isset_bitfield, __KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN_ISSET_ID);
  }

  public void setKudu_scanner_thread_estimated_bytes_per_columnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN_ISSET_ID, value);
  }

  public long getKudu_scanner_thread_max_estimated_bytes() {
    return this.kudu_scanner_thread_max_estimated_bytes;
  }

  public void setKudu_scanner_thread_max_estimated_bytes(long kudu_scanner_thread_max_estimated_bytes) {
    this.kudu_scanner_thread_max_estimated_bytes = kudu_scanner_thread_max_estimated_bytes;
    setKudu_scanner_thread_max_estimated_bytesIsSet(true);
  }

  public void unsetKudu_scanner_thread_max_estimated_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES_ISSET_ID);
  }

  /** Returns true if field kudu_scanner_thread_max_estimated_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_scanner_thread_max_estimated_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES_ISSET_ID);
  }

  public void setKudu_scanner_thread_max_estimated_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES_ISSET_ID, value);
  }

  public int getCatalog_max_parallel_partial_fetch_rpc() {
    return this.catalog_max_parallel_partial_fetch_rpc;
  }

  public void setCatalog_max_parallel_partial_fetch_rpc(int catalog_max_parallel_partial_fetch_rpc) {
    this.catalog_max_parallel_partial_fetch_rpc = catalog_max_parallel_partial_fetch_rpc;
    setCatalog_max_parallel_partial_fetch_rpcIsSet(true);
  }

  public void unsetCatalog_max_parallel_partial_fetch_rpc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC_ISSET_ID);
  }

  /** Returns true if field catalog_max_parallel_partial_fetch_rpc is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog_max_parallel_partial_fetch_rpc() {
    return EncodingUtils.testBit(__isset_bitfield, __CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC_ISSET_ID);
  }

  public void setCatalog_max_parallel_partial_fetch_rpcIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC_ISSET_ID, value);
  }

  public long getCatalog_partial_fetch_rpc_queue_timeout_s() {
    return this.catalog_partial_fetch_rpc_queue_timeout_s;
  }

  public void setCatalog_partial_fetch_rpc_queue_timeout_s(long catalog_partial_fetch_rpc_queue_timeout_s) {
    this.catalog_partial_fetch_rpc_queue_timeout_s = catalog_partial_fetch_rpc_queue_timeout_s;
    setCatalog_partial_fetch_rpc_queue_timeout_sIsSet(true);
  }

  public void unsetCatalog_partial_fetch_rpc_queue_timeout_s() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S_ISSET_ID);
  }

  /** Returns true if field catalog_partial_fetch_rpc_queue_timeout_s is set (has been assigned a value) and false otherwise */
  public boolean isSetCatalog_partial_fetch_rpc_queue_timeout_s() {
    return EncodingUtils.testBit(__isset_bitfield, __CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S_ISSET_ID);
  }

  public void setCatalog_partial_fetch_rpc_queue_timeout_sIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S_ISSET_ID, value);
  }

  public long getExchg_node_buffer_size_bytes() {
    return this.exchg_node_buffer_size_bytes;
  }

  public void setExchg_node_buffer_size_bytes(long exchg_node_buffer_size_bytes) {
    this.exchg_node_buffer_size_bytes = exchg_node_buffer_size_bytes;
    setExchg_node_buffer_size_bytesIsSet(true);
  }

  public void unsetExchg_node_buffer_size_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHG_NODE_BUFFER_SIZE_BYTES_ISSET_ID);
  }

  /** Returns true if field exchg_node_buffer_size_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetExchg_node_buffer_size_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHG_NODE_BUFFER_SIZE_BYTES_ISSET_ID);
  }

  public void setExchg_node_buffer_size_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHG_NODE_BUFFER_SIZE_BYTES_ISSET_ID, value);
  }

  public int getKudu_mutation_buffer_size() {
    return this.kudu_mutation_buffer_size;
  }

  public void setKudu_mutation_buffer_size(int kudu_mutation_buffer_size) {
    this.kudu_mutation_buffer_size = kudu_mutation_buffer_size;
    setKudu_mutation_buffer_sizeIsSet(true);
  }

  public void unsetKudu_mutation_buffer_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KUDU_MUTATION_BUFFER_SIZE_ISSET_ID);
  }

  /** Returns true if field kudu_mutation_buffer_size is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_mutation_buffer_size() {
    return EncodingUtils.testBit(__isset_bitfield, __KUDU_MUTATION_BUFFER_SIZE_ISSET_ID);
  }

  public void setKudu_mutation_buffer_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KUDU_MUTATION_BUFFER_SIZE_ISSET_ID, value);
  }

  public int getKudu_error_buffer_size() {
    return this.kudu_error_buffer_size;
  }

  public void setKudu_error_buffer_size(int kudu_error_buffer_size) {
    this.kudu_error_buffer_size = kudu_error_buffer_size;
    setKudu_error_buffer_sizeIsSet(true);
  }

  public void unsetKudu_error_buffer_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KUDU_ERROR_BUFFER_SIZE_ISSET_ID);
  }

  /** Returns true if field kudu_error_buffer_size is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_error_buffer_size() {
    return EncodingUtils.testBit(__isset_bitfield, __KUDU_ERROR_BUFFER_SIZE_ISSET_ID);
  }

  public void setKudu_error_buffer_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KUDU_ERROR_BUFFER_SIZE_ISSET_ID, value);
  }

  public int getHms_event_polling_interval_s() {
    return this.hms_event_polling_interval_s;
  }

  public void setHms_event_polling_interval_s(int hms_event_polling_interval_s) {
    this.hms_event_polling_interval_s = hms_event_polling_interval_s;
    setHms_event_polling_interval_sIsSet(true);
  }

  public void unsetHms_event_polling_interval_s() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HMS_EVENT_POLLING_INTERVAL_S_ISSET_ID);
  }

  /** Returns true if field hms_event_polling_interval_s is set (has been assigned a value) and false otherwise */
  public boolean isSetHms_event_polling_interval_s() {
    return EncodingUtils.testBit(__isset_bitfield, __HMS_EVENT_POLLING_INTERVAL_S_ISSET_ID);
  }

  public void setHms_event_polling_interval_sIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HMS_EVENT_POLLING_INTERVAL_S_ISSET_ID, value);
  }

  public String getImpala_build_version() {
    return this.impala_build_version;
  }

  public void setImpala_build_version(String impala_build_version) {
    this.impala_build_version = impala_build_version;
  }

  public void unsetImpala_build_version() {
    this.impala_build_version = null;
  }

  /** Returns true if field impala_build_version is set (has been assigned a value) and false otherwise */
  public boolean isSetImpala_build_version() {
    return this.impala_build_version != null;
  }

  public void setImpala_build_versionIsSet(boolean value) {
    if (!value) {
      this.impala_build_version = null;
    }
  }

  public String getAuthorization_factory_class() {
    return this.authorization_factory_class;
  }

  public void setAuthorization_factory_class(String authorization_factory_class) {
    this.authorization_factory_class = authorization_factory_class;
  }

  public void unsetAuthorization_factory_class() {
    this.authorization_factory_class = null;
  }

  /** Returns true if field authorization_factory_class is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorization_factory_class() {
    return this.authorization_factory_class != null;
  }

  public void setAuthorization_factory_classIsSet(boolean value) {
    if (!value) {
      this.authorization_factory_class = null;
    }
  }

  public boolean isUnlock_mt_dop() {
    return this.unlock_mt_dop;
  }

  public void setUnlock_mt_dop(boolean unlock_mt_dop) {
    this.unlock_mt_dop = unlock_mt_dop;
    setUnlock_mt_dopIsSet(true);
  }

  public void unsetUnlock_mt_dop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLOCK_MT_DOP_ISSET_ID);
  }

  /** Returns true if field unlock_mt_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlock_mt_dop() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLOCK_MT_DOP_ISSET_ID);
  }

  public void setUnlock_mt_dopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLOCK_MT_DOP_ISSET_ID, value);
  }

  public String getRanger_service_type() {
    return this.ranger_service_type;
  }

  public void setRanger_service_type(String ranger_service_type) {
    this.ranger_service_type = ranger_service_type;
  }

  public void unsetRanger_service_type() {
    this.ranger_service_type = null;
  }

  /** Returns true if field ranger_service_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRanger_service_type() {
    return this.ranger_service_type != null;
  }

  public void setRanger_service_typeIsSet(boolean value) {
    if (!value) {
      this.ranger_service_type = null;
    }
  }

  public String getRanger_app_id() {
    return this.ranger_app_id;
  }

  public void setRanger_app_id(String ranger_app_id) {
    this.ranger_app_id = ranger_app_id;
  }

  public void unsetRanger_app_id() {
    this.ranger_app_id = null;
  }

  /** Returns true if field ranger_app_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRanger_app_id() {
    return this.ranger_app_id != null;
  }

  public void setRanger_app_idIsSet(boolean value) {
    if (!value) {
      this.ranger_app_id = null;
    }
  }

  public String getAuthorization_provider() {
    return this.authorization_provider;
  }

  public void setAuthorization_provider(String authorization_provider) {
    this.authorization_provider = authorization_provider;
  }

  public void unsetAuthorization_provider() {
    this.authorization_provider = null;
  }

  /** Returns true if field authorization_provider is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorization_provider() {
    return this.authorization_provider != null;
  }

  public void setAuthorization_providerIsSet(boolean value) {
    if (!value) {
      this.authorization_provider = null;
    }
  }

  public boolean isRecursively_list_partitions() {
    return this.recursively_list_partitions;
  }

  public void setRecursively_list_partitions(boolean recursively_list_partitions) {
    this.recursively_list_partitions = recursively_list_partitions;
    setRecursively_list_partitionsIsSet(true);
  }

  public void unsetRecursively_list_partitions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECURSIVELY_LIST_PARTITIONS_ISSET_ID);
  }

  /** Returns true if field recursively_list_partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetRecursively_list_partitions() {
    return EncodingUtils.testBit(__isset_bitfield, __RECURSIVELY_LIST_PARTITIONS_ISSET_ID);
  }

  public void setRecursively_list_partitionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECURSIVELY_LIST_PARTITIONS_ISSET_ID, value);
  }

  public String getQuery_event_hook_classes() {
    return this.query_event_hook_classes;
  }

  public void setQuery_event_hook_classes(String query_event_hook_classes) {
    this.query_event_hook_classes = query_event_hook_classes;
  }

  public void unsetQuery_event_hook_classes() {
    this.query_event_hook_classes = null;
  }

  /** Returns true if field query_event_hook_classes is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_event_hook_classes() {
    return this.query_event_hook_classes != null;
  }

  public void setQuery_event_hook_classesIsSet(boolean value) {
    if (!value) {
      this.query_event_hook_classes = null;
    }
  }

  public int getQuery_event_hook_nthreads() {
    return this.query_event_hook_nthreads;
  }

  public void setQuery_event_hook_nthreads(int query_event_hook_nthreads) {
    this.query_event_hook_nthreads = query_event_hook_nthreads;
    setQuery_event_hook_nthreadsIsSet(true);
  }

  public void unsetQuery_event_hook_nthreads() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERY_EVENT_HOOK_NTHREADS_ISSET_ID);
  }

  /** Returns true if field query_event_hook_nthreads is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_event_hook_nthreads() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERY_EVENT_HOOK_NTHREADS_ISSET_ID);
  }

  public void setQuery_event_hook_nthreadsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERY_EVENT_HOOK_NTHREADS_ISSET_ID, value);
  }

  public boolean isIs_executor() {
    return this.is_executor;
  }

  public void setIs_executor(boolean is_executor) {
    this.is_executor = is_executor;
    setIs_executorIsSet(true);
  }

  public void unsetIs_executor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_EXECUTOR_ISSET_ID);
  }

  /** Returns true if field is_executor is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_executor() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_EXECUTOR_ISSET_ID);
  }

  public void setIs_executorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_EXECUTOR_ISSET_ID, value);
  }

  public boolean isUse_dedicated_coordinator_estimates() {
    return this.use_dedicated_coordinator_estimates;
  }

  public void setUse_dedicated_coordinator_estimates(boolean use_dedicated_coordinator_estimates) {
    this.use_dedicated_coordinator_estimates = use_dedicated_coordinator_estimates;
    setUse_dedicated_coordinator_estimatesIsSet(true);
  }

  public void unsetUse_dedicated_coordinator_estimates() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_DEDICATED_COORDINATOR_ESTIMATES_ISSET_ID);
  }

  /** Returns true if field use_dedicated_coordinator_estimates is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_dedicated_coordinator_estimates() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_DEDICATED_COORDINATOR_ESTIMATES_ISSET_ID);
  }

  public void setUse_dedicated_coordinator_estimatesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_DEDICATED_COORDINATOR_ESTIMATES_ISSET_ID, value);
  }

  public String getBlacklisted_dbs() {
    return this.blacklisted_dbs;
  }

  public void setBlacklisted_dbs(String blacklisted_dbs) {
    this.blacklisted_dbs = blacklisted_dbs;
  }

  public void unsetBlacklisted_dbs() {
    this.blacklisted_dbs = null;
  }

  /** Returns true if field blacklisted_dbs is set (has been assigned a value) and false otherwise */
  public boolean isSetBlacklisted_dbs() {
    return this.blacklisted_dbs != null;
  }

  public void setBlacklisted_dbsIsSet(boolean value) {
    if (!value) {
      this.blacklisted_dbs = null;
    }
  }

  public String getBlacklisted_tables() {
    return this.blacklisted_tables;
  }

  public void setBlacklisted_tables(String blacklisted_tables) {
    this.blacklisted_tables = blacklisted_tables;
  }

  public void unsetBlacklisted_tables() {
    this.blacklisted_tables = null;
  }

  /** Returns true if field blacklisted_tables is set (has been assigned a value) and false otherwise */
  public boolean isSetBlacklisted_tables() {
    return this.blacklisted_tables != null;
  }

  public void setBlacklisted_tablesIsSet(boolean value) {
    if (!value) {
      this.blacklisted_tables = null;
    }
  }

  public boolean isUnlock_zorder_sort() {
    return this.unlock_zorder_sort;
  }

  public void setUnlock_zorder_sort(boolean unlock_zorder_sort) {
    this.unlock_zorder_sort = unlock_zorder_sort;
    setUnlock_zorder_sortIsSet(true);
  }

  public void unsetUnlock_zorder_sort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLOCK_ZORDER_SORT_ISSET_ID);
  }

  /** Returns true if field unlock_zorder_sort is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlock_zorder_sort() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLOCK_ZORDER_SORT_ISSET_ID);
  }

  public void setUnlock_zorder_sortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLOCK_ZORDER_SORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SENTRY_CONFIG:
      if (value == null) {
        unsetSentry_config();
      } else {
        setSentry_config((String)value);
      }
      break;

    case LOAD_AUTH_TO_LOCAL_RULES:
      if (value == null) {
        unsetLoad_auth_to_local_rules();
      } else {
        setLoad_auth_to_local_rules((Boolean)value);
      }
      break;

    case NON_IMPALA_JAVA_VLOG:
      if (value == null) {
        unsetNon_impala_java_vlog();
      } else {
        setNon_impala_java_vlog((Integer)value);
      }
      break;

    case IMPALA_LOG_LVL:
      if (value == null) {
        unsetImpala_log_lvl();
      } else {
        setImpala_log_lvl((Integer)value);
      }
      break;

    case INC_STATS_SIZE_LIMIT_BYTES:
      if (value == null) {
        unsetInc_stats_size_limit_bytes();
      } else {
        setInc_stats_size_limit_bytes((Long)value);
      }
      break;

    case LINEAGE_EVENT_LOG_DIR:
      if (value == null) {
        unsetLineage_event_log_dir();
      } else {
        setLineage_event_log_dir((String)value);
      }
      break;

    case LOAD_CATALOG_IN_BACKGROUND:
      if (value == null) {
        unsetLoad_catalog_in_background();
      } else {
        setLoad_catalog_in_background((Boolean)value);
      }
      break;

    case NUM_METADATA_LOADING_THREADS:
      if (value == null) {
        unsetNum_metadata_loading_threads();
      } else {
        setNum_metadata_loading_threads((Integer)value);
      }
      break;

    case PRINCIPAL:
      if (value == null) {
        unsetPrincipal();
      } else {
        setPrincipal((String)value);
      }
      break;

    case SERVER_NAME:
      if (value == null) {
        unsetServer_name();
      } else {
        setServer_name((String)value);
      }
      break;

    case AUTHORIZATION_POLICY_PROVIDER_CLASS:
      if (value == null) {
        unsetAuthorization_policy_provider_class();
      } else {
        setAuthorization_policy_provider_class((String)value);
      }
      break;

    case KUDU_MASTER_HOSTS:
      if (value == null) {
        unsetKudu_master_hosts();
      } else {
        setKudu_master_hosts((String)value);
      }
      break;

    case LOCAL_LIBRARY_PATH:
      if (value == null) {
        unsetLocal_library_path();
      } else {
        setLocal_library_path((String)value);
      }
      break;

    case READ_SIZE:
      if (value == null) {
        unsetRead_size();
      } else {
        setRead_size((Integer)value);
      }
      break;

    case KUDU_OPERATION_TIMEOUT_MS:
      if (value == null) {
        unsetKudu_operation_timeout_ms();
      } else {
        setKudu_operation_timeout_ms((Integer)value);
      }
      break;

    case INITIAL_HMS_CNXN_TIMEOUT_S:
      if (value == null) {
        unsetInitial_hms_cnxn_timeout_s();
      } else {
        setInitial_hms_cnxn_timeout_s((Integer)value);
      }
      break;

    case ENABLE_STATS_EXTRAPOLATION:
      if (value == null) {
        unsetEnable_stats_extrapolation();
      } else {
        setEnable_stats_extrapolation((Boolean)value);
      }
      break;

    case SENTRY_CATALOG_POLLING_FREQUENCY_S:
      if (value == null) {
        unsetSentry_catalog_polling_frequency_s();
      } else {
        setSentry_catalog_polling_frequency_s((Long)value);
      }
      break;

    case MAX_HDFS_PARTITIONS_PARALLEL_LOAD:
      if (value == null) {
        unsetMax_hdfs_partitions_parallel_load();
      } else {
        setMax_hdfs_partitions_parallel_load((Integer)value);
      }
      break;

    case MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD:
      if (value == null) {
        unsetMax_nonhdfs_partitions_parallel_load();
      } else {
        setMax_nonhdfs_partitions_parallel_load((Integer)value);
      }
      break;

    case RESERVED_WORDS_VERSION:
      if (value == null) {
        unsetReserved_words_version();
      } else {
        setReserved_words_version((TReservedWordsVersion)value);
      }
      break;

    case MAX_FILTER_ERROR_RATE:
      if (value == null) {
        unsetMax_filter_error_rate();
      } else {
        setMax_filter_error_rate((Double)value);
      }
      break;

    case MIN_BUFFER_SIZE:
      if (value == null) {
        unsetMin_buffer_size();
      } else {
        setMin_buffer_size((Long)value);
      }
      break;

    case ENABLE_ORC_SCANNER:
      if (value == null) {
        unsetEnable_orc_scanner();
      } else {
        setEnable_orc_scanner((Boolean)value);
      }
      break;

    case AUTHORIZED_PROXY_GROUP_CONFIG:
      if (value == null) {
        unsetAuthorized_proxy_group_config();
      } else {
        setAuthorized_proxy_group_config((String)value);
      }
      break;

    case USE_LOCAL_CATALOG:
      if (value == null) {
        unsetUse_local_catalog();
      } else {
        setUse_local_catalog((Boolean)value);
      }
      break;

    case DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY:
      if (value == null) {
        unsetDisable_catalog_data_ops_debug_only();
      } else {
        setDisable_catalog_data_ops_debug_only((Boolean)value);
      }
      break;

    case LOCAL_CATALOG_CACHE_MB:
      if (value == null) {
        unsetLocal_catalog_cache_mb();
      } else {
        setLocal_catalog_cache_mb((Integer)value);
      }
      break;

    case LOCAL_CATALOG_CACHE_EXPIRATION_S:
      if (value == null) {
        unsetLocal_catalog_cache_expiration_s();
      } else {
        setLocal_catalog_cache_expiration_s((Integer)value);
      }
      break;

    case CATALOG_TOPIC_MODE:
      if (value == null) {
        unsetCatalog_topic_mode();
      } else {
        setCatalog_topic_mode((String)value);
      }
      break;

    case INVALIDATE_TABLES_TIMEOUT_S:
      if (value == null) {
        unsetInvalidate_tables_timeout_s();
      } else {
        setInvalidate_tables_timeout_s((Integer)value);
      }
      break;

    case INVALIDATE_TABLES_ON_MEMORY_PRESSURE:
      if (value == null) {
        unsetInvalidate_tables_on_memory_pressure();
      } else {
        setInvalidate_tables_on_memory_pressure((Boolean)value);
      }
      break;

    case INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD:
      if (value == null) {
        unsetInvalidate_tables_gc_old_gen_full_threshold();
      } else {
        setInvalidate_tables_gc_old_gen_full_threshold((Double)value);
      }
      break;

    case INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE:
      if (value == null) {
        unsetInvalidate_tables_fraction_on_memory_pressure();
      } else {
        setInvalidate_tables_fraction_on_memory_pressure((Double)value);
      }
      break;

    case LOCAL_CATALOG_MAX_FETCH_RETRIES:
      if (value == null) {
        unsetLocal_catalog_max_fetch_retries();
      } else {
        setLocal_catalog_max_fetch_retries((Integer)value);
      }
      break;

    case KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN:
      if (value == null) {
        unsetKudu_scanner_thread_estimated_bytes_per_column();
      } else {
        setKudu_scanner_thread_estimated_bytes_per_column((Long)value);
      }
      break;

    case KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES:
      if (value == null) {
        unsetKudu_scanner_thread_max_estimated_bytes();
      } else {
        setKudu_scanner_thread_max_estimated_bytes((Long)value);
      }
      break;

    case CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC:
      if (value == null) {
        unsetCatalog_max_parallel_partial_fetch_rpc();
      } else {
        setCatalog_max_parallel_partial_fetch_rpc((Integer)value);
      }
      break;

    case CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S:
      if (value == null) {
        unsetCatalog_partial_fetch_rpc_queue_timeout_s();
      } else {
        setCatalog_partial_fetch_rpc_queue_timeout_s((Long)value);
      }
      break;

    case EXCHG_NODE_BUFFER_SIZE_BYTES:
      if (value == null) {
        unsetExchg_node_buffer_size_bytes();
      } else {
        setExchg_node_buffer_size_bytes((Long)value);
      }
      break;

    case KUDU_MUTATION_BUFFER_SIZE:
      if (value == null) {
        unsetKudu_mutation_buffer_size();
      } else {
        setKudu_mutation_buffer_size((Integer)value);
      }
      break;

    case KUDU_ERROR_BUFFER_SIZE:
      if (value == null) {
        unsetKudu_error_buffer_size();
      } else {
        setKudu_error_buffer_size((Integer)value);
      }
      break;

    case HMS_EVENT_POLLING_INTERVAL_S:
      if (value == null) {
        unsetHms_event_polling_interval_s();
      } else {
        setHms_event_polling_interval_s((Integer)value);
      }
      break;

    case IMPALA_BUILD_VERSION:
      if (value == null) {
        unsetImpala_build_version();
      } else {
        setImpala_build_version((String)value);
      }
      break;

    case AUTHORIZATION_FACTORY_CLASS:
      if (value == null) {
        unsetAuthorization_factory_class();
      } else {
        setAuthorization_factory_class((String)value);
      }
      break;

    case UNLOCK_MT_DOP:
      if (value == null) {
        unsetUnlock_mt_dop();
      } else {
        setUnlock_mt_dop((Boolean)value);
      }
      break;

    case RANGER_SERVICE_TYPE:
      if (value == null) {
        unsetRanger_service_type();
      } else {
        setRanger_service_type((String)value);
      }
      break;

    case RANGER_APP_ID:
      if (value == null) {
        unsetRanger_app_id();
      } else {
        setRanger_app_id((String)value);
      }
      break;

    case AUTHORIZATION_PROVIDER:
      if (value == null) {
        unsetAuthorization_provider();
      } else {
        setAuthorization_provider((String)value);
      }
      break;

    case RECURSIVELY_LIST_PARTITIONS:
      if (value == null) {
        unsetRecursively_list_partitions();
      } else {
        setRecursively_list_partitions((Boolean)value);
      }
      break;

    case QUERY_EVENT_HOOK_CLASSES:
      if (value == null) {
        unsetQuery_event_hook_classes();
      } else {
        setQuery_event_hook_classes((String)value);
      }
      break;

    case QUERY_EVENT_HOOK_NTHREADS:
      if (value == null) {
        unsetQuery_event_hook_nthreads();
      } else {
        setQuery_event_hook_nthreads((Integer)value);
      }
      break;

    case IS_EXECUTOR:
      if (value == null) {
        unsetIs_executor();
      } else {
        setIs_executor((Boolean)value);
      }
      break;

    case USE_DEDICATED_COORDINATOR_ESTIMATES:
      if (value == null) {
        unsetUse_dedicated_coordinator_estimates();
      } else {
        setUse_dedicated_coordinator_estimates((Boolean)value);
      }
      break;

    case BLACKLISTED_DBS:
      if (value == null) {
        unsetBlacklisted_dbs();
      } else {
        setBlacklisted_dbs((String)value);
      }
      break;

    case BLACKLISTED_TABLES:
      if (value == null) {
        unsetBlacklisted_tables();
      } else {
        setBlacklisted_tables((String)value);
      }
      break;

    case UNLOCK_ZORDER_SORT:
      if (value == null) {
        unsetUnlock_zorder_sort();
      } else {
        setUnlock_zorder_sort((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENTRY_CONFIG:
      return getSentry_config();

    case LOAD_AUTH_TO_LOCAL_RULES:
      return isLoad_auth_to_local_rules();

    case NON_IMPALA_JAVA_VLOG:
      return getNon_impala_java_vlog();

    case IMPALA_LOG_LVL:
      return getImpala_log_lvl();

    case INC_STATS_SIZE_LIMIT_BYTES:
      return getInc_stats_size_limit_bytes();

    case LINEAGE_EVENT_LOG_DIR:
      return getLineage_event_log_dir();

    case LOAD_CATALOG_IN_BACKGROUND:
      return isLoad_catalog_in_background();

    case NUM_METADATA_LOADING_THREADS:
      return getNum_metadata_loading_threads();

    case PRINCIPAL:
      return getPrincipal();

    case SERVER_NAME:
      return getServer_name();

    case AUTHORIZATION_POLICY_PROVIDER_CLASS:
      return getAuthorization_policy_provider_class();

    case KUDU_MASTER_HOSTS:
      return getKudu_master_hosts();

    case LOCAL_LIBRARY_PATH:
      return getLocal_library_path();

    case READ_SIZE:
      return getRead_size();

    case KUDU_OPERATION_TIMEOUT_MS:
      return getKudu_operation_timeout_ms();

    case INITIAL_HMS_CNXN_TIMEOUT_S:
      return getInitial_hms_cnxn_timeout_s();

    case ENABLE_STATS_EXTRAPOLATION:
      return isEnable_stats_extrapolation();

    case SENTRY_CATALOG_POLLING_FREQUENCY_S:
      return getSentry_catalog_polling_frequency_s();

    case MAX_HDFS_PARTITIONS_PARALLEL_LOAD:
      return getMax_hdfs_partitions_parallel_load();

    case MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD:
      return getMax_nonhdfs_partitions_parallel_load();

    case RESERVED_WORDS_VERSION:
      return getReserved_words_version();

    case MAX_FILTER_ERROR_RATE:
      return getMax_filter_error_rate();

    case MIN_BUFFER_SIZE:
      return getMin_buffer_size();

    case ENABLE_ORC_SCANNER:
      return isEnable_orc_scanner();

    case AUTHORIZED_PROXY_GROUP_CONFIG:
      return getAuthorized_proxy_group_config();

    case USE_LOCAL_CATALOG:
      return isUse_local_catalog();

    case DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY:
      return isDisable_catalog_data_ops_debug_only();

    case LOCAL_CATALOG_CACHE_MB:
      return getLocal_catalog_cache_mb();

    case LOCAL_CATALOG_CACHE_EXPIRATION_S:
      return getLocal_catalog_cache_expiration_s();

    case CATALOG_TOPIC_MODE:
      return getCatalog_topic_mode();

    case INVALIDATE_TABLES_TIMEOUT_S:
      return getInvalidate_tables_timeout_s();

    case INVALIDATE_TABLES_ON_MEMORY_PRESSURE:
      return isInvalidate_tables_on_memory_pressure();

    case INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD:
      return getInvalidate_tables_gc_old_gen_full_threshold();

    case INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE:
      return getInvalidate_tables_fraction_on_memory_pressure();

    case LOCAL_CATALOG_MAX_FETCH_RETRIES:
      return getLocal_catalog_max_fetch_retries();

    case KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN:
      return getKudu_scanner_thread_estimated_bytes_per_column();

    case KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES:
      return getKudu_scanner_thread_max_estimated_bytes();

    case CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC:
      return getCatalog_max_parallel_partial_fetch_rpc();

    case CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S:
      return getCatalog_partial_fetch_rpc_queue_timeout_s();

    case EXCHG_NODE_BUFFER_SIZE_BYTES:
      return getExchg_node_buffer_size_bytes();

    case KUDU_MUTATION_BUFFER_SIZE:
      return getKudu_mutation_buffer_size();

    case KUDU_ERROR_BUFFER_SIZE:
      return getKudu_error_buffer_size();

    case HMS_EVENT_POLLING_INTERVAL_S:
      return getHms_event_polling_interval_s();

    case IMPALA_BUILD_VERSION:
      return getImpala_build_version();

    case AUTHORIZATION_FACTORY_CLASS:
      return getAuthorization_factory_class();

    case UNLOCK_MT_DOP:
      return isUnlock_mt_dop();

    case RANGER_SERVICE_TYPE:
      return getRanger_service_type();

    case RANGER_APP_ID:
      return getRanger_app_id();

    case AUTHORIZATION_PROVIDER:
      return getAuthorization_provider();

    case RECURSIVELY_LIST_PARTITIONS:
      return isRecursively_list_partitions();

    case QUERY_EVENT_HOOK_CLASSES:
      return getQuery_event_hook_classes();

    case QUERY_EVENT_HOOK_NTHREADS:
      return getQuery_event_hook_nthreads();

    case IS_EXECUTOR:
      return isIs_executor();

    case USE_DEDICATED_COORDINATOR_ESTIMATES:
      return isUse_dedicated_coordinator_estimates();

    case BLACKLISTED_DBS:
      return getBlacklisted_dbs();

    case BLACKLISTED_TABLES:
      return getBlacklisted_tables();

    case UNLOCK_ZORDER_SORT:
      return isUnlock_zorder_sort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENTRY_CONFIG:
      return isSetSentry_config();
    case LOAD_AUTH_TO_LOCAL_RULES:
      return isSetLoad_auth_to_local_rules();
    case NON_IMPALA_JAVA_VLOG:
      return isSetNon_impala_java_vlog();
    case IMPALA_LOG_LVL:
      return isSetImpala_log_lvl();
    case INC_STATS_SIZE_LIMIT_BYTES:
      return isSetInc_stats_size_limit_bytes();
    case LINEAGE_EVENT_LOG_DIR:
      return isSetLineage_event_log_dir();
    case LOAD_CATALOG_IN_BACKGROUND:
      return isSetLoad_catalog_in_background();
    case NUM_METADATA_LOADING_THREADS:
      return isSetNum_metadata_loading_threads();
    case PRINCIPAL:
      return isSetPrincipal();
    case SERVER_NAME:
      return isSetServer_name();
    case AUTHORIZATION_POLICY_PROVIDER_CLASS:
      return isSetAuthorization_policy_provider_class();
    case KUDU_MASTER_HOSTS:
      return isSetKudu_master_hosts();
    case LOCAL_LIBRARY_PATH:
      return isSetLocal_library_path();
    case READ_SIZE:
      return isSetRead_size();
    case KUDU_OPERATION_TIMEOUT_MS:
      return isSetKudu_operation_timeout_ms();
    case INITIAL_HMS_CNXN_TIMEOUT_S:
      return isSetInitial_hms_cnxn_timeout_s();
    case ENABLE_STATS_EXTRAPOLATION:
      return isSetEnable_stats_extrapolation();
    case SENTRY_CATALOG_POLLING_FREQUENCY_S:
      return isSetSentry_catalog_polling_frequency_s();
    case MAX_HDFS_PARTITIONS_PARALLEL_LOAD:
      return isSetMax_hdfs_partitions_parallel_load();
    case MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD:
      return isSetMax_nonhdfs_partitions_parallel_load();
    case RESERVED_WORDS_VERSION:
      return isSetReserved_words_version();
    case MAX_FILTER_ERROR_RATE:
      return isSetMax_filter_error_rate();
    case MIN_BUFFER_SIZE:
      return isSetMin_buffer_size();
    case ENABLE_ORC_SCANNER:
      return isSetEnable_orc_scanner();
    case AUTHORIZED_PROXY_GROUP_CONFIG:
      return isSetAuthorized_proxy_group_config();
    case USE_LOCAL_CATALOG:
      return isSetUse_local_catalog();
    case DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY:
      return isSetDisable_catalog_data_ops_debug_only();
    case LOCAL_CATALOG_CACHE_MB:
      return isSetLocal_catalog_cache_mb();
    case LOCAL_CATALOG_CACHE_EXPIRATION_S:
      return isSetLocal_catalog_cache_expiration_s();
    case CATALOG_TOPIC_MODE:
      return isSetCatalog_topic_mode();
    case INVALIDATE_TABLES_TIMEOUT_S:
      return isSetInvalidate_tables_timeout_s();
    case INVALIDATE_TABLES_ON_MEMORY_PRESSURE:
      return isSetInvalidate_tables_on_memory_pressure();
    case INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD:
      return isSetInvalidate_tables_gc_old_gen_full_threshold();
    case INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE:
      return isSetInvalidate_tables_fraction_on_memory_pressure();
    case LOCAL_CATALOG_MAX_FETCH_RETRIES:
      return isSetLocal_catalog_max_fetch_retries();
    case KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN:
      return isSetKudu_scanner_thread_estimated_bytes_per_column();
    case KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES:
      return isSetKudu_scanner_thread_max_estimated_bytes();
    case CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC:
      return isSetCatalog_max_parallel_partial_fetch_rpc();
    case CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S:
      return isSetCatalog_partial_fetch_rpc_queue_timeout_s();
    case EXCHG_NODE_BUFFER_SIZE_BYTES:
      return isSetExchg_node_buffer_size_bytes();
    case KUDU_MUTATION_BUFFER_SIZE:
      return isSetKudu_mutation_buffer_size();
    case KUDU_ERROR_BUFFER_SIZE:
      return isSetKudu_error_buffer_size();
    case HMS_EVENT_POLLING_INTERVAL_S:
      return isSetHms_event_polling_interval_s();
    case IMPALA_BUILD_VERSION:
      return isSetImpala_build_version();
    case AUTHORIZATION_FACTORY_CLASS:
      return isSetAuthorization_factory_class();
    case UNLOCK_MT_DOP:
      return isSetUnlock_mt_dop();
    case RANGER_SERVICE_TYPE:
      return isSetRanger_service_type();
    case RANGER_APP_ID:
      return isSetRanger_app_id();
    case AUTHORIZATION_PROVIDER:
      return isSetAuthorization_provider();
    case RECURSIVELY_LIST_PARTITIONS:
      return isSetRecursively_list_partitions();
    case QUERY_EVENT_HOOK_CLASSES:
      return isSetQuery_event_hook_classes();
    case QUERY_EVENT_HOOK_NTHREADS:
      return isSetQuery_event_hook_nthreads();
    case IS_EXECUTOR:
      return isSetIs_executor();
    case USE_DEDICATED_COORDINATOR_ESTIMATES:
      return isSetUse_dedicated_coordinator_estimates();
    case BLACKLISTED_DBS:
      return isSetBlacklisted_dbs();
    case BLACKLISTED_TABLES:
      return isSetBlacklisted_tables();
    case UNLOCK_ZORDER_SORT:
      return isSetUnlock_zorder_sort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBackendGflags)
      return this.equals((TBackendGflags)that);
    return false;
  }

  public boolean equals(TBackendGflags that) {
    if (that == null)
      return false;

    boolean this_present_sentry_config = true && this.isSetSentry_config();
    boolean that_present_sentry_config = true && that.isSetSentry_config();
    if (this_present_sentry_config || that_present_sentry_config) {
      if (!(this_present_sentry_config && that_present_sentry_config))
        return false;
      if (!this.sentry_config.equals(that.sentry_config))
        return false;
    }

    boolean this_present_load_auth_to_local_rules = true;
    boolean that_present_load_auth_to_local_rules = true;
    if (this_present_load_auth_to_local_rules || that_present_load_auth_to_local_rules) {
      if (!(this_present_load_auth_to_local_rules && that_present_load_auth_to_local_rules))
        return false;
      if (this.load_auth_to_local_rules != that.load_auth_to_local_rules)
        return false;
    }

    boolean this_present_non_impala_java_vlog = true;
    boolean that_present_non_impala_java_vlog = true;
    if (this_present_non_impala_java_vlog || that_present_non_impala_java_vlog) {
      if (!(this_present_non_impala_java_vlog && that_present_non_impala_java_vlog))
        return false;
      if (this.non_impala_java_vlog != that.non_impala_java_vlog)
        return false;
    }

    boolean this_present_impala_log_lvl = true;
    boolean that_present_impala_log_lvl = true;
    if (this_present_impala_log_lvl || that_present_impala_log_lvl) {
      if (!(this_present_impala_log_lvl && that_present_impala_log_lvl))
        return false;
      if (this.impala_log_lvl != that.impala_log_lvl)
        return false;
    }

    boolean this_present_inc_stats_size_limit_bytes = true;
    boolean that_present_inc_stats_size_limit_bytes = true;
    if (this_present_inc_stats_size_limit_bytes || that_present_inc_stats_size_limit_bytes) {
      if (!(this_present_inc_stats_size_limit_bytes && that_present_inc_stats_size_limit_bytes))
        return false;
      if (this.inc_stats_size_limit_bytes != that.inc_stats_size_limit_bytes)
        return false;
    }

    boolean this_present_lineage_event_log_dir = true && this.isSetLineage_event_log_dir();
    boolean that_present_lineage_event_log_dir = true && that.isSetLineage_event_log_dir();
    if (this_present_lineage_event_log_dir || that_present_lineage_event_log_dir) {
      if (!(this_present_lineage_event_log_dir && that_present_lineage_event_log_dir))
        return false;
      if (!this.lineage_event_log_dir.equals(that.lineage_event_log_dir))
        return false;
    }

    boolean this_present_load_catalog_in_background = true;
    boolean that_present_load_catalog_in_background = true;
    if (this_present_load_catalog_in_background || that_present_load_catalog_in_background) {
      if (!(this_present_load_catalog_in_background && that_present_load_catalog_in_background))
        return false;
      if (this.load_catalog_in_background != that.load_catalog_in_background)
        return false;
    }

    boolean this_present_num_metadata_loading_threads = true;
    boolean that_present_num_metadata_loading_threads = true;
    if (this_present_num_metadata_loading_threads || that_present_num_metadata_loading_threads) {
      if (!(this_present_num_metadata_loading_threads && that_present_num_metadata_loading_threads))
        return false;
      if (this.num_metadata_loading_threads != that.num_metadata_loading_threads)
        return false;
    }

    boolean this_present_principal = true && this.isSetPrincipal();
    boolean that_present_principal = true && that.isSetPrincipal();
    if (this_present_principal || that_present_principal) {
      if (!(this_present_principal && that_present_principal))
        return false;
      if (!this.principal.equals(that.principal))
        return false;
    }

    boolean this_present_server_name = true && this.isSetServer_name();
    boolean that_present_server_name = true && that.isSetServer_name();
    if (this_present_server_name || that_present_server_name) {
      if (!(this_present_server_name && that_present_server_name))
        return false;
      if (!this.server_name.equals(that.server_name))
        return false;
    }

    boolean this_present_authorization_policy_provider_class = true && this.isSetAuthorization_policy_provider_class();
    boolean that_present_authorization_policy_provider_class = true && that.isSetAuthorization_policy_provider_class();
    if (this_present_authorization_policy_provider_class || that_present_authorization_policy_provider_class) {
      if (!(this_present_authorization_policy_provider_class && that_present_authorization_policy_provider_class))
        return false;
      if (!this.authorization_policy_provider_class.equals(that.authorization_policy_provider_class))
        return false;
    }

    boolean this_present_kudu_master_hosts = true && this.isSetKudu_master_hosts();
    boolean that_present_kudu_master_hosts = true && that.isSetKudu_master_hosts();
    if (this_present_kudu_master_hosts || that_present_kudu_master_hosts) {
      if (!(this_present_kudu_master_hosts && that_present_kudu_master_hosts))
        return false;
      if (!this.kudu_master_hosts.equals(that.kudu_master_hosts))
        return false;
    }

    boolean this_present_local_library_path = true && this.isSetLocal_library_path();
    boolean that_present_local_library_path = true && that.isSetLocal_library_path();
    if (this_present_local_library_path || that_present_local_library_path) {
      if (!(this_present_local_library_path && that_present_local_library_path))
        return false;
      if (!this.local_library_path.equals(that.local_library_path))
        return false;
    }

    boolean this_present_read_size = true;
    boolean that_present_read_size = true;
    if (this_present_read_size || that_present_read_size) {
      if (!(this_present_read_size && that_present_read_size))
        return false;
      if (this.read_size != that.read_size)
        return false;
    }

    boolean this_present_kudu_operation_timeout_ms = true;
    boolean that_present_kudu_operation_timeout_ms = true;
    if (this_present_kudu_operation_timeout_ms || that_present_kudu_operation_timeout_ms) {
      if (!(this_present_kudu_operation_timeout_ms && that_present_kudu_operation_timeout_ms))
        return false;
      if (this.kudu_operation_timeout_ms != that.kudu_operation_timeout_ms)
        return false;
    }

    boolean this_present_initial_hms_cnxn_timeout_s = true;
    boolean that_present_initial_hms_cnxn_timeout_s = true;
    if (this_present_initial_hms_cnxn_timeout_s || that_present_initial_hms_cnxn_timeout_s) {
      if (!(this_present_initial_hms_cnxn_timeout_s && that_present_initial_hms_cnxn_timeout_s))
        return false;
      if (this.initial_hms_cnxn_timeout_s != that.initial_hms_cnxn_timeout_s)
        return false;
    }

    boolean this_present_enable_stats_extrapolation = true;
    boolean that_present_enable_stats_extrapolation = true;
    if (this_present_enable_stats_extrapolation || that_present_enable_stats_extrapolation) {
      if (!(this_present_enable_stats_extrapolation && that_present_enable_stats_extrapolation))
        return false;
      if (this.enable_stats_extrapolation != that.enable_stats_extrapolation)
        return false;
    }

    boolean this_present_sentry_catalog_polling_frequency_s = true;
    boolean that_present_sentry_catalog_polling_frequency_s = true;
    if (this_present_sentry_catalog_polling_frequency_s || that_present_sentry_catalog_polling_frequency_s) {
      if (!(this_present_sentry_catalog_polling_frequency_s && that_present_sentry_catalog_polling_frequency_s))
        return false;
      if (this.sentry_catalog_polling_frequency_s != that.sentry_catalog_polling_frequency_s)
        return false;
    }

    boolean this_present_max_hdfs_partitions_parallel_load = true;
    boolean that_present_max_hdfs_partitions_parallel_load = true;
    if (this_present_max_hdfs_partitions_parallel_load || that_present_max_hdfs_partitions_parallel_load) {
      if (!(this_present_max_hdfs_partitions_parallel_load && that_present_max_hdfs_partitions_parallel_load))
        return false;
      if (this.max_hdfs_partitions_parallel_load != that.max_hdfs_partitions_parallel_load)
        return false;
    }

    boolean this_present_max_nonhdfs_partitions_parallel_load = true;
    boolean that_present_max_nonhdfs_partitions_parallel_load = true;
    if (this_present_max_nonhdfs_partitions_parallel_load || that_present_max_nonhdfs_partitions_parallel_load) {
      if (!(this_present_max_nonhdfs_partitions_parallel_load && that_present_max_nonhdfs_partitions_parallel_load))
        return false;
      if (this.max_nonhdfs_partitions_parallel_load != that.max_nonhdfs_partitions_parallel_load)
        return false;
    }

    boolean this_present_reserved_words_version = true && this.isSetReserved_words_version();
    boolean that_present_reserved_words_version = true && that.isSetReserved_words_version();
    if (this_present_reserved_words_version || that_present_reserved_words_version) {
      if (!(this_present_reserved_words_version && that_present_reserved_words_version))
        return false;
      if (!this.reserved_words_version.equals(that.reserved_words_version))
        return false;
    }

    boolean this_present_max_filter_error_rate = true;
    boolean that_present_max_filter_error_rate = true;
    if (this_present_max_filter_error_rate || that_present_max_filter_error_rate) {
      if (!(this_present_max_filter_error_rate && that_present_max_filter_error_rate))
        return false;
      if (this.max_filter_error_rate != that.max_filter_error_rate)
        return false;
    }

    boolean this_present_min_buffer_size = true;
    boolean that_present_min_buffer_size = true;
    if (this_present_min_buffer_size || that_present_min_buffer_size) {
      if (!(this_present_min_buffer_size && that_present_min_buffer_size))
        return false;
      if (this.min_buffer_size != that.min_buffer_size)
        return false;
    }

    boolean this_present_enable_orc_scanner = true;
    boolean that_present_enable_orc_scanner = true;
    if (this_present_enable_orc_scanner || that_present_enable_orc_scanner) {
      if (!(this_present_enable_orc_scanner && that_present_enable_orc_scanner))
        return false;
      if (this.enable_orc_scanner != that.enable_orc_scanner)
        return false;
    }

    boolean this_present_authorized_proxy_group_config = true && this.isSetAuthorized_proxy_group_config();
    boolean that_present_authorized_proxy_group_config = true && that.isSetAuthorized_proxy_group_config();
    if (this_present_authorized_proxy_group_config || that_present_authorized_proxy_group_config) {
      if (!(this_present_authorized_proxy_group_config && that_present_authorized_proxy_group_config))
        return false;
      if (!this.authorized_proxy_group_config.equals(that.authorized_proxy_group_config))
        return false;
    }

    boolean this_present_use_local_catalog = true;
    boolean that_present_use_local_catalog = true;
    if (this_present_use_local_catalog || that_present_use_local_catalog) {
      if (!(this_present_use_local_catalog && that_present_use_local_catalog))
        return false;
      if (this.use_local_catalog != that.use_local_catalog)
        return false;
    }

    boolean this_present_disable_catalog_data_ops_debug_only = true;
    boolean that_present_disable_catalog_data_ops_debug_only = true;
    if (this_present_disable_catalog_data_ops_debug_only || that_present_disable_catalog_data_ops_debug_only) {
      if (!(this_present_disable_catalog_data_ops_debug_only && that_present_disable_catalog_data_ops_debug_only))
        return false;
      if (this.disable_catalog_data_ops_debug_only != that.disable_catalog_data_ops_debug_only)
        return false;
    }

    boolean this_present_local_catalog_cache_mb = true;
    boolean that_present_local_catalog_cache_mb = true;
    if (this_present_local_catalog_cache_mb || that_present_local_catalog_cache_mb) {
      if (!(this_present_local_catalog_cache_mb && that_present_local_catalog_cache_mb))
        return false;
      if (this.local_catalog_cache_mb != that.local_catalog_cache_mb)
        return false;
    }

    boolean this_present_local_catalog_cache_expiration_s = true;
    boolean that_present_local_catalog_cache_expiration_s = true;
    if (this_present_local_catalog_cache_expiration_s || that_present_local_catalog_cache_expiration_s) {
      if (!(this_present_local_catalog_cache_expiration_s && that_present_local_catalog_cache_expiration_s))
        return false;
      if (this.local_catalog_cache_expiration_s != that.local_catalog_cache_expiration_s)
        return false;
    }

    boolean this_present_catalog_topic_mode = true && this.isSetCatalog_topic_mode();
    boolean that_present_catalog_topic_mode = true && that.isSetCatalog_topic_mode();
    if (this_present_catalog_topic_mode || that_present_catalog_topic_mode) {
      if (!(this_present_catalog_topic_mode && that_present_catalog_topic_mode))
        return false;
      if (!this.catalog_topic_mode.equals(that.catalog_topic_mode))
        return false;
    }

    boolean this_present_invalidate_tables_timeout_s = true;
    boolean that_present_invalidate_tables_timeout_s = true;
    if (this_present_invalidate_tables_timeout_s || that_present_invalidate_tables_timeout_s) {
      if (!(this_present_invalidate_tables_timeout_s && that_present_invalidate_tables_timeout_s))
        return false;
      if (this.invalidate_tables_timeout_s != that.invalidate_tables_timeout_s)
        return false;
    }

    boolean this_present_invalidate_tables_on_memory_pressure = true;
    boolean that_present_invalidate_tables_on_memory_pressure = true;
    if (this_present_invalidate_tables_on_memory_pressure || that_present_invalidate_tables_on_memory_pressure) {
      if (!(this_present_invalidate_tables_on_memory_pressure && that_present_invalidate_tables_on_memory_pressure))
        return false;
      if (this.invalidate_tables_on_memory_pressure != that.invalidate_tables_on_memory_pressure)
        return false;
    }

    boolean this_present_invalidate_tables_gc_old_gen_full_threshold = true;
    boolean that_present_invalidate_tables_gc_old_gen_full_threshold = true;
    if (this_present_invalidate_tables_gc_old_gen_full_threshold || that_present_invalidate_tables_gc_old_gen_full_threshold) {
      if (!(this_present_invalidate_tables_gc_old_gen_full_threshold && that_present_invalidate_tables_gc_old_gen_full_threshold))
        return false;
      if (this.invalidate_tables_gc_old_gen_full_threshold != that.invalidate_tables_gc_old_gen_full_threshold)
        return false;
    }

    boolean this_present_invalidate_tables_fraction_on_memory_pressure = true;
    boolean that_present_invalidate_tables_fraction_on_memory_pressure = true;
    if (this_present_invalidate_tables_fraction_on_memory_pressure || that_present_invalidate_tables_fraction_on_memory_pressure) {
      if (!(this_present_invalidate_tables_fraction_on_memory_pressure && that_present_invalidate_tables_fraction_on_memory_pressure))
        return false;
      if (this.invalidate_tables_fraction_on_memory_pressure != that.invalidate_tables_fraction_on_memory_pressure)
        return false;
    }

    boolean this_present_local_catalog_max_fetch_retries = true;
    boolean that_present_local_catalog_max_fetch_retries = true;
    if (this_present_local_catalog_max_fetch_retries || that_present_local_catalog_max_fetch_retries) {
      if (!(this_present_local_catalog_max_fetch_retries && that_present_local_catalog_max_fetch_retries))
        return false;
      if (this.local_catalog_max_fetch_retries != that.local_catalog_max_fetch_retries)
        return false;
    }

    boolean this_present_kudu_scanner_thread_estimated_bytes_per_column = true;
    boolean that_present_kudu_scanner_thread_estimated_bytes_per_column = true;
    if (this_present_kudu_scanner_thread_estimated_bytes_per_column || that_present_kudu_scanner_thread_estimated_bytes_per_column) {
      if (!(this_present_kudu_scanner_thread_estimated_bytes_per_column && that_present_kudu_scanner_thread_estimated_bytes_per_column))
        return false;
      if (this.kudu_scanner_thread_estimated_bytes_per_column != that.kudu_scanner_thread_estimated_bytes_per_column)
        return false;
    }

    boolean this_present_kudu_scanner_thread_max_estimated_bytes = true;
    boolean that_present_kudu_scanner_thread_max_estimated_bytes = true;
    if (this_present_kudu_scanner_thread_max_estimated_bytes || that_present_kudu_scanner_thread_max_estimated_bytes) {
      if (!(this_present_kudu_scanner_thread_max_estimated_bytes && that_present_kudu_scanner_thread_max_estimated_bytes))
        return false;
      if (this.kudu_scanner_thread_max_estimated_bytes != that.kudu_scanner_thread_max_estimated_bytes)
        return false;
    }

    boolean this_present_catalog_max_parallel_partial_fetch_rpc = true;
    boolean that_present_catalog_max_parallel_partial_fetch_rpc = true;
    if (this_present_catalog_max_parallel_partial_fetch_rpc || that_present_catalog_max_parallel_partial_fetch_rpc) {
      if (!(this_present_catalog_max_parallel_partial_fetch_rpc && that_present_catalog_max_parallel_partial_fetch_rpc))
        return false;
      if (this.catalog_max_parallel_partial_fetch_rpc != that.catalog_max_parallel_partial_fetch_rpc)
        return false;
    }

    boolean this_present_catalog_partial_fetch_rpc_queue_timeout_s = true;
    boolean that_present_catalog_partial_fetch_rpc_queue_timeout_s = true;
    if (this_present_catalog_partial_fetch_rpc_queue_timeout_s || that_present_catalog_partial_fetch_rpc_queue_timeout_s) {
      if (!(this_present_catalog_partial_fetch_rpc_queue_timeout_s && that_present_catalog_partial_fetch_rpc_queue_timeout_s))
        return false;
      if (this.catalog_partial_fetch_rpc_queue_timeout_s != that.catalog_partial_fetch_rpc_queue_timeout_s)
        return false;
    }

    boolean this_present_exchg_node_buffer_size_bytes = true;
    boolean that_present_exchg_node_buffer_size_bytes = true;
    if (this_present_exchg_node_buffer_size_bytes || that_present_exchg_node_buffer_size_bytes) {
      if (!(this_present_exchg_node_buffer_size_bytes && that_present_exchg_node_buffer_size_bytes))
        return false;
      if (this.exchg_node_buffer_size_bytes != that.exchg_node_buffer_size_bytes)
        return false;
    }

    boolean this_present_kudu_mutation_buffer_size = true;
    boolean that_present_kudu_mutation_buffer_size = true;
    if (this_present_kudu_mutation_buffer_size || that_present_kudu_mutation_buffer_size) {
      if (!(this_present_kudu_mutation_buffer_size && that_present_kudu_mutation_buffer_size))
        return false;
      if (this.kudu_mutation_buffer_size != that.kudu_mutation_buffer_size)
        return false;
    }

    boolean this_present_kudu_error_buffer_size = true;
    boolean that_present_kudu_error_buffer_size = true;
    if (this_present_kudu_error_buffer_size || that_present_kudu_error_buffer_size) {
      if (!(this_present_kudu_error_buffer_size && that_present_kudu_error_buffer_size))
        return false;
      if (this.kudu_error_buffer_size != that.kudu_error_buffer_size)
        return false;
    }

    boolean this_present_hms_event_polling_interval_s = true;
    boolean that_present_hms_event_polling_interval_s = true;
    if (this_present_hms_event_polling_interval_s || that_present_hms_event_polling_interval_s) {
      if (!(this_present_hms_event_polling_interval_s && that_present_hms_event_polling_interval_s))
        return false;
      if (this.hms_event_polling_interval_s != that.hms_event_polling_interval_s)
        return false;
    }

    boolean this_present_impala_build_version = true && this.isSetImpala_build_version();
    boolean that_present_impala_build_version = true && that.isSetImpala_build_version();
    if (this_present_impala_build_version || that_present_impala_build_version) {
      if (!(this_present_impala_build_version && that_present_impala_build_version))
        return false;
      if (!this.impala_build_version.equals(that.impala_build_version))
        return false;
    }

    boolean this_present_authorization_factory_class = true && this.isSetAuthorization_factory_class();
    boolean that_present_authorization_factory_class = true && that.isSetAuthorization_factory_class();
    if (this_present_authorization_factory_class || that_present_authorization_factory_class) {
      if (!(this_present_authorization_factory_class && that_present_authorization_factory_class))
        return false;
      if (!this.authorization_factory_class.equals(that.authorization_factory_class))
        return false;
    }

    boolean this_present_unlock_mt_dop = true;
    boolean that_present_unlock_mt_dop = true;
    if (this_present_unlock_mt_dop || that_present_unlock_mt_dop) {
      if (!(this_present_unlock_mt_dop && that_present_unlock_mt_dop))
        return false;
      if (this.unlock_mt_dop != that.unlock_mt_dop)
        return false;
    }

    boolean this_present_ranger_service_type = true && this.isSetRanger_service_type();
    boolean that_present_ranger_service_type = true && that.isSetRanger_service_type();
    if (this_present_ranger_service_type || that_present_ranger_service_type) {
      if (!(this_present_ranger_service_type && that_present_ranger_service_type))
        return false;
      if (!this.ranger_service_type.equals(that.ranger_service_type))
        return false;
    }

    boolean this_present_ranger_app_id = true && this.isSetRanger_app_id();
    boolean that_present_ranger_app_id = true && that.isSetRanger_app_id();
    if (this_present_ranger_app_id || that_present_ranger_app_id) {
      if (!(this_present_ranger_app_id && that_present_ranger_app_id))
        return false;
      if (!this.ranger_app_id.equals(that.ranger_app_id))
        return false;
    }

    boolean this_present_authorization_provider = true && this.isSetAuthorization_provider();
    boolean that_present_authorization_provider = true && that.isSetAuthorization_provider();
    if (this_present_authorization_provider || that_present_authorization_provider) {
      if (!(this_present_authorization_provider && that_present_authorization_provider))
        return false;
      if (!this.authorization_provider.equals(that.authorization_provider))
        return false;
    }

    boolean this_present_recursively_list_partitions = true;
    boolean that_present_recursively_list_partitions = true;
    if (this_present_recursively_list_partitions || that_present_recursively_list_partitions) {
      if (!(this_present_recursively_list_partitions && that_present_recursively_list_partitions))
        return false;
      if (this.recursively_list_partitions != that.recursively_list_partitions)
        return false;
    }

    boolean this_present_query_event_hook_classes = true && this.isSetQuery_event_hook_classes();
    boolean that_present_query_event_hook_classes = true && that.isSetQuery_event_hook_classes();
    if (this_present_query_event_hook_classes || that_present_query_event_hook_classes) {
      if (!(this_present_query_event_hook_classes && that_present_query_event_hook_classes))
        return false;
      if (!this.query_event_hook_classes.equals(that.query_event_hook_classes))
        return false;
    }

    boolean this_present_query_event_hook_nthreads = true;
    boolean that_present_query_event_hook_nthreads = true;
    if (this_present_query_event_hook_nthreads || that_present_query_event_hook_nthreads) {
      if (!(this_present_query_event_hook_nthreads && that_present_query_event_hook_nthreads))
        return false;
      if (this.query_event_hook_nthreads != that.query_event_hook_nthreads)
        return false;
    }

    boolean this_present_is_executor = true;
    boolean that_present_is_executor = true;
    if (this_present_is_executor || that_present_is_executor) {
      if (!(this_present_is_executor && that_present_is_executor))
        return false;
      if (this.is_executor != that.is_executor)
        return false;
    }

    boolean this_present_use_dedicated_coordinator_estimates = true;
    boolean that_present_use_dedicated_coordinator_estimates = true;
    if (this_present_use_dedicated_coordinator_estimates || that_present_use_dedicated_coordinator_estimates) {
      if (!(this_present_use_dedicated_coordinator_estimates && that_present_use_dedicated_coordinator_estimates))
        return false;
      if (this.use_dedicated_coordinator_estimates != that.use_dedicated_coordinator_estimates)
        return false;
    }

    boolean this_present_blacklisted_dbs = true && this.isSetBlacklisted_dbs();
    boolean that_present_blacklisted_dbs = true && that.isSetBlacklisted_dbs();
    if (this_present_blacklisted_dbs || that_present_blacklisted_dbs) {
      if (!(this_present_blacklisted_dbs && that_present_blacklisted_dbs))
        return false;
      if (!this.blacklisted_dbs.equals(that.blacklisted_dbs))
        return false;
    }

    boolean this_present_blacklisted_tables = true && this.isSetBlacklisted_tables();
    boolean that_present_blacklisted_tables = true && that.isSetBlacklisted_tables();
    if (this_present_blacklisted_tables || that_present_blacklisted_tables) {
      if (!(this_present_blacklisted_tables && that_present_blacklisted_tables))
        return false;
      if (!this.blacklisted_tables.equals(that.blacklisted_tables))
        return false;
    }

    boolean this_present_unlock_zorder_sort = true;
    boolean that_present_unlock_zorder_sort = true;
    if (this_present_unlock_zorder_sort || that_present_unlock_zorder_sort) {
      if (!(this_present_unlock_zorder_sort && that_present_unlock_zorder_sort))
        return false;
      if (this.unlock_zorder_sort != that.unlock_zorder_sort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sentry_config = true && (isSetSentry_config());
    list.add(present_sentry_config);
    if (present_sentry_config)
      list.add(sentry_config);

    boolean present_load_auth_to_local_rules = true;
    list.add(present_load_auth_to_local_rules);
    if (present_load_auth_to_local_rules)
      list.add(load_auth_to_local_rules);

    boolean present_non_impala_java_vlog = true;
    list.add(present_non_impala_java_vlog);
    if (present_non_impala_java_vlog)
      list.add(non_impala_java_vlog);

    boolean present_impala_log_lvl = true;
    list.add(present_impala_log_lvl);
    if (present_impala_log_lvl)
      list.add(impala_log_lvl);

    boolean present_inc_stats_size_limit_bytes = true;
    list.add(present_inc_stats_size_limit_bytes);
    if (present_inc_stats_size_limit_bytes)
      list.add(inc_stats_size_limit_bytes);

    boolean present_lineage_event_log_dir = true && (isSetLineage_event_log_dir());
    list.add(present_lineage_event_log_dir);
    if (present_lineage_event_log_dir)
      list.add(lineage_event_log_dir);

    boolean present_load_catalog_in_background = true;
    list.add(present_load_catalog_in_background);
    if (present_load_catalog_in_background)
      list.add(load_catalog_in_background);

    boolean present_num_metadata_loading_threads = true;
    list.add(present_num_metadata_loading_threads);
    if (present_num_metadata_loading_threads)
      list.add(num_metadata_loading_threads);

    boolean present_principal = true && (isSetPrincipal());
    list.add(present_principal);
    if (present_principal)
      list.add(principal);

    boolean present_server_name = true && (isSetServer_name());
    list.add(present_server_name);
    if (present_server_name)
      list.add(server_name);

    boolean present_authorization_policy_provider_class = true && (isSetAuthorization_policy_provider_class());
    list.add(present_authorization_policy_provider_class);
    if (present_authorization_policy_provider_class)
      list.add(authorization_policy_provider_class);

    boolean present_kudu_master_hosts = true && (isSetKudu_master_hosts());
    list.add(present_kudu_master_hosts);
    if (present_kudu_master_hosts)
      list.add(kudu_master_hosts);

    boolean present_local_library_path = true && (isSetLocal_library_path());
    list.add(present_local_library_path);
    if (present_local_library_path)
      list.add(local_library_path);

    boolean present_read_size = true;
    list.add(present_read_size);
    if (present_read_size)
      list.add(read_size);

    boolean present_kudu_operation_timeout_ms = true;
    list.add(present_kudu_operation_timeout_ms);
    if (present_kudu_operation_timeout_ms)
      list.add(kudu_operation_timeout_ms);

    boolean present_initial_hms_cnxn_timeout_s = true;
    list.add(present_initial_hms_cnxn_timeout_s);
    if (present_initial_hms_cnxn_timeout_s)
      list.add(initial_hms_cnxn_timeout_s);

    boolean present_enable_stats_extrapolation = true;
    list.add(present_enable_stats_extrapolation);
    if (present_enable_stats_extrapolation)
      list.add(enable_stats_extrapolation);

    boolean present_sentry_catalog_polling_frequency_s = true;
    list.add(present_sentry_catalog_polling_frequency_s);
    if (present_sentry_catalog_polling_frequency_s)
      list.add(sentry_catalog_polling_frequency_s);

    boolean present_max_hdfs_partitions_parallel_load = true;
    list.add(present_max_hdfs_partitions_parallel_load);
    if (present_max_hdfs_partitions_parallel_load)
      list.add(max_hdfs_partitions_parallel_load);

    boolean present_max_nonhdfs_partitions_parallel_load = true;
    list.add(present_max_nonhdfs_partitions_parallel_load);
    if (present_max_nonhdfs_partitions_parallel_load)
      list.add(max_nonhdfs_partitions_parallel_load);

    boolean present_reserved_words_version = true && (isSetReserved_words_version());
    list.add(present_reserved_words_version);
    if (present_reserved_words_version)
      list.add(reserved_words_version.getValue());

    boolean present_max_filter_error_rate = true;
    list.add(present_max_filter_error_rate);
    if (present_max_filter_error_rate)
      list.add(max_filter_error_rate);

    boolean present_min_buffer_size = true;
    list.add(present_min_buffer_size);
    if (present_min_buffer_size)
      list.add(min_buffer_size);

    boolean present_enable_orc_scanner = true;
    list.add(present_enable_orc_scanner);
    if (present_enable_orc_scanner)
      list.add(enable_orc_scanner);

    boolean present_authorized_proxy_group_config = true && (isSetAuthorized_proxy_group_config());
    list.add(present_authorized_proxy_group_config);
    if (present_authorized_proxy_group_config)
      list.add(authorized_proxy_group_config);

    boolean present_use_local_catalog = true;
    list.add(present_use_local_catalog);
    if (present_use_local_catalog)
      list.add(use_local_catalog);

    boolean present_disable_catalog_data_ops_debug_only = true;
    list.add(present_disable_catalog_data_ops_debug_only);
    if (present_disable_catalog_data_ops_debug_only)
      list.add(disable_catalog_data_ops_debug_only);

    boolean present_local_catalog_cache_mb = true;
    list.add(present_local_catalog_cache_mb);
    if (present_local_catalog_cache_mb)
      list.add(local_catalog_cache_mb);

    boolean present_local_catalog_cache_expiration_s = true;
    list.add(present_local_catalog_cache_expiration_s);
    if (present_local_catalog_cache_expiration_s)
      list.add(local_catalog_cache_expiration_s);

    boolean present_catalog_topic_mode = true && (isSetCatalog_topic_mode());
    list.add(present_catalog_topic_mode);
    if (present_catalog_topic_mode)
      list.add(catalog_topic_mode);

    boolean present_invalidate_tables_timeout_s = true;
    list.add(present_invalidate_tables_timeout_s);
    if (present_invalidate_tables_timeout_s)
      list.add(invalidate_tables_timeout_s);

    boolean present_invalidate_tables_on_memory_pressure = true;
    list.add(present_invalidate_tables_on_memory_pressure);
    if (present_invalidate_tables_on_memory_pressure)
      list.add(invalidate_tables_on_memory_pressure);

    boolean present_invalidate_tables_gc_old_gen_full_threshold = true;
    list.add(present_invalidate_tables_gc_old_gen_full_threshold);
    if (present_invalidate_tables_gc_old_gen_full_threshold)
      list.add(invalidate_tables_gc_old_gen_full_threshold);

    boolean present_invalidate_tables_fraction_on_memory_pressure = true;
    list.add(present_invalidate_tables_fraction_on_memory_pressure);
    if (present_invalidate_tables_fraction_on_memory_pressure)
      list.add(invalidate_tables_fraction_on_memory_pressure);

    boolean present_local_catalog_max_fetch_retries = true;
    list.add(present_local_catalog_max_fetch_retries);
    if (present_local_catalog_max_fetch_retries)
      list.add(local_catalog_max_fetch_retries);

    boolean present_kudu_scanner_thread_estimated_bytes_per_column = true;
    list.add(present_kudu_scanner_thread_estimated_bytes_per_column);
    if (present_kudu_scanner_thread_estimated_bytes_per_column)
      list.add(kudu_scanner_thread_estimated_bytes_per_column);

    boolean present_kudu_scanner_thread_max_estimated_bytes = true;
    list.add(present_kudu_scanner_thread_max_estimated_bytes);
    if (present_kudu_scanner_thread_max_estimated_bytes)
      list.add(kudu_scanner_thread_max_estimated_bytes);

    boolean present_catalog_max_parallel_partial_fetch_rpc = true;
    list.add(present_catalog_max_parallel_partial_fetch_rpc);
    if (present_catalog_max_parallel_partial_fetch_rpc)
      list.add(catalog_max_parallel_partial_fetch_rpc);

    boolean present_catalog_partial_fetch_rpc_queue_timeout_s = true;
    list.add(present_catalog_partial_fetch_rpc_queue_timeout_s);
    if (present_catalog_partial_fetch_rpc_queue_timeout_s)
      list.add(catalog_partial_fetch_rpc_queue_timeout_s);

    boolean present_exchg_node_buffer_size_bytes = true;
    list.add(present_exchg_node_buffer_size_bytes);
    if (present_exchg_node_buffer_size_bytes)
      list.add(exchg_node_buffer_size_bytes);

    boolean present_kudu_mutation_buffer_size = true;
    list.add(present_kudu_mutation_buffer_size);
    if (present_kudu_mutation_buffer_size)
      list.add(kudu_mutation_buffer_size);

    boolean present_kudu_error_buffer_size = true;
    list.add(present_kudu_error_buffer_size);
    if (present_kudu_error_buffer_size)
      list.add(kudu_error_buffer_size);

    boolean present_hms_event_polling_interval_s = true;
    list.add(present_hms_event_polling_interval_s);
    if (present_hms_event_polling_interval_s)
      list.add(hms_event_polling_interval_s);

    boolean present_impala_build_version = true && (isSetImpala_build_version());
    list.add(present_impala_build_version);
    if (present_impala_build_version)
      list.add(impala_build_version);

    boolean present_authorization_factory_class = true && (isSetAuthorization_factory_class());
    list.add(present_authorization_factory_class);
    if (present_authorization_factory_class)
      list.add(authorization_factory_class);

    boolean present_unlock_mt_dop = true;
    list.add(present_unlock_mt_dop);
    if (present_unlock_mt_dop)
      list.add(unlock_mt_dop);

    boolean present_ranger_service_type = true && (isSetRanger_service_type());
    list.add(present_ranger_service_type);
    if (present_ranger_service_type)
      list.add(ranger_service_type);

    boolean present_ranger_app_id = true && (isSetRanger_app_id());
    list.add(present_ranger_app_id);
    if (present_ranger_app_id)
      list.add(ranger_app_id);

    boolean present_authorization_provider = true && (isSetAuthorization_provider());
    list.add(present_authorization_provider);
    if (present_authorization_provider)
      list.add(authorization_provider);

    boolean present_recursively_list_partitions = true;
    list.add(present_recursively_list_partitions);
    if (present_recursively_list_partitions)
      list.add(recursively_list_partitions);

    boolean present_query_event_hook_classes = true && (isSetQuery_event_hook_classes());
    list.add(present_query_event_hook_classes);
    if (present_query_event_hook_classes)
      list.add(query_event_hook_classes);

    boolean present_query_event_hook_nthreads = true;
    list.add(present_query_event_hook_nthreads);
    if (present_query_event_hook_nthreads)
      list.add(query_event_hook_nthreads);

    boolean present_is_executor = true;
    list.add(present_is_executor);
    if (present_is_executor)
      list.add(is_executor);

    boolean present_use_dedicated_coordinator_estimates = true;
    list.add(present_use_dedicated_coordinator_estimates);
    if (present_use_dedicated_coordinator_estimates)
      list.add(use_dedicated_coordinator_estimates);

    boolean present_blacklisted_dbs = true && (isSetBlacklisted_dbs());
    list.add(present_blacklisted_dbs);
    if (present_blacklisted_dbs)
      list.add(blacklisted_dbs);

    boolean present_blacklisted_tables = true && (isSetBlacklisted_tables());
    list.add(present_blacklisted_tables);
    if (present_blacklisted_tables)
      list.add(blacklisted_tables);

    boolean present_unlock_zorder_sort = true;
    list.add(present_unlock_zorder_sort);
    if (present_unlock_zorder_sort)
      list.add(unlock_zorder_sort);

    return list.hashCode();
  }

  @Override
  public int compareTo(TBackendGflags other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSentry_config()).compareTo(other.isSetSentry_config());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentry_config()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentry_config, other.sentry_config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoad_auth_to_local_rules()).compareTo(other.isSetLoad_auth_to_local_rules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_auth_to_local_rules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_auth_to_local_rules, other.load_auth_to_local_rules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNon_impala_java_vlog()).compareTo(other.isSetNon_impala_java_vlog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNon_impala_java_vlog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_impala_java_vlog, other.non_impala_java_vlog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImpala_log_lvl()).compareTo(other.isSetImpala_log_lvl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpala_log_lvl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impala_log_lvl, other.impala_log_lvl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInc_stats_size_limit_bytes()).compareTo(other.isSetInc_stats_size_limit_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInc_stats_size_limit_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inc_stats_size_limit_bytes, other.inc_stats_size_limit_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineage_event_log_dir()).compareTo(other.isSetLineage_event_log_dir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineage_event_log_dir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineage_event_log_dir, other.lineage_event_log_dir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoad_catalog_in_background()).compareTo(other.isSetLoad_catalog_in_background());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoad_catalog_in_background()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_catalog_in_background, other.load_catalog_in_background);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_metadata_loading_threads()).compareTo(other.isSetNum_metadata_loading_threads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_metadata_loading_threads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_metadata_loading_threads, other.num_metadata_loading_threads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal()).compareTo(other.isSetPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal, other.principal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_name()).compareTo(other.isSetServer_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_name, other.server_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorization_policy_provider_class()).compareTo(other.isSetAuthorization_policy_provider_class());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorization_policy_provider_class()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_policy_provider_class, other.authorization_policy_provider_class);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_master_hosts()).compareTo(other.isSetKudu_master_hosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_master_hosts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_master_hosts, other.kudu_master_hosts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_library_path()).compareTo(other.isSetLocal_library_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_library_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_library_path, other.local_library_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead_size()).compareTo(other.isSetRead_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_size, other.read_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_operation_timeout_ms()).compareTo(other.isSetKudu_operation_timeout_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_operation_timeout_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_operation_timeout_ms, other.kudu_operation_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitial_hms_cnxn_timeout_s()).compareTo(other.isSetInitial_hms_cnxn_timeout_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitial_hms_cnxn_timeout_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initial_hms_cnxn_timeout_s, other.initial_hms_cnxn_timeout_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnable_stats_extrapolation()).compareTo(other.isSetEnable_stats_extrapolation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_stats_extrapolation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_stats_extrapolation, other.enable_stats_extrapolation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentry_catalog_polling_frequency_s()).compareTo(other.isSetSentry_catalog_polling_frequency_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentry_catalog_polling_frequency_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentry_catalog_polling_frequency_s, other.sentry_catalog_polling_frequency_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_hdfs_partitions_parallel_load()).compareTo(other.isSetMax_hdfs_partitions_parallel_load());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_hdfs_partitions_parallel_load()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_hdfs_partitions_parallel_load, other.max_hdfs_partitions_parallel_load);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_nonhdfs_partitions_parallel_load()).compareTo(other.isSetMax_nonhdfs_partitions_parallel_load());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_nonhdfs_partitions_parallel_load()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_nonhdfs_partitions_parallel_load, other.max_nonhdfs_partitions_parallel_load);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserved_words_version()).compareTo(other.isSetReserved_words_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserved_words_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserved_words_version, other.reserved_words_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_filter_error_rate()).compareTo(other.isSetMax_filter_error_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_filter_error_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_filter_error_rate, other.max_filter_error_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_buffer_size()).compareTo(other.isSetMin_buffer_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_buffer_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_buffer_size, other.min_buffer_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnable_orc_scanner()).compareTo(other.isSetEnable_orc_scanner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_orc_scanner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_orc_scanner, other.enable_orc_scanner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorized_proxy_group_config()).compareTo(other.isSetAuthorized_proxy_group_config());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorized_proxy_group_config()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorized_proxy_group_config, other.authorized_proxy_group_config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_local_catalog()).compareTo(other.isSetUse_local_catalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_local_catalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_local_catalog, other.use_local_catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_catalog_data_ops_debug_only()).compareTo(other.isSetDisable_catalog_data_ops_debug_only());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_catalog_data_ops_debug_only()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_catalog_data_ops_debug_only, other.disable_catalog_data_ops_debug_only);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_catalog_cache_mb()).compareTo(other.isSetLocal_catalog_cache_mb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_catalog_cache_mb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_catalog_cache_mb, other.local_catalog_cache_mb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_catalog_cache_expiration_s()).compareTo(other.isSetLocal_catalog_cache_expiration_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_catalog_cache_expiration_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_catalog_cache_expiration_s, other.local_catalog_cache_expiration_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog_topic_mode()).compareTo(other.isSetCatalog_topic_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog_topic_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog_topic_mode, other.catalog_topic_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidate_tables_timeout_s()).compareTo(other.isSetInvalidate_tables_timeout_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidate_tables_timeout_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidate_tables_timeout_s, other.invalidate_tables_timeout_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidate_tables_on_memory_pressure()).compareTo(other.isSetInvalidate_tables_on_memory_pressure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidate_tables_on_memory_pressure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidate_tables_on_memory_pressure, other.invalidate_tables_on_memory_pressure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidate_tables_gc_old_gen_full_threshold()).compareTo(other.isSetInvalidate_tables_gc_old_gen_full_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidate_tables_gc_old_gen_full_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidate_tables_gc_old_gen_full_threshold, other.invalidate_tables_gc_old_gen_full_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidate_tables_fraction_on_memory_pressure()).compareTo(other.isSetInvalidate_tables_fraction_on_memory_pressure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidate_tables_fraction_on_memory_pressure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidate_tables_fraction_on_memory_pressure, other.invalidate_tables_fraction_on_memory_pressure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocal_catalog_max_fetch_retries()).compareTo(other.isSetLocal_catalog_max_fetch_retries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocal_catalog_max_fetch_retries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.local_catalog_max_fetch_retries, other.local_catalog_max_fetch_retries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_scanner_thread_estimated_bytes_per_column()).compareTo(other.isSetKudu_scanner_thread_estimated_bytes_per_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_scanner_thread_estimated_bytes_per_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_scanner_thread_estimated_bytes_per_column, other.kudu_scanner_thread_estimated_bytes_per_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_scanner_thread_max_estimated_bytes()).compareTo(other.isSetKudu_scanner_thread_max_estimated_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_scanner_thread_max_estimated_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_scanner_thread_max_estimated_bytes, other.kudu_scanner_thread_max_estimated_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog_max_parallel_partial_fetch_rpc()).compareTo(other.isSetCatalog_max_parallel_partial_fetch_rpc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog_max_parallel_partial_fetch_rpc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog_max_parallel_partial_fetch_rpc, other.catalog_max_parallel_partial_fetch_rpc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatalog_partial_fetch_rpc_queue_timeout_s()).compareTo(other.isSetCatalog_partial_fetch_rpc_queue_timeout_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatalog_partial_fetch_rpc_queue_timeout_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catalog_partial_fetch_rpc_queue_timeout_s, other.catalog_partial_fetch_rpc_queue_timeout_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchg_node_buffer_size_bytes()).compareTo(other.isSetExchg_node_buffer_size_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchg_node_buffer_size_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchg_node_buffer_size_bytes, other.exchg_node_buffer_size_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_mutation_buffer_size()).compareTo(other.isSetKudu_mutation_buffer_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_mutation_buffer_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_mutation_buffer_size, other.kudu_mutation_buffer_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_error_buffer_size()).compareTo(other.isSetKudu_error_buffer_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_error_buffer_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_error_buffer_size, other.kudu_error_buffer_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHms_event_polling_interval_s()).compareTo(other.isSetHms_event_polling_interval_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHms_event_polling_interval_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hms_event_polling_interval_s, other.hms_event_polling_interval_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImpala_build_version()).compareTo(other.isSetImpala_build_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpala_build_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impala_build_version, other.impala_build_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorization_factory_class()).compareTo(other.isSetAuthorization_factory_class());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorization_factory_class()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_factory_class, other.authorization_factory_class);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlock_mt_dop()).compareTo(other.isSetUnlock_mt_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlock_mt_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlock_mt_dop, other.unlock_mt_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRanger_service_type()).compareTo(other.isSetRanger_service_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRanger_service_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ranger_service_type, other.ranger_service_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRanger_app_id()).compareTo(other.isSetRanger_app_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRanger_app_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ranger_app_id, other.ranger_app_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorization_provider()).compareTo(other.isSetAuthorization_provider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorization_provider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization_provider, other.authorization_provider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecursively_list_partitions()).compareTo(other.isSetRecursively_list_partitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecursively_list_partitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recursively_list_partitions, other.recursively_list_partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_event_hook_classes()).compareTo(other.isSetQuery_event_hook_classes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_event_hook_classes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_event_hook_classes, other.query_event_hook_classes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_event_hook_nthreads()).compareTo(other.isSetQuery_event_hook_nthreads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_event_hook_nthreads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_event_hook_nthreads, other.query_event_hook_nthreads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_executor()).compareTo(other.isSetIs_executor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_executor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_executor, other.is_executor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_dedicated_coordinator_estimates()).compareTo(other.isSetUse_dedicated_coordinator_estimates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_dedicated_coordinator_estimates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_dedicated_coordinator_estimates, other.use_dedicated_coordinator_estimates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlacklisted_dbs()).compareTo(other.isSetBlacklisted_dbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlacklisted_dbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blacklisted_dbs, other.blacklisted_dbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlacklisted_tables()).compareTo(other.isSetBlacklisted_tables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlacklisted_tables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blacklisted_tables, other.blacklisted_tables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlock_zorder_sort()).compareTo(other.isSetUnlock_zorder_sort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlock_zorder_sort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlock_zorder_sort, other.unlock_zorder_sort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBackendGflags(");
    boolean first = true;

    sb.append("sentry_config:");
    if (this.sentry_config == null) {
      sb.append("null");
    } else {
      sb.append(this.sentry_config);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("load_auth_to_local_rules:");
    sb.append(this.load_auth_to_local_rules);
    first = false;
    if (!first) sb.append(", ");
    sb.append("non_impala_java_vlog:");
    sb.append(this.non_impala_java_vlog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("impala_log_lvl:");
    sb.append(this.impala_log_lvl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("inc_stats_size_limit_bytes:");
    sb.append(this.inc_stats_size_limit_bytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineage_event_log_dir:");
    if (this.lineage_event_log_dir == null) {
      sb.append("null");
    } else {
      sb.append(this.lineage_event_log_dir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("load_catalog_in_background:");
    sb.append(this.load_catalog_in_background);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_metadata_loading_threads:");
    sb.append(this.num_metadata_loading_threads);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal:");
    if (this.principal == null) {
      sb.append("null");
    } else {
      sb.append(this.principal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("server_name:");
    if (this.server_name == null) {
      sb.append("null");
    } else {
      sb.append(this.server_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorization_policy_provider_class:");
    if (this.authorization_policy_provider_class == null) {
      sb.append("null");
    } else {
      sb.append(this.authorization_policy_provider_class);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kudu_master_hosts:");
    if (this.kudu_master_hosts == null) {
      sb.append("null");
    } else {
      sb.append(this.kudu_master_hosts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("local_library_path:");
    if (this.local_library_path == null) {
      sb.append("null");
    } else {
      sb.append(this.local_library_path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("read_size:");
    sb.append(this.read_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kudu_operation_timeout_ms:");
    sb.append(this.kudu_operation_timeout_ms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("initial_hms_cnxn_timeout_s:");
    sb.append(this.initial_hms_cnxn_timeout_s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enable_stats_extrapolation:");
    sb.append(this.enable_stats_extrapolation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sentry_catalog_polling_frequency_s:");
    sb.append(this.sentry_catalog_polling_frequency_s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_hdfs_partitions_parallel_load:");
    sb.append(this.max_hdfs_partitions_parallel_load);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_nonhdfs_partitions_parallel_load:");
    sb.append(this.max_nonhdfs_partitions_parallel_load);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserved_words_version:");
    if (this.reserved_words_version == null) {
      sb.append("null");
    } else {
      sb.append(this.reserved_words_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_filter_error_rate:");
    sb.append(this.max_filter_error_rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_buffer_size:");
    sb.append(this.min_buffer_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enable_orc_scanner:");
    sb.append(this.enable_orc_scanner);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorized_proxy_group_config:");
    if (this.authorized_proxy_group_config == null) {
      sb.append("null");
    } else {
      sb.append(this.authorized_proxy_group_config);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("use_local_catalog:");
    sb.append(this.use_local_catalog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("disable_catalog_data_ops_debug_only:");
    sb.append(this.disable_catalog_data_ops_debug_only);
    first = false;
    if (!first) sb.append(", ");
    sb.append("local_catalog_cache_mb:");
    sb.append(this.local_catalog_cache_mb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("local_catalog_cache_expiration_s:");
    sb.append(this.local_catalog_cache_expiration_s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("catalog_topic_mode:");
    if (this.catalog_topic_mode == null) {
      sb.append("null");
    } else {
      sb.append(this.catalog_topic_mode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invalidate_tables_timeout_s:");
    sb.append(this.invalidate_tables_timeout_s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invalidate_tables_on_memory_pressure:");
    sb.append(this.invalidate_tables_on_memory_pressure);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invalidate_tables_gc_old_gen_full_threshold:");
    sb.append(this.invalidate_tables_gc_old_gen_full_threshold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invalidate_tables_fraction_on_memory_pressure:");
    sb.append(this.invalidate_tables_fraction_on_memory_pressure);
    first = false;
    if (!first) sb.append(", ");
    sb.append("local_catalog_max_fetch_retries:");
    sb.append(this.local_catalog_max_fetch_retries);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kudu_scanner_thread_estimated_bytes_per_column:");
    sb.append(this.kudu_scanner_thread_estimated_bytes_per_column);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kudu_scanner_thread_max_estimated_bytes:");
    sb.append(this.kudu_scanner_thread_max_estimated_bytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("catalog_max_parallel_partial_fetch_rpc:");
    sb.append(this.catalog_max_parallel_partial_fetch_rpc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("catalog_partial_fetch_rpc_queue_timeout_s:");
    sb.append(this.catalog_partial_fetch_rpc_queue_timeout_s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchg_node_buffer_size_bytes:");
    sb.append(this.exchg_node_buffer_size_bytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kudu_mutation_buffer_size:");
    sb.append(this.kudu_mutation_buffer_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kudu_error_buffer_size:");
    sb.append(this.kudu_error_buffer_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hms_event_polling_interval_s:");
    sb.append(this.hms_event_polling_interval_s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("impala_build_version:");
    if (this.impala_build_version == null) {
      sb.append("null");
    } else {
      sb.append(this.impala_build_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorization_factory_class:");
    if (this.authorization_factory_class == null) {
      sb.append("null");
    } else {
      sb.append(this.authorization_factory_class);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlock_mt_dop:");
    sb.append(this.unlock_mt_dop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ranger_service_type:");
    if (this.ranger_service_type == null) {
      sb.append("null");
    } else {
      sb.append(this.ranger_service_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ranger_app_id:");
    if (this.ranger_app_id == null) {
      sb.append("null");
    } else {
      sb.append(this.ranger_app_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorization_provider:");
    if (this.authorization_provider == null) {
      sb.append("null");
    } else {
      sb.append(this.authorization_provider);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recursively_list_partitions:");
    sb.append(this.recursively_list_partitions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_event_hook_classes:");
    if (this.query_event_hook_classes == null) {
      sb.append("null");
    } else {
      sb.append(this.query_event_hook_classes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_event_hook_nthreads:");
    sb.append(this.query_event_hook_nthreads);
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_executor:");
    sb.append(this.is_executor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("use_dedicated_coordinator_estimates:");
    sb.append(this.use_dedicated_coordinator_estimates);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blacklisted_dbs:");
    if (this.blacklisted_dbs == null) {
      sb.append("null");
    } else {
      sb.append(this.blacklisted_dbs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blacklisted_tables:");
    if (this.blacklisted_tables == null) {
      sb.append("null");
    } else {
      sb.append(this.blacklisted_tables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlock_zorder_sort:");
    sb.append(this.unlock_zorder_sort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetSentry_config()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sentry_config' is unset! Struct:" + toString());
    }

    if (!isSetLoad_auth_to_local_rules()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'load_auth_to_local_rules' is unset! Struct:" + toString());
    }

    if (!isSetNon_impala_java_vlog()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'non_impala_java_vlog' is unset! Struct:" + toString());
    }

    if (!isSetImpala_log_lvl()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'impala_log_lvl' is unset! Struct:" + toString());
    }

    if (!isSetInc_stats_size_limit_bytes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'inc_stats_size_limit_bytes' is unset! Struct:" + toString());
    }

    if (!isSetLineage_event_log_dir()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lineage_event_log_dir' is unset! Struct:" + toString());
    }

    if (!isSetLoad_catalog_in_background()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'load_catalog_in_background' is unset! Struct:" + toString());
    }

    if (!isSetNum_metadata_loading_threads()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_metadata_loading_threads' is unset! Struct:" + toString());
    }

    if (!isSetPrincipal()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'principal' is unset! Struct:" + toString());
    }

    if (!isSetServer_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'server_name' is unset! Struct:" + toString());
    }

    if (!isSetAuthorization_policy_provider_class()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'authorization_policy_provider_class' is unset! Struct:" + toString());
    }

    if (!isSetKudu_master_hosts()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'kudu_master_hosts' is unset! Struct:" + toString());
    }

    if (!isSetLocal_library_path()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'local_library_path' is unset! Struct:" + toString());
    }

    if (!isSetRead_size()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'read_size' is unset! Struct:" + toString());
    }

    if (!isSetKudu_operation_timeout_ms()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'kudu_operation_timeout_ms' is unset! Struct:" + toString());
    }

    if (!isSetInitial_hms_cnxn_timeout_s()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'initial_hms_cnxn_timeout_s' is unset! Struct:" + toString());
    }

    if (!isSetEnable_stats_extrapolation()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'enable_stats_extrapolation' is unset! Struct:" + toString());
    }

    if (!isSetSentry_catalog_polling_frequency_s()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sentry_catalog_polling_frequency_s' is unset! Struct:" + toString());
    }

    if (!isSetMax_hdfs_partitions_parallel_load()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_hdfs_partitions_parallel_load' is unset! Struct:" + toString());
    }

    if (!isSetMax_nonhdfs_partitions_parallel_load()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_nonhdfs_partitions_parallel_load' is unset! Struct:" + toString());
    }

    if (!isSetReserved_words_version()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reserved_words_version' is unset! Struct:" + toString());
    }

    if (!isSetMax_filter_error_rate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_filter_error_rate' is unset! Struct:" + toString());
    }

    if (!isSetMin_buffer_size()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'min_buffer_size' is unset! Struct:" + toString());
    }

    if (!isSetEnable_orc_scanner()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'enable_orc_scanner' is unset! Struct:" + toString());
    }

    if (!isSetAuthorized_proxy_group_config()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'authorized_proxy_group_config' is unset! Struct:" + toString());
    }

    if (!isSetUse_local_catalog()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'use_local_catalog' is unset! Struct:" + toString());
    }

    if (!isSetDisable_catalog_data_ops_debug_only()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'disable_catalog_data_ops_debug_only' is unset! Struct:" + toString());
    }

    if (!isSetLocal_catalog_cache_mb()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'local_catalog_cache_mb' is unset! Struct:" + toString());
    }

    if (!isSetLocal_catalog_cache_expiration_s()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'local_catalog_cache_expiration_s' is unset! Struct:" + toString());
    }

    if (!isSetCatalog_topic_mode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'catalog_topic_mode' is unset! Struct:" + toString());
    }

    if (!isSetInvalidate_tables_timeout_s()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'invalidate_tables_timeout_s' is unset! Struct:" + toString());
    }

    if (!isSetInvalidate_tables_on_memory_pressure()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'invalidate_tables_on_memory_pressure' is unset! Struct:" + toString());
    }

    if (!isSetInvalidate_tables_gc_old_gen_full_threshold()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'invalidate_tables_gc_old_gen_full_threshold' is unset! Struct:" + toString());
    }

    if (!isSetInvalidate_tables_fraction_on_memory_pressure()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'invalidate_tables_fraction_on_memory_pressure' is unset! Struct:" + toString());
    }

    if (!isSetLocal_catalog_max_fetch_retries()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'local_catalog_max_fetch_retries' is unset! Struct:" + toString());
    }

    if (!isSetKudu_scanner_thread_estimated_bytes_per_column()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'kudu_scanner_thread_estimated_bytes_per_column' is unset! Struct:" + toString());
    }

    if (!isSetKudu_scanner_thread_max_estimated_bytes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'kudu_scanner_thread_max_estimated_bytes' is unset! Struct:" + toString());
    }

    if (!isSetCatalog_max_parallel_partial_fetch_rpc()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'catalog_max_parallel_partial_fetch_rpc' is unset! Struct:" + toString());
    }

    if (!isSetCatalog_partial_fetch_rpc_queue_timeout_s()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'catalog_partial_fetch_rpc_queue_timeout_s' is unset! Struct:" + toString());
    }

    if (!isSetExchg_node_buffer_size_bytes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exchg_node_buffer_size_bytes' is unset! Struct:" + toString());
    }

    if (!isSetKudu_mutation_buffer_size()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'kudu_mutation_buffer_size' is unset! Struct:" + toString());
    }

    if (!isSetKudu_error_buffer_size()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'kudu_error_buffer_size' is unset! Struct:" + toString());
    }

    if (!isSetHms_event_polling_interval_s()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hms_event_polling_interval_s' is unset! Struct:" + toString());
    }

    if (!isSetImpala_build_version()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'impala_build_version' is unset! Struct:" + toString());
    }

    if (!isSetAuthorization_factory_class()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'authorization_factory_class' is unset! Struct:" + toString());
    }

    if (!isSetUnlock_mt_dop()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unlock_mt_dop' is unset! Struct:" + toString());
    }

    if (!isSetRanger_service_type()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ranger_service_type' is unset! Struct:" + toString());
    }

    if (!isSetRanger_app_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ranger_app_id' is unset! Struct:" + toString());
    }

    if (!isSetAuthorization_provider()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'authorization_provider' is unset! Struct:" + toString());
    }

    if (!isSetRecursively_list_partitions()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'recursively_list_partitions' is unset! Struct:" + toString());
    }

    if (!isSetQuery_event_hook_classes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_event_hook_classes' is unset! Struct:" + toString());
    }

    if (!isSetQuery_event_hook_nthreads()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_event_hook_nthreads' is unset! Struct:" + toString());
    }

    if (!isSetIs_executor()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_executor' is unset! Struct:" + toString());
    }

    if (!isSetUse_dedicated_coordinator_estimates()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'use_dedicated_coordinator_estimates' is unset! Struct:" + toString());
    }

    if (!isSetBlacklisted_dbs()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blacklisted_dbs' is unset! Struct:" + toString());
    }

    if (!isSetBlacklisted_tables()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blacklisted_tables' is unset! Struct:" + toString());
    }

    if (!isSetUnlock_zorder_sort()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unlock_zorder_sort' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBackendGflagsStandardSchemeFactory implements SchemeFactory {
    public TBackendGflagsStandardScheme getScheme() {
      return new TBackendGflagsStandardScheme();
    }
  }

  private static class TBackendGflagsStandardScheme extends StandardScheme<TBackendGflags> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBackendGflags struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENTRY_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sentry_config = iprot.readString();
              struct.setSentry_configIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAD_AUTH_TO_LOCAL_RULES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.load_auth_to_local_rules = iprot.readBool();
              struct.setLoad_auth_to_local_rulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NON_IMPALA_JAVA_VLOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.non_impala_java_vlog = iprot.readI32();
              struct.setNon_impala_java_vlogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMPALA_LOG_LVL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.impala_log_lvl = iprot.readI32();
              struct.setImpala_log_lvlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INC_STATS_SIZE_LIMIT_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inc_stats_size_limit_bytes = iprot.readI64();
              struct.setInc_stats_size_limit_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LINEAGE_EVENT_LOG_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lineage_event_log_dir = iprot.readString();
              struct.setLineage_event_log_dirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAD_CATALOG_IN_BACKGROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.load_catalog_in_background = iprot.readBool();
              struct.setLoad_catalog_in_backgroundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUM_METADATA_LOADING_THREADS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_metadata_loading_threads = iprot.readI32();
              struct.setNum_metadata_loading_threadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.principal = iprot.readString();
              struct.setPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server_name = iprot.readString();
              struct.setServer_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AUTHORIZATION_POLICY_PROVIDER_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorization_policy_provider_class = iprot.readString();
              struct.setAuthorization_policy_provider_classIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // KUDU_MASTER_HOSTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kudu_master_hosts = iprot.readString();
              struct.setKudu_master_hostsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOCAL_LIBRARY_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.local_library_path = iprot.readString();
              struct.setLocal_library_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // READ_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.read_size = iprot.readI32();
              struct.setRead_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // KUDU_OPERATION_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kudu_operation_timeout_ms = iprot.readI32();
              struct.setKudu_operation_timeout_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INITIAL_HMS_CNXN_TIMEOUT_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.initial_hms_cnxn_timeout_s = iprot.readI32();
              struct.setInitial_hms_cnxn_timeout_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ENABLE_STATS_EXTRAPOLATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_stats_extrapolation = iprot.readBool();
              struct.setEnable_stats_extrapolationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SENTRY_CATALOG_POLLING_FREQUENCY_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sentry_catalog_polling_frequency_s = iprot.readI64();
              struct.setSentry_catalog_polling_frequency_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MAX_HDFS_PARTITIONS_PARALLEL_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_hdfs_partitions_parallel_load = iprot.readI32();
              struct.setMax_hdfs_partitions_parallel_loadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_nonhdfs_partitions_parallel_load = iprot.readI32();
              struct.setMax_nonhdfs_partitions_parallel_loadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // RESERVED_WORDS_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reserved_words_version = org.apache.impala.thrift.TReservedWordsVersion.findByValue(iprot.readI32());
              struct.setReserved_words_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MAX_FILTER_ERROR_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_filter_error_rate = iprot.readDouble();
              struct.setMax_filter_error_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MIN_BUFFER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_buffer_size = iprot.readI64();
              struct.setMin_buffer_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ENABLE_ORC_SCANNER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_orc_scanner = iprot.readBool();
              struct.setEnable_orc_scannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // AUTHORIZED_PROXY_GROUP_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorized_proxy_group_config = iprot.readString();
              struct.setAuthorized_proxy_group_configIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // USE_LOCAL_CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_local_catalog = iprot.readBool();
              struct.setUse_local_catalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_catalog_data_ops_debug_only = iprot.readBool();
              struct.setDisable_catalog_data_ops_debug_onlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // LOCAL_CATALOG_CACHE_MB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.local_catalog_cache_mb = iprot.readI32();
              struct.setLocal_catalog_cache_mbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // LOCAL_CATALOG_CACHE_EXPIRATION_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.local_catalog_cache_expiration_s = iprot.readI32();
              struct.setLocal_catalog_cache_expiration_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CATALOG_TOPIC_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catalog_topic_mode = iprot.readString();
              struct.setCatalog_topic_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // INVALIDATE_TABLES_TIMEOUT_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.invalidate_tables_timeout_s = iprot.readI32();
              struct.setInvalidate_tables_timeout_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // INVALIDATE_TABLES_ON_MEMORY_PRESSURE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.invalidate_tables_on_memory_pressure = iprot.readBool();
              struct.setInvalidate_tables_on_memory_pressureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.invalidate_tables_gc_old_gen_full_threshold = iprot.readDouble();
              struct.setInvalidate_tables_gc_old_gen_full_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.invalidate_tables_fraction_on_memory_pressure = iprot.readDouble();
              struct.setInvalidate_tables_fraction_on_memory_pressureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // LOCAL_CATALOG_MAX_FETCH_RETRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.local_catalog_max_fetch_retries = iprot.readI32();
              struct.setLocal_catalog_max_fetch_retriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.kudu_scanner_thread_estimated_bytes_per_column = iprot.readI64();
              struct.setKudu_scanner_thread_estimated_bytes_per_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.kudu_scanner_thread_max_estimated_bytes = iprot.readI64();
              struct.setKudu_scanner_thread_max_estimated_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.catalog_max_parallel_partial_fetch_rpc = iprot.readI32();
              struct.setCatalog_max_parallel_partial_fetch_rpcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.catalog_partial_fetch_rpc_queue_timeout_s = iprot.readI64();
              struct.setCatalog_partial_fetch_rpc_queue_timeout_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // EXCHG_NODE_BUFFER_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exchg_node_buffer_size_bytes = iprot.readI64();
              struct.setExchg_node_buffer_size_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // KUDU_MUTATION_BUFFER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kudu_mutation_buffer_size = iprot.readI32();
              struct.setKudu_mutation_buffer_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // KUDU_ERROR_BUFFER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kudu_error_buffer_size = iprot.readI32();
              struct.setKudu_error_buffer_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // HMS_EVENT_POLLING_INTERVAL_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hms_event_polling_interval_s = iprot.readI32();
              struct.setHms_event_polling_interval_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // IMPALA_BUILD_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.impala_build_version = iprot.readString();
              struct.setImpala_build_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // AUTHORIZATION_FACTORY_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorization_factory_class = iprot.readString();
              struct.setAuthorization_factory_classIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // UNLOCK_MT_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.unlock_mt_dop = iprot.readBool();
              struct.setUnlock_mt_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // RANGER_SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ranger_service_type = iprot.readString();
              struct.setRanger_service_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // RANGER_APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ranger_app_id = iprot.readString();
              struct.setRanger_app_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // AUTHORIZATION_PROVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorization_provider = iprot.readString();
              struct.setAuthorization_providerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // RECURSIVELY_LIST_PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.recursively_list_partitions = iprot.readBool();
              struct.setRecursively_list_partitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // QUERY_EVENT_HOOK_CLASSES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_event_hook_classes = iprot.readString();
              struct.setQuery_event_hook_classesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // QUERY_EVENT_HOOK_NTHREADS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query_event_hook_nthreads = iprot.readI32();
              struct.setQuery_event_hook_nthreadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // IS_EXECUTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_executor = iprot.readBool();
              struct.setIs_executorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // USE_DEDICATED_COORDINATOR_ESTIMATES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_dedicated_coordinator_estimates = iprot.readBool();
              struct.setUse_dedicated_coordinator_estimatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // BLACKLISTED_DBS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blacklisted_dbs = iprot.readString();
              struct.setBlacklisted_dbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // BLACKLISTED_TABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blacklisted_tables = iprot.readString();
              struct.setBlacklisted_tablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // UNLOCK_ZORDER_SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.unlock_zorder_sort = iprot.readBool();
              struct.setUnlock_zorder_sortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBackendGflags struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sentry_config != null) {
        oprot.writeFieldBegin(SENTRY_CONFIG_FIELD_DESC);
        oprot.writeString(struct.sentry_config);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAD_AUTH_TO_LOCAL_RULES_FIELD_DESC);
      oprot.writeBool(struct.load_auth_to_local_rules);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NON_IMPALA_JAVA_VLOG_FIELD_DESC);
      oprot.writeI32(struct.non_impala_java_vlog);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IMPALA_LOG_LVL_FIELD_DESC);
      oprot.writeI32(struct.impala_log_lvl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INC_STATS_SIZE_LIMIT_BYTES_FIELD_DESC);
      oprot.writeI64(struct.inc_stats_size_limit_bytes);
      oprot.writeFieldEnd();
      if (struct.lineage_event_log_dir != null) {
        oprot.writeFieldBegin(LINEAGE_EVENT_LOG_DIR_FIELD_DESC);
        oprot.writeString(struct.lineage_event_log_dir);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAD_CATALOG_IN_BACKGROUND_FIELD_DESC);
      oprot.writeBool(struct.load_catalog_in_background);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_METADATA_LOADING_THREADS_FIELD_DESC);
      oprot.writeI32(struct.num_metadata_loading_threads);
      oprot.writeFieldEnd();
      if (struct.principal != null) {
        oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
        oprot.writeString(struct.principal);
        oprot.writeFieldEnd();
      }
      if (struct.server_name != null) {
        oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
        oprot.writeString(struct.server_name);
        oprot.writeFieldEnd();
      }
      if (struct.authorization_policy_provider_class != null) {
        oprot.writeFieldBegin(AUTHORIZATION_POLICY_PROVIDER_CLASS_FIELD_DESC);
        oprot.writeString(struct.authorization_policy_provider_class);
        oprot.writeFieldEnd();
      }
      if (struct.kudu_master_hosts != null) {
        oprot.writeFieldBegin(KUDU_MASTER_HOSTS_FIELD_DESC);
        oprot.writeString(struct.kudu_master_hosts);
        oprot.writeFieldEnd();
      }
      if (struct.local_library_path != null) {
        oprot.writeFieldBegin(LOCAL_LIBRARY_PATH_FIELD_DESC);
        oprot.writeString(struct.local_library_path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(READ_SIZE_FIELD_DESC);
      oprot.writeI32(struct.read_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KUDU_OPERATION_TIMEOUT_MS_FIELD_DESC);
      oprot.writeI32(struct.kudu_operation_timeout_ms);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INITIAL_HMS_CNXN_TIMEOUT_S_FIELD_DESC);
      oprot.writeI32(struct.initial_hms_cnxn_timeout_s);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLE_STATS_EXTRAPOLATION_FIELD_DESC);
      oprot.writeBool(struct.enable_stats_extrapolation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SENTRY_CATALOG_POLLING_FREQUENCY_S_FIELD_DESC);
      oprot.writeI64(struct.sentry_catalog_polling_frequency_s);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_HDFS_PARTITIONS_PARALLEL_LOAD_FIELD_DESC);
      oprot.writeI32(struct.max_hdfs_partitions_parallel_load);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NONHDFS_PARTITIONS_PARALLEL_LOAD_FIELD_DESC);
      oprot.writeI32(struct.max_nonhdfs_partitions_parallel_load);
      oprot.writeFieldEnd();
      if (struct.reserved_words_version != null) {
        oprot.writeFieldBegin(RESERVED_WORDS_VERSION_FIELD_DESC);
        oprot.writeI32(struct.reserved_words_version.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_FILTER_ERROR_RATE_FIELD_DESC);
      oprot.writeDouble(struct.max_filter_error_rate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_BUFFER_SIZE_FIELD_DESC);
      oprot.writeI64(struct.min_buffer_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLE_ORC_SCANNER_FIELD_DESC);
      oprot.writeBool(struct.enable_orc_scanner);
      oprot.writeFieldEnd();
      if (struct.authorized_proxy_group_config != null) {
        oprot.writeFieldBegin(AUTHORIZED_PROXY_GROUP_CONFIG_FIELD_DESC);
        oprot.writeString(struct.authorized_proxy_group_config);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USE_LOCAL_CATALOG_FIELD_DESC);
      oprot.writeBool(struct.use_local_catalog);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISABLE_CATALOG_DATA_OPS_DEBUG_ONLY_FIELD_DESC);
      oprot.writeBool(struct.disable_catalog_data_ops_debug_only);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCAL_CATALOG_CACHE_MB_FIELD_DESC);
      oprot.writeI32(struct.local_catalog_cache_mb);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCAL_CATALOG_CACHE_EXPIRATION_S_FIELD_DESC);
      oprot.writeI32(struct.local_catalog_cache_expiration_s);
      oprot.writeFieldEnd();
      if (struct.catalog_topic_mode != null) {
        oprot.writeFieldBegin(CATALOG_TOPIC_MODE_FIELD_DESC);
        oprot.writeString(struct.catalog_topic_mode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INVALIDATE_TABLES_TIMEOUT_S_FIELD_DESC);
      oprot.writeI32(struct.invalidate_tables_timeout_s);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVALIDATE_TABLES_ON_MEMORY_PRESSURE_FIELD_DESC);
      oprot.writeBool(struct.invalidate_tables_on_memory_pressure);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVALIDATE_TABLES_GC_OLD_GEN_FULL_THRESHOLD_FIELD_DESC);
      oprot.writeDouble(struct.invalidate_tables_gc_old_gen_full_threshold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INVALIDATE_TABLES_FRACTION_ON_MEMORY_PRESSURE_FIELD_DESC);
      oprot.writeDouble(struct.invalidate_tables_fraction_on_memory_pressure);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCAL_CATALOG_MAX_FETCH_RETRIES_FIELD_DESC);
      oprot.writeI32(struct.local_catalog_max_fetch_retries);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KUDU_SCANNER_THREAD_ESTIMATED_BYTES_PER_COLUMN_FIELD_DESC);
      oprot.writeI64(struct.kudu_scanner_thread_estimated_bytes_per_column);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KUDU_SCANNER_THREAD_MAX_ESTIMATED_BYTES_FIELD_DESC);
      oprot.writeI64(struct.kudu_scanner_thread_max_estimated_bytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATALOG_MAX_PARALLEL_PARTIAL_FETCH_RPC_FIELD_DESC);
      oprot.writeI32(struct.catalog_max_parallel_partial_fetch_rpc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATALOG_PARTIAL_FETCH_RPC_QUEUE_TIMEOUT_S_FIELD_DESC);
      oprot.writeI64(struct.catalog_partial_fetch_rpc_queue_timeout_s);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXCHG_NODE_BUFFER_SIZE_BYTES_FIELD_DESC);
      oprot.writeI64(struct.exchg_node_buffer_size_bytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KUDU_MUTATION_BUFFER_SIZE_FIELD_DESC);
      oprot.writeI32(struct.kudu_mutation_buffer_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KUDU_ERROR_BUFFER_SIZE_FIELD_DESC);
      oprot.writeI32(struct.kudu_error_buffer_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HMS_EVENT_POLLING_INTERVAL_S_FIELD_DESC);
      oprot.writeI32(struct.hms_event_polling_interval_s);
      oprot.writeFieldEnd();
      if (struct.impala_build_version != null) {
        oprot.writeFieldBegin(IMPALA_BUILD_VERSION_FIELD_DESC);
        oprot.writeString(struct.impala_build_version);
        oprot.writeFieldEnd();
      }
      if (struct.authorization_factory_class != null) {
        oprot.writeFieldBegin(AUTHORIZATION_FACTORY_CLASS_FIELD_DESC);
        oprot.writeString(struct.authorization_factory_class);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UNLOCK_MT_DOP_FIELD_DESC);
      oprot.writeBool(struct.unlock_mt_dop);
      oprot.writeFieldEnd();
      if (struct.ranger_service_type != null) {
        oprot.writeFieldBegin(RANGER_SERVICE_TYPE_FIELD_DESC);
        oprot.writeString(struct.ranger_service_type);
        oprot.writeFieldEnd();
      }
      if (struct.ranger_app_id != null) {
        oprot.writeFieldBegin(RANGER_APP_ID_FIELD_DESC);
        oprot.writeString(struct.ranger_app_id);
        oprot.writeFieldEnd();
      }
      if (struct.authorization_provider != null) {
        oprot.writeFieldBegin(AUTHORIZATION_PROVIDER_FIELD_DESC);
        oprot.writeString(struct.authorization_provider);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECURSIVELY_LIST_PARTITIONS_FIELD_DESC);
      oprot.writeBool(struct.recursively_list_partitions);
      oprot.writeFieldEnd();
      if (struct.query_event_hook_classes != null) {
        oprot.writeFieldBegin(QUERY_EVENT_HOOK_CLASSES_FIELD_DESC);
        oprot.writeString(struct.query_event_hook_classes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUERY_EVENT_HOOK_NTHREADS_FIELD_DESC);
      oprot.writeI32(struct.query_event_hook_nthreads);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_EXECUTOR_FIELD_DESC);
      oprot.writeBool(struct.is_executor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USE_DEDICATED_COORDINATOR_ESTIMATES_FIELD_DESC);
      oprot.writeBool(struct.use_dedicated_coordinator_estimates);
      oprot.writeFieldEnd();
      if (struct.blacklisted_dbs != null) {
        oprot.writeFieldBegin(BLACKLISTED_DBS_FIELD_DESC);
        oprot.writeString(struct.blacklisted_dbs);
        oprot.writeFieldEnd();
      }
      if (struct.blacklisted_tables != null) {
        oprot.writeFieldBegin(BLACKLISTED_TABLES_FIELD_DESC);
        oprot.writeString(struct.blacklisted_tables);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UNLOCK_ZORDER_SORT_FIELD_DESC);
      oprot.writeBool(struct.unlock_zorder_sort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBackendGflagsTupleSchemeFactory implements SchemeFactory {
    public TBackendGflagsTupleScheme getScheme() {
      return new TBackendGflagsTupleScheme();
    }
  }

  private static class TBackendGflagsTupleScheme extends TupleScheme<TBackendGflags> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBackendGflags struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sentry_config);
      oprot.writeBool(struct.load_auth_to_local_rules);
      oprot.writeI32(struct.non_impala_java_vlog);
      oprot.writeI32(struct.impala_log_lvl);
      oprot.writeI64(struct.inc_stats_size_limit_bytes);
      oprot.writeString(struct.lineage_event_log_dir);
      oprot.writeBool(struct.load_catalog_in_background);
      oprot.writeI32(struct.num_metadata_loading_threads);
      oprot.writeString(struct.principal);
      oprot.writeString(struct.server_name);
      oprot.writeString(struct.authorization_policy_provider_class);
      oprot.writeString(struct.kudu_master_hosts);
      oprot.writeString(struct.local_library_path);
      oprot.writeI32(struct.read_size);
      oprot.writeI32(struct.kudu_operation_timeout_ms);
      oprot.writeI32(struct.initial_hms_cnxn_timeout_s);
      oprot.writeBool(struct.enable_stats_extrapolation);
      oprot.writeI64(struct.sentry_catalog_polling_frequency_s);
      oprot.writeI32(struct.max_hdfs_partitions_parallel_load);
      oprot.writeI32(struct.max_nonhdfs_partitions_parallel_load);
      oprot.writeI32(struct.reserved_words_version.getValue());
      oprot.writeDouble(struct.max_filter_error_rate);
      oprot.writeI64(struct.min_buffer_size);
      oprot.writeBool(struct.enable_orc_scanner);
      oprot.writeString(struct.authorized_proxy_group_config);
      oprot.writeBool(struct.use_local_catalog);
      oprot.writeBool(struct.disable_catalog_data_ops_debug_only);
      oprot.writeI32(struct.local_catalog_cache_mb);
      oprot.writeI32(struct.local_catalog_cache_expiration_s);
      oprot.writeString(struct.catalog_topic_mode);
      oprot.writeI32(struct.invalidate_tables_timeout_s);
      oprot.writeBool(struct.invalidate_tables_on_memory_pressure);
      oprot.writeDouble(struct.invalidate_tables_gc_old_gen_full_threshold);
      oprot.writeDouble(struct.invalidate_tables_fraction_on_memory_pressure);
      oprot.writeI32(struct.local_catalog_max_fetch_retries);
      oprot.writeI64(struct.kudu_scanner_thread_estimated_bytes_per_column);
      oprot.writeI64(struct.kudu_scanner_thread_max_estimated_bytes);
      oprot.writeI32(struct.catalog_max_parallel_partial_fetch_rpc);
      oprot.writeI64(struct.catalog_partial_fetch_rpc_queue_timeout_s);
      oprot.writeI64(struct.exchg_node_buffer_size_bytes);
      oprot.writeI32(struct.kudu_mutation_buffer_size);
      oprot.writeI32(struct.kudu_error_buffer_size);
      oprot.writeI32(struct.hms_event_polling_interval_s);
      oprot.writeString(struct.impala_build_version);
      oprot.writeString(struct.authorization_factory_class);
      oprot.writeBool(struct.unlock_mt_dop);
      oprot.writeString(struct.ranger_service_type);
      oprot.writeString(struct.ranger_app_id);
      oprot.writeString(struct.authorization_provider);
      oprot.writeBool(struct.recursively_list_partitions);
      oprot.writeString(struct.query_event_hook_classes);
      oprot.writeI32(struct.query_event_hook_nthreads);
      oprot.writeBool(struct.is_executor);
      oprot.writeBool(struct.use_dedicated_coordinator_estimates);
      oprot.writeString(struct.blacklisted_dbs);
      oprot.writeString(struct.blacklisted_tables);
      oprot.writeBool(struct.unlock_zorder_sort);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBackendGflags struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sentry_config = iprot.readString();
      struct.setSentry_configIsSet(true);
      struct.load_auth_to_local_rules = iprot.readBool();
      struct.setLoad_auth_to_local_rulesIsSet(true);
      struct.non_impala_java_vlog = iprot.readI32();
      struct.setNon_impala_java_vlogIsSet(true);
      struct.impala_log_lvl = iprot.readI32();
      struct.setImpala_log_lvlIsSet(true);
      struct.inc_stats_size_limit_bytes = iprot.readI64();
      struct.setInc_stats_size_limit_bytesIsSet(true);
      struct.lineage_event_log_dir = iprot.readString();
      struct.setLineage_event_log_dirIsSet(true);
      struct.load_catalog_in_background = iprot.readBool();
      struct.setLoad_catalog_in_backgroundIsSet(true);
      struct.num_metadata_loading_threads = iprot.readI32();
      struct.setNum_metadata_loading_threadsIsSet(true);
      struct.principal = iprot.readString();
      struct.setPrincipalIsSet(true);
      struct.server_name = iprot.readString();
      struct.setServer_nameIsSet(true);
      struct.authorization_policy_provider_class = iprot.readString();
      struct.setAuthorization_policy_provider_classIsSet(true);
      struct.kudu_master_hosts = iprot.readString();
      struct.setKudu_master_hostsIsSet(true);
      struct.local_library_path = iprot.readString();
      struct.setLocal_library_pathIsSet(true);
      struct.read_size = iprot.readI32();
      struct.setRead_sizeIsSet(true);
      struct.kudu_operation_timeout_ms = iprot.readI32();
      struct.setKudu_operation_timeout_msIsSet(true);
      struct.initial_hms_cnxn_timeout_s = iprot.readI32();
      struct.setInitial_hms_cnxn_timeout_sIsSet(true);
      struct.enable_stats_extrapolation = iprot.readBool();
      struct.setEnable_stats_extrapolationIsSet(true);
      struct.sentry_catalog_polling_frequency_s = iprot.readI64();
      struct.setSentry_catalog_polling_frequency_sIsSet(true);
      struct.max_hdfs_partitions_parallel_load = iprot.readI32();
      struct.setMax_hdfs_partitions_parallel_loadIsSet(true);
      struct.max_nonhdfs_partitions_parallel_load = iprot.readI32();
      struct.setMax_nonhdfs_partitions_parallel_loadIsSet(true);
      struct.reserved_words_version = org.apache.impala.thrift.TReservedWordsVersion.findByValue(iprot.readI32());
      struct.setReserved_words_versionIsSet(true);
      struct.max_filter_error_rate = iprot.readDouble();
      struct.setMax_filter_error_rateIsSet(true);
      struct.min_buffer_size = iprot.readI64();
      struct.setMin_buffer_sizeIsSet(true);
      struct.enable_orc_scanner = iprot.readBool();
      struct.setEnable_orc_scannerIsSet(true);
      struct.authorized_proxy_group_config = iprot.readString();
      struct.setAuthorized_proxy_group_configIsSet(true);
      struct.use_local_catalog = iprot.readBool();
      struct.setUse_local_catalogIsSet(true);
      struct.disable_catalog_data_ops_debug_only = iprot.readBool();
      struct.setDisable_catalog_data_ops_debug_onlyIsSet(true);
      struct.local_catalog_cache_mb = iprot.readI32();
      struct.setLocal_catalog_cache_mbIsSet(true);
      struct.local_catalog_cache_expiration_s = iprot.readI32();
      struct.setLocal_catalog_cache_expiration_sIsSet(true);
      struct.catalog_topic_mode = iprot.readString();
      struct.setCatalog_topic_modeIsSet(true);
      struct.invalidate_tables_timeout_s = iprot.readI32();
      struct.setInvalidate_tables_timeout_sIsSet(true);
      struct.invalidate_tables_on_memory_pressure = iprot.readBool();
      struct.setInvalidate_tables_on_memory_pressureIsSet(true);
      struct.invalidate_tables_gc_old_gen_full_threshold = iprot.readDouble();
      struct.setInvalidate_tables_gc_old_gen_full_thresholdIsSet(true);
      struct.invalidate_tables_fraction_on_memory_pressure = iprot.readDouble();
      struct.setInvalidate_tables_fraction_on_memory_pressureIsSet(true);
      struct.local_catalog_max_fetch_retries = iprot.readI32();
      struct.setLocal_catalog_max_fetch_retriesIsSet(true);
      struct.kudu_scanner_thread_estimated_bytes_per_column = iprot.readI64();
      struct.setKudu_scanner_thread_estimated_bytes_per_columnIsSet(true);
      struct.kudu_scanner_thread_max_estimated_bytes = iprot.readI64();
      struct.setKudu_scanner_thread_max_estimated_bytesIsSet(true);
      struct.catalog_max_parallel_partial_fetch_rpc = iprot.readI32();
      struct.setCatalog_max_parallel_partial_fetch_rpcIsSet(true);
      struct.catalog_partial_fetch_rpc_queue_timeout_s = iprot.readI64();
      struct.setCatalog_partial_fetch_rpc_queue_timeout_sIsSet(true);
      struct.exchg_node_buffer_size_bytes = iprot.readI64();
      struct.setExchg_node_buffer_size_bytesIsSet(true);
      struct.kudu_mutation_buffer_size = iprot.readI32();
      struct.setKudu_mutation_buffer_sizeIsSet(true);
      struct.kudu_error_buffer_size = iprot.readI32();
      struct.setKudu_error_buffer_sizeIsSet(true);
      struct.hms_event_polling_interval_s = iprot.readI32();
      struct.setHms_event_polling_interval_sIsSet(true);
      struct.impala_build_version = iprot.readString();
      struct.setImpala_build_versionIsSet(true);
      struct.authorization_factory_class = iprot.readString();
      struct.setAuthorization_factory_classIsSet(true);
      struct.unlock_mt_dop = iprot.readBool();
      struct.setUnlock_mt_dopIsSet(true);
      struct.ranger_service_type = iprot.readString();
      struct.setRanger_service_typeIsSet(true);
      struct.ranger_app_id = iprot.readString();
      struct.setRanger_app_idIsSet(true);
      struct.authorization_provider = iprot.readString();
      struct.setAuthorization_providerIsSet(true);
      struct.recursively_list_partitions = iprot.readBool();
      struct.setRecursively_list_partitionsIsSet(true);
      struct.query_event_hook_classes = iprot.readString();
      struct.setQuery_event_hook_classesIsSet(true);
      struct.query_event_hook_nthreads = iprot.readI32();
      struct.setQuery_event_hook_nthreadsIsSet(true);
      struct.is_executor = iprot.readBool();
      struct.setIs_executorIsSet(true);
      struct.use_dedicated_coordinator_estimates = iprot.readBool();
      struct.setUse_dedicated_coordinator_estimatesIsSet(true);
      struct.blacklisted_dbs = iprot.readString();
      struct.setBlacklisted_dbsIsSet(true);
      struct.blacklisted_tables = iprot.readString();
      struct.setBlacklisted_tablesIsSet(true);
      struct.unlock_zorder_sort = iprot.readBool();
      struct.setUnlock_zorder_sortIsSet(true);
    }
  }

}

