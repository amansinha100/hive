// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.hadoop.hive.ql.impalafile;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FbFileDesc extends Table {
  public static FbFileDesc getRootAsFbFileDesc(ByteBuffer _bb) { return getRootAsFbFileDesc(_bb, new FbFileDesc()); }
  public static FbFileDesc getRootAsFbFileDesc(ByteBuffer _bb, FbFileDesc obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FbFileDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String relativePath() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer relativePathAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public long length() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateLength(long length) { int o = __offset(6); if (o != 0) { bb.putLong(o + bb_pos, length); return true; } else { return false; } }
  public byte compression() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean mutateCompression(byte compression) { int o = __offset(8); if (o != 0) { bb.put(o + bb_pos, compression); return true; } else { return false; } }
  public long lastModificationTime() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean mutateLastModificationTime(long last_modification_time) { int o = __offset(10); if (o != 0) { bb.putLong(o + bb_pos, last_modification_time); return true; } else { return false; } }
  public FbFileBlock fileBlocks(int j) { return fileBlocks(new FbFileBlock(), j); }
  public FbFileBlock fileBlocks(FbFileBlock obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int fileBlocksLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public boolean isEc() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean mutateIsEc(boolean is_ec) { int o = __offset(14); if (o != 0) { bb.put(o + bb_pos, (byte)(is_ec ? 1 : 0)); return true; } else { return false; } }

  public static int createFbFileDesc(FlatBufferBuilder builder,
      int relative_pathOffset,
      long length,
      byte compression,
      long last_modification_time,
      int file_blocksOffset,
      boolean is_ec) {
    builder.startObject(6);
    FbFileDesc.addLastModificationTime(builder, last_modification_time);
    FbFileDesc.addLength(builder, length);
    FbFileDesc.addFileBlocks(builder, file_blocksOffset);
    FbFileDesc.addRelativePath(builder, relative_pathOffset);
    FbFileDesc.addIsEc(builder, is_ec);
    FbFileDesc.addCompression(builder, compression);
    return FbFileDesc.endFbFileDesc(builder);
  }

  public static void startFbFileDesc(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addRelativePath(FlatBufferBuilder builder, int relativePathOffset) { builder.addOffset(0, relativePathOffset, 0); }
  public static void addLength(FlatBufferBuilder builder, long length) { builder.addLong(1, length, 0L); }
  public static void addCompression(FlatBufferBuilder builder, byte compression) { builder.addByte(2, compression, 0); }
  public static void addLastModificationTime(FlatBufferBuilder builder, long lastModificationTime) { builder.addLong(3, lastModificationTime, 0L); }
  public static void addFileBlocks(FlatBufferBuilder builder, int fileBlocksOffset) { builder.addOffset(4, fileBlocksOffset, 0); }
  public static int createFileBlocksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFileBlocksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIsEc(FlatBufferBuilder builder, boolean isEc) { builder.addBoolean(5, isEc, false); }
  public static int endFbFileDesc(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

