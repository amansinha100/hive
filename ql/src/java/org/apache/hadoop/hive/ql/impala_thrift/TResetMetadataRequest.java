/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TResetMetadataRequest implements org.apache.thrift.TBase<TResetMetadataRequest, TResetMetadataRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TResetMetadataRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResetMetadataRequest");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IS_REFRESH_FIELD_DESC = new org.apache.thrift.protocol.TField("is_refresh", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PARTITION_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_spec", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SYNC_DDL_FIELD_DESC = new org.apache.thrift.protocol.TField("sync_ddl", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField AUTHORIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResetMetadataRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResetMetadataRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public CatalogServiceVersion protocol_version; // required
  public TCatalogServiceRequestHeader header; // optional
  public boolean is_refresh; // required
  public org.apache.impala.thrift.TTableName table_name; // optional
  public List<org.apache.impala.thrift.TPartitionKeyValue> partition_spec; // optional
  public String db_name; // optional
  public boolean sync_ddl; // required
  public boolean authorization; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see CatalogServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    HEADER((short)2, "header"),
    IS_REFRESH((short)3, "is_refresh"),
    TABLE_NAME((short)4, "table_name"),
    PARTITION_SPEC((short)5, "partition_spec"),
    DB_NAME((short)6, "db_name"),
    SYNC_DDL((short)7, "sync_ddl"),
    AUTHORIZATION((short)8, "authorization");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // HEADER
          return HEADER;
        case 3: // IS_REFRESH
          return IS_REFRESH;
        case 4: // TABLE_NAME
          return TABLE_NAME;
        case 5: // PARTITION_SPEC
          return PARTITION_SPEC;
        case 6: // DB_NAME
          return DB_NAME;
        case 7: // SYNC_DDL
          return SYNC_DDL;
        case 8: // AUTHORIZATION
          return AUTHORIZATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_REFRESH_ISSET_ID = 0;
  private static final int __SYNC_DDL_ISSET_ID = 1;
  private static final int __AUTHORIZATION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HEADER,_Fields.TABLE_NAME,_Fields.PARTITION_SPEC,_Fields.DB_NAME,_Fields.AUTHORIZATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CatalogServiceVersion.class)));
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCatalogServiceRequestHeader.class)));
    tmpMap.put(_Fields.IS_REFRESH, new org.apache.thrift.meta_data.FieldMetaData("is_refresh", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.PARTITION_SPEC, new org.apache.thrift.meta_data.FieldMetaData("partition_spec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TPartitionKeyValue.class))));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYNC_DDL, new org.apache.thrift.meta_data.FieldMetaData("sync_ddl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AUTHORIZATION, new org.apache.thrift.meta_data.FieldMetaData("authorization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResetMetadataRequest.class, metaDataMap);
  }

  public TResetMetadataRequest() {
    this.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.V1;

  }

  public TResetMetadataRequest(
    CatalogServiceVersion protocol_version,
    boolean is_refresh,
    boolean sync_ddl)
  {
    this();
    this.protocol_version = protocol_version;
    this.is_refresh = is_refresh;
    setIs_refreshIsSet(true);
    this.sync_ddl = sync_ddl;
    setSync_ddlIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResetMetadataRequest(TResetMetadataRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetHeader()) {
      this.header = new TCatalogServiceRequestHeader(other.header);
    }
    this.is_refresh = other.is_refresh;
    if (other.isSetTable_name()) {
      this.table_name = new org.apache.impala.thrift.TTableName(other.table_name);
    }
    if (other.isSetPartition_spec()) {
      List<org.apache.impala.thrift.TPartitionKeyValue> __this__partition_spec = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>(other.partition_spec.size());
      for (org.apache.impala.thrift.TPartitionKeyValue other_element : other.partition_spec) {
        __this__partition_spec.add(new org.apache.impala.thrift.TPartitionKeyValue(other_element));
      }
      this.partition_spec = __this__partition_spec;
    }
    if (other.isSetDb_name()) {
      this.db_name = other.db_name;
    }
    this.sync_ddl = other.sync_ddl;
    this.authorization = other.authorization;
  }

  public TResetMetadataRequest deepCopy() {
    return new TResetMetadataRequest(this);
  }

  @Override
  public void clear() {
    this.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.V1;

    this.header = null;
    setIs_refreshIsSet(false);
    this.is_refresh = false;
    this.table_name = null;
    this.partition_spec = null;
    this.db_name = null;
    setSync_ddlIsSet(false);
    this.sync_ddl = false;
    setAuthorizationIsSet(false);
    this.authorization = false;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public CatalogServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public TResetMetadataRequest setProtocol_version(CatalogServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public TCatalogServiceRequestHeader getHeader() {
    return this.header;
  }

  public TResetMetadataRequest setHeader(TCatalogServiceRequestHeader header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public boolean isIs_refresh() {
    return this.is_refresh;
  }

  public TResetMetadataRequest setIs_refresh(boolean is_refresh) {
    this.is_refresh = is_refresh;
    setIs_refreshIsSet(true);
    return this;
  }

  public void unsetIs_refresh() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_REFRESH_ISSET_ID);
  }

  /** Returns true if field is_refresh is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_refresh() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_REFRESH_ISSET_ID);
  }

  public void setIs_refreshIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_REFRESH_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TTableName getTable_name() {
    return this.table_name;
  }

  public TResetMetadataRequest setTable_name(org.apache.impala.thrift.TTableName table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public int getPartition_specSize() {
    return (this.partition_spec == null) ? 0 : this.partition_spec.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TPartitionKeyValue> getPartition_specIterator() {
    return (this.partition_spec == null) ? null : this.partition_spec.iterator();
  }

  public void addToPartition_spec(org.apache.impala.thrift.TPartitionKeyValue elem) {
    if (this.partition_spec == null) {
      this.partition_spec = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>();
    }
    this.partition_spec.add(elem);
  }

  public List<org.apache.impala.thrift.TPartitionKeyValue> getPartition_spec() {
    return this.partition_spec;
  }

  public TResetMetadataRequest setPartition_spec(List<org.apache.impala.thrift.TPartitionKeyValue> partition_spec) {
    this.partition_spec = partition_spec;
    return this;
  }

  public void unsetPartition_spec() {
    this.partition_spec = null;
  }

  /** Returns true if field partition_spec is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_spec() {
    return this.partition_spec != null;
  }

  public void setPartition_specIsSet(boolean value) {
    if (!value) {
      this.partition_spec = null;
    }
  }

  public String getDb_name() {
    return this.db_name;
  }

  public TResetMetadataRequest setDb_name(String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDb_name() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDb_name() {
    return this.db_name != null;
  }

  public void setDb_nameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public boolean isSync_ddl() {
    return this.sync_ddl;
  }

  public TResetMetadataRequest setSync_ddl(boolean sync_ddl) {
    this.sync_ddl = sync_ddl;
    setSync_ddlIsSet(true);
    return this;
  }

  public void unsetSync_ddl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYNC_DDL_ISSET_ID);
  }

  /** Returns true if field sync_ddl is set (has been assigned a value) and false otherwise */
  public boolean isSetSync_ddl() {
    return EncodingUtils.testBit(__isset_bitfield, __SYNC_DDL_ISSET_ID);
  }

  public void setSync_ddlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYNC_DDL_ISSET_ID, value);
  }

  public boolean isAuthorization() {
    return this.authorization;
  }

  public TResetMetadataRequest setAuthorization(boolean authorization) {
    this.authorization = authorization;
    setAuthorizationIsSet(true);
    return this;
  }

  public void unsetAuthorization() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTHORIZATION_ISSET_ID);
  }

  /** Returns true if field authorization is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorization() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTHORIZATION_ISSET_ID);
  }

  public void setAuthorizationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTHORIZATION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((CatalogServiceVersion)value);
      }
      break;

    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((TCatalogServiceRequestHeader)value);
      }
      break;

    case IS_REFRESH:
      if (value == null) {
        unsetIs_refresh();
      } else {
        setIs_refresh((Boolean)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((org.apache.impala.thrift.TTableName)value);
      }
      break;

    case PARTITION_SPEC:
      if (value == null) {
        unsetPartition_spec();
      } else {
        setPartition_spec((List<org.apache.impala.thrift.TPartitionKeyValue>)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDb_name();
      } else {
        setDb_name((String)value);
      }
      break;

    case SYNC_DDL:
      if (value == null) {
        unsetSync_ddl();
      } else {
        setSync_ddl((Boolean)value);
      }
      break;

    case AUTHORIZATION:
      if (value == null) {
        unsetAuthorization();
      } else {
        setAuthorization((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case HEADER:
      return getHeader();

    case IS_REFRESH:
      return isIs_refresh();

    case TABLE_NAME:
      return getTable_name();

    case PARTITION_SPEC:
      return getPartition_spec();

    case DB_NAME:
      return getDb_name();

    case SYNC_DDL:
      return isSync_ddl();

    case AUTHORIZATION:
      return isAuthorization();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case HEADER:
      return isSetHeader();
    case IS_REFRESH:
      return isSetIs_refresh();
    case TABLE_NAME:
      return isSetTable_name();
    case PARTITION_SPEC:
      return isSetPartition_spec();
    case DB_NAME:
      return isSetDb_name();
    case SYNC_DDL:
      return isSetSync_ddl();
    case AUTHORIZATION:
      return isSetAuthorization();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResetMetadataRequest)
      return this.equals((TResetMetadataRequest)that);
    return false;
  }

  public boolean equals(TResetMetadataRequest that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_is_refresh = true;
    boolean that_present_is_refresh = true;
    if (this_present_is_refresh || that_present_is_refresh) {
      if (!(this_present_is_refresh && that_present_is_refresh))
        return false;
      if (this.is_refresh != that.is_refresh)
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_partition_spec = true && this.isSetPartition_spec();
    boolean that_present_partition_spec = true && that.isSetPartition_spec();
    if (this_present_partition_spec || that_present_partition_spec) {
      if (!(this_present_partition_spec && that_present_partition_spec))
        return false;
      if (!this.partition_spec.equals(that.partition_spec))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDb_name();
    boolean that_present_db_name = true && that.isSetDb_name();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_sync_ddl = true;
    boolean that_present_sync_ddl = true;
    if (this_present_sync_ddl || that_present_sync_ddl) {
      if (!(this_present_sync_ddl && that_present_sync_ddl))
        return false;
      if (this.sync_ddl != that.sync_ddl)
        return false;
    }

    boolean this_present_authorization = true && this.isSetAuthorization();
    boolean that_present_authorization = true && that.isSetAuthorization();
    if (this_present_authorization || that_present_authorization) {
      if (!(this_present_authorization && that_present_authorization))
        return false;
      if (this.authorization != that.authorization)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocol_version = true && (isSetProtocol_version());
    list.add(present_protocol_version);
    if (present_protocol_version)
      list.add(protocol_version.getValue());

    boolean present_header = true && (isSetHeader());
    list.add(present_header);
    if (present_header)
      list.add(header);

    boolean present_is_refresh = true;
    list.add(present_is_refresh);
    if (present_is_refresh)
      list.add(is_refresh);

    boolean present_table_name = true && (isSetTable_name());
    list.add(present_table_name);
    if (present_table_name)
      list.add(table_name);

    boolean present_partition_spec = true && (isSetPartition_spec());
    list.add(present_partition_spec);
    if (present_partition_spec)
      list.add(partition_spec);

    boolean present_db_name = true && (isSetDb_name());
    list.add(present_db_name);
    if (present_db_name)
      list.add(db_name);

    boolean present_sync_ddl = true;
    list.add(present_sync_ddl);
    if (present_sync_ddl)
      list.add(sync_ddl);

    boolean present_authorization = true && (isSetAuthorization());
    list.add(present_authorization);
    if (present_authorization)
      list.add(authorization);

    return list.hashCode();
  }

  @Override
  public int compareTo(TResetMetadataRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_refresh()).compareTo(other.isSetIs_refresh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_refresh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_refresh, other.is_refresh);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_spec()).compareTo(other.isSetPartition_spec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_spec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_spec, other.partition_spec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb_name()).compareTo(other.isSetDb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSync_ddl()).compareTo(other.isSetSync_ddl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSync_ddl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync_ddl, other.sync_ddl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorization()).compareTo(other.isSetAuthorization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization, other.authorization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResetMetadataRequest(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetHeader()) {
      if (!first) sb.append(", ");
      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("is_refresh:");
    sb.append(this.is_refresh);
    first = false;
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetPartition_spec()) {
      if (!first) sb.append(", ");
      sb.append("partition_spec:");
      if (this.partition_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_spec);
      }
      first = false;
    }
    if (isSetDb_name()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sync_ddl:");
    sb.append(this.sync_ddl);
    first = false;
    if (isSetAuthorization()) {
      if (!first) sb.append(", ");
      sb.append("authorization:");
      sb.append(this.authorization);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_refresh' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sync_ddl' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (header != null) {
      header.validate();
    }
    if (table_name != null) {
      table_name.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResetMetadataRequestStandardSchemeFactory implements SchemeFactory {
    public TResetMetadataRequestStandardScheme getScheme() {
      return new TResetMetadataRequestStandardScheme();
    }
  }

  private static class TResetMetadataRequestStandardScheme extends StandardScheme<TResetMetadataRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResetMetadataRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new TCatalogServiceRequestHeader();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_REFRESH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_refresh = iprot.readBool();
              struct.setIs_refreshIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new org.apache.impala.thrift.TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.partition_spec = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>(_list24.size);
                org.apache.impala.thrift.TPartitionKeyValue _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new org.apache.impala.thrift.TPartitionKeyValue();
                  _elem25.read(iprot);
                  struct.partition_spec.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setPartition_specIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SYNC_DDL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sync_ddl = iprot.readBool();
              struct.setSync_ddlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AUTHORIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.authorization = iprot.readBool();
              struct.setAuthorizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIs_refresh()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_refresh' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSync_ddl()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sync_ddl' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResetMetadataRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.header != null) {
        if (struct.isSetHeader()) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_REFRESH_FIELD_DESC);
      oprot.writeBool(struct.is_refresh);
      oprot.writeFieldEnd();
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          struct.table_name.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_spec != null) {
        if (struct.isSetPartition_spec()) {
          oprot.writeFieldBegin(PARTITION_SPEC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partition_spec.size()));
            for (org.apache.impala.thrift.TPartitionKeyValue _iter27 : struct.partition_spec)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDb_name()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SYNC_DDL_FIELD_DESC);
      oprot.writeBool(struct.sync_ddl);
      oprot.writeFieldEnd();
      if (struct.isSetAuthorization()) {
        oprot.writeFieldBegin(AUTHORIZATION_FIELD_DESC);
        oprot.writeBool(struct.authorization);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResetMetadataRequestTupleSchemeFactory implements SchemeFactory {
    public TResetMetadataRequestTupleScheme getScheme() {
      return new TResetMetadataRequestTupleScheme();
    }
  }

  private static class TResetMetadataRequestTupleScheme extends TupleScheme<TResetMetadataRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResetMetadataRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      oprot.writeBool(struct.is_refresh);
      oprot.writeBool(struct.sync_ddl);
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      if (struct.isSetTable_name()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_spec()) {
        optionals.set(2);
      }
      if (struct.isSetDb_name()) {
        optionals.set(3);
      }
      if (struct.isSetAuthorization()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
      if (struct.isSetTable_name()) {
        struct.table_name.write(oprot);
      }
      if (struct.isSetPartition_spec()) {
        {
          oprot.writeI32(struct.partition_spec.size());
          for (org.apache.impala.thrift.TPartitionKeyValue _iter28 : struct.partition_spec)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetDb_name()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetAuthorization()) {
        oprot.writeBool(struct.authorization);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResetMetadataRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      struct.is_refresh = iprot.readBool();
      struct.setIs_refreshIsSet(true);
      struct.sync_ddl = iprot.readBool();
      struct.setSync_ddlIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.header = new TCatalogServiceRequestHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_name = new org.apache.impala.thrift.TTableName();
        struct.table_name.read(iprot);
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partition_spec = new ArrayList<org.apache.impala.thrift.TPartitionKeyValue>(_list29.size);
          org.apache.impala.thrift.TPartitionKeyValue _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new org.apache.impala.thrift.TPartitionKeyValue();
            _elem30.read(iprot);
            struct.partition_spec.add(_elem30);
          }
        }
        struct.setPartition_specIsSet(true);
      }
      if (incoming.get(3)) {
        struct.db_name = iprot.readString();
        struct.setDb_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.authorization = iprot.readBool();
        struct.setAuthorizationIsSet(true);
      }
    }
  }

}

