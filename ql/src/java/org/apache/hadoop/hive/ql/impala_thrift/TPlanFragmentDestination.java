/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TPlanFragmentDestination implements org.apache.thrift.TBase<TPlanFragmentDestination, TPlanFragmentDestination._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragmentDestination> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragmentDestination");

  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField THRIFT_BACKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("thrift_backend", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField KRPC_BACKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("krpc_backend", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlanFragmentDestinationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlanFragmentDestinationTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TUniqueId fragment_instance_id; // required
  private org.apache.impala.thrift.TNetworkAddress thrift_backend; // required
  private org.apache.impala.thrift.TNetworkAddress krpc_backend; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAGMENT_INSTANCE_ID((short)1, "fragment_instance_id"),
    THRIFT_BACKEND((short)2, "thrift_backend"),
    KRPC_BACKEND((short)3, "krpc_backend");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 2: // THRIFT_BACKEND
          return THRIFT_BACKEND;
        case 3: // KRPC_BACKEND
          return KRPC_BACKEND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.KRPC_BACKEND};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.THRIFT_BACKEND, new org.apache.thrift.meta_data.FieldMetaData("thrift_backend", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.KRPC_BACKEND, new org.apache.thrift.meta_data.FieldMetaData("krpc_backend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragmentDestination.class, metaDataMap);
  }

  public TPlanFragmentDestination() {
  }

  public TPlanFragmentDestination(
    org.apache.impala.thrift.TUniqueId fragment_instance_id,
    org.apache.impala.thrift.TNetworkAddress thrift_backend)
  {
    this();
    this.fragment_instance_id = fragment_instance_id;
    this.thrift_backend = thrift_backend;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragmentDestination(TPlanFragmentDestination other) {
    if (other.isSetFragment_instance_id()) {
      this.fragment_instance_id = new org.apache.impala.thrift.TUniqueId(other.fragment_instance_id);
    }
    if (other.isSetThrift_backend()) {
      this.thrift_backend = new org.apache.impala.thrift.TNetworkAddress(other.thrift_backend);
    }
    if (other.isSetKrpc_backend()) {
      this.krpc_backend = new org.apache.impala.thrift.TNetworkAddress(other.krpc_backend);
    }
  }

  public TPlanFragmentDestination deepCopy() {
    return new TPlanFragmentDestination(this);
  }

  @Override
  public void clear() {
    this.fragment_instance_id = null;
    this.thrift_backend = null;
    this.krpc_backend = null;
  }

  public org.apache.impala.thrift.TUniqueId getFragment_instance_id() {
    return this.fragment_instance_id;
  }

  public void setFragment_instance_id(org.apache.impala.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
  }

  public void unsetFragment_instance_id() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment_instance_id() {
    return this.fragment_instance_id != null;
  }

  public void setFragment_instance_idIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  public org.apache.impala.thrift.TNetworkAddress getThrift_backend() {
    return this.thrift_backend;
  }

  public void setThrift_backend(org.apache.impala.thrift.TNetworkAddress thrift_backend) {
    this.thrift_backend = thrift_backend;
  }

  public void unsetThrift_backend() {
    this.thrift_backend = null;
  }

  /** Returns true if field thrift_backend is set (has been assigned a value) and false otherwise */
  public boolean isSetThrift_backend() {
    return this.thrift_backend != null;
  }

  public void setThrift_backendIsSet(boolean value) {
    if (!value) {
      this.thrift_backend = null;
    }
  }

  public org.apache.impala.thrift.TNetworkAddress getKrpc_backend() {
    return this.krpc_backend;
  }

  public void setKrpc_backend(org.apache.impala.thrift.TNetworkAddress krpc_backend) {
    this.krpc_backend = krpc_backend;
  }

  public void unsetKrpc_backend() {
    this.krpc_backend = null;
  }

  /** Returns true if field krpc_backend is set (has been assigned a value) and false otherwise */
  public boolean isSetKrpc_backend() {
    return this.krpc_backend != null;
  }

  public void setKrpc_backendIsSet(boolean value) {
    if (!value) {
      this.krpc_backend = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragment_instance_id();
      } else {
        setFragment_instance_id((org.apache.impala.thrift.TUniqueId)value);
      }
      break;

    case THRIFT_BACKEND:
      if (value == null) {
        unsetThrift_backend();
      } else {
        setThrift_backend((org.apache.impala.thrift.TNetworkAddress)value);
      }
      break;

    case KRPC_BACKEND:
      if (value == null) {
        unsetKrpc_backend();
      } else {
        setKrpc_backend((org.apache.impala.thrift.TNetworkAddress)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAGMENT_INSTANCE_ID:
      return getFragment_instance_id();

    case THRIFT_BACKEND:
      return getThrift_backend();

    case KRPC_BACKEND:
      return getKrpc_backend();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FRAGMENT_INSTANCE_ID:
      return isSetFragment_instance_id();
    case THRIFT_BACKEND:
      return isSetThrift_backend();
    case KRPC_BACKEND:
      return isSetKrpc_backend();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlanFragmentDestination)
      return this.equals((TPlanFragmentDestination)that);
    return false;
  }

  public boolean equals(TPlanFragmentDestination that) {
    if (that == null)
      return false;

    boolean this_present_fragment_instance_id = true && this.isSetFragment_instance_id();
    boolean that_present_fragment_instance_id = true && that.isSetFragment_instance_id();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_thrift_backend = true && this.isSetThrift_backend();
    boolean that_present_thrift_backend = true && that.isSetThrift_backend();
    if (this_present_thrift_backend || that_present_thrift_backend) {
      if (!(this_present_thrift_backend && that_present_thrift_backend))
        return false;
      if (!this.thrift_backend.equals(that.thrift_backend))
        return false;
    }

    boolean this_present_krpc_backend = true && this.isSetKrpc_backend();
    boolean that_present_krpc_backend = true && that.isSetKrpc_backend();
    if (this_present_krpc_backend || that_present_krpc_backend) {
      if (!(this_present_krpc_backend && that_present_krpc_backend))
        return false;
      if (!this.krpc_backend.equals(that.krpc_backend))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_fragment_instance_id = true && (isSetFragment_instance_id());
    list.add(present_fragment_instance_id);
    if (present_fragment_instance_id)
      list.add(fragment_instance_id);

    boolean present_thrift_backend = true && (isSetThrift_backend());
    list.add(present_thrift_backend);
    if (present_thrift_backend)
      list.add(thrift_backend);

    boolean present_krpc_backend = true && (isSetKrpc_backend());
    list.add(present_krpc_backend);
    if (present_krpc_backend)
      list.add(krpc_backend);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlanFragmentDestination other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFragment_instance_id()).compareTo(other.isSetFragment_instance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment_instance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, other.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThrift_backend()).compareTo(other.isSetThrift_backend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThrift_backend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thrift_backend, other.thrift_backend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKrpc_backend()).compareTo(other.isSetKrpc_backend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKrpc_backend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krpc_backend, other.krpc_backend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlanFragmentDestination(");
    boolean first = true;

    sb.append("fragment_instance_id:");
    if (this.fragment_instance_id == null) {
      sb.append("null");
    } else {
      sb.append(this.fragment_instance_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thrift_backend:");
    if (this.thrift_backend == null) {
      sb.append("null");
    } else {
      sb.append(this.thrift_backend);
    }
    first = false;
    if (isSetKrpc_backend()) {
      if (!first) sb.append(", ");
      sb.append("krpc_backend:");
      if (this.krpc_backend == null) {
        sb.append("null");
      } else {
        sb.append(this.krpc_backend);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetFragment_instance_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment_instance_id' is unset! Struct:" + toString());
    }

    if (!isSetThrift_backend()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'thrift_backend' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
    if (thrift_backend != null) {
      thrift_backend.validate();
    }
    if (krpc_backend != null) {
      krpc_backend.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentDestinationStandardSchemeFactory implements SchemeFactory {
    public TPlanFragmentDestinationStandardScheme getScheme() {
      return new TPlanFragmentDestinationStandardScheme();
    }
  }

  private static class TPlanFragmentDestinationStandardScheme extends StandardScheme<TPlanFragmentDestination> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragmentDestination struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new org.apache.impala.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragment_instance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // THRIFT_BACKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.thrift_backend = new org.apache.impala.thrift.TNetworkAddress();
              struct.thrift_backend.read(iprot);
              struct.setThrift_backendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KRPC_BACKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.krpc_backend = new org.apache.impala.thrift.TNetworkAddress();
              struct.krpc_backend.read(iprot);
              struct.setKrpc_backendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragmentDestination struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fragment_instance_id != null) {
        oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
        struct.fragment_instance_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.thrift_backend != null) {
        oprot.writeFieldBegin(THRIFT_BACKEND_FIELD_DESC);
        struct.thrift_backend.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.krpc_backend != null) {
        if (struct.isSetKrpc_backend()) {
          oprot.writeFieldBegin(KRPC_BACKEND_FIELD_DESC);
          struct.krpc_backend.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentDestinationTupleSchemeFactory implements SchemeFactory {
    public TPlanFragmentDestinationTupleScheme getScheme() {
      return new TPlanFragmentDestinationTupleScheme();
    }
  }

  private static class TPlanFragmentDestinationTupleScheme extends TupleScheme<TPlanFragmentDestination> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentDestination struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.fragment_instance_id.write(oprot);
      struct.thrift_backend.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetKrpc_backend()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetKrpc_backend()) {
        struct.krpc_backend.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentDestination struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fragment_instance_id = new org.apache.impala.thrift.TUniqueId();
      struct.fragment_instance_id.read(iprot);
      struct.setFragment_instance_idIsSet(true);
      struct.thrift_backend = new org.apache.impala.thrift.TNetworkAddress();
      struct.thrift_backend.read(iprot);
      struct.setThrift_backendIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.krpc_backend = new org.apache.impala.thrift.TNetworkAddress();
        struct.krpc_backend.read(iprot);
        struct.setKrpc_backendIsSet(true);
      }
    }
  }

}

