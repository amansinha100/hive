/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TMinMaxFilter implements org.apache.thrift.TBase<TMinMaxFilter, TMinMaxFilter._Fields>, java.io.Serializable, Cloneable, Comparable<TMinMaxFilter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMinMaxFilter");

  private static final org.apache.thrift.protocol.TField ALWAYS_TRUE_FIELD_DESC = new org.apache.thrift.protocol.TField("always_true", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ALWAYS_FALSE_FIELD_DESC = new org.apache.thrift.protocol.TField("always_false", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMinMaxFilterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMinMaxFilterTupleSchemeFactory());
  }

  public boolean always_true; // required
  public boolean always_false; // required
  public org.apache.impala.thrift.TColumnValue min; // optional
  public org.apache.impala.thrift.TColumnValue max; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALWAYS_TRUE((short)1, "always_true"),
    ALWAYS_FALSE((short)2, "always_false"),
    MIN((short)3, "min"),
    MAX((short)4, "max");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALWAYS_TRUE
          return ALWAYS_TRUE;
        case 2: // ALWAYS_FALSE
          return ALWAYS_FALSE;
        case 3: // MIN
          return MIN;
        case 4: // MAX
          return MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ALWAYS_TRUE_ISSET_ID = 0;
  private static final int __ALWAYS_FALSE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MIN,_Fields.MAX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALWAYS_TRUE, new org.apache.thrift.meta_data.FieldMetaData("always_true", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ALWAYS_FALSE, new org.apache.thrift.meta_data.FieldMetaData("always_false", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumnValue.class)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumnValue.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMinMaxFilter.class, metaDataMap);
  }

  public TMinMaxFilter() {
  }

  public TMinMaxFilter(
    boolean always_true,
    boolean always_false)
  {
    this();
    this.always_true = always_true;
    setAlways_trueIsSet(true);
    this.always_false = always_false;
    setAlways_falseIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMinMaxFilter(TMinMaxFilter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.always_true = other.always_true;
    this.always_false = other.always_false;
    if (other.isSetMin()) {
      this.min = new org.apache.impala.thrift.TColumnValue(other.min);
    }
    if (other.isSetMax()) {
      this.max = new org.apache.impala.thrift.TColumnValue(other.max);
    }
  }

  public TMinMaxFilter deepCopy() {
    return new TMinMaxFilter(this);
  }

  @Override
  public void clear() {
    setAlways_trueIsSet(false);
    this.always_true = false;
    setAlways_falseIsSet(false);
    this.always_false = false;
    this.min = null;
    this.max = null;
  }

  public boolean isAlways_true() {
    return this.always_true;
  }

  public TMinMaxFilter setAlways_true(boolean always_true) {
    this.always_true = always_true;
    setAlways_trueIsSet(true);
    return this;
  }

  public void unsetAlways_true() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALWAYS_TRUE_ISSET_ID);
  }

  /** Returns true if field always_true is set (has been assigned a value) and false otherwise */
  public boolean isSetAlways_true() {
    return EncodingUtils.testBit(__isset_bitfield, __ALWAYS_TRUE_ISSET_ID);
  }

  public void setAlways_trueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALWAYS_TRUE_ISSET_ID, value);
  }

  public boolean isAlways_false() {
    return this.always_false;
  }

  public TMinMaxFilter setAlways_false(boolean always_false) {
    this.always_false = always_false;
    setAlways_falseIsSet(true);
    return this;
  }

  public void unsetAlways_false() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALWAYS_FALSE_ISSET_ID);
  }

  /** Returns true if field always_false is set (has been assigned a value) and false otherwise */
  public boolean isSetAlways_false() {
    return EncodingUtils.testBit(__isset_bitfield, __ALWAYS_FALSE_ISSET_ID);
  }

  public void setAlways_falseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALWAYS_FALSE_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TColumnValue getMin() {
    return this.min;
  }

  public TMinMaxFilter setMin(org.apache.impala.thrift.TColumnValue min) {
    this.min = min;
    return this;
  }

  public void unsetMin() {
    this.min = null;
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return this.min != null;
  }

  public void setMinIsSet(boolean value) {
    if (!value) {
      this.min = null;
    }
  }

  public org.apache.impala.thrift.TColumnValue getMax() {
    return this.max;
  }

  public TMinMaxFilter setMax(org.apache.impala.thrift.TColumnValue max) {
    this.max = max;
    return this;
  }

  public void unsetMax() {
    this.max = null;
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return this.max != null;
  }

  public void setMaxIsSet(boolean value) {
    if (!value) {
      this.max = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALWAYS_TRUE:
      if (value == null) {
        unsetAlways_true();
      } else {
        setAlways_true((Boolean)value);
      }
      break;

    case ALWAYS_FALSE:
      if (value == null) {
        unsetAlways_false();
      } else {
        setAlways_false((Boolean)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((org.apache.impala.thrift.TColumnValue)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((org.apache.impala.thrift.TColumnValue)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALWAYS_TRUE:
      return isAlways_true();

    case ALWAYS_FALSE:
      return isAlways_false();

    case MIN:
      return getMin();

    case MAX:
      return getMax();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALWAYS_TRUE:
      return isSetAlways_true();
    case ALWAYS_FALSE:
      return isSetAlways_false();
    case MIN:
      return isSetMin();
    case MAX:
      return isSetMax();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMinMaxFilter)
      return this.equals((TMinMaxFilter)that);
    return false;
  }

  public boolean equals(TMinMaxFilter that) {
    if (that == null)
      return false;

    boolean this_present_always_true = true;
    boolean that_present_always_true = true;
    if (this_present_always_true || that_present_always_true) {
      if (!(this_present_always_true && that_present_always_true))
        return false;
      if (this.always_true != that.always_true)
        return false;
    }

    boolean this_present_always_false = true;
    boolean that_present_always_false = true;
    if (this_present_always_false || that_present_always_false) {
      if (!(this_present_always_false && that_present_always_false))
        return false;
      if (this.always_false != that.always_false)
        return false;
    }

    boolean this_present_min = true && this.isSetMin();
    boolean that_present_min = true && that.isSetMin();
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (!this.min.equals(that.min))
        return false;
    }

    boolean this_present_max = true && this.isSetMax();
    boolean that_present_max = true && that.isSetMax();
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (!this.max.equals(that.max))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_always_true = true;
    list.add(present_always_true);
    if (present_always_true)
      list.add(always_true);

    boolean present_always_false = true;
    list.add(present_always_false);
    if (present_always_false)
      list.add(always_false);

    boolean present_min = true && (isSetMin());
    list.add(present_min);
    if (present_min)
      list.add(min);

    boolean present_max = true && (isSetMax());
    list.add(present_max);
    if (present_max)
      list.add(max);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMinMaxFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAlways_true()).compareTo(other.isSetAlways_true());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlways_true()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.always_true, other.always_true);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlways_false()).compareTo(other.isSetAlways_false());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlways_false()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.always_false, other.always_false);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(other.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, other.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMinMaxFilter(");
    boolean first = true;

    sb.append("always_true:");
    sb.append(this.always_true);
    first = false;
    if (!first) sb.append(", ");
    sb.append("always_false:");
    sb.append(this.always_false);
    first = false;
    if (isSetMin()) {
      if (!first) sb.append(", ");
      sb.append("min:");
      if (this.min == null) {
        sb.append("null");
      } else {
        sb.append(this.min);
      }
      first = false;
    }
    if (isSetMax()) {
      if (!first) sb.append(", ");
      sb.append("max:");
      if (this.max == null) {
        sb.append("null");
      } else {
        sb.append(this.max);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'always_true' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'always_false' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (min != null) {
      min.validate();
    }
    if (max != null) {
      max.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMinMaxFilterStandardSchemeFactory implements SchemeFactory {
    public TMinMaxFilterStandardScheme getScheme() {
      return new TMinMaxFilterStandardScheme();
    }
  }

  private static class TMinMaxFilterStandardScheme extends StandardScheme<TMinMaxFilter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMinMaxFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALWAYS_TRUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.always_true = iprot.readBool();
              struct.setAlways_trueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALWAYS_FALSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.always_false = iprot.readBool();
              struct.setAlways_falseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.min = new org.apache.impala.thrift.TColumnValue();
              struct.min.read(iprot);
              struct.setMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.max = new org.apache.impala.thrift.TColumnValue();
              struct.max.read(iprot);
              struct.setMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAlways_true()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'always_true' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAlways_false()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'always_false' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMinMaxFilter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ALWAYS_TRUE_FIELD_DESC);
      oprot.writeBool(struct.always_true);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALWAYS_FALSE_FIELD_DESC);
      oprot.writeBool(struct.always_false);
      oprot.writeFieldEnd();
      if (struct.min != null) {
        if (struct.isSetMin()) {
          oprot.writeFieldBegin(MIN_FIELD_DESC);
          struct.min.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.max != null) {
        if (struct.isSetMax()) {
          oprot.writeFieldBegin(MAX_FIELD_DESC);
          struct.max.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMinMaxFilterTupleSchemeFactory implements SchemeFactory {
    public TMinMaxFilterTupleScheme getScheme() {
      return new TMinMaxFilterTupleScheme();
    }
  }

  private static class TMinMaxFilterTupleScheme extends TupleScheme<TMinMaxFilter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMinMaxFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.always_true);
      oprot.writeBool(struct.always_false);
      BitSet optionals = new BitSet();
      if (struct.isSetMin()) {
        optionals.set(0);
      }
      if (struct.isSetMax()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMin()) {
        struct.min.write(oprot);
      }
      if (struct.isSetMax()) {
        struct.max.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMinMaxFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.always_true = iprot.readBool();
      struct.setAlways_trueIsSet(true);
      struct.always_false = iprot.readBool();
      struct.setAlways_falseIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.min = new org.apache.impala.thrift.TColumnValue();
        struct.min.read(iprot);
        struct.setMinIsSet(true);
      }
      if (incoming.get(1)) {
        struct.max = new org.apache.impala.thrift.TColumnValue();
        struct.max.read(iprot);
        struct.setMaxIsSet(true);
      }
    }
  }

}

