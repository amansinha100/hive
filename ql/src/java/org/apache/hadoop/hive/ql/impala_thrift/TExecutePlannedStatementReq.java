/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TExecutePlannedStatementReq implements org.apache.thrift.TBase<TExecutePlannedStatementReq, TExecutePlannedStatementReq._Fields>, java.io.Serializable, Cloneable, Comparable<TExecutePlannedStatementReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecutePlannedStatementReq");

  private static final org.apache.thrift.protocol.TField STATEMENT_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("statementReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("plan", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TExecutePlannedStatementReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TExecutePlannedStatementReqTupleSchemeFactory());
  }

  public org.apache.hive.service.rpc.thrift.TExecuteStatementReq statementReq; // required
  public org.apache.impala.thrift.TExecRequest plan; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATEMENT_REQ((short)1, "statementReq"),
    PLAN((short)2, "plan");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATEMENT_REQ
          return STATEMENT_REQ;
        case 2: // PLAN
          return PLAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATEMENT_REQ, new org.apache.thrift.meta_data.FieldMetaData("statementReq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hive.service.rpc.thrift.TExecuteStatementReq.class)));
    tmpMap.put(_Fields.PLAN, new org.apache.thrift.meta_data.FieldMetaData("plan", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExecRequest.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecutePlannedStatementReq.class, metaDataMap);
  }

  public TExecutePlannedStatementReq() {
  }

  public TExecutePlannedStatementReq(
    org.apache.hive.service.rpc.thrift.TExecuteStatementReq statementReq,
    org.apache.impala.thrift.TExecRequest plan)
  {
    this();
    this.statementReq = statementReq;
    this.plan = plan;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecutePlannedStatementReq(TExecutePlannedStatementReq other) {
    if (other.isSetStatementReq()) {
      this.statementReq = new org.apache.hive.service.rpc.thrift.TExecuteStatementReq(other.statementReq);
    }
    if (other.isSetPlan()) {
      this.plan = new org.apache.impala.thrift.TExecRequest(other.plan);
    }
  }

  public TExecutePlannedStatementReq deepCopy() {
    return new TExecutePlannedStatementReq(this);
  }

  @Override
  public void clear() {
    this.statementReq = null;
    this.plan = null;
  }

  public org.apache.hive.service.rpc.thrift.TExecuteStatementReq getStatementReq() {
    return this.statementReq;
  }

  public TExecutePlannedStatementReq setStatementReq(org.apache.hive.service.rpc.thrift.TExecuteStatementReq statementReq) {
    this.statementReq = statementReq;
    return this;
  }

  public void unsetStatementReq() {
    this.statementReq = null;
  }

  /** Returns true if field statementReq is set (has been assigned a value) and false otherwise */
  public boolean isSetStatementReq() {
    return this.statementReq != null;
  }

  public void setStatementReqIsSet(boolean value) {
    if (!value) {
      this.statementReq = null;
    }
  }

  public org.apache.impala.thrift.TExecRequest getPlan() {
    return this.plan;
  }

  public TExecutePlannedStatementReq setPlan(org.apache.impala.thrift.TExecRequest plan) {
    this.plan = plan;
    return this;
  }

  public void unsetPlan() {
    this.plan = null;
  }

  /** Returns true if field plan is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan() {
    return this.plan != null;
  }

  public void setPlanIsSet(boolean value) {
    if (!value) {
      this.plan = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATEMENT_REQ:
      if (value == null) {
        unsetStatementReq();
      } else {
        setStatementReq((org.apache.hive.service.rpc.thrift.TExecuteStatementReq)value);
      }
      break;

    case PLAN:
      if (value == null) {
        unsetPlan();
      } else {
        setPlan((org.apache.impala.thrift.TExecRequest)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATEMENT_REQ:
      return getStatementReq();

    case PLAN:
      return getPlan();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATEMENT_REQ:
      return isSetStatementReq();
    case PLAN:
      return isSetPlan();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TExecutePlannedStatementReq)
      return this.equals((TExecutePlannedStatementReq)that);
    return false;
  }

  public boolean equals(TExecutePlannedStatementReq that) {
    if (that == null)
      return false;

    boolean this_present_statementReq = true && this.isSetStatementReq();
    boolean that_present_statementReq = true && that.isSetStatementReq();
    if (this_present_statementReq || that_present_statementReq) {
      if (!(this_present_statementReq && that_present_statementReq))
        return false;
      if (!this.statementReq.equals(that.statementReq))
        return false;
    }

    boolean this_present_plan = true && this.isSetPlan();
    boolean that_present_plan = true && that.isSetPlan();
    if (this_present_plan || that_present_plan) {
      if (!(this_present_plan && that_present_plan))
        return false;
      if (!this.plan.equals(that.plan))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_statementReq = true && (isSetStatementReq());
    list.add(present_statementReq);
    if (present_statementReq)
      list.add(statementReq);

    boolean present_plan = true && (isSetPlan());
    list.add(present_plan);
    if (present_plan)
      list.add(plan);

    return list.hashCode();
  }

  @Override
  public int compareTo(TExecutePlannedStatementReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatementReq()).compareTo(other.isSetStatementReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatementReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statementReq, other.statementReq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlan()).compareTo(other.isSetPlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan, other.plan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TExecutePlannedStatementReq(");
    boolean first = true;

    sb.append("statementReq:");
    if (this.statementReq == null) {
      sb.append("null");
    } else {
      sb.append(this.statementReq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plan:");
    if (this.plan == null) {
      sb.append("null");
    } else {
      sb.append(this.plan);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (statementReq == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statementReq' was not present! Struct: " + toString());
    }
    if (plan == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'plan' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (statementReq != null) {
      statementReq.validate();
    }
    if (plan != null) {
      plan.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecutePlannedStatementReqStandardSchemeFactory implements SchemeFactory {
    public TExecutePlannedStatementReqStandardScheme getScheme() {
      return new TExecutePlannedStatementReqStandardScheme();
    }
  }

  private static class TExecutePlannedStatementReqStandardScheme extends StandardScheme<TExecutePlannedStatementReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecutePlannedStatementReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATEMENT_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.statementReq = new org.apache.hive.service.rpc.thrift.TExecuteStatementReq();
              struct.statementReq.read(iprot);
              struct.setStatementReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.plan = new org.apache.impala.thrift.TExecRequest();
              struct.plan.read(iprot);
              struct.setPlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecutePlannedStatementReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.statementReq != null) {
        oprot.writeFieldBegin(STATEMENT_REQ_FIELD_DESC);
        struct.statementReq.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.plan != null) {
        oprot.writeFieldBegin(PLAN_FIELD_DESC);
        struct.plan.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecutePlannedStatementReqTupleSchemeFactory implements SchemeFactory {
    public TExecutePlannedStatementReqTupleScheme getScheme() {
      return new TExecutePlannedStatementReqTupleScheme();
    }
  }

  private static class TExecutePlannedStatementReqTupleScheme extends TupleScheme<TExecutePlannedStatementReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecutePlannedStatementReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.statementReq.write(oprot);
      struct.plan.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecutePlannedStatementReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.statementReq = new org.apache.hive.service.rpc.thrift.TExecuteStatementReq();
      struct.statementReq.read(iprot);
      struct.setStatementReqIsSet(true);
      struct.plan = new org.apache.impala.thrift.TExecRequest();
      struct.plan.read(iprot);
      struct.setPlanIsSet(true);
    }
  }

}

