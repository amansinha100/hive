/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TAggregateExpr implements org.apache.thrift.TBase<TAggregateExpr, TAggregateExpr._Fields>, java.io.Serializable, Cloneable, Comparable<TAggregateExpr> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAggregateExpr");

  private static final org.apache.thrift.protocol.TField IS_MERGE_AGG_FIELD_DESC = new org.apache.thrift.protocol.TField("is_merge_agg", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ARG_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("arg_types", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAggregateExprStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAggregateExprTupleSchemeFactory());
  }

  private boolean is_merge_agg; // required
  private List<org.apache.impala.thrift.TColumnType> arg_types; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_MERGE_AGG((short)1, "is_merge_agg"),
    ARG_TYPES((short)2, "arg_types");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_MERGE_AGG
          return IS_MERGE_AGG;
        case 2: // ARG_TYPES
          return ARG_TYPES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_MERGE_AGG_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_MERGE_AGG, new org.apache.thrift.meta_data.FieldMetaData("is_merge_agg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ARG_TYPES, new org.apache.thrift.meta_data.FieldMetaData("arg_types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumnType.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAggregateExpr.class, metaDataMap);
  }

  public TAggregateExpr() {
  }

  public TAggregateExpr(
    boolean is_merge_agg,
    List<org.apache.impala.thrift.TColumnType> arg_types)
  {
    this();
    this.is_merge_agg = is_merge_agg;
    setIs_merge_aggIsSet(true);
    this.arg_types = arg_types;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAggregateExpr(TAggregateExpr other) {
    __isset_bitfield = other.__isset_bitfield;
    this.is_merge_agg = other.is_merge_agg;
    if (other.isSetArg_types()) {
      List<org.apache.impala.thrift.TColumnType> __this__arg_types = new ArrayList<org.apache.impala.thrift.TColumnType>(other.arg_types.size());
      for (org.apache.impala.thrift.TColumnType other_element : other.arg_types) {
        __this__arg_types.add(new org.apache.impala.thrift.TColumnType(other_element));
      }
      this.arg_types = __this__arg_types;
    }
  }

  public TAggregateExpr deepCopy() {
    return new TAggregateExpr(this);
  }

  @Override
  public void clear() {
    setIs_merge_aggIsSet(false);
    this.is_merge_agg = false;
    this.arg_types = null;
  }

  public boolean isIs_merge_agg() {
    return this.is_merge_agg;
  }

  public void setIs_merge_agg(boolean is_merge_agg) {
    this.is_merge_agg = is_merge_agg;
    setIs_merge_aggIsSet(true);
  }

  public void unsetIs_merge_agg() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_MERGE_AGG_ISSET_ID);
  }

  /** Returns true if field is_merge_agg is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_merge_agg() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_MERGE_AGG_ISSET_ID);
  }

  public void setIs_merge_aggIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_MERGE_AGG_ISSET_ID, value);
  }

  public int getArg_typesSize() {
    return (this.arg_types == null) ? 0 : this.arg_types.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TColumnType> getArg_typesIterator() {
    return (this.arg_types == null) ? null : this.arg_types.iterator();
  }

  public void addToArg_types(org.apache.impala.thrift.TColumnType elem) {
    if (this.arg_types == null) {
      this.arg_types = new ArrayList<org.apache.impala.thrift.TColumnType>();
    }
    this.arg_types.add(elem);
  }

  public List<org.apache.impala.thrift.TColumnType> getArg_types() {
    return this.arg_types;
  }

  public void setArg_types(List<org.apache.impala.thrift.TColumnType> arg_types) {
    this.arg_types = arg_types;
  }

  public void unsetArg_types() {
    this.arg_types = null;
  }

  /** Returns true if field arg_types is set (has been assigned a value) and false otherwise */
  public boolean isSetArg_types() {
    return this.arg_types != null;
  }

  public void setArg_typesIsSet(boolean value) {
    if (!value) {
      this.arg_types = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_MERGE_AGG:
      if (value == null) {
        unsetIs_merge_agg();
      } else {
        setIs_merge_agg((Boolean)value);
      }
      break;

    case ARG_TYPES:
      if (value == null) {
        unsetArg_types();
      } else {
        setArg_types((List<org.apache.impala.thrift.TColumnType>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_MERGE_AGG:
      return isIs_merge_agg();

    case ARG_TYPES:
      return getArg_types();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_MERGE_AGG:
      return isSetIs_merge_agg();
    case ARG_TYPES:
      return isSetArg_types();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAggregateExpr)
      return this.equals((TAggregateExpr)that);
    return false;
  }

  public boolean equals(TAggregateExpr that) {
    if (that == null)
      return false;

    boolean this_present_is_merge_agg = true;
    boolean that_present_is_merge_agg = true;
    if (this_present_is_merge_agg || that_present_is_merge_agg) {
      if (!(this_present_is_merge_agg && that_present_is_merge_agg))
        return false;
      if (this.is_merge_agg != that.is_merge_agg)
        return false;
    }

    boolean this_present_arg_types = true && this.isSetArg_types();
    boolean that_present_arg_types = true && that.isSetArg_types();
    if (this_present_arg_types || that_present_arg_types) {
      if (!(this_present_arg_types && that_present_arg_types))
        return false;
      if (!this.arg_types.equals(that.arg_types))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_is_merge_agg = true;
    list.add(present_is_merge_agg);
    if (present_is_merge_agg)
      list.add(is_merge_agg);

    boolean present_arg_types = true && (isSetArg_types());
    list.add(present_arg_types);
    if (present_arg_types)
      list.add(arg_types);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAggregateExpr other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIs_merge_agg()).compareTo(other.isSetIs_merge_agg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_merge_agg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_merge_agg, other.is_merge_agg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArg_types()).compareTo(other.isSetArg_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg_types, other.arg_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAggregateExpr(");
    boolean first = true;

    sb.append("is_merge_agg:");
    sb.append(this.is_merge_agg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arg_types:");
    if (this.arg_types == null) {
      sb.append("null");
    } else {
      sb.append(this.arg_types);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetIs_merge_agg()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_merge_agg' is unset! Struct:" + toString());
    }

    if (!isSetArg_types()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arg_types' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAggregateExprStandardSchemeFactory implements SchemeFactory {
    public TAggregateExprStandardScheme getScheme() {
      return new TAggregateExprStandardScheme();
    }
  }

  private static class TAggregateExprStandardScheme extends StandardScheme<TAggregateExpr> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAggregateExpr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_MERGE_AGG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_merge_agg = iprot.readBool();
              struct.setIs_merge_aggIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARG_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.arg_types = new ArrayList<org.apache.impala.thrift.TColumnType>(_list8.size);
                org.apache.impala.thrift.TColumnType _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new org.apache.impala.thrift.TColumnType();
                  _elem9.read(iprot);
                  struct.arg_types.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setArg_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAggregateExpr struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_MERGE_AGG_FIELD_DESC);
      oprot.writeBool(struct.is_merge_agg);
      oprot.writeFieldEnd();
      if (struct.arg_types != null) {
        oprot.writeFieldBegin(ARG_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arg_types.size()));
          for (org.apache.impala.thrift.TColumnType _iter11 : struct.arg_types)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAggregateExprTupleSchemeFactory implements SchemeFactory {
    public TAggregateExprTupleScheme getScheme() {
      return new TAggregateExprTupleScheme();
    }
  }

  private static class TAggregateExprTupleScheme extends TupleScheme<TAggregateExpr> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAggregateExpr struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.is_merge_agg);
      {
        oprot.writeI32(struct.arg_types.size());
        for (org.apache.impala.thrift.TColumnType _iter12 : struct.arg_types)
        {
          _iter12.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAggregateExpr struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.is_merge_agg = iprot.readBool();
      struct.setIs_merge_aggIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.arg_types = new ArrayList<org.apache.impala.thrift.TColumnType>(_list13.size);
        org.apache.impala.thrift.TColumnType _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new org.apache.impala.thrift.TColumnType();
          _elem14.read(iprot);
          struct.arg_types.add(_elem14);
        }
      }
      struct.setArg_typesIsSet(true);
    }
  }

}

