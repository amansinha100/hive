/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumn");

  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("columnType", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COL_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("col_stats", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_HBASE_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_hbase_column", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField COLUMN_FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("column_family", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COLUMN_QUALIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("column_qualifier", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IS_BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_binary", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IS_KUDU_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_kudu_column", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField IS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_key", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField IS_NULLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_nullable", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("encoding", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("compression", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_value", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("block_size", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField KUDU_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_column_name", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TColumnStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TColumnTupleSchemeFactory());
  }

  private String columnName; // required
  private org.apache.impala.thrift.TColumnType columnType; // required
  private String comment; // optional
  private TColumnStats col_stats; // optional
  private int position; // optional
  private boolean is_hbase_column; // optional
  private String column_family; // optional
  private String column_qualifier; // optional
  private boolean is_binary; // optional
  private boolean is_kudu_column; // optional
  private boolean is_key; // optional
  private boolean is_nullable; // optional
  private TColumnEncoding encoding; // optional
  private THdfsCompression compression; // optional
  private org.apache.impala.thrift.TExpr default_value; // optional
  private int block_size; // optional
  private String kudu_column_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_NAME((short)1, "columnName"),
    COLUMN_TYPE((short)2, "columnType"),
    COMMENT((short)3, "comment"),
    COL_STATS((short)4, "col_stats"),
    POSITION((short)5, "position"),
    IS_HBASE_COLUMN((short)6, "is_hbase_column"),
    COLUMN_FAMILY((short)7, "column_family"),
    COLUMN_QUALIFIER((short)8, "column_qualifier"),
    IS_BINARY((short)9, "is_binary"),
    IS_KUDU_COLUMN((short)10, "is_kudu_column"),
    IS_KEY((short)11, "is_key"),
    IS_NULLABLE((short)12, "is_nullable"),
    /**
     * 
     * @see TColumnEncoding
     */
    ENCODING((short)13, "encoding"),
    /**
     * 
     * @see THdfsCompression
     */
    COMPRESSION((short)14, "compression"),
    DEFAULT_VALUE((short)15, "default_value"),
    BLOCK_SIZE((short)16, "block_size"),
    KUDU_COLUMN_NAME((short)17, "kudu_column_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_NAME
          return COLUMN_NAME;
        case 2: // COLUMN_TYPE
          return COLUMN_TYPE;
        case 3: // COMMENT
          return COMMENT;
        case 4: // COL_STATS
          return COL_STATS;
        case 5: // POSITION
          return POSITION;
        case 6: // IS_HBASE_COLUMN
          return IS_HBASE_COLUMN;
        case 7: // COLUMN_FAMILY
          return COLUMN_FAMILY;
        case 8: // COLUMN_QUALIFIER
          return COLUMN_QUALIFIER;
        case 9: // IS_BINARY
          return IS_BINARY;
        case 10: // IS_KUDU_COLUMN
          return IS_KUDU_COLUMN;
        case 11: // IS_KEY
          return IS_KEY;
        case 12: // IS_NULLABLE
          return IS_NULLABLE;
        case 13: // ENCODING
          return ENCODING;
        case 14: // COMPRESSION
          return COMPRESSION;
        case 15: // DEFAULT_VALUE
          return DEFAULT_VALUE;
        case 16: // BLOCK_SIZE
          return BLOCK_SIZE;
        case 17: // KUDU_COLUMN_NAME
          return KUDU_COLUMN_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POSITION_ISSET_ID = 0;
  private static final int __IS_HBASE_COLUMN_ISSET_ID = 1;
  private static final int __IS_BINARY_ISSET_ID = 2;
  private static final int __IS_KUDU_COLUMN_ISSET_ID = 3;
  private static final int __IS_KEY_ISSET_ID = 4;
  private static final int __IS_NULLABLE_ISSET_ID = 5;
  private static final int __BLOCK_SIZE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMENT,_Fields.COL_STATS,_Fields.POSITION,_Fields.IS_HBASE_COLUMN,_Fields.COLUMN_FAMILY,_Fields.COLUMN_QUALIFIER,_Fields.IS_BINARY,_Fields.IS_KUDU_COLUMN,_Fields.IS_KEY,_Fields.IS_NULLABLE,_Fields.ENCODING,_Fields.COMPRESSION,_Fields.DEFAULT_VALUE,_Fields.BLOCK_SIZE,_Fields.KUDU_COLUMN_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("columnType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumnType.class)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COL_STATS, new org.apache.thrift.meta_data.FieldMetaData("col_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumnStats.class)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_HBASE_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("is_hbase_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COLUMN_FAMILY, new org.apache.thrift.meta_data.FieldMetaData("column_family", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_QUALIFIER, new org.apache.thrift.meta_data.FieldMetaData("column_qualifier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_BINARY, new org.apache.thrift.meta_data.FieldMetaData("is_binary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_KUDU_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("is_kudu_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_KEY, new org.apache.thrift.meta_data.FieldMetaData("is_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_NULLABLE, new org.apache.thrift.meta_data.FieldMetaData("is_nullable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENCODING, new org.apache.thrift.meta_data.FieldMetaData("encoding", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TColumnEncoding.class)));
    tmpMap.put(_Fields.COMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("compression", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, THdfsCompression.class)));
    tmpMap.put(_Fields.DEFAULT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("default_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TExpr.class)));
    tmpMap.put(_Fields.BLOCK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("block_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KUDU_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("kudu_column_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumn.class, metaDataMap);
  }

  public TColumn() {
  }

  public TColumn(
    String columnName,
    org.apache.impala.thrift.TColumnType columnType)
  {
    this();
    this.columnName = columnName;
    this.columnType = columnType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumn(TColumn other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    if (other.isSetColumnType()) {
      this.columnType = new org.apache.impala.thrift.TColumnType(other.columnType);
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetCol_stats()) {
      this.col_stats = new TColumnStats(other.col_stats);
    }
    this.position = other.position;
    this.is_hbase_column = other.is_hbase_column;
    if (other.isSetColumn_family()) {
      this.column_family = other.column_family;
    }
    if (other.isSetColumn_qualifier()) {
      this.column_qualifier = other.column_qualifier;
    }
    this.is_binary = other.is_binary;
    this.is_kudu_column = other.is_kudu_column;
    this.is_key = other.is_key;
    this.is_nullable = other.is_nullable;
    if (other.isSetEncoding()) {
      this.encoding = other.encoding;
    }
    if (other.isSetCompression()) {
      this.compression = other.compression;
    }
    if (other.isSetDefault_value()) {
      this.default_value = new org.apache.impala.thrift.TExpr(other.default_value);
    }
    this.block_size = other.block_size;
    if (other.isSetKudu_column_name()) {
      this.kudu_column_name = other.kudu_column_name;
    }
  }

  public TColumn deepCopy() {
    return new TColumn(this);
  }

  @Override
  public void clear() {
    this.columnName = null;
    this.columnType = null;
    this.comment = null;
    this.col_stats = null;
    setPositionIsSet(false);
    this.position = 0;
    setIs_hbase_columnIsSet(false);
    this.is_hbase_column = false;
    this.column_family = null;
    this.column_qualifier = null;
    setIs_binaryIsSet(false);
    this.is_binary = false;
    setIs_kudu_columnIsSet(false);
    this.is_kudu_column = false;
    setIs_keyIsSet(false);
    this.is_key = false;
    setIs_nullableIsSet(false);
    this.is_nullable = false;
    this.encoding = null;
    this.compression = null;
    this.default_value = null;
    setBlock_sizeIsSet(false);
    this.block_size = 0;
    this.kudu_column_name = null;
  }

  public String getColumnName() {
    return this.columnName;
  }

  public void setColumnName(String columnName) {
    this.columnName = columnName;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  public org.apache.impala.thrift.TColumnType getColumnType() {
    return this.columnType;
  }

  public void setColumnType(org.apache.impala.thrift.TColumnType columnType) {
    this.columnType = columnType;
  }

  public void unsetColumnType() {
    this.columnType = null;
  }

  /** Returns true if field columnType is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnType() {
    return this.columnType != null;
  }

  public void setColumnTypeIsSet(boolean value) {
    if (!value) {
      this.columnType = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public TColumnStats getCol_stats() {
    return this.col_stats;
  }

  public void setCol_stats(TColumnStats col_stats) {
    this.col_stats = col_stats;
  }

  public void unsetCol_stats() {
    this.col_stats = null;
  }

  /** Returns true if field col_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetCol_stats() {
    return this.col_stats != null;
  }

  public void setCol_statsIsSet(boolean value) {
    if (!value) {
      this.col_stats = null;
    }
  }

  public int getPosition() {
    return this.position;
  }

  public void setPosition(int position) {
    this.position = position;
    setPositionIsSet(true);
  }

  public void unsetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  public boolean isIs_hbase_column() {
    return this.is_hbase_column;
  }

  public void setIs_hbase_column(boolean is_hbase_column) {
    this.is_hbase_column = is_hbase_column;
    setIs_hbase_columnIsSet(true);
  }

  public void unsetIs_hbase_column() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_HBASE_COLUMN_ISSET_ID);
  }

  /** Returns true if field is_hbase_column is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_hbase_column() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_HBASE_COLUMN_ISSET_ID);
  }

  public void setIs_hbase_columnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_HBASE_COLUMN_ISSET_ID, value);
  }

  public String getColumn_family() {
    return this.column_family;
  }

  public void setColumn_family(String column_family) {
    this.column_family = column_family;
  }

  public void unsetColumn_family() {
    this.column_family = null;
  }

  /** Returns true if field column_family is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_family() {
    return this.column_family != null;
  }

  public void setColumn_familyIsSet(boolean value) {
    if (!value) {
      this.column_family = null;
    }
  }

  public String getColumn_qualifier() {
    return this.column_qualifier;
  }

  public void setColumn_qualifier(String column_qualifier) {
    this.column_qualifier = column_qualifier;
  }

  public void unsetColumn_qualifier() {
    this.column_qualifier = null;
  }

  /** Returns true if field column_qualifier is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_qualifier() {
    return this.column_qualifier != null;
  }

  public void setColumn_qualifierIsSet(boolean value) {
    if (!value) {
      this.column_qualifier = null;
    }
  }

  public boolean isIs_binary() {
    return this.is_binary;
  }

  public void setIs_binary(boolean is_binary) {
    this.is_binary = is_binary;
    setIs_binaryIsSet(true);
  }

  public void unsetIs_binary() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_BINARY_ISSET_ID);
  }

  /** Returns true if field is_binary is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_binary() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_BINARY_ISSET_ID);
  }

  public void setIs_binaryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_BINARY_ISSET_ID, value);
  }

  public boolean isIs_kudu_column() {
    return this.is_kudu_column;
  }

  public void setIs_kudu_column(boolean is_kudu_column) {
    this.is_kudu_column = is_kudu_column;
    setIs_kudu_columnIsSet(true);
  }

  public void unsetIs_kudu_column() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_KUDU_COLUMN_ISSET_ID);
  }

  /** Returns true if field is_kudu_column is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_kudu_column() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_KUDU_COLUMN_ISSET_ID);
  }

  public void setIs_kudu_columnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_KUDU_COLUMN_ISSET_ID, value);
  }

  public boolean isIs_key() {
    return this.is_key;
  }

  public void setIs_key(boolean is_key) {
    this.is_key = is_key;
    setIs_keyIsSet(true);
  }

  public void unsetIs_key() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_KEY_ISSET_ID);
  }

  /** Returns true if field is_key is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_key() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_KEY_ISSET_ID);
  }

  public void setIs_keyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_KEY_ISSET_ID, value);
  }

  public boolean isIs_nullable() {
    return this.is_nullable;
  }

  public void setIs_nullable(boolean is_nullable) {
    this.is_nullable = is_nullable;
    setIs_nullableIsSet(true);
  }

  public void unsetIs_nullable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_NULLABLE_ISSET_ID);
  }

  /** Returns true if field is_nullable is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_nullable() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_NULLABLE_ISSET_ID);
  }

  public void setIs_nullableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_NULLABLE_ISSET_ID, value);
  }

  /**
   * 
   * @see TColumnEncoding
   */
  public TColumnEncoding getEncoding() {
    return this.encoding;
  }

  /**
   * 
   * @see TColumnEncoding
   */
  public void setEncoding(TColumnEncoding encoding) {
    this.encoding = encoding;
  }

  public void unsetEncoding() {
    this.encoding = null;
  }

  /** Returns true if field encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoding() {
    return this.encoding != null;
  }

  public void setEncodingIsSet(boolean value) {
    if (!value) {
      this.encoding = null;
    }
  }

  /**
   * 
   * @see THdfsCompression
   */
  public THdfsCompression getCompression() {
    return this.compression;
  }

  /**
   * 
   * @see THdfsCompression
   */
  public void setCompression(THdfsCompression compression) {
    this.compression = compression;
  }

  public void unsetCompression() {
    this.compression = null;
  }

  /** Returns true if field compression is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression() {
    return this.compression != null;
  }

  public void setCompressionIsSet(boolean value) {
    if (!value) {
      this.compression = null;
    }
  }

  public org.apache.impala.thrift.TExpr getDefault_value() {
    return this.default_value;
  }

  public void setDefault_value(org.apache.impala.thrift.TExpr default_value) {
    this.default_value = default_value;
  }

  public void unsetDefault_value() {
    this.default_value = null;
  }

  /** Returns true if field default_value is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_value() {
    return this.default_value != null;
  }

  public void setDefault_valueIsSet(boolean value) {
    if (!value) {
      this.default_value = null;
    }
  }

  public int getBlock_size() {
    return this.block_size;
  }

  public void setBlock_size(int block_size) {
    this.block_size = block_size;
    setBlock_sizeIsSet(true);
  }

  public void unsetBlock_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCK_SIZE_ISSET_ID);
  }

  /** Returns true if field block_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBlock_size() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCK_SIZE_ISSET_ID);
  }

  public void setBlock_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCK_SIZE_ISSET_ID, value);
  }

  public String getKudu_column_name() {
    return this.kudu_column_name;
  }

  public void setKudu_column_name(String kudu_column_name) {
    this.kudu_column_name = kudu_column_name;
  }

  public void unsetKudu_column_name() {
    this.kudu_column_name = null;
  }

  /** Returns true if field kudu_column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_column_name() {
    return this.kudu_column_name != null;
  }

  public void setKudu_column_nameIsSet(boolean value) {
    if (!value) {
      this.kudu_column_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumnType();
      } else {
        setColumnType((org.apache.impala.thrift.TColumnType)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case COL_STATS:
      if (value == null) {
        unsetCol_stats();
      } else {
        setCol_stats((TColumnStats)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Integer)value);
      }
      break;

    case IS_HBASE_COLUMN:
      if (value == null) {
        unsetIs_hbase_column();
      } else {
        setIs_hbase_column((Boolean)value);
      }
      break;

    case COLUMN_FAMILY:
      if (value == null) {
        unsetColumn_family();
      } else {
        setColumn_family((String)value);
      }
      break;

    case COLUMN_QUALIFIER:
      if (value == null) {
        unsetColumn_qualifier();
      } else {
        setColumn_qualifier((String)value);
      }
      break;

    case IS_BINARY:
      if (value == null) {
        unsetIs_binary();
      } else {
        setIs_binary((Boolean)value);
      }
      break;

    case IS_KUDU_COLUMN:
      if (value == null) {
        unsetIs_kudu_column();
      } else {
        setIs_kudu_column((Boolean)value);
      }
      break;

    case IS_KEY:
      if (value == null) {
        unsetIs_key();
      } else {
        setIs_key((Boolean)value);
      }
      break;

    case IS_NULLABLE:
      if (value == null) {
        unsetIs_nullable();
      } else {
        setIs_nullable((Boolean)value);
      }
      break;

    case ENCODING:
      if (value == null) {
        unsetEncoding();
      } else {
        setEncoding((TColumnEncoding)value);
      }
      break;

    case COMPRESSION:
      if (value == null) {
        unsetCompression();
      } else {
        setCompression((THdfsCompression)value);
      }
      break;

    case DEFAULT_VALUE:
      if (value == null) {
        unsetDefault_value();
      } else {
        setDefault_value((org.apache.impala.thrift.TExpr)value);
      }
      break;

    case BLOCK_SIZE:
      if (value == null) {
        unsetBlock_size();
      } else {
        setBlock_size((Integer)value);
      }
      break;

    case KUDU_COLUMN_NAME:
      if (value == null) {
        unsetKudu_column_name();
      } else {
        setKudu_column_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumnName();

    case COLUMN_TYPE:
      return getColumnType();

    case COMMENT:
      return getComment();

    case COL_STATS:
      return getCol_stats();

    case POSITION:
      return getPosition();

    case IS_HBASE_COLUMN:
      return isIs_hbase_column();

    case COLUMN_FAMILY:
      return getColumn_family();

    case COLUMN_QUALIFIER:
      return getColumn_qualifier();

    case IS_BINARY:
      return isIs_binary();

    case IS_KUDU_COLUMN:
      return isIs_kudu_column();

    case IS_KEY:
      return isIs_key();

    case IS_NULLABLE:
      return isIs_nullable();

    case ENCODING:
      return getEncoding();

    case COMPRESSION:
      return getCompression();

    case DEFAULT_VALUE:
      return getDefault_value();

    case BLOCK_SIZE:
      return getBlock_size();

    case KUDU_COLUMN_NAME:
      return getKudu_column_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_NAME:
      return isSetColumnName();
    case COLUMN_TYPE:
      return isSetColumnType();
    case COMMENT:
      return isSetComment();
    case COL_STATS:
      return isSetCol_stats();
    case POSITION:
      return isSetPosition();
    case IS_HBASE_COLUMN:
      return isSetIs_hbase_column();
    case COLUMN_FAMILY:
      return isSetColumn_family();
    case COLUMN_QUALIFIER:
      return isSetColumn_qualifier();
    case IS_BINARY:
      return isSetIs_binary();
    case IS_KUDU_COLUMN:
      return isSetIs_kudu_column();
    case IS_KEY:
      return isSetIs_key();
    case IS_NULLABLE:
      return isSetIs_nullable();
    case ENCODING:
      return isSetEncoding();
    case COMPRESSION:
      return isSetCompression();
    case DEFAULT_VALUE:
      return isSetDefault_value();
    case BLOCK_SIZE:
      return isSetBlock_size();
    case KUDU_COLUMN_NAME:
      return isSetKudu_column_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumn)
      return this.equals((TColumn)that);
    return false;
  }

  public boolean equals(TColumn that) {
    if (that == null)
      return false;

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_columnType = true && this.isSetColumnType();
    boolean that_present_columnType = true && that.isSetColumnType();
    if (this_present_columnType || that_present_columnType) {
      if (!(this_present_columnType && that_present_columnType))
        return false;
      if (!this.columnType.equals(that.columnType))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_col_stats = true && this.isSetCol_stats();
    boolean that_present_col_stats = true && that.isSetCol_stats();
    if (this_present_col_stats || that_present_col_stats) {
      if (!(this_present_col_stats && that_present_col_stats))
        return false;
      if (!this.col_stats.equals(that.col_stats))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_is_hbase_column = true && this.isSetIs_hbase_column();
    boolean that_present_is_hbase_column = true && that.isSetIs_hbase_column();
    if (this_present_is_hbase_column || that_present_is_hbase_column) {
      if (!(this_present_is_hbase_column && that_present_is_hbase_column))
        return false;
      if (this.is_hbase_column != that.is_hbase_column)
        return false;
    }

    boolean this_present_column_family = true && this.isSetColumn_family();
    boolean that_present_column_family = true && that.isSetColumn_family();
    if (this_present_column_family || that_present_column_family) {
      if (!(this_present_column_family && that_present_column_family))
        return false;
      if (!this.column_family.equals(that.column_family))
        return false;
    }

    boolean this_present_column_qualifier = true && this.isSetColumn_qualifier();
    boolean that_present_column_qualifier = true && that.isSetColumn_qualifier();
    if (this_present_column_qualifier || that_present_column_qualifier) {
      if (!(this_present_column_qualifier && that_present_column_qualifier))
        return false;
      if (!this.column_qualifier.equals(that.column_qualifier))
        return false;
    }

    boolean this_present_is_binary = true && this.isSetIs_binary();
    boolean that_present_is_binary = true && that.isSetIs_binary();
    if (this_present_is_binary || that_present_is_binary) {
      if (!(this_present_is_binary && that_present_is_binary))
        return false;
      if (this.is_binary != that.is_binary)
        return false;
    }

    boolean this_present_is_kudu_column = true && this.isSetIs_kudu_column();
    boolean that_present_is_kudu_column = true && that.isSetIs_kudu_column();
    if (this_present_is_kudu_column || that_present_is_kudu_column) {
      if (!(this_present_is_kudu_column && that_present_is_kudu_column))
        return false;
      if (this.is_kudu_column != that.is_kudu_column)
        return false;
    }

    boolean this_present_is_key = true && this.isSetIs_key();
    boolean that_present_is_key = true && that.isSetIs_key();
    if (this_present_is_key || that_present_is_key) {
      if (!(this_present_is_key && that_present_is_key))
        return false;
      if (this.is_key != that.is_key)
        return false;
    }

    boolean this_present_is_nullable = true && this.isSetIs_nullable();
    boolean that_present_is_nullable = true && that.isSetIs_nullable();
    if (this_present_is_nullable || that_present_is_nullable) {
      if (!(this_present_is_nullable && that_present_is_nullable))
        return false;
      if (this.is_nullable != that.is_nullable)
        return false;
    }

    boolean this_present_encoding = true && this.isSetEncoding();
    boolean that_present_encoding = true && that.isSetEncoding();
    if (this_present_encoding || that_present_encoding) {
      if (!(this_present_encoding && that_present_encoding))
        return false;
      if (!this.encoding.equals(that.encoding))
        return false;
    }

    boolean this_present_compression = true && this.isSetCompression();
    boolean that_present_compression = true && that.isSetCompression();
    if (this_present_compression || that_present_compression) {
      if (!(this_present_compression && that_present_compression))
        return false;
      if (!this.compression.equals(that.compression))
        return false;
    }

    boolean this_present_default_value = true && this.isSetDefault_value();
    boolean that_present_default_value = true && that.isSetDefault_value();
    if (this_present_default_value || that_present_default_value) {
      if (!(this_present_default_value && that_present_default_value))
        return false;
      if (!this.default_value.equals(that.default_value))
        return false;
    }

    boolean this_present_block_size = true && this.isSetBlock_size();
    boolean that_present_block_size = true && that.isSetBlock_size();
    if (this_present_block_size || that_present_block_size) {
      if (!(this_present_block_size && that_present_block_size))
        return false;
      if (this.block_size != that.block_size)
        return false;
    }

    boolean this_present_kudu_column_name = true && this.isSetKudu_column_name();
    boolean that_present_kudu_column_name = true && that.isSetKudu_column_name();
    if (this_present_kudu_column_name || that_present_kudu_column_name) {
      if (!(this_present_kudu_column_name && that_present_kudu_column_name))
        return false;
      if (!this.kudu_column_name.equals(that.kudu_column_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_columnName = true && (isSetColumnName());
    list.add(present_columnName);
    if (present_columnName)
      list.add(columnName);

    boolean present_columnType = true && (isSetColumnType());
    list.add(present_columnType);
    if (present_columnType)
      list.add(columnType);

    boolean present_comment = true && (isSetComment());
    list.add(present_comment);
    if (present_comment)
      list.add(comment);

    boolean present_col_stats = true && (isSetCol_stats());
    list.add(present_col_stats);
    if (present_col_stats)
      list.add(col_stats);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_is_hbase_column = true && (isSetIs_hbase_column());
    list.add(present_is_hbase_column);
    if (present_is_hbase_column)
      list.add(is_hbase_column);

    boolean present_column_family = true && (isSetColumn_family());
    list.add(present_column_family);
    if (present_column_family)
      list.add(column_family);

    boolean present_column_qualifier = true && (isSetColumn_qualifier());
    list.add(present_column_qualifier);
    if (present_column_qualifier)
      list.add(column_qualifier);

    boolean present_is_binary = true && (isSetIs_binary());
    list.add(present_is_binary);
    if (present_is_binary)
      list.add(is_binary);

    boolean present_is_kudu_column = true && (isSetIs_kudu_column());
    list.add(present_is_kudu_column);
    if (present_is_kudu_column)
      list.add(is_kudu_column);

    boolean present_is_key = true && (isSetIs_key());
    list.add(present_is_key);
    if (present_is_key)
      list.add(is_key);

    boolean present_is_nullable = true && (isSetIs_nullable());
    list.add(present_is_nullable);
    if (present_is_nullable)
      list.add(is_nullable);

    boolean present_encoding = true && (isSetEncoding());
    list.add(present_encoding);
    if (present_encoding)
      list.add(encoding.getValue());

    boolean present_compression = true && (isSetCompression());
    list.add(present_compression);
    if (present_compression)
      list.add(compression.getValue());

    boolean present_default_value = true && (isSetDefault_value());
    list.add(present_default_value);
    if (present_default_value)
      list.add(default_value);

    boolean present_block_size = true && (isSetBlock_size());
    list.add(present_block_size);
    if (present_block_size)
      list.add(block_size);

    boolean present_kudu_column_name = true && (isSetKudu_column_name());
    list.add(present_kudu_column_name);
    if (present_kudu_column_name)
      list.add(kudu_column_name);

    return list.hashCode();
  }

  @Override
  public int compareTo(TColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetColumnName()).compareTo(other.isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnType()).compareTo(other.isSetColumnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnType, other.columnType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCol_stats()).compareTo(other.isSetCol_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCol_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col_stats, other.col_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_hbase_column()).compareTo(other.isSetIs_hbase_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_hbase_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_hbase_column, other.is_hbase_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_family()).compareTo(other.isSetColumn_family());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_family()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_family, other.column_family);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_qualifier()).compareTo(other.isSetColumn_qualifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_qualifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_qualifier, other.column_qualifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_binary()).compareTo(other.isSetIs_binary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_binary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_binary, other.is_binary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_kudu_column()).compareTo(other.isSetIs_kudu_column());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_kudu_column()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_kudu_column, other.is_kudu_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_key()).compareTo(other.isSetIs_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_key, other.is_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_nullable()).compareTo(other.isSetIs_nullable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_nullable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_nullable, other.is_nullable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncoding()).compareTo(other.isSetEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoding, other.encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompression()).compareTo(other.isSetCompression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression, other.compression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_value()).compareTo(other.isSetDefault_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_value, other.default_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlock_size()).compareTo(other.isSetBlock_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlock_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_size, other.block_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_column_name()).compareTo(other.isSetKudu_column_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_column_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_column_name, other.kudu_column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TColumn(");
    boolean first = true;

    sb.append("columnName:");
    if (this.columnName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnType:");
    if (this.columnType == null) {
      sb.append("null");
    } else {
      sb.append(this.columnType);
    }
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetCol_stats()) {
      if (!first) sb.append(", ");
      sb.append("col_stats:");
      if (this.col_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.col_stats);
      }
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
    }
    if (isSetIs_hbase_column()) {
      if (!first) sb.append(", ");
      sb.append("is_hbase_column:");
      sb.append(this.is_hbase_column);
      first = false;
    }
    if (isSetColumn_family()) {
      if (!first) sb.append(", ");
      sb.append("column_family:");
      if (this.column_family == null) {
        sb.append("null");
      } else {
        sb.append(this.column_family);
      }
      first = false;
    }
    if (isSetColumn_qualifier()) {
      if (!first) sb.append(", ");
      sb.append("column_qualifier:");
      if (this.column_qualifier == null) {
        sb.append("null");
      } else {
        sb.append(this.column_qualifier);
      }
      first = false;
    }
    if (isSetIs_binary()) {
      if (!first) sb.append(", ");
      sb.append("is_binary:");
      sb.append(this.is_binary);
      first = false;
    }
    if (isSetIs_kudu_column()) {
      if (!first) sb.append(", ");
      sb.append("is_kudu_column:");
      sb.append(this.is_kudu_column);
      first = false;
    }
    if (isSetIs_key()) {
      if (!first) sb.append(", ");
      sb.append("is_key:");
      sb.append(this.is_key);
      first = false;
    }
    if (isSetIs_nullable()) {
      if (!first) sb.append(", ");
      sb.append("is_nullable:");
      sb.append(this.is_nullable);
      first = false;
    }
    if (isSetEncoding()) {
      if (!first) sb.append(", ");
      sb.append("encoding:");
      if (this.encoding == null) {
        sb.append("null");
      } else {
        sb.append(this.encoding);
      }
      first = false;
    }
    if (isSetCompression()) {
      if (!first) sb.append(", ");
      sb.append("compression:");
      if (this.compression == null) {
        sb.append("null");
      } else {
        sb.append(this.compression);
      }
      first = false;
    }
    if (isSetDefault_value()) {
      if (!first) sb.append(", ");
      sb.append("default_value:");
      if (this.default_value == null) {
        sb.append("null");
      } else {
        sb.append(this.default_value);
      }
      first = false;
    }
    if (isSetBlock_size()) {
      if (!first) sb.append(", ");
      sb.append("block_size:");
      sb.append(this.block_size);
      first = false;
    }
    if (isSetKudu_column_name()) {
      if (!first) sb.append(", ");
      sb.append("kudu_column_name:");
      if (this.kudu_column_name == null) {
        sb.append("null");
      } else {
        sb.append(this.kudu_column_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetColumnName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnName' is unset! Struct:" + toString());
    }

    if (!isSetColumnType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnType' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (columnType != null) {
      columnType.validate();
    }
    if (col_stats != null) {
      col_stats.validate();
    }
    if (default_value != null) {
      default_value.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnStandardSchemeFactory implements SchemeFactory {
    public TColumnStandardScheme getScheme() {
      return new TColumnStandardScheme();
    }
  }

  private static class TColumnStandardScheme extends StandardScheme<TColumn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnName = iprot.readString();
              struct.setColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.columnType = new org.apache.impala.thrift.TColumnType();
              struct.columnType.read(iprot);
              struct.setColumnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COL_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.col_stats = new TColumnStats();
              struct.col_stats.read(iprot);
              struct.setCol_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.position = iprot.readI32();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_HBASE_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_hbase_column = iprot.readBool();
              struct.setIs_hbase_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLUMN_FAMILY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_family = iprot.readString();
              struct.setColumn_familyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COLUMN_QUALIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_qualifier = iprot.readString();
              struct.setColumn_qualifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_binary = iprot.readBool();
              struct.setIs_binaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_KUDU_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_kudu_column = iprot.readBool();
              struct.setIs_kudu_columnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_key = iprot.readBool();
              struct.setIs_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_NULLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_nullable = iprot.readBool();
              struct.setIs_nullableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.encoding = org.apache.impala.thrift.TColumnEncoding.findByValue(iprot.readI32());
              struct.setEncodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compression = org.apache.impala.thrift.THdfsCompression.findByValue(iprot.readI32());
              struct.setCompressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEFAULT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.default_value = new org.apache.impala.thrift.TExpr();
              struct.default_value.read(iprot);
              struct.setDefault_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BLOCK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.block_size = iprot.readI32();
              struct.setBlock_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // KUDU_COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kudu_column_name = iprot.readString();
              struct.setKudu_column_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.columnName != null) {
        oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
        oprot.writeString(struct.columnName);
        oprot.writeFieldEnd();
      }
      if (struct.columnType != null) {
        oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
        struct.columnType.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.col_stats != null) {
        if (struct.isSetCol_stats()) {
          oprot.writeFieldBegin(COL_STATS_FIELD_DESC);
          struct.col_stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPosition()) {
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI32(struct.position);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_hbase_column()) {
        oprot.writeFieldBegin(IS_HBASE_COLUMN_FIELD_DESC);
        oprot.writeBool(struct.is_hbase_column);
        oprot.writeFieldEnd();
      }
      if (struct.column_family != null) {
        if (struct.isSetColumn_family()) {
          oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
          oprot.writeString(struct.column_family);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_qualifier != null) {
        if (struct.isSetColumn_qualifier()) {
          oprot.writeFieldBegin(COLUMN_QUALIFIER_FIELD_DESC);
          oprot.writeString(struct.column_qualifier);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_binary()) {
        oprot.writeFieldBegin(IS_BINARY_FIELD_DESC);
        oprot.writeBool(struct.is_binary);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_kudu_column()) {
        oprot.writeFieldBegin(IS_KUDU_COLUMN_FIELD_DESC);
        oprot.writeBool(struct.is_kudu_column);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_key()) {
        oprot.writeFieldBegin(IS_KEY_FIELD_DESC);
        oprot.writeBool(struct.is_key);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_nullable()) {
        oprot.writeFieldBegin(IS_NULLABLE_FIELD_DESC);
        oprot.writeBool(struct.is_nullable);
        oprot.writeFieldEnd();
      }
      if (struct.encoding != null) {
        if (struct.isSetEncoding()) {
          oprot.writeFieldBegin(ENCODING_FIELD_DESC);
          oprot.writeI32(struct.encoding.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.compression != null) {
        if (struct.isSetCompression()) {
          oprot.writeFieldBegin(COMPRESSION_FIELD_DESC);
          oprot.writeI32(struct.compression.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.default_value != null) {
        if (struct.isSetDefault_value()) {
          oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);
          struct.default_value.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBlock_size()) {
        oprot.writeFieldBegin(BLOCK_SIZE_FIELD_DESC);
        oprot.writeI32(struct.block_size);
        oprot.writeFieldEnd();
      }
      if (struct.kudu_column_name != null) {
        if (struct.isSetKudu_column_name()) {
          oprot.writeFieldBegin(KUDU_COLUMN_NAME_FIELD_DESC);
          oprot.writeString(struct.kudu_column_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnTupleSchemeFactory implements SchemeFactory {
    public TColumnTupleScheme getScheme() {
      return new TColumnTupleScheme();
    }
  }

  private static class TColumnTupleScheme extends TupleScheme<TColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.columnName);
      struct.columnType.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetComment()) {
        optionals.set(0);
      }
      if (struct.isSetCol_stats()) {
        optionals.set(1);
      }
      if (struct.isSetPosition()) {
        optionals.set(2);
      }
      if (struct.isSetIs_hbase_column()) {
        optionals.set(3);
      }
      if (struct.isSetColumn_family()) {
        optionals.set(4);
      }
      if (struct.isSetColumn_qualifier()) {
        optionals.set(5);
      }
      if (struct.isSetIs_binary()) {
        optionals.set(6);
      }
      if (struct.isSetIs_kudu_column()) {
        optionals.set(7);
      }
      if (struct.isSetIs_key()) {
        optionals.set(8);
      }
      if (struct.isSetIs_nullable()) {
        optionals.set(9);
      }
      if (struct.isSetEncoding()) {
        optionals.set(10);
      }
      if (struct.isSetCompression()) {
        optionals.set(11);
      }
      if (struct.isSetDefault_value()) {
        optionals.set(12);
      }
      if (struct.isSetBlock_size()) {
        optionals.set(13);
      }
      if (struct.isSetKudu_column_name()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetCol_stats()) {
        struct.col_stats.write(oprot);
      }
      if (struct.isSetPosition()) {
        oprot.writeI32(struct.position);
      }
      if (struct.isSetIs_hbase_column()) {
        oprot.writeBool(struct.is_hbase_column);
      }
      if (struct.isSetColumn_family()) {
        oprot.writeString(struct.column_family);
      }
      if (struct.isSetColumn_qualifier()) {
        oprot.writeString(struct.column_qualifier);
      }
      if (struct.isSetIs_binary()) {
        oprot.writeBool(struct.is_binary);
      }
      if (struct.isSetIs_kudu_column()) {
        oprot.writeBool(struct.is_kudu_column);
      }
      if (struct.isSetIs_key()) {
        oprot.writeBool(struct.is_key);
      }
      if (struct.isSetIs_nullable()) {
        oprot.writeBool(struct.is_nullable);
      }
      if (struct.isSetEncoding()) {
        oprot.writeI32(struct.encoding.getValue());
      }
      if (struct.isSetCompression()) {
        oprot.writeI32(struct.compression.getValue());
      }
      if (struct.isSetDefault_value()) {
        struct.default_value.write(oprot);
      }
      if (struct.isSetBlock_size()) {
        oprot.writeI32(struct.block_size);
      }
      if (struct.isSetKudu_column_name()) {
        oprot.writeString(struct.kudu_column_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.columnName = iprot.readString();
      struct.setColumnNameIsSet(true);
      struct.columnType = new org.apache.impala.thrift.TColumnType();
      struct.columnType.read(iprot);
      struct.setColumnTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.col_stats = new TColumnStats();
        struct.col_stats.read(iprot);
        struct.setCol_statsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.position = iprot.readI32();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_hbase_column = iprot.readBool();
        struct.setIs_hbase_columnIsSet(true);
      }
      if (incoming.get(4)) {
        struct.column_family = iprot.readString();
        struct.setColumn_familyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.column_qualifier = iprot.readString();
        struct.setColumn_qualifierIsSet(true);
      }
      if (incoming.get(6)) {
        struct.is_binary = iprot.readBool();
        struct.setIs_binaryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_kudu_column = iprot.readBool();
        struct.setIs_kudu_columnIsSet(true);
      }
      if (incoming.get(8)) {
        struct.is_key = iprot.readBool();
        struct.setIs_keyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.is_nullable = iprot.readBool();
        struct.setIs_nullableIsSet(true);
      }
      if (incoming.get(10)) {
        struct.encoding = org.apache.impala.thrift.TColumnEncoding.findByValue(iprot.readI32());
        struct.setEncodingIsSet(true);
      }
      if (incoming.get(11)) {
        struct.compression = org.apache.impala.thrift.THdfsCompression.findByValue(iprot.readI32());
        struct.setCompressionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.default_value = new org.apache.impala.thrift.TExpr();
        struct.default_value.read(iprot);
        struct.setDefault_valueIsSet(true);
      }
      if (incoming.get(13)) {
        struct.block_size = iprot.readI32();
        struct.setBlock_sizeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.kudu_column_name = iprot.readString();
        struct.setKudu_column_nameIsSet(true);
      }
    }
  }

}

