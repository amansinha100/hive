/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TPrincipal implements org.apache.thrift.TBase<TPrincipal, TPrincipal._Fields>, java.io.Serializable, Cloneable, Comparable<TPrincipal> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPrincipal");

  private static final org.apache.thrift.protocol.TField PRINCIPAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("principal_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("principal_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("principal_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GRANT_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("grant_groups", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPrincipalStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPrincipalTupleSchemeFactory());
  }

  public String principal_name; // required
  public int principal_id; // required
  /**
   * 
   * @see TPrincipalType
   */
  public TPrincipalType principal_type; // required
  public List<String> grant_groups; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRINCIPAL_NAME((short)1, "principal_name"),
    PRINCIPAL_ID((short)2, "principal_id"),
    /**
     * 
     * @see TPrincipalType
     */
    PRINCIPAL_TYPE((short)3, "principal_type"),
    GRANT_GROUPS((short)4, "grant_groups");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRINCIPAL_NAME
          return PRINCIPAL_NAME;
        case 2: // PRINCIPAL_ID
          return PRINCIPAL_ID;
        case 3: // PRINCIPAL_TYPE
          return PRINCIPAL_TYPE;
        case 4: // GRANT_GROUPS
          return GRANT_GROUPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRINCIPAL_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRINCIPAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("principal_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL_ID, new org.apache.thrift.meta_data.FieldMetaData("principal_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRINCIPAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("principal_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrincipalType.class)));
    tmpMap.put(_Fields.GRANT_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("grant_groups", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPrincipal.class, metaDataMap);
  }

  public TPrincipal() {
  }

  public TPrincipal(
    String principal_name,
    int principal_id,
    TPrincipalType principal_type,
    List<String> grant_groups)
  {
    this();
    this.principal_name = principal_name;
    this.principal_id = principal_id;
    setPrincipal_idIsSet(true);
    this.principal_type = principal_type;
    this.grant_groups = grant_groups;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPrincipal(TPrincipal other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPrincipal_name()) {
      this.principal_name = other.principal_name;
    }
    this.principal_id = other.principal_id;
    if (other.isSetPrincipal_type()) {
      this.principal_type = other.principal_type;
    }
    if (other.isSetGrant_groups()) {
      List<String> __this__grant_groups = new ArrayList<String>(other.grant_groups);
      this.grant_groups = __this__grant_groups;
    }
  }

  public TPrincipal deepCopy() {
    return new TPrincipal(this);
  }

  @Override
  public void clear() {
    this.principal_name = null;
    setPrincipal_idIsSet(false);
    this.principal_id = 0;
    this.principal_type = null;
    this.grant_groups = null;
  }

  public String getPrincipal_name() {
    return this.principal_name;
  }

  public TPrincipal setPrincipal_name(String principal_name) {
    this.principal_name = principal_name;
    return this;
  }

  public void unsetPrincipal_name() {
    this.principal_name = null;
  }

  /** Returns true if field principal_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal_name() {
    return this.principal_name != null;
  }

  public void setPrincipal_nameIsSet(boolean value) {
    if (!value) {
      this.principal_name = null;
    }
  }

  public int getPrincipal_id() {
    return this.principal_id;
  }

  public TPrincipal setPrincipal_id(int principal_id) {
    this.principal_id = principal_id;
    setPrincipal_idIsSet(true);
    return this;
  }

  public void unsetPrincipal_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPAL_ID_ISSET_ID);
  }

  /** Returns true if field principal_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal_id() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPAL_ID_ISSET_ID);
  }

  public void setPrincipal_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPAL_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TPrincipalType
   */
  public TPrincipalType getPrincipal_type() {
    return this.principal_type;
  }

  /**
   * 
   * @see TPrincipalType
   */
  public TPrincipal setPrincipal_type(TPrincipalType principal_type) {
    this.principal_type = principal_type;
    return this;
  }

  public void unsetPrincipal_type() {
    this.principal_type = null;
  }

  /** Returns true if field principal_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal_type() {
    return this.principal_type != null;
  }

  public void setPrincipal_typeIsSet(boolean value) {
    if (!value) {
      this.principal_type = null;
    }
  }

  public int getGrant_groupsSize() {
    return (this.grant_groups == null) ? 0 : this.grant_groups.size();
  }

  public java.util.Iterator<String> getGrant_groupsIterator() {
    return (this.grant_groups == null) ? null : this.grant_groups.iterator();
  }

  public void addToGrant_groups(String elem) {
    if (this.grant_groups == null) {
      this.grant_groups = new ArrayList<String>();
    }
    this.grant_groups.add(elem);
  }

  public List<String> getGrant_groups() {
    return this.grant_groups;
  }

  public TPrincipal setGrant_groups(List<String> grant_groups) {
    this.grant_groups = grant_groups;
    return this;
  }

  public void unsetGrant_groups() {
    this.grant_groups = null;
  }

  /** Returns true if field grant_groups is set (has been assigned a value) and false otherwise */
  public boolean isSetGrant_groups() {
    return this.grant_groups != null;
  }

  public void setGrant_groupsIsSet(boolean value) {
    if (!value) {
      this.grant_groups = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRINCIPAL_NAME:
      if (value == null) {
        unsetPrincipal_name();
      } else {
        setPrincipal_name((String)value);
      }
      break;

    case PRINCIPAL_ID:
      if (value == null) {
        unsetPrincipal_id();
      } else {
        setPrincipal_id((Integer)value);
      }
      break;

    case PRINCIPAL_TYPE:
      if (value == null) {
        unsetPrincipal_type();
      } else {
        setPrincipal_type((TPrincipalType)value);
      }
      break;

    case GRANT_GROUPS:
      if (value == null) {
        unsetGrant_groups();
      } else {
        setGrant_groups((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRINCIPAL_NAME:
      return getPrincipal_name();

    case PRINCIPAL_ID:
      return getPrincipal_id();

    case PRINCIPAL_TYPE:
      return getPrincipal_type();

    case GRANT_GROUPS:
      return getGrant_groups();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRINCIPAL_NAME:
      return isSetPrincipal_name();
    case PRINCIPAL_ID:
      return isSetPrincipal_id();
    case PRINCIPAL_TYPE:
      return isSetPrincipal_type();
    case GRANT_GROUPS:
      return isSetGrant_groups();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPrincipal)
      return this.equals((TPrincipal)that);
    return false;
  }

  public boolean equals(TPrincipal that) {
    if (that == null)
      return false;

    boolean this_present_principal_name = true && this.isSetPrincipal_name();
    boolean that_present_principal_name = true && that.isSetPrincipal_name();
    if (this_present_principal_name || that_present_principal_name) {
      if (!(this_present_principal_name && that_present_principal_name))
        return false;
      if (!this.principal_name.equals(that.principal_name))
        return false;
    }

    boolean this_present_principal_id = true;
    boolean that_present_principal_id = true;
    if (this_present_principal_id || that_present_principal_id) {
      if (!(this_present_principal_id && that_present_principal_id))
        return false;
      if (this.principal_id != that.principal_id)
        return false;
    }

    boolean this_present_principal_type = true && this.isSetPrincipal_type();
    boolean that_present_principal_type = true && that.isSetPrincipal_type();
    if (this_present_principal_type || that_present_principal_type) {
      if (!(this_present_principal_type && that_present_principal_type))
        return false;
      if (!this.principal_type.equals(that.principal_type))
        return false;
    }

    boolean this_present_grant_groups = true && this.isSetGrant_groups();
    boolean that_present_grant_groups = true && that.isSetGrant_groups();
    if (this_present_grant_groups || that_present_grant_groups) {
      if (!(this_present_grant_groups && that_present_grant_groups))
        return false;
      if (!this.grant_groups.equals(that.grant_groups))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_principal_name = true && (isSetPrincipal_name());
    list.add(present_principal_name);
    if (present_principal_name)
      list.add(principal_name);

    boolean present_principal_id = true;
    list.add(present_principal_id);
    if (present_principal_id)
      list.add(principal_id);

    boolean present_principal_type = true && (isSetPrincipal_type());
    list.add(present_principal_type);
    if (present_principal_type)
      list.add(principal_type.getValue());

    boolean present_grant_groups = true && (isSetGrant_groups());
    list.add(present_grant_groups);
    if (present_grant_groups)
      list.add(grant_groups);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPrincipal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPrincipal_name()).compareTo(other.isSetPrincipal_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal_name, other.principal_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal_id()).compareTo(other.isSetPrincipal_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal_id, other.principal_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal_type()).compareTo(other.isSetPrincipal_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal_type, other.principal_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrant_groups()).compareTo(other.isSetGrant_groups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrant_groups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grant_groups, other.grant_groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPrincipal(");
    boolean first = true;

    sb.append("principal_name:");
    if (this.principal_name == null) {
      sb.append("null");
    } else {
      sb.append(this.principal_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal_id:");
    sb.append(this.principal_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal_type:");
    if (this.principal_type == null) {
      sb.append("null");
    } else {
      sb.append(this.principal_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("grant_groups:");
    if (this.grant_groups == null) {
      sb.append("null");
    } else {
      sb.append(this.grant_groups);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (principal_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'principal_name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'principal_id' because it's a primitive and you chose the non-beans generator.
    if (principal_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'principal_type' was not present! Struct: " + toString());
    }
    if (grant_groups == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'grant_groups' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPrincipalStandardSchemeFactory implements SchemeFactory {
    public TPrincipalStandardScheme getScheme() {
      return new TPrincipalStandardScheme();
    }
  }

  private static class TPrincipalStandardScheme extends StandardScheme<TPrincipal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPrincipal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRINCIPAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.principal_name = iprot.readString();
              struct.setPrincipal_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRINCIPAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.principal_id = iprot.readI32();
              struct.setPrincipal_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRINCIPAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.principal_type = org.apache.impala.thrift.TPrincipalType.findByValue(iprot.readI32());
              struct.setPrincipal_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GRANT_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list174 = iprot.readListBegin();
                struct.grant_groups = new ArrayList<String>(_list174.size);
                String _elem175;
                for (int _i176 = 0; _i176 < _list174.size; ++_i176)
                {
                  _elem175 = iprot.readString();
                  struct.grant_groups.add(_elem175);
                }
                iprot.readListEnd();
              }
              struct.setGrant_groupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPrincipal_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'principal_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPrincipal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.principal_name != null) {
        oprot.writeFieldBegin(PRINCIPAL_NAME_FIELD_DESC);
        oprot.writeString(struct.principal_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRINCIPAL_ID_FIELD_DESC);
      oprot.writeI32(struct.principal_id);
      oprot.writeFieldEnd();
      if (struct.principal_type != null) {
        oprot.writeFieldBegin(PRINCIPAL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.principal_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.grant_groups != null) {
        oprot.writeFieldBegin(GRANT_GROUPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.grant_groups.size()));
          for (String _iter177 : struct.grant_groups)
          {
            oprot.writeString(_iter177);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPrincipalTupleSchemeFactory implements SchemeFactory {
    public TPrincipalTupleScheme getScheme() {
      return new TPrincipalTupleScheme();
    }
  }

  private static class TPrincipalTupleScheme extends TupleScheme<TPrincipal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPrincipal struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.principal_name);
      oprot.writeI32(struct.principal_id);
      oprot.writeI32(struct.principal_type.getValue());
      {
        oprot.writeI32(struct.grant_groups.size());
        for (String _iter178 : struct.grant_groups)
        {
          oprot.writeString(_iter178);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPrincipal struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.principal_name = iprot.readString();
      struct.setPrincipal_nameIsSet(true);
      struct.principal_id = iprot.readI32();
      struct.setPrincipal_idIsSet(true);
      struct.principal_type = org.apache.impala.thrift.TPrincipalType.findByValue(iprot.readI32());
      struct.setPrincipal_typeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list179 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.grant_groups = new ArrayList<String>(_list179.size);
        String _elem180;
        for (int _i181 = 0; _i181 < _list179.size; ++_i181)
        {
          _elem180 = iprot.readString();
          struct.grant_groups.add(_elem180);
        }
      }
      struct.setGrant_groupsIsSet(true);
    }
  }

}

