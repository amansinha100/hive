/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TQueryOptions implements org.apache.thrift.TBase<TQueryOptions, TQueryOptions._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryOptions");

  private static final org.apache.thrift.protocol.TField ABORT_ON_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("abort_on_error", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_errors", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DISABLE_CODEGEN_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_codegen", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_size", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_nodes", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_SCAN_RANGE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("max_scan_range_length", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_SCANNER_THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_scanner_threads", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DEBUG_ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_action", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_limit", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField COMPRESSION_CODEC_FIELD_DESC = new org.apache.thrift.protocol.TField("compression_codec", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField HBASE_CACHING_FIELD_DESC = new org.apache.thrift.protocol.TField("hbase_caching", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField HBASE_CACHE_BLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("hbase_cache_blocks", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField PARQUET_FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_file_size", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField EXPLAIN_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("explain_level", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField SYNC_DDL_FIELD_DESC = new org.apache.thrift.protocol.TField("sync_ddl", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField REQUEST_POOL_FIELD_DESC = new org.apache.thrift.protocol.TField("request_pool", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DISABLE_OUTERMOST_TOPN_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_outermost_topn", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField QUERY_TIMEOUT_S_FIELD_DESC = new org.apache.thrift.protocol.TField("query_timeout_s", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField BUFFER_POOL_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("buffer_pool_limit", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField APPX_COUNT_DISTINCT_FIELD_DESC = new org.apache.thrift.protocol.TField("appx_count_distinct", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField DISABLE_UNSAFE_SPILLS_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_unsafe_spills", org.apache.thrift.protocol.TType.BOOL, (short)29);
  private static final org.apache.thrift.protocol.TField EXEC_SINGLE_NODE_ROWS_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("exec_single_node_rows_threshold", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField OPTIMIZE_PARTITION_KEY_SCANS_FIELD_DESC = new org.apache.thrift.protocol.TField("optimize_partition_key_scans", org.apache.thrift.protocol.TType.BOOL, (short)32);
  private static final org.apache.thrift.protocol.TField REPLICA_PREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("replica_preference", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField SCHEDULE_RANDOM_REPLICA_FIELD_DESC = new org.apache.thrift.protocol.TField("schedule_random_replica", org.apache.thrift.protocol.TType.BOOL, (short)34);
  private static final org.apache.thrift.protocol.TField DISABLE_STREAMING_PREAGGREGATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_streaming_preaggregations", org.apache.thrift.protocol.TType.BOOL, (short)36);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_mode", org.apache.thrift.protocol.TType.I32, (short)37);
  private static final org.apache.thrift.protocol.TField RUNTIME_BLOOM_FILTER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_bloom_filter_size", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_WAIT_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_wait_time_ms", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField DISABLE_ROW_RUNTIME_FILTERING_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_row_runtime_filtering", org.apache.thrift.protocol.TType.BOOL, (short)40);
  private static final org.apache.thrift.protocol.TField MAX_NUM_RUNTIME_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_num_runtime_filters", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField PARQUET_ANNOTATE_STRINGS_UTF8_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_annotate_strings_utf8", org.apache.thrift.protocol.TType.BOOL, (short)42);
  private static final org.apache.thrift.protocol.TField PARQUET_FALLBACK_SCHEMA_RESOLUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_fallback_schema_resolution", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField MT_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("mt_dop", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField S3_SKIP_INSERT_STAGING_FIELD_DESC = new org.apache.thrift.protocol.TField("s3_skip_insert_staging", org.apache.thrift.protocol.TType.BOOL, (short)45);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_MIN_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_min_size", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_MAX_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_max_size", org.apache.thrift.protocol.TType.I32, (short)47);
  private static final org.apache.thrift.protocol.TField PREFETCH_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("prefetch_mode", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField STRICT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("strict_mode", org.apache.thrift.protocol.TType.BOOL, (short)49);
  private static final org.apache.thrift.protocol.TField SCRATCH_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("scratch_limit", org.apache.thrift.protocol.TType.I64, (short)50);
  private static final org.apache.thrift.protocol.TField ENABLE_EXPR_REWRITES_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_expr_rewrites", org.apache.thrift.protocol.TType.BOOL, (short)51);
  private static final org.apache.thrift.protocol.TField DECIMAL_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("decimal_v2", org.apache.thrift.protocol.TType.BOOL, (short)52);
  private static final org.apache.thrift.protocol.TField PARQUET_DICTIONARY_FILTERING_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_dictionary_filtering", org.apache.thrift.protocol.TType.BOOL, (short)53);
  private static final org.apache.thrift.protocol.TField PARQUET_ARRAY_RESOLUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_array_resolution", org.apache.thrift.protocol.TType.I32, (short)54);
  private static final org.apache.thrift.protocol.TField PARQUET_READ_STATISTICS_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_read_statistics", org.apache.thrift.protocol.TType.BOOL, (short)55);
  private static final org.apache.thrift.protocol.TField DEFAULT_JOIN_DISTRIBUTION_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_join_distribution_mode", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField DISABLE_CODEGEN_ROWS_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_codegen_rows_threshold", org.apache.thrift.protocol.TType.I32, (short)57);
  private static final org.apache.thrift.protocol.TField DEFAULT_SPILLABLE_BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_spillable_buffer_size", org.apache.thrift.protocol.TType.I64, (short)58);
  private static final org.apache.thrift.protocol.TField MIN_SPILLABLE_BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("min_spillable_buffer_size", org.apache.thrift.protocol.TType.I64, (short)59);
  private static final org.apache.thrift.protocol.TField MAX_ROW_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_row_size", org.apache.thrift.protocol.TType.I64, (short)60);
  private static final org.apache.thrift.protocol.TField IDLE_SESSION_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("idle_session_timeout", org.apache.thrift.protocol.TType.I32, (short)61);
  private static final org.apache.thrift.protocol.TField COMPUTE_STATS_MIN_SAMPLE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("compute_stats_min_sample_size", org.apache.thrift.protocol.TType.I64, (short)62);
  private static final org.apache.thrift.protocol.TField EXEC_TIME_LIMIT_S_FIELD_DESC = new org.apache.thrift.protocol.TField("exec_time_limit_s", org.apache.thrift.protocol.TType.I32, (short)63);
  private static final org.apache.thrift.protocol.TField SHUFFLE_DISTINCT_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("shuffle_distinct_exprs", org.apache.thrift.protocol.TType.BOOL, (short)64);
  private static final org.apache.thrift.protocol.TField MAX_MEM_ESTIMATE_FOR_ADMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_mem_estimate_for_admission", org.apache.thrift.protocol.TType.I64, (short)65);
  private static final org.apache.thrift.protocol.TField THREAD_RESERVATION_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("thread_reservation_limit", org.apache.thrift.protocol.TType.I32, (short)66);
  private static final org.apache.thrift.protocol.TField THREAD_RESERVATION_AGGREGATE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("thread_reservation_aggregate_limit", org.apache.thrift.protocol.TType.I32, (short)67);
  private static final org.apache.thrift.protocol.TField KUDU_READ_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_read_mode", org.apache.thrift.protocol.TType.I32, (short)68);
  private static final org.apache.thrift.protocol.TField ALLOW_ERASURE_CODED_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("allow_erasure_coded_files", org.apache.thrift.protocol.TType.BOOL, (short)69);
  private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.STRING, (short)70);
  private static final org.apache.thrift.protocol.TField SCAN_BYTES_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_bytes_limit", org.apache.thrift.protocol.TType.I64, (short)71);
  private static final org.apache.thrift.protocol.TField CPU_LIMIT_S_FIELD_DESC = new org.apache.thrift.protocol.TField("cpu_limit_s", org.apache.thrift.protocol.TType.I64, (short)72);
  private static final org.apache.thrift.protocol.TField TOPN_BYTES_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("topn_bytes_limit", org.apache.thrift.protocol.TType.I64, (short)73);
  private static final org.apache.thrift.protocol.TField CLIENT_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("client_identifier", org.apache.thrift.protocol.TType.STRING, (short)74);
  private static final org.apache.thrift.protocol.TField RESOURCE_TRACE_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_trace_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)75);
  private static final org.apache.thrift.protocol.TField NUM_REMOTE_EXECUTOR_CANDIDATES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_remote_executor_candidates", org.apache.thrift.protocol.TType.I32, (short)76);
  private static final org.apache.thrift.protocol.TField NUM_ROWS_PRODUCED_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows_produced_limit", org.apache.thrift.protocol.TType.I64, (short)77);
  private static final org.apache.thrift.protocol.TField PLANNER_TESTCASE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("planner_testcase_mode", org.apache.thrift.protocol.TType.BOOL, (short)78);
  private static final org.apache.thrift.protocol.TField DEFAULT_FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("default_file_format", org.apache.thrift.protocol.TType.I32, (short)79);
  private static final org.apache.thrift.protocol.TField PARQUET_TIMESTAMP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_timestamp_type", org.apache.thrift.protocol.TType.I32, (short)80);
  private static final org.apache.thrift.protocol.TField PARQUET_READ_PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_read_page_index", org.apache.thrift.protocol.TType.BOOL, (short)81);
  private static final org.apache.thrift.protocol.TField PARQUET_WRITE_PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_write_page_index", org.apache.thrift.protocol.TType.BOOL, (short)82);
  private static final org.apache.thrift.protocol.TField PARQUET_PAGE_ROW_COUNT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_page_row_count_limit", org.apache.thrift.protocol.TType.I32, (short)83);
  private static final org.apache.thrift.protocol.TField DISABLE_HDFS_NUM_ROWS_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_hdfs_num_rows_estimate", org.apache.thrift.protocol.TType.BOOL, (short)84);
  private static final org.apache.thrift.protocol.TField DEFAULT_HINTS_INSERT_STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("default_hints_insert_statement", org.apache.thrift.protocol.TType.STRING, (short)85);
  private static final org.apache.thrift.protocol.TField SPOOL_QUERY_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("spool_query_results", org.apache.thrift.protocol.TType.BOOL, (short)86);
  private static final org.apache.thrift.protocol.TField DEFAULT_TRANSACTIONAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_transactional_type", org.apache.thrift.protocol.TType.I32, (short)87);
  private static final org.apache.thrift.protocol.TField STATEMENT_EXPRESSION_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement_expression_limit", org.apache.thrift.protocol.TType.I32, (short)88);
  private static final org.apache.thrift.protocol.TField MAX_STATEMENT_LENGTH_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("max_statement_length_bytes", org.apache.thrift.protocol.TType.I32, (short)89);
  private static final org.apache.thrift.protocol.TField DISABLE_DATA_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_data_cache", org.apache.thrift.protocol.TType.BOOL, (short)90);
  private static final org.apache.thrift.protocol.TField MAX_RESULT_SPOOLING_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("max_result_spooling_mem", org.apache.thrift.protocol.TType.I64, (short)91);
  private static final org.apache.thrift.protocol.TField MAX_SPILLED_RESULT_SPOOLING_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("max_spilled_result_spooling_mem", org.apache.thrift.protocol.TType.I64, (short)92);
  private static final org.apache.thrift.protocol.TField DISABLE_HBASE_NUM_ROWS_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_hbase_num_rows_estimate", org.apache.thrift.protocol.TType.BOOL, (short)93);
  private static final org.apache.thrift.protocol.TField FETCH_ROWS_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("fetch_rows_timeout_ms", org.apache.thrift.protocol.TType.I64, (short)94);
  private static final org.apache.thrift.protocol.TField NOW_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("now_string", org.apache.thrift.protocol.TType.STRING, (short)95);
  private static final org.apache.thrift.protocol.TField PARQUET_OBJECT_STORE_SPLIT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("parquet_object_store_split_size", org.apache.thrift.protocol.TType.I64, (short)96);
  private static final org.apache.thrift.protocol.TField MEM_LIMIT_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_limit_executors", org.apache.thrift.protocol.TType.I64, (short)97);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueryOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueryOptionsTupleSchemeFactory());
  }

  private boolean abort_on_error; // optional
  private int max_errors; // optional
  private boolean disable_codegen; // optional
  private int batch_size; // optional
  private int num_nodes; // optional
  private long max_scan_range_length; // optional
  private int num_scanner_threads; // optional
  private String debug_action; // optional
  private long mem_limit; // optional
  private org.apache.impala.thrift.TCompressionCodec compression_codec; // optional
  private int hbase_caching; // optional
  private boolean hbase_cache_blocks; // optional
  private long parquet_file_size; // optional
  private org.apache.impala.thrift.TExplainLevel explain_level; // optional
  private boolean sync_ddl; // optional
  private String request_pool; // optional
  private boolean disable_outermost_topn; // optional
  private int query_timeout_s; // optional
  private long buffer_pool_limit; // optional
  private boolean appx_count_distinct; // optional
  private boolean disable_unsafe_spills; // optional
  private int exec_single_node_rows_threshold; // optional
  private boolean optimize_partition_key_scans; // optional
  private org.apache.impala.thrift.TReplicaPreference replica_preference; // optional
  private boolean schedule_random_replica; // optional
  private boolean disable_streaming_preaggregations; // optional
  private org.apache.impala.thrift.TRuntimeFilterMode runtime_filter_mode; // optional
  private int runtime_bloom_filter_size; // optional
  private int runtime_filter_wait_time_ms; // optional
  private boolean disable_row_runtime_filtering; // optional
  private int max_num_runtime_filters; // optional
  private boolean parquet_annotate_strings_utf8; // optional
  private TParquetFallbackSchemaResolution parquet_fallback_schema_resolution; // optional
  private int mt_dop; // optional
  private boolean s3_skip_insert_staging; // optional
  private int runtime_filter_min_size; // optional
  private int runtime_filter_max_size; // optional
  private org.apache.impala.thrift.TPrefetchMode prefetch_mode; // optional
  private boolean strict_mode; // optional
  private long scratch_limit; // optional
  private boolean enable_expr_rewrites; // optional
  private boolean decimal_v2; // optional
  private boolean parquet_dictionary_filtering; // optional
  private TParquetArrayResolution parquet_array_resolution; // optional
  private boolean parquet_read_statistics; // optional
  private TJoinDistributionMode default_join_distribution_mode; // optional
  private int disable_codegen_rows_threshold; // optional
  private long default_spillable_buffer_size; // optional
  private long min_spillable_buffer_size; // optional
  private long max_row_size; // optional
  private int idle_session_timeout; // optional
  private long compute_stats_min_sample_size; // optional
  private int exec_time_limit_s; // optional
  private boolean shuffle_distinct_exprs; // optional
  private long max_mem_estimate_for_admission; // optional
  private int thread_reservation_limit; // optional
  private int thread_reservation_aggregate_limit; // optional
  private TKuduReadMode kudu_read_mode; // optional
  private boolean allow_erasure_coded_files; // optional
  private String timezone; // optional
  private long scan_bytes_limit; // optional
  private long cpu_limit_s; // optional
  private long topn_bytes_limit; // optional
  private String client_identifier; // optional
  private double resource_trace_ratio; // optional
  private int num_remote_executor_candidates; // optional
  private long num_rows_produced_limit; // optional
  private boolean planner_testcase_mode; // optional
  private org.apache.impala.thrift.THdfsFileFormat default_file_format; // optional
  private TParquetTimestampType parquet_timestamp_type; // optional
  private boolean parquet_read_page_index; // optional
  private boolean parquet_write_page_index; // optional
  private int parquet_page_row_count_limit; // optional
  private boolean disable_hdfs_num_rows_estimate; // optional
  private String default_hints_insert_statement; // optional
  private boolean spool_query_results; // optional
  private TTransactionalType default_transactional_type; // optional
  private int statement_expression_limit; // optional
  private int max_statement_length_bytes; // optional
  private boolean disable_data_cache; // optional
  private long max_result_spooling_mem; // optional
  private long max_spilled_result_spooling_mem; // optional
  private boolean disable_hbase_num_rows_estimate; // optional
  private long fetch_rows_timeout_ms; // optional
  private String now_string; // optional
  private long parquet_object_store_split_size; // optional
  private long mem_limit_executors; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ABORT_ON_ERROR((short)1, "abort_on_error"),
    MAX_ERRORS((short)2, "max_errors"),
    DISABLE_CODEGEN((short)3, "disable_codegen"),
    BATCH_SIZE((short)4, "batch_size"),
    NUM_NODES((short)5, "num_nodes"),
    MAX_SCAN_RANGE_LENGTH((short)6, "max_scan_range_length"),
    NUM_SCANNER_THREADS((short)7, "num_scanner_threads"),
    DEBUG_ACTION((short)11, "debug_action"),
    MEM_LIMIT((short)12, "mem_limit"),
    COMPRESSION_CODEC((short)14, "compression_codec"),
    HBASE_CACHING((short)15, "hbase_caching"),
    HBASE_CACHE_BLOCKS((short)16, "hbase_cache_blocks"),
    PARQUET_FILE_SIZE((short)17, "parquet_file_size"),
    /**
     * 
     * @see org.apache.impala.thrift.TExplainLevel
     */
    EXPLAIN_LEVEL((short)18, "explain_level"),
    SYNC_DDL((short)19, "sync_ddl"),
    REQUEST_POOL((short)20, "request_pool"),
    DISABLE_OUTERMOST_TOPN((short)24, "disable_outermost_topn"),
    QUERY_TIMEOUT_S((short)26, "query_timeout_s"),
    BUFFER_POOL_LIMIT((short)27, "buffer_pool_limit"),
    APPX_COUNT_DISTINCT((short)28, "appx_count_distinct"),
    DISABLE_UNSAFE_SPILLS((short)29, "disable_unsafe_spills"),
    EXEC_SINGLE_NODE_ROWS_THRESHOLD((short)31, "exec_single_node_rows_threshold"),
    OPTIMIZE_PARTITION_KEY_SCANS((short)32, "optimize_partition_key_scans"),
    /**
     * 
     * @see org.apache.impala.thrift.TReplicaPreference
     */
    REPLICA_PREFERENCE((short)33, "replica_preference"),
    SCHEDULE_RANDOM_REPLICA((short)34, "schedule_random_replica"),
    DISABLE_STREAMING_PREAGGREGATIONS((short)36, "disable_streaming_preaggregations"),
    /**
     * 
     * @see org.apache.impala.thrift.TRuntimeFilterMode
     */
    RUNTIME_FILTER_MODE((short)37, "runtime_filter_mode"),
    RUNTIME_BLOOM_FILTER_SIZE((short)38, "runtime_bloom_filter_size"),
    RUNTIME_FILTER_WAIT_TIME_MS((short)39, "runtime_filter_wait_time_ms"),
    DISABLE_ROW_RUNTIME_FILTERING((short)40, "disable_row_runtime_filtering"),
    MAX_NUM_RUNTIME_FILTERS((short)41, "max_num_runtime_filters"),
    PARQUET_ANNOTATE_STRINGS_UTF8((short)42, "parquet_annotate_strings_utf8"),
    /**
     * 
     * @see TParquetFallbackSchemaResolution
     */
    PARQUET_FALLBACK_SCHEMA_RESOLUTION((short)43, "parquet_fallback_schema_resolution"),
    MT_DOP((short)44, "mt_dop"),
    S3_SKIP_INSERT_STAGING((short)45, "s3_skip_insert_staging"),
    RUNTIME_FILTER_MIN_SIZE((short)46, "runtime_filter_min_size"),
    RUNTIME_FILTER_MAX_SIZE((short)47, "runtime_filter_max_size"),
    /**
     * 
     * @see org.apache.impala.thrift.TPrefetchMode
     */
    PREFETCH_MODE((short)48, "prefetch_mode"),
    STRICT_MODE((short)49, "strict_mode"),
    SCRATCH_LIMIT((short)50, "scratch_limit"),
    ENABLE_EXPR_REWRITES((short)51, "enable_expr_rewrites"),
    DECIMAL_V2((short)52, "decimal_v2"),
    PARQUET_DICTIONARY_FILTERING((short)53, "parquet_dictionary_filtering"),
    /**
     * 
     * @see TParquetArrayResolution
     */
    PARQUET_ARRAY_RESOLUTION((short)54, "parquet_array_resolution"),
    PARQUET_READ_STATISTICS((short)55, "parquet_read_statistics"),
    /**
     * 
     * @see TJoinDistributionMode
     */
    DEFAULT_JOIN_DISTRIBUTION_MODE((short)56, "default_join_distribution_mode"),
    DISABLE_CODEGEN_ROWS_THRESHOLD((short)57, "disable_codegen_rows_threshold"),
    DEFAULT_SPILLABLE_BUFFER_SIZE((short)58, "default_spillable_buffer_size"),
    MIN_SPILLABLE_BUFFER_SIZE((short)59, "min_spillable_buffer_size"),
    MAX_ROW_SIZE((short)60, "max_row_size"),
    IDLE_SESSION_TIMEOUT((short)61, "idle_session_timeout"),
    COMPUTE_STATS_MIN_SAMPLE_SIZE((short)62, "compute_stats_min_sample_size"),
    EXEC_TIME_LIMIT_S((short)63, "exec_time_limit_s"),
    SHUFFLE_DISTINCT_EXPRS((short)64, "shuffle_distinct_exprs"),
    MAX_MEM_ESTIMATE_FOR_ADMISSION((short)65, "max_mem_estimate_for_admission"),
    THREAD_RESERVATION_LIMIT((short)66, "thread_reservation_limit"),
    THREAD_RESERVATION_AGGREGATE_LIMIT((short)67, "thread_reservation_aggregate_limit"),
    /**
     * 
     * @see TKuduReadMode
     */
    KUDU_READ_MODE((short)68, "kudu_read_mode"),
    ALLOW_ERASURE_CODED_FILES((short)69, "allow_erasure_coded_files"),
    TIMEZONE((short)70, "timezone"),
    SCAN_BYTES_LIMIT((short)71, "scan_bytes_limit"),
    CPU_LIMIT_S((short)72, "cpu_limit_s"),
    TOPN_BYTES_LIMIT((short)73, "topn_bytes_limit"),
    CLIENT_IDENTIFIER((short)74, "client_identifier"),
    RESOURCE_TRACE_RATIO((short)75, "resource_trace_ratio"),
    NUM_REMOTE_EXECUTOR_CANDIDATES((short)76, "num_remote_executor_candidates"),
    NUM_ROWS_PRODUCED_LIMIT((short)77, "num_rows_produced_limit"),
    PLANNER_TESTCASE_MODE((short)78, "planner_testcase_mode"),
    /**
     * 
     * @see org.apache.impala.thrift.THdfsFileFormat
     */
    DEFAULT_FILE_FORMAT((short)79, "default_file_format"),
    /**
     * 
     * @see TParquetTimestampType
     */
    PARQUET_TIMESTAMP_TYPE((short)80, "parquet_timestamp_type"),
    PARQUET_READ_PAGE_INDEX((short)81, "parquet_read_page_index"),
    PARQUET_WRITE_PAGE_INDEX((short)82, "parquet_write_page_index"),
    PARQUET_PAGE_ROW_COUNT_LIMIT((short)83, "parquet_page_row_count_limit"),
    DISABLE_HDFS_NUM_ROWS_ESTIMATE((short)84, "disable_hdfs_num_rows_estimate"),
    DEFAULT_HINTS_INSERT_STATEMENT((short)85, "default_hints_insert_statement"),
    SPOOL_QUERY_RESULTS((short)86, "spool_query_results"),
    /**
     * 
     * @see TTransactionalType
     */
    DEFAULT_TRANSACTIONAL_TYPE((short)87, "default_transactional_type"),
    STATEMENT_EXPRESSION_LIMIT((short)88, "statement_expression_limit"),
    MAX_STATEMENT_LENGTH_BYTES((short)89, "max_statement_length_bytes"),
    DISABLE_DATA_CACHE((short)90, "disable_data_cache"),
    MAX_RESULT_SPOOLING_MEM((short)91, "max_result_spooling_mem"),
    MAX_SPILLED_RESULT_SPOOLING_MEM((short)92, "max_spilled_result_spooling_mem"),
    DISABLE_HBASE_NUM_ROWS_ESTIMATE((short)93, "disable_hbase_num_rows_estimate"),
    FETCH_ROWS_TIMEOUT_MS((short)94, "fetch_rows_timeout_ms"),
    NOW_STRING((short)95, "now_string"),
    PARQUET_OBJECT_STORE_SPLIT_SIZE((short)96, "parquet_object_store_split_size"),
    MEM_LIMIT_EXECUTORS((short)97, "mem_limit_executors");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ABORT_ON_ERROR
          return ABORT_ON_ERROR;
        case 2: // MAX_ERRORS
          return MAX_ERRORS;
        case 3: // DISABLE_CODEGEN
          return DISABLE_CODEGEN;
        case 4: // BATCH_SIZE
          return BATCH_SIZE;
        case 5: // NUM_NODES
          return NUM_NODES;
        case 6: // MAX_SCAN_RANGE_LENGTH
          return MAX_SCAN_RANGE_LENGTH;
        case 7: // NUM_SCANNER_THREADS
          return NUM_SCANNER_THREADS;
        case 11: // DEBUG_ACTION
          return DEBUG_ACTION;
        case 12: // MEM_LIMIT
          return MEM_LIMIT;
        case 14: // COMPRESSION_CODEC
          return COMPRESSION_CODEC;
        case 15: // HBASE_CACHING
          return HBASE_CACHING;
        case 16: // HBASE_CACHE_BLOCKS
          return HBASE_CACHE_BLOCKS;
        case 17: // PARQUET_FILE_SIZE
          return PARQUET_FILE_SIZE;
        case 18: // EXPLAIN_LEVEL
          return EXPLAIN_LEVEL;
        case 19: // SYNC_DDL
          return SYNC_DDL;
        case 20: // REQUEST_POOL
          return REQUEST_POOL;
        case 24: // DISABLE_OUTERMOST_TOPN
          return DISABLE_OUTERMOST_TOPN;
        case 26: // QUERY_TIMEOUT_S
          return QUERY_TIMEOUT_S;
        case 27: // BUFFER_POOL_LIMIT
          return BUFFER_POOL_LIMIT;
        case 28: // APPX_COUNT_DISTINCT
          return APPX_COUNT_DISTINCT;
        case 29: // DISABLE_UNSAFE_SPILLS
          return DISABLE_UNSAFE_SPILLS;
        case 31: // EXEC_SINGLE_NODE_ROWS_THRESHOLD
          return EXEC_SINGLE_NODE_ROWS_THRESHOLD;
        case 32: // OPTIMIZE_PARTITION_KEY_SCANS
          return OPTIMIZE_PARTITION_KEY_SCANS;
        case 33: // REPLICA_PREFERENCE
          return REPLICA_PREFERENCE;
        case 34: // SCHEDULE_RANDOM_REPLICA
          return SCHEDULE_RANDOM_REPLICA;
        case 36: // DISABLE_STREAMING_PREAGGREGATIONS
          return DISABLE_STREAMING_PREAGGREGATIONS;
        case 37: // RUNTIME_FILTER_MODE
          return RUNTIME_FILTER_MODE;
        case 38: // RUNTIME_BLOOM_FILTER_SIZE
          return RUNTIME_BLOOM_FILTER_SIZE;
        case 39: // RUNTIME_FILTER_WAIT_TIME_MS
          return RUNTIME_FILTER_WAIT_TIME_MS;
        case 40: // DISABLE_ROW_RUNTIME_FILTERING
          return DISABLE_ROW_RUNTIME_FILTERING;
        case 41: // MAX_NUM_RUNTIME_FILTERS
          return MAX_NUM_RUNTIME_FILTERS;
        case 42: // PARQUET_ANNOTATE_STRINGS_UTF8
          return PARQUET_ANNOTATE_STRINGS_UTF8;
        case 43: // PARQUET_FALLBACK_SCHEMA_RESOLUTION
          return PARQUET_FALLBACK_SCHEMA_RESOLUTION;
        case 44: // MT_DOP
          return MT_DOP;
        case 45: // S3_SKIP_INSERT_STAGING
          return S3_SKIP_INSERT_STAGING;
        case 46: // RUNTIME_FILTER_MIN_SIZE
          return RUNTIME_FILTER_MIN_SIZE;
        case 47: // RUNTIME_FILTER_MAX_SIZE
          return RUNTIME_FILTER_MAX_SIZE;
        case 48: // PREFETCH_MODE
          return PREFETCH_MODE;
        case 49: // STRICT_MODE
          return STRICT_MODE;
        case 50: // SCRATCH_LIMIT
          return SCRATCH_LIMIT;
        case 51: // ENABLE_EXPR_REWRITES
          return ENABLE_EXPR_REWRITES;
        case 52: // DECIMAL_V2
          return DECIMAL_V2;
        case 53: // PARQUET_DICTIONARY_FILTERING
          return PARQUET_DICTIONARY_FILTERING;
        case 54: // PARQUET_ARRAY_RESOLUTION
          return PARQUET_ARRAY_RESOLUTION;
        case 55: // PARQUET_READ_STATISTICS
          return PARQUET_READ_STATISTICS;
        case 56: // DEFAULT_JOIN_DISTRIBUTION_MODE
          return DEFAULT_JOIN_DISTRIBUTION_MODE;
        case 57: // DISABLE_CODEGEN_ROWS_THRESHOLD
          return DISABLE_CODEGEN_ROWS_THRESHOLD;
        case 58: // DEFAULT_SPILLABLE_BUFFER_SIZE
          return DEFAULT_SPILLABLE_BUFFER_SIZE;
        case 59: // MIN_SPILLABLE_BUFFER_SIZE
          return MIN_SPILLABLE_BUFFER_SIZE;
        case 60: // MAX_ROW_SIZE
          return MAX_ROW_SIZE;
        case 61: // IDLE_SESSION_TIMEOUT
          return IDLE_SESSION_TIMEOUT;
        case 62: // COMPUTE_STATS_MIN_SAMPLE_SIZE
          return COMPUTE_STATS_MIN_SAMPLE_SIZE;
        case 63: // EXEC_TIME_LIMIT_S
          return EXEC_TIME_LIMIT_S;
        case 64: // SHUFFLE_DISTINCT_EXPRS
          return SHUFFLE_DISTINCT_EXPRS;
        case 65: // MAX_MEM_ESTIMATE_FOR_ADMISSION
          return MAX_MEM_ESTIMATE_FOR_ADMISSION;
        case 66: // THREAD_RESERVATION_LIMIT
          return THREAD_RESERVATION_LIMIT;
        case 67: // THREAD_RESERVATION_AGGREGATE_LIMIT
          return THREAD_RESERVATION_AGGREGATE_LIMIT;
        case 68: // KUDU_READ_MODE
          return KUDU_READ_MODE;
        case 69: // ALLOW_ERASURE_CODED_FILES
          return ALLOW_ERASURE_CODED_FILES;
        case 70: // TIMEZONE
          return TIMEZONE;
        case 71: // SCAN_BYTES_LIMIT
          return SCAN_BYTES_LIMIT;
        case 72: // CPU_LIMIT_S
          return CPU_LIMIT_S;
        case 73: // TOPN_BYTES_LIMIT
          return TOPN_BYTES_LIMIT;
        case 74: // CLIENT_IDENTIFIER
          return CLIENT_IDENTIFIER;
        case 75: // RESOURCE_TRACE_RATIO
          return RESOURCE_TRACE_RATIO;
        case 76: // NUM_REMOTE_EXECUTOR_CANDIDATES
          return NUM_REMOTE_EXECUTOR_CANDIDATES;
        case 77: // NUM_ROWS_PRODUCED_LIMIT
          return NUM_ROWS_PRODUCED_LIMIT;
        case 78: // PLANNER_TESTCASE_MODE
          return PLANNER_TESTCASE_MODE;
        case 79: // DEFAULT_FILE_FORMAT
          return DEFAULT_FILE_FORMAT;
        case 80: // PARQUET_TIMESTAMP_TYPE
          return PARQUET_TIMESTAMP_TYPE;
        case 81: // PARQUET_READ_PAGE_INDEX
          return PARQUET_READ_PAGE_INDEX;
        case 82: // PARQUET_WRITE_PAGE_INDEX
          return PARQUET_WRITE_PAGE_INDEX;
        case 83: // PARQUET_PAGE_ROW_COUNT_LIMIT
          return PARQUET_PAGE_ROW_COUNT_LIMIT;
        case 84: // DISABLE_HDFS_NUM_ROWS_ESTIMATE
          return DISABLE_HDFS_NUM_ROWS_ESTIMATE;
        case 85: // DEFAULT_HINTS_INSERT_STATEMENT
          return DEFAULT_HINTS_INSERT_STATEMENT;
        case 86: // SPOOL_QUERY_RESULTS
          return SPOOL_QUERY_RESULTS;
        case 87: // DEFAULT_TRANSACTIONAL_TYPE
          return DEFAULT_TRANSACTIONAL_TYPE;
        case 88: // STATEMENT_EXPRESSION_LIMIT
          return STATEMENT_EXPRESSION_LIMIT;
        case 89: // MAX_STATEMENT_LENGTH_BYTES
          return MAX_STATEMENT_LENGTH_BYTES;
        case 90: // DISABLE_DATA_CACHE
          return DISABLE_DATA_CACHE;
        case 91: // MAX_RESULT_SPOOLING_MEM
          return MAX_RESULT_SPOOLING_MEM;
        case 92: // MAX_SPILLED_RESULT_SPOOLING_MEM
          return MAX_SPILLED_RESULT_SPOOLING_MEM;
        case 93: // DISABLE_HBASE_NUM_ROWS_ESTIMATE
          return DISABLE_HBASE_NUM_ROWS_ESTIMATE;
        case 94: // FETCH_ROWS_TIMEOUT_MS
          return FETCH_ROWS_TIMEOUT_MS;
        case 95: // NOW_STRING
          return NOW_STRING;
        case 96: // PARQUET_OBJECT_STORE_SPLIT_SIZE
          return PARQUET_OBJECT_STORE_SPLIT_SIZE;
        case 97: // MEM_LIMIT_EXECUTORS
          return MEM_LIMIT_EXECUTORS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ABORT_ON_ERROR_ISSET_ID = 0;
  private static final int __MAX_ERRORS_ISSET_ID = 1;
  private static final int __DISABLE_CODEGEN_ISSET_ID = 2;
  private static final int __BATCH_SIZE_ISSET_ID = 3;
  private static final int __NUM_NODES_ISSET_ID = 4;
  private static final int __MAX_SCAN_RANGE_LENGTH_ISSET_ID = 5;
  private static final int __NUM_SCANNER_THREADS_ISSET_ID = 6;
  private static final int __MEM_LIMIT_ISSET_ID = 7;
  private static final int __HBASE_CACHING_ISSET_ID = 8;
  private static final int __HBASE_CACHE_BLOCKS_ISSET_ID = 9;
  private static final int __PARQUET_FILE_SIZE_ISSET_ID = 10;
  private static final int __SYNC_DDL_ISSET_ID = 11;
  private static final int __DISABLE_OUTERMOST_TOPN_ISSET_ID = 12;
  private static final int __QUERY_TIMEOUT_S_ISSET_ID = 13;
  private static final int __BUFFER_POOL_LIMIT_ISSET_ID = 14;
  private static final int __APPX_COUNT_DISTINCT_ISSET_ID = 15;
  private static final int __DISABLE_UNSAFE_SPILLS_ISSET_ID = 16;
  private static final int __EXEC_SINGLE_NODE_ROWS_THRESHOLD_ISSET_ID = 17;
  private static final int __OPTIMIZE_PARTITION_KEY_SCANS_ISSET_ID = 18;
  private static final int __SCHEDULE_RANDOM_REPLICA_ISSET_ID = 19;
  private static final int __DISABLE_STREAMING_PREAGGREGATIONS_ISSET_ID = 20;
  private static final int __RUNTIME_BLOOM_FILTER_SIZE_ISSET_ID = 21;
  private static final int __RUNTIME_FILTER_WAIT_TIME_MS_ISSET_ID = 22;
  private static final int __DISABLE_ROW_RUNTIME_FILTERING_ISSET_ID = 23;
  private static final int __MAX_NUM_RUNTIME_FILTERS_ISSET_ID = 24;
  private static final int __PARQUET_ANNOTATE_STRINGS_UTF8_ISSET_ID = 25;
  private static final int __MT_DOP_ISSET_ID = 26;
  private static final int __S3_SKIP_INSERT_STAGING_ISSET_ID = 27;
  private static final int __RUNTIME_FILTER_MIN_SIZE_ISSET_ID = 28;
  private static final int __RUNTIME_FILTER_MAX_SIZE_ISSET_ID = 29;
  private static final int __STRICT_MODE_ISSET_ID = 30;
  private static final int __SCRATCH_LIMIT_ISSET_ID = 31;
  private static final int __ENABLE_EXPR_REWRITES_ISSET_ID = 32;
  private static final int __DECIMAL_V2_ISSET_ID = 33;
  private static final int __PARQUET_DICTIONARY_FILTERING_ISSET_ID = 34;
  private static final int __PARQUET_READ_STATISTICS_ISSET_ID = 35;
  private static final int __DISABLE_CODEGEN_ROWS_THRESHOLD_ISSET_ID = 36;
  private static final int __DEFAULT_SPILLABLE_BUFFER_SIZE_ISSET_ID = 37;
  private static final int __MIN_SPILLABLE_BUFFER_SIZE_ISSET_ID = 38;
  private static final int __MAX_ROW_SIZE_ISSET_ID = 39;
  private static final int __IDLE_SESSION_TIMEOUT_ISSET_ID = 40;
  private static final int __COMPUTE_STATS_MIN_SAMPLE_SIZE_ISSET_ID = 41;
  private static final int __EXEC_TIME_LIMIT_S_ISSET_ID = 42;
  private static final int __SHUFFLE_DISTINCT_EXPRS_ISSET_ID = 43;
  private static final int __MAX_MEM_ESTIMATE_FOR_ADMISSION_ISSET_ID = 44;
  private static final int __THREAD_RESERVATION_LIMIT_ISSET_ID = 45;
  private static final int __THREAD_RESERVATION_AGGREGATE_LIMIT_ISSET_ID = 46;
  private static final int __ALLOW_ERASURE_CODED_FILES_ISSET_ID = 47;
  private static final int __SCAN_BYTES_LIMIT_ISSET_ID = 48;
  private static final int __CPU_LIMIT_S_ISSET_ID = 49;
  private static final int __TOPN_BYTES_LIMIT_ISSET_ID = 50;
  private static final int __RESOURCE_TRACE_RATIO_ISSET_ID = 51;
  private static final int __NUM_REMOTE_EXECUTOR_CANDIDATES_ISSET_ID = 52;
  private static final int __NUM_ROWS_PRODUCED_LIMIT_ISSET_ID = 53;
  private static final int __PLANNER_TESTCASE_MODE_ISSET_ID = 54;
  private static final int __PARQUET_READ_PAGE_INDEX_ISSET_ID = 55;
  private static final int __PARQUET_WRITE_PAGE_INDEX_ISSET_ID = 56;
  private static final int __PARQUET_PAGE_ROW_COUNT_LIMIT_ISSET_ID = 57;
  private static final int __DISABLE_HDFS_NUM_ROWS_ESTIMATE_ISSET_ID = 58;
  private static final int __SPOOL_QUERY_RESULTS_ISSET_ID = 59;
  private static final int __STATEMENT_EXPRESSION_LIMIT_ISSET_ID = 60;
  private static final int __MAX_STATEMENT_LENGTH_BYTES_ISSET_ID = 61;
  private static final int __DISABLE_DATA_CACHE_ISSET_ID = 62;
  private static final int __MAX_RESULT_SPOOLING_MEM_ISSET_ID = 63;
  private static final int __MAX_SPILLED_RESULT_SPOOLING_MEM_ISSET_ID = 64;
  private static final int __DISABLE_HBASE_NUM_ROWS_ESTIMATE_ISSET_ID = 65;
  private static final int __FETCH_ROWS_TIMEOUT_MS_ISSET_ID = 66;
  private static final int __PARQUET_OBJECT_STORE_SPLIT_SIZE_ISSET_ID = 67;
  private static final int __MEM_LIMIT_EXECUTORS_ISSET_ID = 68;
  private BitSet __isset_bit_vector = new BitSet(69);
  private static final _Fields optionals[] = {_Fields.ABORT_ON_ERROR,_Fields.MAX_ERRORS,_Fields.DISABLE_CODEGEN,_Fields.BATCH_SIZE,_Fields.NUM_NODES,_Fields.MAX_SCAN_RANGE_LENGTH,_Fields.NUM_SCANNER_THREADS,_Fields.DEBUG_ACTION,_Fields.MEM_LIMIT,_Fields.COMPRESSION_CODEC,_Fields.HBASE_CACHING,_Fields.HBASE_CACHE_BLOCKS,_Fields.PARQUET_FILE_SIZE,_Fields.EXPLAIN_LEVEL,_Fields.SYNC_DDL,_Fields.REQUEST_POOL,_Fields.DISABLE_OUTERMOST_TOPN,_Fields.QUERY_TIMEOUT_S,_Fields.BUFFER_POOL_LIMIT,_Fields.APPX_COUNT_DISTINCT,_Fields.DISABLE_UNSAFE_SPILLS,_Fields.EXEC_SINGLE_NODE_ROWS_THRESHOLD,_Fields.OPTIMIZE_PARTITION_KEY_SCANS,_Fields.REPLICA_PREFERENCE,_Fields.SCHEDULE_RANDOM_REPLICA,_Fields.DISABLE_STREAMING_PREAGGREGATIONS,_Fields.RUNTIME_FILTER_MODE,_Fields.RUNTIME_BLOOM_FILTER_SIZE,_Fields.RUNTIME_FILTER_WAIT_TIME_MS,_Fields.DISABLE_ROW_RUNTIME_FILTERING,_Fields.MAX_NUM_RUNTIME_FILTERS,_Fields.PARQUET_ANNOTATE_STRINGS_UTF8,_Fields.PARQUET_FALLBACK_SCHEMA_RESOLUTION,_Fields.MT_DOP,_Fields.S3_SKIP_INSERT_STAGING,_Fields.RUNTIME_FILTER_MIN_SIZE,_Fields.RUNTIME_FILTER_MAX_SIZE,_Fields.PREFETCH_MODE,_Fields.STRICT_MODE,_Fields.SCRATCH_LIMIT,_Fields.ENABLE_EXPR_REWRITES,_Fields.DECIMAL_V2,_Fields.PARQUET_DICTIONARY_FILTERING,_Fields.PARQUET_ARRAY_RESOLUTION,_Fields.PARQUET_READ_STATISTICS,_Fields.DEFAULT_JOIN_DISTRIBUTION_MODE,_Fields.DISABLE_CODEGEN_ROWS_THRESHOLD,_Fields.DEFAULT_SPILLABLE_BUFFER_SIZE,_Fields.MIN_SPILLABLE_BUFFER_SIZE,_Fields.MAX_ROW_SIZE,_Fields.IDLE_SESSION_TIMEOUT,_Fields.COMPUTE_STATS_MIN_SAMPLE_SIZE,_Fields.EXEC_TIME_LIMIT_S,_Fields.SHUFFLE_DISTINCT_EXPRS,_Fields.MAX_MEM_ESTIMATE_FOR_ADMISSION,_Fields.THREAD_RESERVATION_LIMIT,_Fields.THREAD_RESERVATION_AGGREGATE_LIMIT,_Fields.KUDU_READ_MODE,_Fields.ALLOW_ERASURE_CODED_FILES,_Fields.TIMEZONE,_Fields.SCAN_BYTES_LIMIT,_Fields.CPU_LIMIT_S,_Fields.TOPN_BYTES_LIMIT,_Fields.CLIENT_IDENTIFIER,_Fields.RESOURCE_TRACE_RATIO,_Fields.NUM_REMOTE_EXECUTOR_CANDIDATES,_Fields.NUM_ROWS_PRODUCED_LIMIT,_Fields.PLANNER_TESTCASE_MODE,_Fields.DEFAULT_FILE_FORMAT,_Fields.PARQUET_TIMESTAMP_TYPE,_Fields.PARQUET_READ_PAGE_INDEX,_Fields.PARQUET_WRITE_PAGE_INDEX,_Fields.PARQUET_PAGE_ROW_COUNT_LIMIT,_Fields.DISABLE_HDFS_NUM_ROWS_ESTIMATE,_Fields.DEFAULT_HINTS_INSERT_STATEMENT,_Fields.SPOOL_QUERY_RESULTS,_Fields.DEFAULT_TRANSACTIONAL_TYPE,_Fields.STATEMENT_EXPRESSION_LIMIT,_Fields.MAX_STATEMENT_LENGTH_BYTES,_Fields.DISABLE_DATA_CACHE,_Fields.MAX_RESULT_SPOOLING_MEM,_Fields.MAX_SPILLED_RESULT_SPOOLING_MEM,_Fields.DISABLE_HBASE_NUM_ROWS_ESTIMATE,_Fields.FETCH_ROWS_TIMEOUT_MS,_Fields.NOW_STRING,_Fields.PARQUET_OBJECT_STORE_SPLIT_SIZE,_Fields.MEM_LIMIT_EXECUTORS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ABORT_ON_ERROR, new org.apache.thrift.meta_data.FieldMetaData("abort_on_error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_ERRORS, new org.apache.thrift.meta_data.FieldMetaData("max_errors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISABLE_CODEGEN, new org.apache.thrift.meta_data.FieldMetaData("disable_codegen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batch_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_NODES, new org.apache.thrift.meta_data.FieldMetaData("num_nodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_SCAN_RANGE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("max_scan_range_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_SCANNER_THREADS, new org.apache.thrift.meta_data.FieldMetaData("num_scanner_threads", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEBUG_ACTION, new org.apache.thrift.meta_data.FieldMetaData("debug_action", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPRESSION_CODEC, new org.apache.thrift.meta_data.FieldMetaData("compression_codec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCompressionCodec.class)));
    tmpMap.put(_Fields.HBASE_CACHING, new org.apache.thrift.meta_data.FieldMetaData("hbase_caching", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HBASE_CACHE_BLOCKS, new org.apache.thrift.meta_data.FieldMetaData("hbase_cache_blocks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARQUET_FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("parquet_file_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPLAIN_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("explain_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TExplainLevel.class)));
    tmpMap.put(_Fields.SYNC_DDL, new org.apache.thrift.meta_data.FieldMetaData("sync_ddl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REQUEST_POOL, new org.apache.thrift.meta_data.FieldMetaData("request_pool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISABLE_OUTERMOST_TOPN, new org.apache.thrift.meta_data.FieldMetaData("disable_outermost_topn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUERY_TIMEOUT_S, new org.apache.thrift.meta_data.FieldMetaData("query_timeout_s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUFFER_POOL_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("buffer_pool_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPX_COUNT_DISTINCT, new org.apache.thrift.meta_data.FieldMetaData("appx_count_distinct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISABLE_UNSAFE_SPILLS, new org.apache.thrift.meta_data.FieldMetaData("disable_unsafe_spills", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXEC_SINGLE_NODE_ROWS_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("exec_single_node_rows_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTIMIZE_PARTITION_KEY_SCANS, new org.apache.thrift.meta_data.FieldMetaData("optimize_partition_key_scans", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPLICA_PREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("replica_preference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TReplicaPreference.class)));
    tmpMap.put(_Fields.SCHEDULE_RANDOM_REPLICA, new org.apache.thrift.meta_data.FieldMetaData("schedule_random_replica", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISABLE_STREAMING_PREAGGREGATIONS, new org.apache.thrift.meta_data.FieldMetaData("disable_streaming_preaggregations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RUNTIME_FILTER_MODE, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TRuntimeFilterMode.class)));
    tmpMap.put(_Fields.RUNTIME_BLOOM_FILTER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("runtime_bloom_filter_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUNTIME_FILTER_WAIT_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_wait_time_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISABLE_ROW_RUNTIME_FILTERING, new org.apache.thrift.meta_data.FieldMetaData("disable_row_runtime_filtering", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_NUM_RUNTIME_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("max_num_runtime_filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARQUET_ANNOTATE_STRINGS_UTF8, new org.apache.thrift.meta_data.FieldMetaData("parquet_annotate_strings_utf8", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARQUET_FALLBACK_SCHEMA_RESOLUTION, new org.apache.thrift.meta_data.FieldMetaData("parquet_fallback_schema_resolution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TParquetFallbackSchemaResolution.class)));
    tmpMap.put(_Fields.MT_DOP, new org.apache.thrift.meta_data.FieldMetaData("mt_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.S3_SKIP_INSERT_STAGING, new org.apache.thrift.meta_data.FieldMetaData("s3_skip_insert_staging", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RUNTIME_FILTER_MIN_SIZE, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_min_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUNTIME_FILTER_MAX_SIZE, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_max_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PREFETCH_MODE, new org.apache.thrift.meta_data.FieldMetaData("prefetch_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TPrefetchMode.class)));
    tmpMap.put(_Fields.STRICT_MODE, new org.apache.thrift.meta_data.FieldMetaData("strict_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCRATCH_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("scratch_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_EXPR_REWRITES, new org.apache.thrift.meta_data.FieldMetaData("enable_expr_rewrites", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DECIMAL_V2, new org.apache.thrift.meta_data.FieldMetaData("decimal_v2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARQUET_DICTIONARY_FILTERING, new org.apache.thrift.meta_data.FieldMetaData("parquet_dictionary_filtering", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARQUET_ARRAY_RESOLUTION, new org.apache.thrift.meta_data.FieldMetaData("parquet_array_resolution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TParquetArrayResolution.class)));
    tmpMap.put(_Fields.PARQUET_READ_STATISTICS, new org.apache.thrift.meta_data.FieldMetaData("parquet_read_statistics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_JOIN_DISTRIBUTION_MODE, new org.apache.thrift.meta_data.FieldMetaData("default_join_distribution_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJoinDistributionMode.class)));
    tmpMap.put(_Fields.DISABLE_CODEGEN_ROWS_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("disable_codegen_rows_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEFAULT_SPILLABLE_BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("default_spillable_buffer_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_SPILLABLE_BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("min_spillable_buffer_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_ROW_SIZE, new org.apache.thrift.meta_data.FieldMetaData("max_row_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IDLE_SESSION_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("idle_session_timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPUTE_STATS_MIN_SAMPLE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("compute_stats_min_sample_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_TIME_LIMIT_S, new org.apache.thrift.meta_data.FieldMetaData("exec_time_limit_s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHUFFLE_DISTINCT_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("shuffle_distinct_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_MEM_ESTIMATE_FOR_ADMISSION, new org.apache.thrift.meta_data.FieldMetaData("max_mem_estimate_for_admission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.THREAD_RESERVATION_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("thread_reservation_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THREAD_RESERVATION_AGGREGATE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("thread_reservation_aggregate_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KUDU_READ_MODE, new org.apache.thrift.meta_data.FieldMetaData("kudu_read_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TKuduReadMode.class)));
    tmpMap.put(_Fields.ALLOW_ERASURE_CODED_FILES, new org.apache.thrift.meta_data.FieldMetaData("allow_erasure_coded_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCAN_BYTES_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("scan_bytes_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CPU_LIMIT_S, new org.apache.thrift.meta_data.FieldMetaData("cpu_limit_s", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOPN_BYTES_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("topn_bytes_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("client_identifier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_TRACE_RATIO, new org.apache.thrift.meta_data.FieldMetaData("resource_trace_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUM_REMOTE_EXECUTOR_CANDIDATES, new org.apache.thrift.meta_data.FieldMetaData("num_remote_executor_candidates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_ROWS_PRODUCED_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("num_rows_produced_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PLANNER_TESTCASE_MODE, new org.apache.thrift.meta_data.FieldMetaData("planner_testcase_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("default_file_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.THdfsFileFormat.class)));
    tmpMap.put(_Fields.PARQUET_TIMESTAMP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("parquet_timestamp_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TParquetTimestampType.class)));
    tmpMap.put(_Fields.PARQUET_READ_PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("parquet_read_page_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARQUET_WRITE_PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("parquet_write_page_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARQUET_PAGE_ROW_COUNT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("parquet_page_row_count_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISABLE_HDFS_NUM_ROWS_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("disable_hdfs_num_rows_estimate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_HINTS_INSERT_STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("default_hints_insert_statement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPOOL_QUERY_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("spool_query_results", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_TRANSACTIONAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("default_transactional_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTransactionalType.class)));
    tmpMap.put(_Fields.STATEMENT_EXPRESSION_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("statement_expression_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_STATEMENT_LENGTH_BYTES, new org.apache.thrift.meta_data.FieldMetaData("max_statement_length_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISABLE_DATA_CACHE, new org.apache.thrift.meta_data.FieldMetaData("disable_data_cache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_RESULT_SPOOLING_MEM, new org.apache.thrift.meta_data.FieldMetaData("max_result_spooling_mem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_SPILLED_RESULT_SPOOLING_MEM, new org.apache.thrift.meta_data.FieldMetaData("max_spilled_result_spooling_mem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISABLE_HBASE_NUM_ROWS_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("disable_hbase_num_rows_estimate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FETCH_ROWS_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("fetch_rows_timeout_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NOW_STRING, new org.apache.thrift.meta_data.FieldMetaData("now_string", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARQUET_OBJECT_STORE_SPLIT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("parquet_object_store_split_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_LIMIT_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("mem_limit_executors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryOptions.class, metaDataMap);
  }

  public TQueryOptions() {
    this.abort_on_error = false;

    this.max_errors = 100;

    this.disable_codegen = false;

    this.batch_size = 0;

    this.num_nodes = 0;

    this.max_scan_range_length = 0L;

    this.num_scanner_threads = 0;

    this.debug_action = "";

    this.mem_limit = 0L;

    this.hbase_caching = 0;

    this.hbase_cache_blocks = false;

    this.parquet_file_size = 0L;

    this.explain_level = org.apache.impala.thrift.TExplainLevel.STANDARD;

    this.sync_ddl = false;

    this.disable_outermost_topn = false;

    this.query_timeout_s = 0;

    this.appx_count_distinct = false;

    this.disable_unsafe_spills = false;

    this.exec_single_node_rows_threshold = 100;

    this.optimize_partition_key_scans = false;

    this.replica_preference = org.apache.impala.thrift.TReplicaPreference.CACHE_LOCAL;

    this.schedule_random_replica = false;

    this.disable_streaming_preaggregations = false;

    this.runtime_filter_mode = org.apache.impala.thrift.TRuntimeFilterMode.GLOBAL;

    this.runtime_bloom_filter_size = 1048576;

    this.runtime_filter_wait_time_ms = 0;

    this.disable_row_runtime_filtering = false;

    this.max_num_runtime_filters = 10;

    this.parquet_annotate_strings_utf8 = false;

    this.parquet_fallback_schema_resolution = org.apache.impala.thrift.TParquetFallbackSchemaResolution.POSITION;

    this.s3_skip_insert_staging = true;

    this.runtime_filter_min_size = 1048576;

    this.runtime_filter_max_size = 16777216;

    this.prefetch_mode = org.apache.impala.thrift.TPrefetchMode.HT_BUCKET;

    this.strict_mode = false;

    this.scratch_limit = -1L;

    this.enable_expr_rewrites = true;

    this.decimal_v2 = true;

    this.parquet_dictionary_filtering = true;

    this.parquet_array_resolution = org.apache.impala.thrift.TParquetArrayResolution.THREE_LEVEL;

    this.parquet_read_statistics = true;

    this.default_join_distribution_mode = org.apache.impala.thrift.TJoinDistributionMode.BROADCAST;

    this.disable_codegen_rows_threshold = 50000;

    this.default_spillable_buffer_size = 2097152L;

    this.min_spillable_buffer_size = 65536L;

    this.max_row_size = 524288L;

    this.compute_stats_min_sample_size = 1073741824L;

    this.exec_time_limit_s = 0;

    this.shuffle_distinct_exprs = true;

    this.max_mem_estimate_for_admission = 0L;

    this.thread_reservation_limit = 3000;

    this.thread_reservation_aggregate_limit = 0;

    this.kudu_read_mode = org.apache.impala.thrift.TKuduReadMode.DEFAULT;

    this.allow_erasure_coded_files = false;

    this.timezone = "";

    this.scan_bytes_limit = 0L;

    this.cpu_limit_s = 0L;

    this.topn_bytes_limit = 536870912L;

    this.resource_trace_ratio = (double)0;

    this.num_remote_executor_candidates = 3;

    this.num_rows_produced_limit = 0L;

    this.planner_testcase_mode = false;

    this.default_file_format = org.apache.impala.thrift.THdfsFileFormat.TEXT;

    this.parquet_timestamp_type = org.apache.impala.thrift.TParquetTimestampType.INT96_NANOS;

    this.parquet_read_page_index = true;

    this.parquet_write_page_index = true;

    this.disable_hdfs_num_rows_estimate = false;

    this.spool_query_results = false;

    this.default_transactional_type = org.apache.impala.thrift.TTransactionalType.NONE;

    this.statement_expression_limit = 250000;

    this.max_statement_length_bytes = 16777216;

    this.disable_data_cache = false;

    this.max_result_spooling_mem = 104857600L;

    this.max_spilled_result_spooling_mem = 1073741824L;

    this.disable_hbase_num_rows_estimate = false;

    this.fetch_rows_timeout_ms = 10000L;

    this.now_string = "";

    this.parquet_object_store_split_size = 268435456L;

    this.mem_limit_executors = 0L;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryOptions(TQueryOptions other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.abort_on_error = other.abort_on_error;
    this.max_errors = other.max_errors;
    this.disable_codegen = other.disable_codegen;
    this.batch_size = other.batch_size;
    this.num_nodes = other.num_nodes;
    this.max_scan_range_length = other.max_scan_range_length;
    this.num_scanner_threads = other.num_scanner_threads;
    if (other.isSetDebug_action()) {
      this.debug_action = other.debug_action;
    }
    this.mem_limit = other.mem_limit;
    if (other.isSetCompression_codec()) {
      this.compression_codec = new org.apache.impala.thrift.TCompressionCodec(other.compression_codec);
    }
    this.hbase_caching = other.hbase_caching;
    this.hbase_cache_blocks = other.hbase_cache_blocks;
    this.parquet_file_size = other.parquet_file_size;
    if (other.isSetExplain_level()) {
      this.explain_level = other.explain_level;
    }
    this.sync_ddl = other.sync_ddl;
    if (other.isSetRequest_pool()) {
      this.request_pool = other.request_pool;
    }
    this.disable_outermost_topn = other.disable_outermost_topn;
    this.query_timeout_s = other.query_timeout_s;
    this.buffer_pool_limit = other.buffer_pool_limit;
    this.appx_count_distinct = other.appx_count_distinct;
    this.disable_unsafe_spills = other.disable_unsafe_spills;
    this.exec_single_node_rows_threshold = other.exec_single_node_rows_threshold;
    this.optimize_partition_key_scans = other.optimize_partition_key_scans;
    if (other.isSetReplica_preference()) {
      this.replica_preference = other.replica_preference;
    }
    this.schedule_random_replica = other.schedule_random_replica;
    this.disable_streaming_preaggregations = other.disable_streaming_preaggregations;
    if (other.isSetRuntime_filter_mode()) {
      this.runtime_filter_mode = other.runtime_filter_mode;
    }
    this.runtime_bloom_filter_size = other.runtime_bloom_filter_size;
    this.runtime_filter_wait_time_ms = other.runtime_filter_wait_time_ms;
    this.disable_row_runtime_filtering = other.disable_row_runtime_filtering;
    this.max_num_runtime_filters = other.max_num_runtime_filters;
    this.parquet_annotate_strings_utf8 = other.parquet_annotate_strings_utf8;
    if (other.isSetParquet_fallback_schema_resolution()) {
      this.parquet_fallback_schema_resolution = other.parquet_fallback_schema_resolution;
    }
    this.mt_dop = other.mt_dop;
    this.s3_skip_insert_staging = other.s3_skip_insert_staging;
    this.runtime_filter_min_size = other.runtime_filter_min_size;
    this.runtime_filter_max_size = other.runtime_filter_max_size;
    if (other.isSetPrefetch_mode()) {
      this.prefetch_mode = other.prefetch_mode;
    }
    this.strict_mode = other.strict_mode;
    this.scratch_limit = other.scratch_limit;
    this.enable_expr_rewrites = other.enable_expr_rewrites;
    this.decimal_v2 = other.decimal_v2;
    this.parquet_dictionary_filtering = other.parquet_dictionary_filtering;
    if (other.isSetParquet_array_resolution()) {
      this.parquet_array_resolution = other.parquet_array_resolution;
    }
    this.parquet_read_statistics = other.parquet_read_statistics;
    if (other.isSetDefault_join_distribution_mode()) {
      this.default_join_distribution_mode = other.default_join_distribution_mode;
    }
    this.disable_codegen_rows_threshold = other.disable_codegen_rows_threshold;
    this.default_spillable_buffer_size = other.default_spillable_buffer_size;
    this.min_spillable_buffer_size = other.min_spillable_buffer_size;
    this.max_row_size = other.max_row_size;
    this.idle_session_timeout = other.idle_session_timeout;
    this.compute_stats_min_sample_size = other.compute_stats_min_sample_size;
    this.exec_time_limit_s = other.exec_time_limit_s;
    this.shuffle_distinct_exprs = other.shuffle_distinct_exprs;
    this.max_mem_estimate_for_admission = other.max_mem_estimate_for_admission;
    this.thread_reservation_limit = other.thread_reservation_limit;
    this.thread_reservation_aggregate_limit = other.thread_reservation_aggregate_limit;
    if (other.isSetKudu_read_mode()) {
      this.kudu_read_mode = other.kudu_read_mode;
    }
    this.allow_erasure_coded_files = other.allow_erasure_coded_files;
    if (other.isSetTimezone()) {
      this.timezone = other.timezone;
    }
    this.scan_bytes_limit = other.scan_bytes_limit;
    this.cpu_limit_s = other.cpu_limit_s;
    this.topn_bytes_limit = other.topn_bytes_limit;
    if (other.isSetClient_identifier()) {
      this.client_identifier = other.client_identifier;
    }
    this.resource_trace_ratio = other.resource_trace_ratio;
    this.num_remote_executor_candidates = other.num_remote_executor_candidates;
    this.num_rows_produced_limit = other.num_rows_produced_limit;
    this.planner_testcase_mode = other.planner_testcase_mode;
    if (other.isSetDefault_file_format()) {
      this.default_file_format = other.default_file_format;
    }
    if (other.isSetParquet_timestamp_type()) {
      this.parquet_timestamp_type = other.parquet_timestamp_type;
    }
    this.parquet_read_page_index = other.parquet_read_page_index;
    this.parquet_write_page_index = other.parquet_write_page_index;
    this.parquet_page_row_count_limit = other.parquet_page_row_count_limit;
    this.disable_hdfs_num_rows_estimate = other.disable_hdfs_num_rows_estimate;
    if (other.isSetDefault_hints_insert_statement()) {
      this.default_hints_insert_statement = other.default_hints_insert_statement;
    }
    this.spool_query_results = other.spool_query_results;
    if (other.isSetDefault_transactional_type()) {
      this.default_transactional_type = other.default_transactional_type;
    }
    this.statement_expression_limit = other.statement_expression_limit;
    this.max_statement_length_bytes = other.max_statement_length_bytes;
    this.disable_data_cache = other.disable_data_cache;
    this.max_result_spooling_mem = other.max_result_spooling_mem;
    this.max_spilled_result_spooling_mem = other.max_spilled_result_spooling_mem;
    this.disable_hbase_num_rows_estimate = other.disable_hbase_num_rows_estimate;
    this.fetch_rows_timeout_ms = other.fetch_rows_timeout_ms;
    if (other.isSetNow_string()) {
      this.now_string = other.now_string;
    }
    this.parquet_object_store_split_size = other.parquet_object_store_split_size;
    this.mem_limit_executors = other.mem_limit_executors;
  }

  public TQueryOptions deepCopy() {
    return new TQueryOptions(this);
  }

  @Override
  public void clear() {
    this.abort_on_error = false;

    this.max_errors = 100;

    this.disable_codegen = false;

    this.batch_size = 0;

    this.num_nodes = 0;

    this.max_scan_range_length = 0L;

    this.num_scanner_threads = 0;

    this.debug_action = "";

    this.mem_limit = 0L;

    this.compression_codec = null;
    this.hbase_caching = 0;

    this.hbase_cache_blocks = false;

    this.parquet_file_size = 0L;

    this.explain_level = org.apache.impala.thrift.TExplainLevel.STANDARD;

    this.sync_ddl = false;

    this.request_pool = null;
    this.disable_outermost_topn = false;

    this.query_timeout_s = 0;

    setBuffer_pool_limitIsSet(false);
    this.buffer_pool_limit = 0;
    this.appx_count_distinct = false;

    this.disable_unsafe_spills = false;

    this.exec_single_node_rows_threshold = 100;

    this.optimize_partition_key_scans = false;

    this.replica_preference = org.apache.impala.thrift.TReplicaPreference.CACHE_LOCAL;

    this.schedule_random_replica = false;

    this.disable_streaming_preaggregations = false;

    this.runtime_filter_mode = org.apache.impala.thrift.TRuntimeFilterMode.GLOBAL;

    this.runtime_bloom_filter_size = 1048576;

    this.runtime_filter_wait_time_ms = 0;

    this.disable_row_runtime_filtering = false;

    this.max_num_runtime_filters = 10;

    this.parquet_annotate_strings_utf8 = false;

    this.parquet_fallback_schema_resolution = org.apache.impala.thrift.TParquetFallbackSchemaResolution.POSITION;

    setMt_dopIsSet(false);
    this.mt_dop = 0;
    this.s3_skip_insert_staging = true;

    this.runtime_filter_min_size = 1048576;

    this.runtime_filter_max_size = 16777216;

    this.prefetch_mode = org.apache.impala.thrift.TPrefetchMode.HT_BUCKET;

    this.strict_mode = false;

    this.scratch_limit = -1L;

    this.enable_expr_rewrites = true;

    this.decimal_v2 = true;

    this.parquet_dictionary_filtering = true;

    this.parquet_array_resolution = org.apache.impala.thrift.TParquetArrayResolution.THREE_LEVEL;

    this.parquet_read_statistics = true;

    this.default_join_distribution_mode = org.apache.impala.thrift.TJoinDistributionMode.BROADCAST;

    this.disable_codegen_rows_threshold = 50000;

    this.default_spillable_buffer_size = 2097152L;

    this.min_spillable_buffer_size = 65536L;

    this.max_row_size = 524288L;

    setIdle_session_timeoutIsSet(false);
    this.idle_session_timeout = 0;
    this.compute_stats_min_sample_size = 1073741824L;

    this.exec_time_limit_s = 0;

    this.shuffle_distinct_exprs = true;

    this.max_mem_estimate_for_admission = 0L;

    this.thread_reservation_limit = 3000;

    this.thread_reservation_aggregate_limit = 0;

    this.kudu_read_mode = org.apache.impala.thrift.TKuduReadMode.DEFAULT;

    this.allow_erasure_coded_files = false;

    this.timezone = "";

    this.scan_bytes_limit = 0L;

    this.cpu_limit_s = 0L;

    this.topn_bytes_limit = 536870912L;

    this.client_identifier = null;
    this.resource_trace_ratio = (double)0;

    this.num_remote_executor_candidates = 3;

    this.num_rows_produced_limit = 0L;

    this.planner_testcase_mode = false;

    this.default_file_format = org.apache.impala.thrift.THdfsFileFormat.TEXT;

    this.parquet_timestamp_type = org.apache.impala.thrift.TParquetTimestampType.INT96_NANOS;

    this.parquet_read_page_index = true;

    this.parquet_write_page_index = true;

    setParquet_page_row_count_limitIsSet(false);
    this.parquet_page_row_count_limit = 0;
    this.disable_hdfs_num_rows_estimate = false;

    this.default_hints_insert_statement = null;
    this.spool_query_results = false;

    this.default_transactional_type = org.apache.impala.thrift.TTransactionalType.NONE;

    this.statement_expression_limit = 250000;

    this.max_statement_length_bytes = 16777216;

    this.disable_data_cache = false;

    this.max_result_spooling_mem = 104857600L;

    this.max_spilled_result_spooling_mem = 1073741824L;

    this.disable_hbase_num_rows_estimate = false;

    this.fetch_rows_timeout_ms = 10000L;

    this.now_string = "";

    this.parquet_object_store_split_size = 268435456L;

    this.mem_limit_executors = 0L;

  }

  public boolean isAbort_on_error() {
    return this.abort_on_error;
  }

  public void setAbort_on_error(boolean abort_on_error) {
    this.abort_on_error = abort_on_error;
    setAbort_on_errorIsSet(true);
  }

  public void unsetAbort_on_error() {
    __isset_bit_vector.clear(__ABORT_ON_ERROR_ISSET_ID);
  }

  /** Returns true if field abort_on_error is set (has been assigned a value) and false otherwise */
  public boolean isSetAbort_on_error() {
    return __isset_bit_vector.get(__ABORT_ON_ERROR_ISSET_ID);
  }

  public void setAbort_on_errorIsSet(boolean value) {
    __isset_bit_vector.set(__ABORT_ON_ERROR_ISSET_ID, value);
  }

  public int getMax_errors() {
    return this.max_errors;
  }

  public void setMax_errors(int max_errors) {
    this.max_errors = max_errors;
    setMax_errorsIsSet(true);
  }

  public void unsetMax_errors() {
    __isset_bit_vector.clear(__MAX_ERRORS_ISSET_ID);
  }

  /** Returns true if field max_errors is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_errors() {
    return __isset_bit_vector.get(__MAX_ERRORS_ISSET_ID);
  }

  public void setMax_errorsIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_ERRORS_ISSET_ID, value);
  }

  public boolean isDisable_codegen() {
    return this.disable_codegen;
  }

  public void setDisable_codegen(boolean disable_codegen) {
    this.disable_codegen = disable_codegen;
    setDisable_codegenIsSet(true);
  }

  public void unsetDisable_codegen() {
    __isset_bit_vector.clear(__DISABLE_CODEGEN_ISSET_ID);
  }

  /** Returns true if field disable_codegen is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_codegen() {
    return __isset_bit_vector.get(__DISABLE_CODEGEN_ISSET_ID);
  }

  public void setDisable_codegenIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_CODEGEN_ISSET_ID, value);
  }

  public int getBatch_size() {
    return this.batch_size;
  }

  public void setBatch_size(int batch_size) {
    this.batch_size = batch_size;
    setBatch_sizeIsSet(true);
  }

  public void unsetBatch_size() {
    __isset_bit_vector.clear(__BATCH_SIZE_ISSET_ID);
  }

  /** Returns true if field batch_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBatch_size() {
    return __isset_bit_vector.get(__BATCH_SIZE_ISSET_ID);
  }

  public void setBatch_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__BATCH_SIZE_ISSET_ID, value);
  }

  public int getNum_nodes() {
    return this.num_nodes;
  }

  public void setNum_nodes(int num_nodes) {
    this.num_nodes = num_nodes;
    setNum_nodesIsSet(true);
  }

  public void unsetNum_nodes() {
    __isset_bit_vector.clear(__NUM_NODES_ISSET_ID);
  }

  /** Returns true if field num_nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_nodes() {
    return __isset_bit_vector.get(__NUM_NODES_ISSET_ID);
  }

  public void setNum_nodesIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_NODES_ISSET_ID, value);
  }

  public long getMax_scan_range_length() {
    return this.max_scan_range_length;
  }

  public void setMax_scan_range_length(long max_scan_range_length) {
    this.max_scan_range_length = max_scan_range_length;
    setMax_scan_range_lengthIsSet(true);
  }

  public void unsetMax_scan_range_length() {
    __isset_bit_vector.clear(__MAX_SCAN_RANGE_LENGTH_ISSET_ID);
  }

  /** Returns true if field max_scan_range_length is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_scan_range_length() {
    return __isset_bit_vector.get(__MAX_SCAN_RANGE_LENGTH_ISSET_ID);
  }

  public void setMax_scan_range_lengthIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_SCAN_RANGE_LENGTH_ISSET_ID, value);
  }

  public int getNum_scanner_threads() {
    return this.num_scanner_threads;
  }

  public void setNum_scanner_threads(int num_scanner_threads) {
    this.num_scanner_threads = num_scanner_threads;
    setNum_scanner_threadsIsSet(true);
  }

  public void unsetNum_scanner_threads() {
    __isset_bit_vector.clear(__NUM_SCANNER_THREADS_ISSET_ID);
  }

  /** Returns true if field num_scanner_threads is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_scanner_threads() {
    return __isset_bit_vector.get(__NUM_SCANNER_THREADS_ISSET_ID);
  }

  public void setNum_scanner_threadsIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_SCANNER_THREADS_ISSET_ID, value);
  }

  public String getDebug_action() {
    return this.debug_action;
  }

  public void setDebug_action(String debug_action) {
    this.debug_action = debug_action;
  }

  public void unsetDebug_action() {
    this.debug_action = null;
  }

  /** Returns true if field debug_action is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_action() {
    return this.debug_action != null;
  }

  public void setDebug_actionIsSet(boolean value) {
    if (!value) {
      this.debug_action = null;
    }
  }

  public long getMem_limit() {
    return this.mem_limit;
  }

  public void setMem_limit(long mem_limit) {
    this.mem_limit = mem_limit;
    setMem_limitIsSet(true);
  }

  public void unsetMem_limit() {
    __isset_bit_vector.clear(__MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_limit() {
    return __isset_bit_vector.get(__MEM_LIMIT_ISSET_ID);
  }

  public void setMem_limitIsSet(boolean value) {
    __isset_bit_vector.set(__MEM_LIMIT_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TCompressionCodec getCompression_codec() {
    return this.compression_codec;
  }

  public void setCompression_codec(org.apache.impala.thrift.TCompressionCodec compression_codec) {
    this.compression_codec = compression_codec;
  }

  public void unsetCompression_codec() {
    this.compression_codec = null;
  }

  /** Returns true if field compression_codec is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression_codec() {
    return this.compression_codec != null;
  }

  public void setCompression_codecIsSet(boolean value) {
    if (!value) {
      this.compression_codec = null;
    }
  }

  public int getHbase_caching() {
    return this.hbase_caching;
  }

  public void setHbase_caching(int hbase_caching) {
    this.hbase_caching = hbase_caching;
    setHbase_cachingIsSet(true);
  }

  public void unsetHbase_caching() {
    __isset_bit_vector.clear(__HBASE_CACHING_ISSET_ID);
  }

  /** Returns true if field hbase_caching is set (has been assigned a value) and false otherwise */
  public boolean isSetHbase_caching() {
    return __isset_bit_vector.get(__HBASE_CACHING_ISSET_ID);
  }

  public void setHbase_cachingIsSet(boolean value) {
    __isset_bit_vector.set(__HBASE_CACHING_ISSET_ID, value);
  }

  public boolean isHbase_cache_blocks() {
    return this.hbase_cache_blocks;
  }

  public void setHbase_cache_blocks(boolean hbase_cache_blocks) {
    this.hbase_cache_blocks = hbase_cache_blocks;
    setHbase_cache_blocksIsSet(true);
  }

  public void unsetHbase_cache_blocks() {
    __isset_bit_vector.clear(__HBASE_CACHE_BLOCKS_ISSET_ID);
  }

  /** Returns true if field hbase_cache_blocks is set (has been assigned a value) and false otherwise */
  public boolean isSetHbase_cache_blocks() {
    return __isset_bit_vector.get(__HBASE_CACHE_BLOCKS_ISSET_ID);
  }

  public void setHbase_cache_blocksIsSet(boolean value) {
    __isset_bit_vector.set(__HBASE_CACHE_BLOCKS_ISSET_ID, value);
  }

  public long getParquet_file_size() {
    return this.parquet_file_size;
  }

  public void setParquet_file_size(long parquet_file_size) {
    this.parquet_file_size = parquet_file_size;
    setParquet_file_sizeIsSet(true);
  }

  public void unsetParquet_file_size() {
    __isset_bit_vector.clear(__PARQUET_FILE_SIZE_ISSET_ID);
  }

  /** Returns true if field parquet_file_size is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_file_size() {
    return __isset_bit_vector.get(__PARQUET_FILE_SIZE_ISSET_ID);
  }

  public void setParquet_file_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__PARQUET_FILE_SIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.impala.thrift.TExplainLevel
   */
  public org.apache.impala.thrift.TExplainLevel getExplain_level() {
    return this.explain_level;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TExplainLevel
   */
  public void setExplain_level(org.apache.impala.thrift.TExplainLevel explain_level) {
    this.explain_level = explain_level;
  }

  public void unsetExplain_level() {
    this.explain_level = null;
  }

  /** Returns true if field explain_level is set (has been assigned a value) and false otherwise */
  public boolean isSetExplain_level() {
    return this.explain_level != null;
  }

  public void setExplain_levelIsSet(boolean value) {
    if (!value) {
      this.explain_level = null;
    }
  }

  public boolean isSync_ddl() {
    return this.sync_ddl;
  }

  public void setSync_ddl(boolean sync_ddl) {
    this.sync_ddl = sync_ddl;
    setSync_ddlIsSet(true);
  }

  public void unsetSync_ddl() {
    __isset_bit_vector.clear(__SYNC_DDL_ISSET_ID);
  }

  /** Returns true if field sync_ddl is set (has been assigned a value) and false otherwise */
  public boolean isSetSync_ddl() {
    return __isset_bit_vector.get(__SYNC_DDL_ISSET_ID);
  }

  public void setSync_ddlIsSet(boolean value) {
    __isset_bit_vector.set(__SYNC_DDL_ISSET_ID, value);
  }

  public String getRequest_pool() {
    return this.request_pool;
  }

  public void setRequest_pool(String request_pool) {
    this.request_pool = request_pool;
  }

  public void unsetRequest_pool() {
    this.request_pool = null;
  }

  /** Returns true if field request_pool is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_pool() {
    return this.request_pool != null;
  }

  public void setRequest_poolIsSet(boolean value) {
    if (!value) {
      this.request_pool = null;
    }
  }

  public boolean isDisable_outermost_topn() {
    return this.disable_outermost_topn;
  }

  public void setDisable_outermost_topn(boolean disable_outermost_topn) {
    this.disable_outermost_topn = disable_outermost_topn;
    setDisable_outermost_topnIsSet(true);
  }

  public void unsetDisable_outermost_topn() {
    __isset_bit_vector.clear(__DISABLE_OUTERMOST_TOPN_ISSET_ID);
  }

  /** Returns true if field disable_outermost_topn is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_outermost_topn() {
    return __isset_bit_vector.get(__DISABLE_OUTERMOST_TOPN_ISSET_ID);
  }

  public void setDisable_outermost_topnIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_OUTERMOST_TOPN_ISSET_ID, value);
  }

  public int getQuery_timeout_s() {
    return this.query_timeout_s;
  }

  public void setQuery_timeout_s(int query_timeout_s) {
    this.query_timeout_s = query_timeout_s;
    setQuery_timeout_sIsSet(true);
  }

  public void unsetQuery_timeout_s() {
    __isset_bit_vector.clear(__QUERY_TIMEOUT_S_ISSET_ID);
  }

  /** Returns true if field query_timeout_s is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_timeout_s() {
    return __isset_bit_vector.get(__QUERY_TIMEOUT_S_ISSET_ID);
  }

  public void setQuery_timeout_sIsSet(boolean value) {
    __isset_bit_vector.set(__QUERY_TIMEOUT_S_ISSET_ID, value);
  }

  public long getBuffer_pool_limit() {
    return this.buffer_pool_limit;
  }

  public void setBuffer_pool_limit(long buffer_pool_limit) {
    this.buffer_pool_limit = buffer_pool_limit;
    setBuffer_pool_limitIsSet(true);
  }

  public void unsetBuffer_pool_limit() {
    __isset_bit_vector.clear(__BUFFER_POOL_LIMIT_ISSET_ID);
  }

  /** Returns true if field buffer_pool_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffer_pool_limit() {
    return __isset_bit_vector.get(__BUFFER_POOL_LIMIT_ISSET_ID);
  }

  public void setBuffer_pool_limitIsSet(boolean value) {
    __isset_bit_vector.set(__BUFFER_POOL_LIMIT_ISSET_ID, value);
  }

  public boolean isAppx_count_distinct() {
    return this.appx_count_distinct;
  }

  public void setAppx_count_distinct(boolean appx_count_distinct) {
    this.appx_count_distinct = appx_count_distinct;
    setAppx_count_distinctIsSet(true);
  }

  public void unsetAppx_count_distinct() {
    __isset_bit_vector.clear(__APPX_COUNT_DISTINCT_ISSET_ID);
  }

  /** Returns true if field appx_count_distinct is set (has been assigned a value) and false otherwise */
  public boolean isSetAppx_count_distinct() {
    return __isset_bit_vector.get(__APPX_COUNT_DISTINCT_ISSET_ID);
  }

  public void setAppx_count_distinctIsSet(boolean value) {
    __isset_bit_vector.set(__APPX_COUNT_DISTINCT_ISSET_ID, value);
  }

  public boolean isDisable_unsafe_spills() {
    return this.disable_unsafe_spills;
  }

  public void setDisable_unsafe_spills(boolean disable_unsafe_spills) {
    this.disable_unsafe_spills = disable_unsafe_spills;
    setDisable_unsafe_spillsIsSet(true);
  }

  public void unsetDisable_unsafe_spills() {
    __isset_bit_vector.clear(__DISABLE_UNSAFE_SPILLS_ISSET_ID);
  }

  /** Returns true if field disable_unsafe_spills is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_unsafe_spills() {
    return __isset_bit_vector.get(__DISABLE_UNSAFE_SPILLS_ISSET_ID);
  }

  public void setDisable_unsafe_spillsIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_UNSAFE_SPILLS_ISSET_ID, value);
  }

  public int getExec_single_node_rows_threshold() {
    return this.exec_single_node_rows_threshold;
  }

  public void setExec_single_node_rows_threshold(int exec_single_node_rows_threshold) {
    this.exec_single_node_rows_threshold = exec_single_node_rows_threshold;
    setExec_single_node_rows_thresholdIsSet(true);
  }

  public void unsetExec_single_node_rows_threshold() {
    __isset_bit_vector.clear(__EXEC_SINGLE_NODE_ROWS_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field exec_single_node_rows_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetExec_single_node_rows_threshold() {
    return __isset_bit_vector.get(__EXEC_SINGLE_NODE_ROWS_THRESHOLD_ISSET_ID);
  }

  public void setExec_single_node_rows_thresholdIsSet(boolean value) {
    __isset_bit_vector.set(__EXEC_SINGLE_NODE_ROWS_THRESHOLD_ISSET_ID, value);
  }

  public boolean isOptimize_partition_key_scans() {
    return this.optimize_partition_key_scans;
  }

  public void setOptimize_partition_key_scans(boolean optimize_partition_key_scans) {
    this.optimize_partition_key_scans = optimize_partition_key_scans;
    setOptimize_partition_key_scansIsSet(true);
  }

  public void unsetOptimize_partition_key_scans() {
    __isset_bit_vector.clear(__OPTIMIZE_PARTITION_KEY_SCANS_ISSET_ID);
  }

  /** Returns true if field optimize_partition_key_scans is set (has been assigned a value) and false otherwise */
  public boolean isSetOptimize_partition_key_scans() {
    return __isset_bit_vector.get(__OPTIMIZE_PARTITION_KEY_SCANS_ISSET_ID);
  }

  public void setOptimize_partition_key_scansIsSet(boolean value) {
    __isset_bit_vector.set(__OPTIMIZE_PARTITION_KEY_SCANS_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.impala.thrift.TReplicaPreference
   */
  public org.apache.impala.thrift.TReplicaPreference getReplica_preference() {
    return this.replica_preference;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TReplicaPreference
   */
  public void setReplica_preference(org.apache.impala.thrift.TReplicaPreference replica_preference) {
    this.replica_preference = replica_preference;
  }

  public void unsetReplica_preference() {
    this.replica_preference = null;
  }

  /** Returns true if field replica_preference is set (has been assigned a value) and false otherwise */
  public boolean isSetReplica_preference() {
    return this.replica_preference != null;
  }

  public void setReplica_preferenceIsSet(boolean value) {
    if (!value) {
      this.replica_preference = null;
    }
  }

  public boolean isSchedule_random_replica() {
    return this.schedule_random_replica;
  }

  public void setSchedule_random_replica(boolean schedule_random_replica) {
    this.schedule_random_replica = schedule_random_replica;
    setSchedule_random_replicaIsSet(true);
  }

  public void unsetSchedule_random_replica() {
    __isset_bit_vector.clear(__SCHEDULE_RANDOM_REPLICA_ISSET_ID);
  }

  /** Returns true if field schedule_random_replica is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedule_random_replica() {
    return __isset_bit_vector.get(__SCHEDULE_RANDOM_REPLICA_ISSET_ID);
  }

  public void setSchedule_random_replicaIsSet(boolean value) {
    __isset_bit_vector.set(__SCHEDULE_RANDOM_REPLICA_ISSET_ID, value);
  }

  public boolean isDisable_streaming_preaggregations() {
    return this.disable_streaming_preaggregations;
  }

  public void setDisable_streaming_preaggregations(boolean disable_streaming_preaggregations) {
    this.disable_streaming_preaggregations = disable_streaming_preaggregations;
    setDisable_streaming_preaggregationsIsSet(true);
  }

  public void unsetDisable_streaming_preaggregations() {
    __isset_bit_vector.clear(__DISABLE_STREAMING_PREAGGREGATIONS_ISSET_ID);
  }

  /** Returns true if field disable_streaming_preaggregations is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_streaming_preaggregations() {
    return __isset_bit_vector.get(__DISABLE_STREAMING_PREAGGREGATIONS_ISSET_ID);
  }

  public void setDisable_streaming_preaggregationsIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_STREAMING_PREAGGREGATIONS_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.impala.thrift.TRuntimeFilterMode
   */
  public org.apache.impala.thrift.TRuntimeFilterMode getRuntime_filter_mode() {
    return this.runtime_filter_mode;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TRuntimeFilterMode
   */
  public void setRuntime_filter_mode(org.apache.impala.thrift.TRuntimeFilterMode runtime_filter_mode) {
    this.runtime_filter_mode = runtime_filter_mode;
  }

  public void unsetRuntime_filter_mode() {
    this.runtime_filter_mode = null;
  }

  /** Returns true if field runtime_filter_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_mode() {
    return this.runtime_filter_mode != null;
  }

  public void setRuntime_filter_modeIsSet(boolean value) {
    if (!value) {
      this.runtime_filter_mode = null;
    }
  }

  public int getRuntime_bloom_filter_size() {
    return this.runtime_bloom_filter_size;
  }

  public void setRuntime_bloom_filter_size(int runtime_bloom_filter_size) {
    this.runtime_bloom_filter_size = runtime_bloom_filter_size;
    setRuntime_bloom_filter_sizeIsSet(true);
  }

  public void unsetRuntime_bloom_filter_size() {
    __isset_bit_vector.clear(__RUNTIME_BLOOM_FILTER_SIZE_ISSET_ID);
  }

  /** Returns true if field runtime_bloom_filter_size is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_bloom_filter_size() {
    return __isset_bit_vector.get(__RUNTIME_BLOOM_FILTER_SIZE_ISSET_ID);
  }

  public void setRuntime_bloom_filter_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__RUNTIME_BLOOM_FILTER_SIZE_ISSET_ID, value);
  }

  public int getRuntime_filter_wait_time_ms() {
    return this.runtime_filter_wait_time_ms;
  }

  public void setRuntime_filter_wait_time_ms(int runtime_filter_wait_time_ms) {
    this.runtime_filter_wait_time_ms = runtime_filter_wait_time_ms;
    setRuntime_filter_wait_time_msIsSet(true);
  }

  public void unsetRuntime_filter_wait_time_ms() {
    __isset_bit_vector.clear(__RUNTIME_FILTER_WAIT_TIME_MS_ISSET_ID);
  }

  /** Returns true if field runtime_filter_wait_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_wait_time_ms() {
    return __isset_bit_vector.get(__RUNTIME_FILTER_WAIT_TIME_MS_ISSET_ID);
  }

  public void setRuntime_filter_wait_time_msIsSet(boolean value) {
    __isset_bit_vector.set(__RUNTIME_FILTER_WAIT_TIME_MS_ISSET_ID, value);
  }

  public boolean isDisable_row_runtime_filtering() {
    return this.disable_row_runtime_filtering;
  }

  public void setDisable_row_runtime_filtering(boolean disable_row_runtime_filtering) {
    this.disable_row_runtime_filtering = disable_row_runtime_filtering;
    setDisable_row_runtime_filteringIsSet(true);
  }

  public void unsetDisable_row_runtime_filtering() {
    __isset_bit_vector.clear(__DISABLE_ROW_RUNTIME_FILTERING_ISSET_ID);
  }

  /** Returns true if field disable_row_runtime_filtering is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_row_runtime_filtering() {
    return __isset_bit_vector.get(__DISABLE_ROW_RUNTIME_FILTERING_ISSET_ID);
  }

  public void setDisable_row_runtime_filteringIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_ROW_RUNTIME_FILTERING_ISSET_ID, value);
  }

  public int getMax_num_runtime_filters() {
    return this.max_num_runtime_filters;
  }

  public void setMax_num_runtime_filters(int max_num_runtime_filters) {
    this.max_num_runtime_filters = max_num_runtime_filters;
    setMax_num_runtime_filtersIsSet(true);
  }

  public void unsetMax_num_runtime_filters() {
    __isset_bit_vector.clear(__MAX_NUM_RUNTIME_FILTERS_ISSET_ID);
  }

  /** Returns true if field max_num_runtime_filters is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_num_runtime_filters() {
    return __isset_bit_vector.get(__MAX_NUM_RUNTIME_FILTERS_ISSET_ID);
  }

  public void setMax_num_runtime_filtersIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_NUM_RUNTIME_FILTERS_ISSET_ID, value);
  }

  public boolean isParquet_annotate_strings_utf8() {
    return this.parquet_annotate_strings_utf8;
  }

  public void setParquet_annotate_strings_utf8(boolean parquet_annotate_strings_utf8) {
    this.parquet_annotate_strings_utf8 = parquet_annotate_strings_utf8;
    setParquet_annotate_strings_utf8IsSet(true);
  }

  public void unsetParquet_annotate_strings_utf8() {
    __isset_bit_vector.clear(__PARQUET_ANNOTATE_STRINGS_UTF8_ISSET_ID);
  }

  /** Returns true if field parquet_annotate_strings_utf8 is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_annotate_strings_utf8() {
    return __isset_bit_vector.get(__PARQUET_ANNOTATE_STRINGS_UTF8_ISSET_ID);
  }

  public void setParquet_annotate_strings_utf8IsSet(boolean value) {
    __isset_bit_vector.set(__PARQUET_ANNOTATE_STRINGS_UTF8_ISSET_ID, value);
  }

  /**
   * 
   * @see TParquetFallbackSchemaResolution
   */
  public TParquetFallbackSchemaResolution getParquet_fallback_schema_resolution() {
    return this.parquet_fallback_schema_resolution;
  }

  /**
   * 
   * @see TParquetFallbackSchemaResolution
   */
  public void setParquet_fallback_schema_resolution(TParquetFallbackSchemaResolution parquet_fallback_schema_resolution) {
    this.parquet_fallback_schema_resolution = parquet_fallback_schema_resolution;
  }

  public void unsetParquet_fallback_schema_resolution() {
    this.parquet_fallback_schema_resolution = null;
  }

  /** Returns true if field parquet_fallback_schema_resolution is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_fallback_schema_resolution() {
    return this.parquet_fallback_schema_resolution != null;
  }

  public void setParquet_fallback_schema_resolutionIsSet(boolean value) {
    if (!value) {
      this.parquet_fallback_schema_resolution = null;
    }
  }

  public int getMt_dop() {
    return this.mt_dop;
  }

  public void setMt_dop(int mt_dop) {
    this.mt_dop = mt_dop;
    setMt_dopIsSet(true);
  }

  public void unsetMt_dop() {
    __isset_bit_vector.clear(__MT_DOP_ISSET_ID);
  }

  /** Returns true if field mt_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetMt_dop() {
    return __isset_bit_vector.get(__MT_DOP_ISSET_ID);
  }

  public void setMt_dopIsSet(boolean value) {
    __isset_bit_vector.set(__MT_DOP_ISSET_ID, value);
  }

  public boolean isS3_skip_insert_staging() {
    return this.s3_skip_insert_staging;
  }

  public void setS3_skip_insert_staging(boolean s3_skip_insert_staging) {
    this.s3_skip_insert_staging = s3_skip_insert_staging;
    setS3_skip_insert_stagingIsSet(true);
  }

  public void unsetS3_skip_insert_staging() {
    __isset_bit_vector.clear(__S3_SKIP_INSERT_STAGING_ISSET_ID);
  }

  /** Returns true if field s3_skip_insert_staging is set (has been assigned a value) and false otherwise */
  public boolean isSetS3_skip_insert_staging() {
    return __isset_bit_vector.get(__S3_SKIP_INSERT_STAGING_ISSET_ID);
  }

  public void setS3_skip_insert_stagingIsSet(boolean value) {
    __isset_bit_vector.set(__S3_SKIP_INSERT_STAGING_ISSET_ID, value);
  }

  public int getRuntime_filter_min_size() {
    return this.runtime_filter_min_size;
  }

  public void setRuntime_filter_min_size(int runtime_filter_min_size) {
    this.runtime_filter_min_size = runtime_filter_min_size;
    setRuntime_filter_min_sizeIsSet(true);
  }

  public void unsetRuntime_filter_min_size() {
    __isset_bit_vector.clear(__RUNTIME_FILTER_MIN_SIZE_ISSET_ID);
  }

  /** Returns true if field runtime_filter_min_size is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_min_size() {
    return __isset_bit_vector.get(__RUNTIME_FILTER_MIN_SIZE_ISSET_ID);
  }

  public void setRuntime_filter_min_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__RUNTIME_FILTER_MIN_SIZE_ISSET_ID, value);
  }

  public int getRuntime_filter_max_size() {
    return this.runtime_filter_max_size;
  }

  public void setRuntime_filter_max_size(int runtime_filter_max_size) {
    this.runtime_filter_max_size = runtime_filter_max_size;
    setRuntime_filter_max_sizeIsSet(true);
  }

  public void unsetRuntime_filter_max_size() {
    __isset_bit_vector.clear(__RUNTIME_FILTER_MAX_SIZE_ISSET_ID);
  }

  /** Returns true if field runtime_filter_max_size is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntime_filter_max_size() {
    return __isset_bit_vector.get(__RUNTIME_FILTER_MAX_SIZE_ISSET_ID);
  }

  public void setRuntime_filter_max_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__RUNTIME_FILTER_MAX_SIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.impala.thrift.TPrefetchMode
   */
  public org.apache.impala.thrift.TPrefetchMode getPrefetch_mode() {
    return this.prefetch_mode;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TPrefetchMode
   */
  public void setPrefetch_mode(org.apache.impala.thrift.TPrefetchMode prefetch_mode) {
    this.prefetch_mode = prefetch_mode;
  }

  public void unsetPrefetch_mode() {
    this.prefetch_mode = null;
  }

  /** Returns true if field prefetch_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetPrefetch_mode() {
    return this.prefetch_mode != null;
  }

  public void setPrefetch_modeIsSet(boolean value) {
    if (!value) {
      this.prefetch_mode = null;
    }
  }

  public boolean isStrict_mode() {
    return this.strict_mode;
  }

  public void setStrict_mode(boolean strict_mode) {
    this.strict_mode = strict_mode;
    setStrict_modeIsSet(true);
  }

  public void unsetStrict_mode() {
    __isset_bit_vector.clear(__STRICT_MODE_ISSET_ID);
  }

  /** Returns true if field strict_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetStrict_mode() {
    return __isset_bit_vector.get(__STRICT_MODE_ISSET_ID);
  }

  public void setStrict_modeIsSet(boolean value) {
    __isset_bit_vector.set(__STRICT_MODE_ISSET_ID, value);
  }

  public long getScratch_limit() {
    return this.scratch_limit;
  }

  public void setScratch_limit(long scratch_limit) {
    this.scratch_limit = scratch_limit;
    setScratch_limitIsSet(true);
  }

  public void unsetScratch_limit() {
    __isset_bit_vector.clear(__SCRATCH_LIMIT_ISSET_ID);
  }

  /** Returns true if field scratch_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetScratch_limit() {
    return __isset_bit_vector.get(__SCRATCH_LIMIT_ISSET_ID);
  }

  public void setScratch_limitIsSet(boolean value) {
    __isset_bit_vector.set(__SCRATCH_LIMIT_ISSET_ID, value);
  }

  public boolean isEnable_expr_rewrites() {
    return this.enable_expr_rewrites;
  }

  public void setEnable_expr_rewrites(boolean enable_expr_rewrites) {
    this.enable_expr_rewrites = enable_expr_rewrites;
    setEnable_expr_rewritesIsSet(true);
  }

  public void unsetEnable_expr_rewrites() {
    __isset_bit_vector.clear(__ENABLE_EXPR_REWRITES_ISSET_ID);
  }

  /** Returns true if field enable_expr_rewrites is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_expr_rewrites() {
    return __isset_bit_vector.get(__ENABLE_EXPR_REWRITES_ISSET_ID);
  }

  public void setEnable_expr_rewritesIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_EXPR_REWRITES_ISSET_ID, value);
  }

  public boolean isDecimal_v2() {
    return this.decimal_v2;
  }

  public void setDecimal_v2(boolean decimal_v2) {
    this.decimal_v2 = decimal_v2;
    setDecimal_v2IsSet(true);
  }

  public void unsetDecimal_v2() {
    __isset_bit_vector.clear(__DECIMAL_V2_ISSET_ID);
  }

  /** Returns true if field decimal_v2 is set (has been assigned a value) and false otherwise */
  public boolean isSetDecimal_v2() {
    return __isset_bit_vector.get(__DECIMAL_V2_ISSET_ID);
  }

  public void setDecimal_v2IsSet(boolean value) {
    __isset_bit_vector.set(__DECIMAL_V2_ISSET_ID, value);
  }

  public boolean isParquet_dictionary_filtering() {
    return this.parquet_dictionary_filtering;
  }

  public void setParquet_dictionary_filtering(boolean parquet_dictionary_filtering) {
    this.parquet_dictionary_filtering = parquet_dictionary_filtering;
    setParquet_dictionary_filteringIsSet(true);
  }

  public void unsetParquet_dictionary_filtering() {
    __isset_bit_vector.clear(__PARQUET_DICTIONARY_FILTERING_ISSET_ID);
  }

  /** Returns true if field parquet_dictionary_filtering is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_dictionary_filtering() {
    return __isset_bit_vector.get(__PARQUET_DICTIONARY_FILTERING_ISSET_ID);
  }

  public void setParquet_dictionary_filteringIsSet(boolean value) {
    __isset_bit_vector.set(__PARQUET_DICTIONARY_FILTERING_ISSET_ID, value);
  }

  /**
   * 
   * @see TParquetArrayResolution
   */
  public TParquetArrayResolution getParquet_array_resolution() {
    return this.parquet_array_resolution;
  }

  /**
   * 
   * @see TParquetArrayResolution
   */
  public void setParquet_array_resolution(TParquetArrayResolution parquet_array_resolution) {
    this.parquet_array_resolution = parquet_array_resolution;
  }

  public void unsetParquet_array_resolution() {
    this.parquet_array_resolution = null;
  }

  /** Returns true if field parquet_array_resolution is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_array_resolution() {
    return this.parquet_array_resolution != null;
  }

  public void setParquet_array_resolutionIsSet(boolean value) {
    if (!value) {
      this.parquet_array_resolution = null;
    }
  }

  public boolean isParquet_read_statistics() {
    return this.parquet_read_statistics;
  }

  public void setParquet_read_statistics(boolean parquet_read_statistics) {
    this.parquet_read_statistics = parquet_read_statistics;
    setParquet_read_statisticsIsSet(true);
  }

  public void unsetParquet_read_statistics() {
    __isset_bit_vector.clear(__PARQUET_READ_STATISTICS_ISSET_ID);
  }

  /** Returns true if field parquet_read_statistics is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_read_statistics() {
    return __isset_bit_vector.get(__PARQUET_READ_STATISTICS_ISSET_ID);
  }

  public void setParquet_read_statisticsIsSet(boolean value) {
    __isset_bit_vector.set(__PARQUET_READ_STATISTICS_ISSET_ID, value);
  }

  /**
   * 
   * @see TJoinDistributionMode
   */
  public TJoinDistributionMode getDefault_join_distribution_mode() {
    return this.default_join_distribution_mode;
  }

  /**
   * 
   * @see TJoinDistributionMode
   */
  public void setDefault_join_distribution_mode(TJoinDistributionMode default_join_distribution_mode) {
    this.default_join_distribution_mode = default_join_distribution_mode;
  }

  public void unsetDefault_join_distribution_mode() {
    this.default_join_distribution_mode = null;
  }

  /** Returns true if field default_join_distribution_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_join_distribution_mode() {
    return this.default_join_distribution_mode != null;
  }

  public void setDefault_join_distribution_modeIsSet(boolean value) {
    if (!value) {
      this.default_join_distribution_mode = null;
    }
  }

  public int getDisable_codegen_rows_threshold() {
    return this.disable_codegen_rows_threshold;
  }

  public void setDisable_codegen_rows_threshold(int disable_codegen_rows_threshold) {
    this.disable_codegen_rows_threshold = disable_codegen_rows_threshold;
    setDisable_codegen_rows_thresholdIsSet(true);
  }

  public void unsetDisable_codegen_rows_threshold() {
    __isset_bit_vector.clear(__DISABLE_CODEGEN_ROWS_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field disable_codegen_rows_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_codegen_rows_threshold() {
    return __isset_bit_vector.get(__DISABLE_CODEGEN_ROWS_THRESHOLD_ISSET_ID);
  }

  public void setDisable_codegen_rows_thresholdIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_CODEGEN_ROWS_THRESHOLD_ISSET_ID, value);
  }

  public long getDefault_spillable_buffer_size() {
    return this.default_spillable_buffer_size;
  }

  public void setDefault_spillable_buffer_size(long default_spillable_buffer_size) {
    this.default_spillable_buffer_size = default_spillable_buffer_size;
    setDefault_spillable_buffer_sizeIsSet(true);
  }

  public void unsetDefault_spillable_buffer_size() {
    __isset_bit_vector.clear(__DEFAULT_SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  /** Returns true if field default_spillable_buffer_size is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_spillable_buffer_size() {
    return __isset_bit_vector.get(__DEFAULT_SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  public void setDefault_spillable_buffer_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__DEFAULT_SPILLABLE_BUFFER_SIZE_ISSET_ID, value);
  }

  public long getMin_spillable_buffer_size() {
    return this.min_spillable_buffer_size;
  }

  public void setMin_spillable_buffer_size(long min_spillable_buffer_size) {
    this.min_spillable_buffer_size = min_spillable_buffer_size;
    setMin_spillable_buffer_sizeIsSet(true);
  }

  public void unsetMin_spillable_buffer_size() {
    __isset_bit_vector.clear(__MIN_SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  /** Returns true if field min_spillable_buffer_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_spillable_buffer_size() {
    return __isset_bit_vector.get(__MIN_SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  public void setMin_spillable_buffer_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__MIN_SPILLABLE_BUFFER_SIZE_ISSET_ID, value);
  }

  public long getMax_row_size() {
    return this.max_row_size;
  }

  public void setMax_row_size(long max_row_size) {
    this.max_row_size = max_row_size;
    setMax_row_sizeIsSet(true);
  }

  public void unsetMax_row_size() {
    __isset_bit_vector.clear(__MAX_ROW_SIZE_ISSET_ID);
  }

  /** Returns true if field max_row_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_row_size() {
    return __isset_bit_vector.get(__MAX_ROW_SIZE_ISSET_ID);
  }

  public void setMax_row_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_ROW_SIZE_ISSET_ID, value);
  }

  public int getIdle_session_timeout() {
    return this.idle_session_timeout;
  }

  public void setIdle_session_timeout(int idle_session_timeout) {
    this.idle_session_timeout = idle_session_timeout;
    setIdle_session_timeoutIsSet(true);
  }

  public void unsetIdle_session_timeout() {
    __isset_bit_vector.clear(__IDLE_SESSION_TIMEOUT_ISSET_ID);
  }

  /** Returns true if field idle_session_timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetIdle_session_timeout() {
    return __isset_bit_vector.get(__IDLE_SESSION_TIMEOUT_ISSET_ID);
  }

  public void setIdle_session_timeoutIsSet(boolean value) {
    __isset_bit_vector.set(__IDLE_SESSION_TIMEOUT_ISSET_ID, value);
  }

  public long getCompute_stats_min_sample_size() {
    return this.compute_stats_min_sample_size;
  }

  public void setCompute_stats_min_sample_size(long compute_stats_min_sample_size) {
    this.compute_stats_min_sample_size = compute_stats_min_sample_size;
    setCompute_stats_min_sample_sizeIsSet(true);
  }

  public void unsetCompute_stats_min_sample_size() {
    __isset_bit_vector.clear(__COMPUTE_STATS_MIN_SAMPLE_SIZE_ISSET_ID);
  }

  /** Returns true if field compute_stats_min_sample_size is set (has been assigned a value) and false otherwise */
  public boolean isSetCompute_stats_min_sample_size() {
    return __isset_bit_vector.get(__COMPUTE_STATS_MIN_SAMPLE_SIZE_ISSET_ID);
  }

  public void setCompute_stats_min_sample_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__COMPUTE_STATS_MIN_SAMPLE_SIZE_ISSET_ID, value);
  }

  public int getExec_time_limit_s() {
    return this.exec_time_limit_s;
  }

  public void setExec_time_limit_s(int exec_time_limit_s) {
    this.exec_time_limit_s = exec_time_limit_s;
    setExec_time_limit_sIsSet(true);
  }

  public void unsetExec_time_limit_s() {
    __isset_bit_vector.clear(__EXEC_TIME_LIMIT_S_ISSET_ID);
  }

  /** Returns true if field exec_time_limit_s is set (has been assigned a value) and false otherwise */
  public boolean isSetExec_time_limit_s() {
    return __isset_bit_vector.get(__EXEC_TIME_LIMIT_S_ISSET_ID);
  }

  public void setExec_time_limit_sIsSet(boolean value) {
    __isset_bit_vector.set(__EXEC_TIME_LIMIT_S_ISSET_ID, value);
  }

  public boolean isShuffle_distinct_exprs() {
    return this.shuffle_distinct_exprs;
  }

  public void setShuffle_distinct_exprs(boolean shuffle_distinct_exprs) {
    this.shuffle_distinct_exprs = shuffle_distinct_exprs;
    setShuffle_distinct_exprsIsSet(true);
  }

  public void unsetShuffle_distinct_exprs() {
    __isset_bit_vector.clear(__SHUFFLE_DISTINCT_EXPRS_ISSET_ID);
  }

  /** Returns true if field shuffle_distinct_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetShuffle_distinct_exprs() {
    return __isset_bit_vector.get(__SHUFFLE_DISTINCT_EXPRS_ISSET_ID);
  }

  public void setShuffle_distinct_exprsIsSet(boolean value) {
    __isset_bit_vector.set(__SHUFFLE_DISTINCT_EXPRS_ISSET_ID, value);
  }

  public long getMax_mem_estimate_for_admission() {
    return this.max_mem_estimate_for_admission;
  }

  public void setMax_mem_estimate_for_admission(long max_mem_estimate_for_admission) {
    this.max_mem_estimate_for_admission = max_mem_estimate_for_admission;
    setMax_mem_estimate_for_admissionIsSet(true);
  }

  public void unsetMax_mem_estimate_for_admission() {
    __isset_bit_vector.clear(__MAX_MEM_ESTIMATE_FOR_ADMISSION_ISSET_ID);
  }

  /** Returns true if field max_mem_estimate_for_admission is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_mem_estimate_for_admission() {
    return __isset_bit_vector.get(__MAX_MEM_ESTIMATE_FOR_ADMISSION_ISSET_ID);
  }

  public void setMax_mem_estimate_for_admissionIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_MEM_ESTIMATE_FOR_ADMISSION_ISSET_ID, value);
  }

  public int getThread_reservation_limit() {
    return this.thread_reservation_limit;
  }

  public void setThread_reservation_limit(int thread_reservation_limit) {
    this.thread_reservation_limit = thread_reservation_limit;
    setThread_reservation_limitIsSet(true);
  }

  public void unsetThread_reservation_limit() {
    __isset_bit_vector.clear(__THREAD_RESERVATION_LIMIT_ISSET_ID);
  }

  /** Returns true if field thread_reservation_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetThread_reservation_limit() {
    return __isset_bit_vector.get(__THREAD_RESERVATION_LIMIT_ISSET_ID);
  }

  public void setThread_reservation_limitIsSet(boolean value) {
    __isset_bit_vector.set(__THREAD_RESERVATION_LIMIT_ISSET_ID, value);
  }

  public int getThread_reservation_aggregate_limit() {
    return this.thread_reservation_aggregate_limit;
  }

  public void setThread_reservation_aggregate_limit(int thread_reservation_aggregate_limit) {
    this.thread_reservation_aggregate_limit = thread_reservation_aggregate_limit;
    setThread_reservation_aggregate_limitIsSet(true);
  }

  public void unsetThread_reservation_aggregate_limit() {
    __isset_bit_vector.clear(__THREAD_RESERVATION_AGGREGATE_LIMIT_ISSET_ID);
  }

  /** Returns true if field thread_reservation_aggregate_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetThread_reservation_aggregate_limit() {
    return __isset_bit_vector.get(__THREAD_RESERVATION_AGGREGATE_LIMIT_ISSET_ID);
  }

  public void setThread_reservation_aggregate_limitIsSet(boolean value) {
    __isset_bit_vector.set(__THREAD_RESERVATION_AGGREGATE_LIMIT_ISSET_ID, value);
  }

  /**
   * 
   * @see TKuduReadMode
   */
  public TKuduReadMode getKudu_read_mode() {
    return this.kudu_read_mode;
  }

  /**
   * 
   * @see TKuduReadMode
   */
  public void setKudu_read_mode(TKuduReadMode kudu_read_mode) {
    this.kudu_read_mode = kudu_read_mode;
  }

  public void unsetKudu_read_mode() {
    this.kudu_read_mode = null;
  }

  /** Returns true if field kudu_read_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_read_mode() {
    return this.kudu_read_mode != null;
  }

  public void setKudu_read_modeIsSet(boolean value) {
    if (!value) {
      this.kudu_read_mode = null;
    }
  }

  public boolean isAllow_erasure_coded_files() {
    return this.allow_erasure_coded_files;
  }

  public void setAllow_erasure_coded_files(boolean allow_erasure_coded_files) {
    this.allow_erasure_coded_files = allow_erasure_coded_files;
    setAllow_erasure_coded_filesIsSet(true);
  }

  public void unsetAllow_erasure_coded_files() {
    __isset_bit_vector.clear(__ALLOW_ERASURE_CODED_FILES_ISSET_ID);
  }

  /** Returns true if field allow_erasure_coded_files is set (has been assigned a value) and false otherwise */
  public boolean isSetAllow_erasure_coded_files() {
    return __isset_bit_vector.get(__ALLOW_ERASURE_CODED_FILES_ISSET_ID);
  }

  public void setAllow_erasure_coded_filesIsSet(boolean value) {
    __isset_bit_vector.set(__ALLOW_ERASURE_CODED_FILES_ISSET_ID, value);
  }

  public String getTimezone() {
    return this.timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public void unsetTimezone() {
    this.timezone = null;
  }

  /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone() {
    return this.timezone != null;
  }

  public void setTimezoneIsSet(boolean value) {
    if (!value) {
      this.timezone = null;
    }
  }

  public long getScan_bytes_limit() {
    return this.scan_bytes_limit;
  }

  public void setScan_bytes_limit(long scan_bytes_limit) {
    this.scan_bytes_limit = scan_bytes_limit;
    setScan_bytes_limitIsSet(true);
  }

  public void unsetScan_bytes_limit() {
    __isset_bit_vector.clear(__SCAN_BYTES_LIMIT_ISSET_ID);
  }

  /** Returns true if field scan_bytes_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetScan_bytes_limit() {
    return __isset_bit_vector.get(__SCAN_BYTES_LIMIT_ISSET_ID);
  }

  public void setScan_bytes_limitIsSet(boolean value) {
    __isset_bit_vector.set(__SCAN_BYTES_LIMIT_ISSET_ID, value);
  }

  public long getCpu_limit_s() {
    return this.cpu_limit_s;
  }

  public void setCpu_limit_s(long cpu_limit_s) {
    this.cpu_limit_s = cpu_limit_s;
    setCpu_limit_sIsSet(true);
  }

  public void unsetCpu_limit_s() {
    __isset_bit_vector.clear(__CPU_LIMIT_S_ISSET_ID);
  }

  /** Returns true if field cpu_limit_s is set (has been assigned a value) and false otherwise */
  public boolean isSetCpu_limit_s() {
    return __isset_bit_vector.get(__CPU_LIMIT_S_ISSET_ID);
  }

  public void setCpu_limit_sIsSet(boolean value) {
    __isset_bit_vector.set(__CPU_LIMIT_S_ISSET_ID, value);
  }

  public long getTopn_bytes_limit() {
    return this.topn_bytes_limit;
  }

  public void setTopn_bytes_limit(long topn_bytes_limit) {
    this.topn_bytes_limit = topn_bytes_limit;
    setTopn_bytes_limitIsSet(true);
  }

  public void unsetTopn_bytes_limit() {
    __isset_bit_vector.clear(__TOPN_BYTES_LIMIT_ISSET_ID);
  }

  /** Returns true if field topn_bytes_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetTopn_bytes_limit() {
    return __isset_bit_vector.get(__TOPN_BYTES_LIMIT_ISSET_ID);
  }

  public void setTopn_bytes_limitIsSet(boolean value) {
    __isset_bit_vector.set(__TOPN_BYTES_LIMIT_ISSET_ID, value);
  }

  public String getClient_identifier() {
    return this.client_identifier;
  }

  public void setClient_identifier(String client_identifier) {
    this.client_identifier = client_identifier;
  }

  public void unsetClient_identifier() {
    this.client_identifier = null;
  }

  /** Returns true if field client_identifier is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_identifier() {
    return this.client_identifier != null;
  }

  public void setClient_identifierIsSet(boolean value) {
    if (!value) {
      this.client_identifier = null;
    }
  }

  public double getResource_trace_ratio() {
    return this.resource_trace_ratio;
  }

  public void setResource_trace_ratio(double resource_trace_ratio) {
    this.resource_trace_ratio = resource_trace_ratio;
    setResource_trace_ratioIsSet(true);
  }

  public void unsetResource_trace_ratio() {
    __isset_bit_vector.clear(__RESOURCE_TRACE_RATIO_ISSET_ID);
  }

  /** Returns true if field resource_trace_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetResource_trace_ratio() {
    return __isset_bit_vector.get(__RESOURCE_TRACE_RATIO_ISSET_ID);
  }

  public void setResource_trace_ratioIsSet(boolean value) {
    __isset_bit_vector.set(__RESOURCE_TRACE_RATIO_ISSET_ID, value);
  }

  public int getNum_remote_executor_candidates() {
    return this.num_remote_executor_candidates;
  }

  public void setNum_remote_executor_candidates(int num_remote_executor_candidates) {
    this.num_remote_executor_candidates = num_remote_executor_candidates;
    setNum_remote_executor_candidatesIsSet(true);
  }

  public void unsetNum_remote_executor_candidates() {
    __isset_bit_vector.clear(__NUM_REMOTE_EXECUTOR_CANDIDATES_ISSET_ID);
  }

  /** Returns true if field num_remote_executor_candidates is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_remote_executor_candidates() {
    return __isset_bit_vector.get(__NUM_REMOTE_EXECUTOR_CANDIDATES_ISSET_ID);
  }

  public void setNum_remote_executor_candidatesIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_REMOTE_EXECUTOR_CANDIDATES_ISSET_ID, value);
  }

  public long getNum_rows_produced_limit() {
    return this.num_rows_produced_limit;
  }

  public void setNum_rows_produced_limit(long num_rows_produced_limit) {
    this.num_rows_produced_limit = num_rows_produced_limit;
    setNum_rows_produced_limitIsSet(true);
  }

  public void unsetNum_rows_produced_limit() {
    __isset_bit_vector.clear(__NUM_ROWS_PRODUCED_LIMIT_ISSET_ID);
  }

  /** Returns true if field num_rows_produced_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows_produced_limit() {
    return __isset_bit_vector.get(__NUM_ROWS_PRODUCED_LIMIT_ISSET_ID);
  }

  public void setNum_rows_produced_limitIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_ROWS_PRODUCED_LIMIT_ISSET_ID, value);
  }

  public boolean isPlanner_testcase_mode() {
    return this.planner_testcase_mode;
  }

  public void setPlanner_testcase_mode(boolean planner_testcase_mode) {
    this.planner_testcase_mode = planner_testcase_mode;
    setPlanner_testcase_modeIsSet(true);
  }

  public void unsetPlanner_testcase_mode() {
    __isset_bit_vector.clear(__PLANNER_TESTCASE_MODE_ISSET_ID);
  }

  /** Returns true if field planner_testcase_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanner_testcase_mode() {
    return __isset_bit_vector.get(__PLANNER_TESTCASE_MODE_ISSET_ID);
  }

  public void setPlanner_testcase_modeIsSet(boolean value) {
    __isset_bit_vector.set(__PLANNER_TESTCASE_MODE_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.impala.thrift.THdfsFileFormat
   */
  public org.apache.impala.thrift.THdfsFileFormat getDefault_file_format() {
    return this.default_file_format;
  }

  /**
   * 
   * @see org.apache.impala.thrift.THdfsFileFormat
   */
  public void setDefault_file_format(org.apache.impala.thrift.THdfsFileFormat default_file_format) {
    this.default_file_format = default_file_format;
  }

  public void unsetDefault_file_format() {
    this.default_file_format = null;
  }

  /** Returns true if field default_file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_file_format() {
    return this.default_file_format != null;
  }

  public void setDefault_file_formatIsSet(boolean value) {
    if (!value) {
      this.default_file_format = null;
    }
  }

  /**
   * 
   * @see TParquetTimestampType
   */
  public TParquetTimestampType getParquet_timestamp_type() {
    return this.parquet_timestamp_type;
  }

  /**
   * 
   * @see TParquetTimestampType
   */
  public void setParquet_timestamp_type(TParquetTimestampType parquet_timestamp_type) {
    this.parquet_timestamp_type = parquet_timestamp_type;
  }

  public void unsetParquet_timestamp_type() {
    this.parquet_timestamp_type = null;
  }

  /** Returns true if field parquet_timestamp_type is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_timestamp_type() {
    return this.parquet_timestamp_type != null;
  }

  public void setParquet_timestamp_typeIsSet(boolean value) {
    if (!value) {
      this.parquet_timestamp_type = null;
    }
  }

  public boolean isParquet_read_page_index() {
    return this.parquet_read_page_index;
  }

  public void setParquet_read_page_index(boolean parquet_read_page_index) {
    this.parquet_read_page_index = parquet_read_page_index;
    setParquet_read_page_indexIsSet(true);
  }

  public void unsetParquet_read_page_index() {
    __isset_bit_vector.clear(__PARQUET_READ_PAGE_INDEX_ISSET_ID);
  }

  /** Returns true if field parquet_read_page_index is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_read_page_index() {
    return __isset_bit_vector.get(__PARQUET_READ_PAGE_INDEX_ISSET_ID);
  }

  public void setParquet_read_page_indexIsSet(boolean value) {
    __isset_bit_vector.set(__PARQUET_READ_PAGE_INDEX_ISSET_ID, value);
  }

  public boolean isParquet_write_page_index() {
    return this.parquet_write_page_index;
  }

  public void setParquet_write_page_index(boolean parquet_write_page_index) {
    this.parquet_write_page_index = parquet_write_page_index;
    setParquet_write_page_indexIsSet(true);
  }

  public void unsetParquet_write_page_index() {
    __isset_bit_vector.clear(__PARQUET_WRITE_PAGE_INDEX_ISSET_ID);
  }

  /** Returns true if field parquet_write_page_index is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_write_page_index() {
    return __isset_bit_vector.get(__PARQUET_WRITE_PAGE_INDEX_ISSET_ID);
  }

  public void setParquet_write_page_indexIsSet(boolean value) {
    __isset_bit_vector.set(__PARQUET_WRITE_PAGE_INDEX_ISSET_ID, value);
  }

  public int getParquet_page_row_count_limit() {
    return this.parquet_page_row_count_limit;
  }

  public void setParquet_page_row_count_limit(int parquet_page_row_count_limit) {
    this.parquet_page_row_count_limit = parquet_page_row_count_limit;
    setParquet_page_row_count_limitIsSet(true);
  }

  public void unsetParquet_page_row_count_limit() {
    __isset_bit_vector.clear(__PARQUET_PAGE_ROW_COUNT_LIMIT_ISSET_ID);
  }

  /** Returns true if field parquet_page_row_count_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_page_row_count_limit() {
    return __isset_bit_vector.get(__PARQUET_PAGE_ROW_COUNT_LIMIT_ISSET_ID);
  }

  public void setParquet_page_row_count_limitIsSet(boolean value) {
    __isset_bit_vector.set(__PARQUET_PAGE_ROW_COUNT_LIMIT_ISSET_ID, value);
  }

  public boolean isDisable_hdfs_num_rows_estimate() {
    return this.disable_hdfs_num_rows_estimate;
  }

  public void setDisable_hdfs_num_rows_estimate(boolean disable_hdfs_num_rows_estimate) {
    this.disable_hdfs_num_rows_estimate = disable_hdfs_num_rows_estimate;
    setDisable_hdfs_num_rows_estimateIsSet(true);
  }

  public void unsetDisable_hdfs_num_rows_estimate() {
    __isset_bit_vector.clear(__DISABLE_HDFS_NUM_ROWS_ESTIMATE_ISSET_ID);
  }

  /** Returns true if field disable_hdfs_num_rows_estimate is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_hdfs_num_rows_estimate() {
    return __isset_bit_vector.get(__DISABLE_HDFS_NUM_ROWS_ESTIMATE_ISSET_ID);
  }

  public void setDisable_hdfs_num_rows_estimateIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_HDFS_NUM_ROWS_ESTIMATE_ISSET_ID, value);
  }

  public String getDefault_hints_insert_statement() {
    return this.default_hints_insert_statement;
  }

  public void setDefault_hints_insert_statement(String default_hints_insert_statement) {
    this.default_hints_insert_statement = default_hints_insert_statement;
  }

  public void unsetDefault_hints_insert_statement() {
    this.default_hints_insert_statement = null;
  }

  /** Returns true if field default_hints_insert_statement is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_hints_insert_statement() {
    return this.default_hints_insert_statement != null;
  }

  public void setDefault_hints_insert_statementIsSet(boolean value) {
    if (!value) {
      this.default_hints_insert_statement = null;
    }
  }

  public boolean isSpool_query_results() {
    return this.spool_query_results;
  }

  public void setSpool_query_results(boolean spool_query_results) {
    this.spool_query_results = spool_query_results;
    setSpool_query_resultsIsSet(true);
  }

  public void unsetSpool_query_results() {
    __isset_bit_vector.clear(__SPOOL_QUERY_RESULTS_ISSET_ID);
  }

  /** Returns true if field spool_query_results is set (has been assigned a value) and false otherwise */
  public boolean isSetSpool_query_results() {
    return __isset_bit_vector.get(__SPOOL_QUERY_RESULTS_ISSET_ID);
  }

  public void setSpool_query_resultsIsSet(boolean value) {
    __isset_bit_vector.set(__SPOOL_QUERY_RESULTS_ISSET_ID, value);
  }

  /**
   * 
   * @see TTransactionalType
   */
  public TTransactionalType getDefault_transactional_type() {
    return this.default_transactional_type;
  }

  /**
   * 
   * @see TTransactionalType
   */
  public void setDefault_transactional_type(TTransactionalType default_transactional_type) {
    this.default_transactional_type = default_transactional_type;
  }

  public void unsetDefault_transactional_type() {
    this.default_transactional_type = null;
  }

  /** Returns true if field default_transactional_type is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_transactional_type() {
    return this.default_transactional_type != null;
  }

  public void setDefault_transactional_typeIsSet(boolean value) {
    if (!value) {
      this.default_transactional_type = null;
    }
  }

  public int getStatement_expression_limit() {
    return this.statement_expression_limit;
  }

  public void setStatement_expression_limit(int statement_expression_limit) {
    this.statement_expression_limit = statement_expression_limit;
    setStatement_expression_limitIsSet(true);
  }

  public void unsetStatement_expression_limit() {
    __isset_bit_vector.clear(__STATEMENT_EXPRESSION_LIMIT_ISSET_ID);
  }

  /** Returns true if field statement_expression_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetStatement_expression_limit() {
    return __isset_bit_vector.get(__STATEMENT_EXPRESSION_LIMIT_ISSET_ID);
  }

  public void setStatement_expression_limitIsSet(boolean value) {
    __isset_bit_vector.set(__STATEMENT_EXPRESSION_LIMIT_ISSET_ID, value);
  }

  public int getMax_statement_length_bytes() {
    return this.max_statement_length_bytes;
  }

  public void setMax_statement_length_bytes(int max_statement_length_bytes) {
    this.max_statement_length_bytes = max_statement_length_bytes;
    setMax_statement_length_bytesIsSet(true);
  }

  public void unsetMax_statement_length_bytes() {
    __isset_bit_vector.clear(__MAX_STATEMENT_LENGTH_BYTES_ISSET_ID);
  }

  /** Returns true if field max_statement_length_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_statement_length_bytes() {
    return __isset_bit_vector.get(__MAX_STATEMENT_LENGTH_BYTES_ISSET_ID);
  }

  public void setMax_statement_length_bytesIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_STATEMENT_LENGTH_BYTES_ISSET_ID, value);
  }

  public boolean isDisable_data_cache() {
    return this.disable_data_cache;
  }

  public void setDisable_data_cache(boolean disable_data_cache) {
    this.disable_data_cache = disable_data_cache;
    setDisable_data_cacheIsSet(true);
  }

  public void unsetDisable_data_cache() {
    __isset_bit_vector.clear(__DISABLE_DATA_CACHE_ISSET_ID);
  }

  /** Returns true if field disable_data_cache is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_data_cache() {
    return __isset_bit_vector.get(__DISABLE_DATA_CACHE_ISSET_ID);
  }

  public void setDisable_data_cacheIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_DATA_CACHE_ISSET_ID, value);
  }

  public long getMax_result_spooling_mem() {
    return this.max_result_spooling_mem;
  }

  public void setMax_result_spooling_mem(long max_result_spooling_mem) {
    this.max_result_spooling_mem = max_result_spooling_mem;
    setMax_result_spooling_memIsSet(true);
  }

  public void unsetMax_result_spooling_mem() {
    __isset_bit_vector.clear(__MAX_RESULT_SPOOLING_MEM_ISSET_ID);
  }

  /** Returns true if field max_result_spooling_mem is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_result_spooling_mem() {
    return __isset_bit_vector.get(__MAX_RESULT_SPOOLING_MEM_ISSET_ID);
  }

  public void setMax_result_spooling_memIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_RESULT_SPOOLING_MEM_ISSET_ID, value);
  }

  public long getMax_spilled_result_spooling_mem() {
    return this.max_spilled_result_spooling_mem;
  }

  public void setMax_spilled_result_spooling_mem(long max_spilled_result_spooling_mem) {
    this.max_spilled_result_spooling_mem = max_spilled_result_spooling_mem;
    setMax_spilled_result_spooling_memIsSet(true);
  }

  public void unsetMax_spilled_result_spooling_mem() {
    __isset_bit_vector.clear(__MAX_SPILLED_RESULT_SPOOLING_MEM_ISSET_ID);
  }

  /** Returns true if field max_spilled_result_spooling_mem is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_spilled_result_spooling_mem() {
    return __isset_bit_vector.get(__MAX_SPILLED_RESULT_SPOOLING_MEM_ISSET_ID);
  }

  public void setMax_spilled_result_spooling_memIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_SPILLED_RESULT_SPOOLING_MEM_ISSET_ID, value);
  }

  public boolean isDisable_hbase_num_rows_estimate() {
    return this.disable_hbase_num_rows_estimate;
  }

  public void setDisable_hbase_num_rows_estimate(boolean disable_hbase_num_rows_estimate) {
    this.disable_hbase_num_rows_estimate = disable_hbase_num_rows_estimate;
    setDisable_hbase_num_rows_estimateIsSet(true);
  }

  public void unsetDisable_hbase_num_rows_estimate() {
    __isset_bit_vector.clear(__DISABLE_HBASE_NUM_ROWS_ESTIMATE_ISSET_ID);
  }

  /** Returns true if field disable_hbase_num_rows_estimate is set (has been assigned a value) and false otherwise */
  public boolean isSetDisable_hbase_num_rows_estimate() {
    return __isset_bit_vector.get(__DISABLE_HBASE_NUM_ROWS_ESTIMATE_ISSET_ID);
  }

  public void setDisable_hbase_num_rows_estimateIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_HBASE_NUM_ROWS_ESTIMATE_ISSET_ID, value);
  }

  public long getFetch_rows_timeout_ms() {
    return this.fetch_rows_timeout_ms;
  }

  public void setFetch_rows_timeout_ms(long fetch_rows_timeout_ms) {
    this.fetch_rows_timeout_ms = fetch_rows_timeout_ms;
    setFetch_rows_timeout_msIsSet(true);
  }

  public void unsetFetch_rows_timeout_ms() {
    __isset_bit_vector.clear(__FETCH_ROWS_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field fetch_rows_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetFetch_rows_timeout_ms() {
    return __isset_bit_vector.get(__FETCH_ROWS_TIMEOUT_MS_ISSET_ID);
  }

  public void setFetch_rows_timeout_msIsSet(boolean value) {
    __isset_bit_vector.set(__FETCH_ROWS_TIMEOUT_MS_ISSET_ID, value);
  }

  public String getNow_string() {
    return this.now_string;
  }

  public void setNow_string(String now_string) {
    this.now_string = now_string;
  }

  public void unsetNow_string() {
    this.now_string = null;
  }

  /** Returns true if field now_string is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_string() {
    return this.now_string != null;
  }

  public void setNow_stringIsSet(boolean value) {
    if (!value) {
      this.now_string = null;
    }
  }

  public long getParquet_object_store_split_size() {
    return this.parquet_object_store_split_size;
  }

  public void setParquet_object_store_split_size(long parquet_object_store_split_size) {
    this.parquet_object_store_split_size = parquet_object_store_split_size;
    setParquet_object_store_split_sizeIsSet(true);
  }

  public void unsetParquet_object_store_split_size() {
    __isset_bit_vector.clear(__PARQUET_OBJECT_STORE_SPLIT_SIZE_ISSET_ID);
  }

  /** Returns true if field parquet_object_store_split_size is set (has been assigned a value) and false otherwise */
  public boolean isSetParquet_object_store_split_size() {
    return __isset_bit_vector.get(__PARQUET_OBJECT_STORE_SPLIT_SIZE_ISSET_ID);
  }

  public void setParquet_object_store_split_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__PARQUET_OBJECT_STORE_SPLIT_SIZE_ISSET_ID, value);
  }

  public long getMem_limit_executors() {
    return this.mem_limit_executors;
  }

  public void setMem_limit_executors(long mem_limit_executors) {
    this.mem_limit_executors = mem_limit_executors;
    setMem_limit_executorsIsSet(true);
  }

  public void unsetMem_limit_executors() {
    __isset_bit_vector.clear(__MEM_LIMIT_EXECUTORS_ISSET_ID);
  }

  /** Returns true if field mem_limit_executors is set (has been assigned a value) and false otherwise */
  public boolean isSetMem_limit_executors() {
    return __isset_bit_vector.get(__MEM_LIMIT_EXECUTORS_ISSET_ID);
  }

  public void setMem_limit_executorsIsSet(boolean value) {
    __isset_bit_vector.set(__MEM_LIMIT_EXECUTORS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ABORT_ON_ERROR:
      if (value == null) {
        unsetAbort_on_error();
      } else {
        setAbort_on_error((Boolean)value);
      }
      break;

    case MAX_ERRORS:
      if (value == null) {
        unsetMax_errors();
      } else {
        setMax_errors((Integer)value);
      }
      break;

    case DISABLE_CODEGEN:
      if (value == null) {
        unsetDisable_codegen();
      } else {
        setDisable_codegen((Boolean)value);
      }
      break;

    case BATCH_SIZE:
      if (value == null) {
        unsetBatch_size();
      } else {
        setBatch_size((Integer)value);
      }
      break;

    case NUM_NODES:
      if (value == null) {
        unsetNum_nodes();
      } else {
        setNum_nodes((Integer)value);
      }
      break;

    case MAX_SCAN_RANGE_LENGTH:
      if (value == null) {
        unsetMax_scan_range_length();
      } else {
        setMax_scan_range_length((Long)value);
      }
      break;

    case NUM_SCANNER_THREADS:
      if (value == null) {
        unsetNum_scanner_threads();
      } else {
        setNum_scanner_threads((Integer)value);
      }
      break;

    case DEBUG_ACTION:
      if (value == null) {
        unsetDebug_action();
      } else {
        setDebug_action((String)value);
      }
      break;

    case MEM_LIMIT:
      if (value == null) {
        unsetMem_limit();
      } else {
        setMem_limit((Long)value);
      }
      break;

    case COMPRESSION_CODEC:
      if (value == null) {
        unsetCompression_codec();
      } else {
        setCompression_codec((org.apache.impala.thrift.TCompressionCodec)value);
      }
      break;

    case HBASE_CACHING:
      if (value == null) {
        unsetHbase_caching();
      } else {
        setHbase_caching((Integer)value);
      }
      break;

    case HBASE_CACHE_BLOCKS:
      if (value == null) {
        unsetHbase_cache_blocks();
      } else {
        setHbase_cache_blocks((Boolean)value);
      }
      break;

    case PARQUET_FILE_SIZE:
      if (value == null) {
        unsetParquet_file_size();
      } else {
        setParquet_file_size((Long)value);
      }
      break;

    case EXPLAIN_LEVEL:
      if (value == null) {
        unsetExplain_level();
      } else {
        setExplain_level((org.apache.impala.thrift.TExplainLevel)value);
      }
      break;

    case SYNC_DDL:
      if (value == null) {
        unsetSync_ddl();
      } else {
        setSync_ddl((Boolean)value);
      }
      break;

    case REQUEST_POOL:
      if (value == null) {
        unsetRequest_pool();
      } else {
        setRequest_pool((String)value);
      }
      break;

    case DISABLE_OUTERMOST_TOPN:
      if (value == null) {
        unsetDisable_outermost_topn();
      } else {
        setDisable_outermost_topn((Boolean)value);
      }
      break;

    case QUERY_TIMEOUT_S:
      if (value == null) {
        unsetQuery_timeout_s();
      } else {
        setQuery_timeout_s((Integer)value);
      }
      break;

    case BUFFER_POOL_LIMIT:
      if (value == null) {
        unsetBuffer_pool_limit();
      } else {
        setBuffer_pool_limit((Long)value);
      }
      break;

    case APPX_COUNT_DISTINCT:
      if (value == null) {
        unsetAppx_count_distinct();
      } else {
        setAppx_count_distinct((Boolean)value);
      }
      break;

    case DISABLE_UNSAFE_SPILLS:
      if (value == null) {
        unsetDisable_unsafe_spills();
      } else {
        setDisable_unsafe_spills((Boolean)value);
      }
      break;

    case EXEC_SINGLE_NODE_ROWS_THRESHOLD:
      if (value == null) {
        unsetExec_single_node_rows_threshold();
      } else {
        setExec_single_node_rows_threshold((Integer)value);
      }
      break;

    case OPTIMIZE_PARTITION_KEY_SCANS:
      if (value == null) {
        unsetOptimize_partition_key_scans();
      } else {
        setOptimize_partition_key_scans((Boolean)value);
      }
      break;

    case REPLICA_PREFERENCE:
      if (value == null) {
        unsetReplica_preference();
      } else {
        setReplica_preference((org.apache.impala.thrift.TReplicaPreference)value);
      }
      break;

    case SCHEDULE_RANDOM_REPLICA:
      if (value == null) {
        unsetSchedule_random_replica();
      } else {
        setSchedule_random_replica((Boolean)value);
      }
      break;

    case DISABLE_STREAMING_PREAGGREGATIONS:
      if (value == null) {
        unsetDisable_streaming_preaggregations();
      } else {
        setDisable_streaming_preaggregations((Boolean)value);
      }
      break;

    case RUNTIME_FILTER_MODE:
      if (value == null) {
        unsetRuntime_filter_mode();
      } else {
        setRuntime_filter_mode((org.apache.impala.thrift.TRuntimeFilterMode)value);
      }
      break;

    case RUNTIME_BLOOM_FILTER_SIZE:
      if (value == null) {
        unsetRuntime_bloom_filter_size();
      } else {
        setRuntime_bloom_filter_size((Integer)value);
      }
      break;

    case RUNTIME_FILTER_WAIT_TIME_MS:
      if (value == null) {
        unsetRuntime_filter_wait_time_ms();
      } else {
        setRuntime_filter_wait_time_ms((Integer)value);
      }
      break;

    case DISABLE_ROW_RUNTIME_FILTERING:
      if (value == null) {
        unsetDisable_row_runtime_filtering();
      } else {
        setDisable_row_runtime_filtering((Boolean)value);
      }
      break;

    case MAX_NUM_RUNTIME_FILTERS:
      if (value == null) {
        unsetMax_num_runtime_filters();
      } else {
        setMax_num_runtime_filters((Integer)value);
      }
      break;

    case PARQUET_ANNOTATE_STRINGS_UTF8:
      if (value == null) {
        unsetParquet_annotate_strings_utf8();
      } else {
        setParquet_annotate_strings_utf8((Boolean)value);
      }
      break;

    case PARQUET_FALLBACK_SCHEMA_RESOLUTION:
      if (value == null) {
        unsetParquet_fallback_schema_resolution();
      } else {
        setParquet_fallback_schema_resolution((TParquetFallbackSchemaResolution)value);
      }
      break;

    case MT_DOP:
      if (value == null) {
        unsetMt_dop();
      } else {
        setMt_dop((Integer)value);
      }
      break;

    case S3_SKIP_INSERT_STAGING:
      if (value == null) {
        unsetS3_skip_insert_staging();
      } else {
        setS3_skip_insert_staging((Boolean)value);
      }
      break;

    case RUNTIME_FILTER_MIN_SIZE:
      if (value == null) {
        unsetRuntime_filter_min_size();
      } else {
        setRuntime_filter_min_size((Integer)value);
      }
      break;

    case RUNTIME_FILTER_MAX_SIZE:
      if (value == null) {
        unsetRuntime_filter_max_size();
      } else {
        setRuntime_filter_max_size((Integer)value);
      }
      break;

    case PREFETCH_MODE:
      if (value == null) {
        unsetPrefetch_mode();
      } else {
        setPrefetch_mode((org.apache.impala.thrift.TPrefetchMode)value);
      }
      break;

    case STRICT_MODE:
      if (value == null) {
        unsetStrict_mode();
      } else {
        setStrict_mode((Boolean)value);
      }
      break;

    case SCRATCH_LIMIT:
      if (value == null) {
        unsetScratch_limit();
      } else {
        setScratch_limit((Long)value);
      }
      break;

    case ENABLE_EXPR_REWRITES:
      if (value == null) {
        unsetEnable_expr_rewrites();
      } else {
        setEnable_expr_rewrites((Boolean)value);
      }
      break;

    case DECIMAL_V2:
      if (value == null) {
        unsetDecimal_v2();
      } else {
        setDecimal_v2((Boolean)value);
      }
      break;

    case PARQUET_DICTIONARY_FILTERING:
      if (value == null) {
        unsetParquet_dictionary_filtering();
      } else {
        setParquet_dictionary_filtering((Boolean)value);
      }
      break;

    case PARQUET_ARRAY_RESOLUTION:
      if (value == null) {
        unsetParquet_array_resolution();
      } else {
        setParquet_array_resolution((TParquetArrayResolution)value);
      }
      break;

    case PARQUET_READ_STATISTICS:
      if (value == null) {
        unsetParquet_read_statistics();
      } else {
        setParquet_read_statistics((Boolean)value);
      }
      break;

    case DEFAULT_JOIN_DISTRIBUTION_MODE:
      if (value == null) {
        unsetDefault_join_distribution_mode();
      } else {
        setDefault_join_distribution_mode((TJoinDistributionMode)value);
      }
      break;

    case DISABLE_CODEGEN_ROWS_THRESHOLD:
      if (value == null) {
        unsetDisable_codegen_rows_threshold();
      } else {
        setDisable_codegen_rows_threshold((Integer)value);
      }
      break;

    case DEFAULT_SPILLABLE_BUFFER_SIZE:
      if (value == null) {
        unsetDefault_spillable_buffer_size();
      } else {
        setDefault_spillable_buffer_size((Long)value);
      }
      break;

    case MIN_SPILLABLE_BUFFER_SIZE:
      if (value == null) {
        unsetMin_spillable_buffer_size();
      } else {
        setMin_spillable_buffer_size((Long)value);
      }
      break;

    case MAX_ROW_SIZE:
      if (value == null) {
        unsetMax_row_size();
      } else {
        setMax_row_size((Long)value);
      }
      break;

    case IDLE_SESSION_TIMEOUT:
      if (value == null) {
        unsetIdle_session_timeout();
      } else {
        setIdle_session_timeout((Integer)value);
      }
      break;

    case COMPUTE_STATS_MIN_SAMPLE_SIZE:
      if (value == null) {
        unsetCompute_stats_min_sample_size();
      } else {
        setCompute_stats_min_sample_size((Long)value);
      }
      break;

    case EXEC_TIME_LIMIT_S:
      if (value == null) {
        unsetExec_time_limit_s();
      } else {
        setExec_time_limit_s((Integer)value);
      }
      break;

    case SHUFFLE_DISTINCT_EXPRS:
      if (value == null) {
        unsetShuffle_distinct_exprs();
      } else {
        setShuffle_distinct_exprs((Boolean)value);
      }
      break;

    case MAX_MEM_ESTIMATE_FOR_ADMISSION:
      if (value == null) {
        unsetMax_mem_estimate_for_admission();
      } else {
        setMax_mem_estimate_for_admission((Long)value);
      }
      break;

    case THREAD_RESERVATION_LIMIT:
      if (value == null) {
        unsetThread_reservation_limit();
      } else {
        setThread_reservation_limit((Integer)value);
      }
      break;

    case THREAD_RESERVATION_AGGREGATE_LIMIT:
      if (value == null) {
        unsetThread_reservation_aggregate_limit();
      } else {
        setThread_reservation_aggregate_limit((Integer)value);
      }
      break;

    case KUDU_READ_MODE:
      if (value == null) {
        unsetKudu_read_mode();
      } else {
        setKudu_read_mode((TKuduReadMode)value);
      }
      break;

    case ALLOW_ERASURE_CODED_FILES:
      if (value == null) {
        unsetAllow_erasure_coded_files();
      } else {
        setAllow_erasure_coded_files((Boolean)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((String)value);
      }
      break;

    case SCAN_BYTES_LIMIT:
      if (value == null) {
        unsetScan_bytes_limit();
      } else {
        setScan_bytes_limit((Long)value);
      }
      break;

    case CPU_LIMIT_S:
      if (value == null) {
        unsetCpu_limit_s();
      } else {
        setCpu_limit_s((Long)value);
      }
      break;

    case TOPN_BYTES_LIMIT:
      if (value == null) {
        unsetTopn_bytes_limit();
      } else {
        setTopn_bytes_limit((Long)value);
      }
      break;

    case CLIENT_IDENTIFIER:
      if (value == null) {
        unsetClient_identifier();
      } else {
        setClient_identifier((String)value);
      }
      break;

    case RESOURCE_TRACE_RATIO:
      if (value == null) {
        unsetResource_trace_ratio();
      } else {
        setResource_trace_ratio((Double)value);
      }
      break;

    case NUM_REMOTE_EXECUTOR_CANDIDATES:
      if (value == null) {
        unsetNum_remote_executor_candidates();
      } else {
        setNum_remote_executor_candidates((Integer)value);
      }
      break;

    case NUM_ROWS_PRODUCED_LIMIT:
      if (value == null) {
        unsetNum_rows_produced_limit();
      } else {
        setNum_rows_produced_limit((Long)value);
      }
      break;

    case PLANNER_TESTCASE_MODE:
      if (value == null) {
        unsetPlanner_testcase_mode();
      } else {
        setPlanner_testcase_mode((Boolean)value);
      }
      break;

    case DEFAULT_FILE_FORMAT:
      if (value == null) {
        unsetDefault_file_format();
      } else {
        setDefault_file_format((org.apache.impala.thrift.THdfsFileFormat)value);
      }
      break;

    case PARQUET_TIMESTAMP_TYPE:
      if (value == null) {
        unsetParquet_timestamp_type();
      } else {
        setParquet_timestamp_type((TParquetTimestampType)value);
      }
      break;

    case PARQUET_READ_PAGE_INDEX:
      if (value == null) {
        unsetParquet_read_page_index();
      } else {
        setParquet_read_page_index((Boolean)value);
      }
      break;

    case PARQUET_WRITE_PAGE_INDEX:
      if (value == null) {
        unsetParquet_write_page_index();
      } else {
        setParquet_write_page_index((Boolean)value);
      }
      break;

    case PARQUET_PAGE_ROW_COUNT_LIMIT:
      if (value == null) {
        unsetParquet_page_row_count_limit();
      } else {
        setParquet_page_row_count_limit((Integer)value);
      }
      break;

    case DISABLE_HDFS_NUM_ROWS_ESTIMATE:
      if (value == null) {
        unsetDisable_hdfs_num_rows_estimate();
      } else {
        setDisable_hdfs_num_rows_estimate((Boolean)value);
      }
      break;

    case DEFAULT_HINTS_INSERT_STATEMENT:
      if (value == null) {
        unsetDefault_hints_insert_statement();
      } else {
        setDefault_hints_insert_statement((String)value);
      }
      break;

    case SPOOL_QUERY_RESULTS:
      if (value == null) {
        unsetSpool_query_results();
      } else {
        setSpool_query_results((Boolean)value);
      }
      break;

    case DEFAULT_TRANSACTIONAL_TYPE:
      if (value == null) {
        unsetDefault_transactional_type();
      } else {
        setDefault_transactional_type((TTransactionalType)value);
      }
      break;

    case STATEMENT_EXPRESSION_LIMIT:
      if (value == null) {
        unsetStatement_expression_limit();
      } else {
        setStatement_expression_limit((Integer)value);
      }
      break;

    case MAX_STATEMENT_LENGTH_BYTES:
      if (value == null) {
        unsetMax_statement_length_bytes();
      } else {
        setMax_statement_length_bytes((Integer)value);
      }
      break;

    case DISABLE_DATA_CACHE:
      if (value == null) {
        unsetDisable_data_cache();
      } else {
        setDisable_data_cache((Boolean)value);
      }
      break;

    case MAX_RESULT_SPOOLING_MEM:
      if (value == null) {
        unsetMax_result_spooling_mem();
      } else {
        setMax_result_spooling_mem((Long)value);
      }
      break;

    case MAX_SPILLED_RESULT_SPOOLING_MEM:
      if (value == null) {
        unsetMax_spilled_result_spooling_mem();
      } else {
        setMax_spilled_result_spooling_mem((Long)value);
      }
      break;

    case DISABLE_HBASE_NUM_ROWS_ESTIMATE:
      if (value == null) {
        unsetDisable_hbase_num_rows_estimate();
      } else {
        setDisable_hbase_num_rows_estimate((Boolean)value);
      }
      break;

    case FETCH_ROWS_TIMEOUT_MS:
      if (value == null) {
        unsetFetch_rows_timeout_ms();
      } else {
        setFetch_rows_timeout_ms((Long)value);
      }
      break;

    case NOW_STRING:
      if (value == null) {
        unsetNow_string();
      } else {
        setNow_string((String)value);
      }
      break;

    case PARQUET_OBJECT_STORE_SPLIT_SIZE:
      if (value == null) {
        unsetParquet_object_store_split_size();
      } else {
        setParquet_object_store_split_size((Long)value);
      }
      break;

    case MEM_LIMIT_EXECUTORS:
      if (value == null) {
        unsetMem_limit_executors();
      } else {
        setMem_limit_executors((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ABORT_ON_ERROR:
      return isAbort_on_error();

    case MAX_ERRORS:
      return getMax_errors();

    case DISABLE_CODEGEN:
      return isDisable_codegen();

    case BATCH_SIZE:
      return getBatch_size();

    case NUM_NODES:
      return getNum_nodes();

    case MAX_SCAN_RANGE_LENGTH:
      return getMax_scan_range_length();

    case NUM_SCANNER_THREADS:
      return getNum_scanner_threads();

    case DEBUG_ACTION:
      return getDebug_action();

    case MEM_LIMIT:
      return getMem_limit();

    case COMPRESSION_CODEC:
      return getCompression_codec();

    case HBASE_CACHING:
      return getHbase_caching();

    case HBASE_CACHE_BLOCKS:
      return isHbase_cache_blocks();

    case PARQUET_FILE_SIZE:
      return getParquet_file_size();

    case EXPLAIN_LEVEL:
      return getExplain_level();

    case SYNC_DDL:
      return isSync_ddl();

    case REQUEST_POOL:
      return getRequest_pool();

    case DISABLE_OUTERMOST_TOPN:
      return isDisable_outermost_topn();

    case QUERY_TIMEOUT_S:
      return getQuery_timeout_s();

    case BUFFER_POOL_LIMIT:
      return getBuffer_pool_limit();

    case APPX_COUNT_DISTINCT:
      return isAppx_count_distinct();

    case DISABLE_UNSAFE_SPILLS:
      return isDisable_unsafe_spills();

    case EXEC_SINGLE_NODE_ROWS_THRESHOLD:
      return getExec_single_node_rows_threshold();

    case OPTIMIZE_PARTITION_KEY_SCANS:
      return isOptimize_partition_key_scans();

    case REPLICA_PREFERENCE:
      return getReplica_preference();

    case SCHEDULE_RANDOM_REPLICA:
      return isSchedule_random_replica();

    case DISABLE_STREAMING_PREAGGREGATIONS:
      return isDisable_streaming_preaggregations();

    case RUNTIME_FILTER_MODE:
      return getRuntime_filter_mode();

    case RUNTIME_BLOOM_FILTER_SIZE:
      return getRuntime_bloom_filter_size();

    case RUNTIME_FILTER_WAIT_TIME_MS:
      return getRuntime_filter_wait_time_ms();

    case DISABLE_ROW_RUNTIME_FILTERING:
      return isDisable_row_runtime_filtering();

    case MAX_NUM_RUNTIME_FILTERS:
      return getMax_num_runtime_filters();

    case PARQUET_ANNOTATE_STRINGS_UTF8:
      return isParquet_annotate_strings_utf8();

    case PARQUET_FALLBACK_SCHEMA_RESOLUTION:
      return getParquet_fallback_schema_resolution();

    case MT_DOP:
      return getMt_dop();

    case S3_SKIP_INSERT_STAGING:
      return isS3_skip_insert_staging();

    case RUNTIME_FILTER_MIN_SIZE:
      return getRuntime_filter_min_size();

    case RUNTIME_FILTER_MAX_SIZE:
      return getRuntime_filter_max_size();

    case PREFETCH_MODE:
      return getPrefetch_mode();

    case STRICT_MODE:
      return isStrict_mode();

    case SCRATCH_LIMIT:
      return getScratch_limit();

    case ENABLE_EXPR_REWRITES:
      return isEnable_expr_rewrites();

    case DECIMAL_V2:
      return isDecimal_v2();

    case PARQUET_DICTIONARY_FILTERING:
      return isParquet_dictionary_filtering();

    case PARQUET_ARRAY_RESOLUTION:
      return getParquet_array_resolution();

    case PARQUET_READ_STATISTICS:
      return isParquet_read_statistics();

    case DEFAULT_JOIN_DISTRIBUTION_MODE:
      return getDefault_join_distribution_mode();

    case DISABLE_CODEGEN_ROWS_THRESHOLD:
      return getDisable_codegen_rows_threshold();

    case DEFAULT_SPILLABLE_BUFFER_SIZE:
      return getDefault_spillable_buffer_size();

    case MIN_SPILLABLE_BUFFER_SIZE:
      return getMin_spillable_buffer_size();

    case MAX_ROW_SIZE:
      return getMax_row_size();

    case IDLE_SESSION_TIMEOUT:
      return getIdle_session_timeout();

    case COMPUTE_STATS_MIN_SAMPLE_SIZE:
      return getCompute_stats_min_sample_size();

    case EXEC_TIME_LIMIT_S:
      return getExec_time_limit_s();

    case SHUFFLE_DISTINCT_EXPRS:
      return isShuffle_distinct_exprs();

    case MAX_MEM_ESTIMATE_FOR_ADMISSION:
      return getMax_mem_estimate_for_admission();

    case THREAD_RESERVATION_LIMIT:
      return getThread_reservation_limit();

    case THREAD_RESERVATION_AGGREGATE_LIMIT:
      return getThread_reservation_aggregate_limit();

    case KUDU_READ_MODE:
      return getKudu_read_mode();

    case ALLOW_ERASURE_CODED_FILES:
      return isAllow_erasure_coded_files();

    case TIMEZONE:
      return getTimezone();

    case SCAN_BYTES_LIMIT:
      return getScan_bytes_limit();

    case CPU_LIMIT_S:
      return getCpu_limit_s();

    case TOPN_BYTES_LIMIT:
      return getTopn_bytes_limit();

    case CLIENT_IDENTIFIER:
      return getClient_identifier();

    case RESOURCE_TRACE_RATIO:
      return getResource_trace_ratio();

    case NUM_REMOTE_EXECUTOR_CANDIDATES:
      return getNum_remote_executor_candidates();

    case NUM_ROWS_PRODUCED_LIMIT:
      return getNum_rows_produced_limit();

    case PLANNER_TESTCASE_MODE:
      return isPlanner_testcase_mode();

    case DEFAULT_FILE_FORMAT:
      return getDefault_file_format();

    case PARQUET_TIMESTAMP_TYPE:
      return getParquet_timestamp_type();

    case PARQUET_READ_PAGE_INDEX:
      return isParquet_read_page_index();

    case PARQUET_WRITE_PAGE_INDEX:
      return isParquet_write_page_index();

    case PARQUET_PAGE_ROW_COUNT_LIMIT:
      return getParquet_page_row_count_limit();

    case DISABLE_HDFS_NUM_ROWS_ESTIMATE:
      return isDisable_hdfs_num_rows_estimate();

    case DEFAULT_HINTS_INSERT_STATEMENT:
      return getDefault_hints_insert_statement();

    case SPOOL_QUERY_RESULTS:
      return isSpool_query_results();

    case DEFAULT_TRANSACTIONAL_TYPE:
      return getDefault_transactional_type();

    case STATEMENT_EXPRESSION_LIMIT:
      return getStatement_expression_limit();

    case MAX_STATEMENT_LENGTH_BYTES:
      return getMax_statement_length_bytes();

    case DISABLE_DATA_CACHE:
      return isDisable_data_cache();

    case MAX_RESULT_SPOOLING_MEM:
      return getMax_result_spooling_mem();

    case MAX_SPILLED_RESULT_SPOOLING_MEM:
      return getMax_spilled_result_spooling_mem();

    case DISABLE_HBASE_NUM_ROWS_ESTIMATE:
      return isDisable_hbase_num_rows_estimate();

    case FETCH_ROWS_TIMEOUT_MS:
      return getFetch_rows_timeout_ms();

    case NOW_STRING:
      return getNow_string();

    case PARQUET_OBJECT_STORE_SPLIT_SIZE:
      return getParquet_object_store_split_size();

    case MEM_LIMIT_EXECUTORS:
      return getMem_limit_executors();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ABORT_ON_ERROR:
      return isSetAbort_on_error();
    case MAX_ERRORS:
      return isSetMax_errors();
    case DISABLE_CODEGEN:
      return isSetDisable_codegen();
    case BATCH_SIZE:
      return isSetBatch_size();
    case NUM_NODES:
      return isSetNum_nodes();
    case MAX_SCAN_RANGE_LENGTH:
      return isSetMax_scan_range_length();
    case NUM_SCANNER_THREADS:
      return isSetNum_scanner_threads();
    case DEBUG_ACTION:
      return isSetDebug_action();
    case MEM_LIMIT:
      return isSetMem_limit();
    case COMPRESSION_CODEC:
      return isSetCompression_codec();
    case HBASE_CACHING:
      return isSetHbase_caching();
    case HBASE_CACHE_BLOCKS:
      return isSetHbase_cache_blocks();
    case PARQUET_FILE_SIZE:
      return isSetParquet_file_size();
    case EXPLAIN_LEVEL:
      return isSetExplain_level();
    case SYNC_DDL:
      return isSetSync_ddl();
    case REQUEST_POOL:
      return isSetRequest_pool();
    case DISABLE_OUTERMOST_TOPN:
      return isSetDisable_outermost_topn();
    case QUERY_TIMEOUT_S:
      return isSetQuery_timeout_s();
    case BUFFER_POOL_LIMIT:
      return isSetBuffer_pool_limit();
    case APPX_COUNT_DISTINCT:
      return isSetAppx_count_distinct();
    case DISABLE_UNSAFE_SPILLS:
      return isSetDisable_unsafe_spills();
    case EXEC_SINGLE_NODE_ROWS_THRESHOLD:
      return isSetExec_single_node_rows_threshold();
    case OPTIMIZE_PARTITION_KEY_SCANS:
      return isSetOptimize_partition_key_scans();
    case REPLICA_PREFERENCE:
      return isSetReplica_preference();
    case SCHEDULE_RANDOM_REPLICA:
      return isSetSchedule_random_replica();
    case DISABLE_STREAMING_PREAGGREGATIONS:
      return isSetDisable_streaming_preaggregations();
    case RUNTIME_FILTER_MODE:
      return isSetRuntime_filter_mode();
    case RUNTIME_BLOOM_FILTER_SIZE:
      return isSetRuntime_bloom_filter_size();
    case RUNTIME_FILTER_WAIT_TIME_MS:
      return isSetRuntime_filter_wait_time_ms();
    case DISABLE_ROW_RUNTIME_FILTERING:
      return isSetDisable_row_runtime_filtering();
    case MAX_NUM_RUNTIME_FILTERS:
      return isSetMax_num_runtime_filters();
    case PARQUET_ANNOTATE_STRINGS_UTF8:
      return isSetParquet_annotate_strings_utf8();
    case PARQUET_FALLBACK_SCHEMA_RESOLUTION:
      return isSetParquet_fallback_schema_resolution();
    case MT_DOP:
      return isSetMt_dop();
    case S3_SKIP_INSERT_STAGING:
      return isSetS3_skip_insert_staging();
    case RUNTIME_FILTER_MIN_SIZE:
      return isSetRuntime_filter_min_size();
    case RUNTIME_FILTER_MAX_SIZE:
      return isSetRuntime_filter_max_size();
    case PREFETCH_MODE:
      return isSetPrefetch_mode();
    case STRICT_MODE:
      return isSetStrict_mode();
    case SCRATCH_LIMIT:
      return isSetScratch_limit();
    case ENABLE_EXPR_REWRITES:
      return isSetEnable_expr_rewrites();
    case DECIMAL_V2:
      return isSetDecimal_v2();
    case PARQUET_DICTIONARY_FILTERING:
      return isSetParquet_dictionary_filtering();
    case PARQUET_ARRAY_RESOLUTION:
      return isSetParquet_array_resolution();
    case PARQUET_READ_STATISTICS:
      return isSetParquet_read_statistics();
    case DEFAULT_JOIN_DISTRIBUTION_MODE:
      return isSetDefault_join_distribution_mode();
    case DISABLE_CODEGEN_ROWS_THRESHOLD:
      return isSetDisable_codegen_rows_threshold();
    case DEFAULT_SPILLABLE_BUFFER_SIZE:
      return isSetDefault_spillable_buffer_size();
    case MIN_SPILLABLE_BUFFER_SIZE:
      return isSetMin_spillable_buffer_size();
    case MAX_ROW_SIZE:
      return isSetMax_row_size();
    case IDLE_SESSION_TIMEOUT:
      return isSetIdle_session_timeout();
    case COMPUTE_STATS_MIN_SAMPLE_SIZE:
      return isSetCompute_stats_min_sample_size();
    case EXEC_TIME_LIMIT_S:
      return isSetExec_time_limit_s();
    case SHUFFLE_DISTINCT_EXPRS:
      return isSetShuffle_distinct_exprs();
    case MAX_MEM_ESTIMATE_FOR_ADMISSION:
      return isSetMax_mem_estimate_for_admission();
    case THREAD_RESERVATION_LIMIT:
      return isSetThread_reservation_limit();
    case THREAD_RESERVATION_AGGREGATE_LIMIT:
      return isSetThread_reservation_aggregate_limit();
    case KUDU_READ_MODE:
      return isSetKudu_read_mode();
    case ALLOW_ERASURE_CODED_FILES:
      return isSetAllow_erasure_coded_files();
    case TIMEZONE:
      return isSetTimezone();
    case SCAN_BYTES_LIMIT:
      return isSetScan_bytes_limit();
    case CPU_LIMIT_S:
      return isSetCpu_limit_s();
    case TOPN_BYTES_LIMIT:
      return isSetTopn_bytes_limit();
    case CLIENT_IDENTIFIER:
      return isSetClient_identifier();
    case RESOURCE_TRACE_RATIO:
      return isSetResource_trace_ratio();
    case NUM_REMOTE_EXECUTOR_CANDIDATES:
      return isSetNum_remote_executor_candidates();
    case NUM_ROWS_PRODUCED_LIMIT:
      return isSetNum_rows_produced_limit();
    case PLANNER_TESTCASE_MODE:
      return isSetPlanner_testcase_mode();
    case DEFAULT_FILE_FORMAT:
      return isSetDefault_file_format();
    case PARQUET_TIMESTAMP_TYPE:
      return isSetParquet_timestamp_type();
    case PARQUET_READ_PAGE_INDEX:
      return isSetParquet_read_page_index();
    case PARQUET_WRITE_PAGE_INDEX:
      return isSetParquet_write_page_index();
    case PARQUET_PAGE_ROW_COUNT_LIMIT:
      return isSetParquet_page_row_count_limit();
    case DISABLE_HDFS_NUM_ROWS_ESTIMATE:
      return isSetDisable_hdfs_num_rows_estimate();
    case DEFAULT_HINTS_INSERT_STATEMENT:
      return isSetDefault_hints_insert_statement();
    case SPOOL_QUERY_RESULTS:
      return isSetSpool_query_results();
    case DEFAULT_TRANSACTIONAL_TYPE:
      return isSetDefault_transactional_type();
    case STATEMENT_EXPRESSION_LIMIT:
      return isSetStatement_expression_limit();
    case MAX_STATEMENT_LENGTH_BYTES:
      return isSetMax_statement_length_bytes();
    case DISABLE_DATA_CACHE:
      return isSetDisable_data_cache();
    case MAX_RESULT_SPOOLING_MEM:
      return isSetMax_result_spooling_mem();
    case MAX_SPILLED_RESULT_SPOOLING_MEM:
      return isSetMax_spilled_result_spooling_mem();
    case DISABLE_HBASE_NUM_ROWS_ESTIMATE:
      return isSetDisable_hbase_num_rows_estimate();
    case FETCH_ROWS_TIMEOUT_MS:
      return isSetFetch_rows_timeout_ms();
    case NOW_STRING:
      return isSetNow_string();
    case PARQUET_OBJECT_STORE_SPLIT_SIZE:
      return isSetParquet_object_store_split_size();
    case MEM_LIMIT_EXECUTORS:
      return isSetMem_limit_executors();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueryOptions)
      return this.equals((TQueryOptions)that);
    return false;
  }

  public boolean equals(TQueryOptions that) {
    if (that == null)
      return false;

    boolean this_present_abort_on_error = true && this.isSetAbort_on_error();
    boolean that_present_abort_on_error = true && that.isSetAbort_on_error();
    if (this_present_abort_on_error || that_present_abort_on_error) {
      if (!(this_present_abort_on_error && that_present_abort_on_error))
        return false;
      if (this.abort_on_error != that.abort_on_error)
        return false;
    }

    boolean this_present_max_errors = true && this.isSetMax_errors();
    boolean that_present_max_errors = true && that.isSetMax_errors();
    if (this_present_max_errors || that_present_max_errors) {
      if (!(this_present_max_errors && that_present_max_errors))
        return false;
      if (this.max_errors != that.max_errors)
        return false;
    }

    boolean this_present_disable_codegen = true && this.isSetDisable_codegen();
    boolean that_present_disable_codegen = true && that.isSetDisable_codegen();
    if (this_present_disable_codegen || that_present_disable_codegen) {
      if (!(this_present_disable_codegen && that_present_disable_codegen))
        return false;
      if (this.disable_codegen != that.disable_codegen)
        return false;
    }

    boolean this_present_batch_size = true && this.isSetBatch_size();
    boolean that_present_batch_size = true && that.isSetBatch_size();
    if (this_present_batch_size || that_present_batch_size) {
      if (!(this_present_batch_size && that_present_batch_size))
        return false;
      if (this.batch_size != that.batch_size)
        return false;
    }

    boolean this_present_num_nodes = true && this.isSetNum_nodes();
    boolean that_present_num_nodes = true && that.isSetNum_nodes();
    if (this_present_num_nodes || that_present_num_nodes) {
      if (!(this_present_num_nodes && that_present_num_nodes))
        return false;
      if (this.num_nodes != that.num_nodes)
        return false;
    }

    boolean this_present_max_scan_range_length = true && this.isSetMax_scan_range_length();
    boolean that_present_max_scan_range_length = true && that.isSetMax_scan_range_length();
    if (this_present_max_scan_range_length || that_present_max_scan_range_length) {
      if (!(this_present_max_scan_range_length && that_present_max_scan_range_length))
        return false;
      if (this.max_scan_range_length != that.max_scan_range_length)
        return false;
    }

    boolean this_present_num_scanner_threads = true && this.isSetNum_scanner_threads();
    boolean that_present_num_scanner_threads = true && that.isSetNum_scanner_threads();
    if (this_present_num_scanner_threads || that_present_num_scanner_threads) {
      if (!(this_present_num_scanner_threads && that_present_num_scanner_threads))
        return false;
      if (this.num_scanner_threads != that.num_scanner_threads)
        return false;
    }

    boolean this_present_debug_action = true && this.isSetDebug_action();
    boolean that_present_debug_action = true && that.isSetDebug_action();
    if (this_present_debug_action || that_present_debug_action) {
      if (!(this_present_debug_action && that_present_debug_action))
        return false;
      if (!this.debug_action.equals(that.debug_action))
        return false;
    }

    boolean this_present_mem_limit = true && this.isSetMem_limit();
    boolean that_present_mem_limit = true && that.isSetMem_limit();
    if (this_present_mem_limit || that_present_mem_limit) {
      if (!(this_present_mem_limit && that_present_mem_limit))
        return false;
      if (this.mem_limit != that.mem_limit)
        return false;
    }

    boolean this_present_compression_codec = true && this.isSetCompression_codec();
    boolean that_present_compression_codec = true && that.isSetCompression_codec();
    if (this_present_compression_codec || that_present_compression_codec) {
      if (!(this_present_compression_codec && that_present_compression_codec))
        return false;
      if (!this.compression_codec.equals(that.compression_codec))
        return false;
    }

    boolean this_present_hbase_caching = true && this.isSetHbase_caching();
    boolean that_present_hbase_caching = true && that.isSetHbase_caching();
    if (this_present_hbase_caching || that_present_hbase_caching) {
      if (!(this_present_hbase_caching && that_present_hbase_caching))
        return false;
      if (this.hbase_caching != that.hbase_caching)
        return false;
    }

    boolean this_present_hbase_cache_blocks = true && this.isSetHbase_cache_blocks();
    boolean that_present_hbase_cache_blocks = true && that.isSetHbase_cache_blocks();
    if (this_present_hbase_cache_blocks || that_present_hbase_cache_blocks) {
      if (!(this_present_hbase_cache_blocks && that_present_hbase_cache_blocks))
        return false;
      if (this.hbase_cache_blocks != that.hbase_cache_blocks)
        return false;
    }

    boolean this_present_parquet_file_size = true && this.isSetParquet_file_size();
    boolean that_present_parquet_file_size = true && that.isSetParquet_file_size();
    if (this_present_parquet_file_size || that_present_parquet_file_size) {
      if (!(this_present_parquet_file_size && that_present_parquet_file_size))
        return false;
      if (this.parquet_file_size != that.parquet_file_size)
        return false;
    }

    boolean this_present_explain_level = true && this.isSetExplain_level();
    boolean that_present_explain_level = true && that.isSetExplain_level();
    if (this_present_explain_level || that_present_explain_level) {
      if (!(this_present_explain_level && that_present_explain_level))
        return false;
      if (!this.explain_level.equals(that.explain_level))
        return false;
    }

    boolean this_present_sync_ddl = true && this.isSetSync_ddl();
    boolean that_present_sync_ddl = true && that.isSetSync_ddl();
    if (this_present_sync_ddl || that_present_sync_ddl) {
      if (!(this_present_sync_ddl && that_present_sync_ddl))
        return false;
      if (this.sync_ddl != that.sync_ddl)
        return false;
    }

    boolean this_present_request_pool = true && this.isSetRequest_pool();
    boolean that_present_request_pool = true && that.isSetRequest_pool();
    if (this_present_request_pool || that_present_request_pool) {
      if (!(this_present_request_pool && that_present_request_pool))
        return false;
      if (!this.request_pool.equals(that.request_pool))
        return false;
    }

    boolean this_present_disable_outermost_topn = true && this.isSetDisable_outermost_topn();
    boolean that_present_disable_outermost_topn = true && that.isSetDisable_outermost_topn();
    if (this_present_disable_outermost_topn || that_present_disable_outermost_topn) {
      if (!(this_present_disable_outermost_topn && that_present_disable_outermost_topn))
        return false;
      if (this.disable_outermost_topn != that.disable_outermost_topn)
        return false;
    }

    boolean this_present_query_timeout_s = true && this.isSetQuery_timeout_s();
    boolean that_present_query_timeout_s = true && that.isSetQuery_timeout_s();
    if (this_present_query_timeout_s || that_present_query_timeout_s) {
      if (!(this_present_query_timeout_s && that_present_query_timeout_s))
        return false;
      if (this.query_timeout_s != that.query_timeout_s)
        return false;
    }

    boolean this_present_buffer_pool_limit = true && this.isSetBuffer_pool_limit();
    boolean that_present_buffer_pool_limit = true && that.isSetBuffer_pool_limit();
    if (this_present_buffer_pool_limit || that_present_buffer_pool_limit) {
      if (!(this_present_buffer_pool_limit && that_present_buffer_pool_limit))
        return false;
      if (this.buffer_pool_limit != that.buffer_pool_limit)
        return false;
    }

    boolean this_present_appx_count_distinct = true && this.isSetAppx_count_distinct();
    boolean that_present_appx_count_distinct = true && that.isSetAppx_count_distinct();
    if (this_present_appx_count_distinct || that_present_appx_count_distinct) {
      if (!(this_present_appx_count_distinct && that_present_appx_count_distinct))
        return false;
      if (this.appx_count_distinct != that.appx_count_distinct)
        return false;
    }

    boolean this_present_disable_unsafe_spills = true && this.isSetDisable_unsafe_spills();
    boolean that_present_disable_unsafe_spills = true && that.isSetDisable_unsafe_spills();
    if (this_present_disable_unsafe_spills || that_present_disable_unsafe_spills) {
      if (!(this_present_disable_unsafe_spills && that_present_disable_unsafe_spills))
        return false;
      if (this.disable_unsafe_spills != that.disable_unsafe_spills)
        return false;
    }

    boolean this_present_exec_single_node_rows_threshold = true && this.isSetExec_single_node_rows_threshold();
    boolean that_present_exec_single_node_rows_threshold = true && that.isSetExec_single_node_rows_threshold();
    if (this_present_exec_single_node_rows_threshold || that_present_exec_single_node_rows_threshold) {
      if (!(this_present_exec_single_node_rows_threshold && that_present_exec_single_node_rows_threshold))
        return false;
      if (this.exec_single_node_rows_threshold != that.exec_single_node_rows_threshold)
        return false;
    }

    boolean this_present_optimize_partition_key_scans = true && this.isSetOptimize_partition_key_scans();
    boolean that_present_optimize_partition_key_scans = true && that.isSetOptimize_partition_key_scans();
    if (this_present_optimize_partition_key_scans || that_present_optimize_partition_key_scans) {
      if (!(this_present_optimize_partition_key_scans && that_present_optimize_partition_key_scans))
        return false;
      if (this.optimize_partition_key_scans != that.optimize_partition_key_scans)
        return false;
    }

    boolean this_present_replica_preference = true && this.isSetReplica_preference();
    boolean that_present_replica_preference = true && that.isSetReplica_preference();
    if (this_present_replica_preference || that_present_replica_preference) {
      if (!(this_present_replica_preference && that_present_replica_preference))
        return false;
      if (!this.replica_preference.equals(that.replica_preference))
        return false;
    }

    boolean this_present_schedule_random_replica = true && this.isSetSchedule_random_replica();
    boolean that_present_schedule_random_replica = true && that.isSetSchedule_random_replica();
    if (this_present_schedule_random_replica || that_present_schedule_random_replica) {
      if (!(this_present_schedule_random_replica && that_present_schedule_random_replica))
        return false;
      if (this.schedule_random_replica != that.schedule_random_replica)
        return false;
    }

    boolean this_present_disable_streaming_preaggregations = true && this.isSetDisable_streaming_preaggregations();
    boolean that_present_disable_streaming_preaggregations = true && that.isSetDisable_streaming_preaggregations();
    if (this_present_disable_streaming_preaggregations || that_present_disable_streaming_preaggregations) {
      if (!(this_present_disable_streaming_preaggregations && that_present_disable_streaming_preaggregations))
        return false;
      if (this.disable_streaming_preaggregations != that.disable_streaming_preaggregations)
        return false;
    }

    boolean this_present_runtime_filter_mode = true && this.isSetRuntime_filter_mode();
    boolean that_present_runtime_filter_mode = true && that.isSetRuntime_filter_mode();
    if (this_present_runtime_filter_mode || that_present_runtime_filter_mode) {
      if (!(this_present_runtime_filter_mode && that_present_runtime_filter_mode))
        return false;
      if (!this.runtime_filter_mode.equals(that.runtime_filter_mode))
        return false;
    }

    boolean this_present_runtime_bloom_filter_size = true && this.isSetRuntime_bloom_filter_size();
    boolean that_present_runtime_bloom_filter_size = true && that.isSetRuntime_bloom_filter_size();
    if (this_present_runtime_bloom_filter_size || that_present_runtime_bloom_filter_size) {
      if (!(this_present_runtime_bloom_filter_size && that_present_runtime_bloom_filter_size))
        return false;
      if (this.runtime_bloom_filter_size != that.runtime_bloom_filter_size)
        return false;
    }

    boolean this_present_runtime_filter_wait_time_ms = true && this.isSetRuntime_filter_wait_time_ms();
    boolean that_present_runtime_filter_wait_time_ms = true && that.isSetRuntime_filter_wait_time_ms();
    if (this_present_runtime_filter_wait_time_ms || that_present_runtime_filter_wait_time_ms) {
      if (!(this_present_runtime_filter_wait_time_ms && that_present_runtime_filter_wait_time_ms))
        return false;
      if (this.runtime_filter_wait_time_ms != that.runtime_filter_wait_time_ms)
        return false;
    }

    boolean this_present_disable_row_runtime_filtering = true && this.isSetDisable_row_runtime_filtering();
    boolean that_present_disable_row_runtime_filtering = true && that.isSetDisable_row_runtime_filtering();
    if (this_present_disable_row_runtime_filtering || that_present_disable_row_runtime_filtering) {
      if (!(this_present_disable_row_runtime_filtering && that_present_disable_row_runtime_filtering))
        return false;
      if (this.disable_row_runtime_filtering != that.disable_row_runtime_filtering)
        return false;
    }

    boolean this_present_max_num_runtime_filters = true && this.isSetMax_num_runtime_filters();
    boolean that_present_max_num_runtime_filters = true && that.isSetMax_num_runtime_filters();
    if (this_present_max_num_runtime_filters || that_present_max_num_runtime_filters) {
      if (!(this_present_max_num_runtime_filters && that_present_max_num_runtime_filters))
        return false;
      if (this.max_num_runtime_filters != that.max_num_runtime_filters)
        return false;
    }

    boolean this_present_parquet_annotate_strings_utf8 = true && this.isSetParquet_annotate_strings_utf8();
    boolean that_present_parquet_annotate_strings_utf8 = true && that.isSetParquet_annotate_strings_utf8();
    if (this_present_parquet_annotate_strings_utf8 || that_present_parquet_annotate_strings_utf8) {
      if (!(this_present_parquet_annotate_strings_utf8 && that_present_parquet_annotate_strings_utf8))
        return false;
      if (this.parquet_annotate_strings_utf8 != that.parquet_annotate_strings_utf8)
        return false;
    }

    boolean this_present_parquet_fallback_schema_resolution = true && this.isSetParquet_fallback_schema_resolution();
    boolean that_present_parquet_fallback_schema_resolution = true && that.isSetParquet_fallback_schema_resolution();
    if (this_present_parquet_fallback_schema_resolution || that_present_parquet_fallback_schema_resolution) {
      if (!(this_present_parquet_fallback_schema_resolution && that_present_parquet_fallback_schema_resolution))
        return false;
      if (!this.parquet_fallback_schema_resolution.equals(that.parquet_fallback_schema_resolution))
        return false;
    }

    boolean this_present_mt_dop = true && this.isSetMt_dop();
    boolean that_present_mt_dop = true && that.isSetMt_dop();
    if (this_present_mt_dop || that_present_mt_dop) {
      if (!(this_present_mt_dop && that_present_mt_dop))
        return false;
      if (this.mt_dop != that.mt_dop)
        return false;
    }

    boolean this_present_s3_skip_insert_staging = true && this.isSetS3_skip_insert_staging();
    boolean that_present_s3_skip_insert_staging = true && that.isSetS3_skip_insert_staging();
    if (this_present_s3_skip_insert_staging || that_present_s3_skip_insert_staging) {
      if (!(this_present_s3_skip_insert_staging && that_present_s3_skip_insert_staging))
        return false;
      if (this.s3_skip_insert_staging != that.s3_skip_insert_staging)
        return false;
    }

    boolean this_present_runtime_filter_min_size = true && this.isSetRuntime_filter_min_size();
    boolean that_present_runtime_filter_min_size = true && that.isSetRuntime_filter_min_size();
    if (this_present_runtime_filter_min_size || that_present_runtime_filter_min_size) {
      if (!(this_present_runtime_filter_min_size && that_present_runtime_filter_min_size))
        return false;
      if (this.runtime_filter_min_size != that.runtime_filter_min_size)
        return false;
    }

    boolean this_present_runtime_filter_max_size = true && this.isSetRuntime_filter_max_size();
    boolean that_present_runtime_filter_max_size = true && that.isSetRuntime_filter_max_size();
    if (this_present_runtime_filter_max_size || that_present_runtime_filter_max_size) {
      if (!(this_present_runtime_filter_max_size && that_present_runtime_filter_max_size))
        return false;
      if (this.runtime_filter_max_size != that.runtime_filter_max_size)
        return false;
    }

    boolean this_present_prefetch_mode = true && this.isSetPrefetch_mode();
    boolean that_present_prefetch_mode = true && that.isSetPrefetch_mode();
    if (this_present_prefetch_mode || that_present_prefetch_mode) {
      if (!(this_present_prefetch_mode && that_present_prefetch_mode))
        return false;
      if (!this.prefetch_mode.equals(that.prefetch_mode))
        return false;
    }

    boolean this_present_strict_mode = true && this.isSetStrict_mode();
    boolean that_present_strict_mode = true && that.isSetStrict_mode();
    if (this_present_strict_mode || that_present_strict_mode) {
      if (!(this_present_strict_mode && that_present_strict_mode))
        return false;
      if (this.strict_mode != that.strict_mode)
        return false;
    }

    boolean this_present_scratch_limit = true && this.isSetScratch_limit();
    boolean that_present_scratch_limit = true && that.isSetScratch_limit();
    if (this_present_scratch_limit || that_present_scratch_limit) {
      if (!(this_present_scratch_limit && that_present_scratch_limit))
        return false;
      if (this.scratch_limit != that.scratch_limit)
        return false;
    }

    boolean this_present_enable_expr_rewrites = true && this.isSetEnable_expr_rewrites();
    boolean that_present_enable_expr_rewrites = true && that.isSetEnable_expr_rewrites();
    if (this_present_enable_expr_rewrites || that_present_enable_expr_rewrites) {
      if (!(this_present_enable_expr_rewrites && that_present_enable_expr_rewrites))
        return false;
      if (this.enable_expr_rewrites != that.enable_expr_rewrites)
        return false;
    }

    boolean this_present_decimal_v2 = true && this.isSetDecimal_v2();
    boolean that_present_decimal_v2 = true && that.isSetDecimal_v2();
    if (this_present_decimal_v2 || that_present_decimal_v2) {
      if (!(this_present_decimal_v2 && that_present_decimal_v2))
        return false;
      if (this.decimal_v2 != that.decimal_v2)
        return false;
    }

    boolean this_present_parquet_dictionary_filtering = true && this.isSetParquet_dictionary_filtering();
    boolean that_present_parquet_dictionary_filtering = true && that.isSetParquet_dictionary_filtering();
    if (this_present_parquet_dictionary_filtering || that_present_parquet_dictionary_filtering) {
      if (!(this_present_parquet_dictionary_filtering && that_present_parquet_dictionary_filtering))
        return false;
      if (this.parquet_dictionary_filtering != that.parquet_dictionary_filtering)
        return false;
    }

    boolean this_present_parquet_array_resolution = true && this.isSetParquet_array_resolution();
    boolean that_present_parquet_array_resolution = true && that.isSetParquet_array_resolution();
    if (this_present_parquet_array_resolution || that_present_parquet_array_resolution) {
      if (!(this_present_parquet_array_resolution && that_present_parquet_array_resolution))
        return false;
      if (!this.parquet_array_resolution.equals(that.parquet_array_resolution))
        return false;
    }

    boolean this_present_parquet_read_statistics = true && this.isSetParquet_read_statistics();
    boolean that_present_parquet_read_statistics = true && that.isSetParquet_read_statistics();
    if (this_present_parquet_read_statistics || that_present_parquet_read_statistics) {
      if (!(this_present_parquet_read_statistics && that_present_parquet_read_statistics))
        return false;
      if (this.parquet_read_statistics != that.parquet_read_statistics)
        return false;
    }

    boolean this_present_default_join_distribution_mode = true && this.isSetDefault_join_distribution_mode();
    boolean that_present_default_join_distribution_mode = true && that.isSetDefault_join_distribution_mode();
    if (this_present_default_join_distribution_mode || that_present_default_join_distribution_mode) {
      if (!(this_present_default_join_distribution_mode && that_present_default_join_distribution_mode))
        return false;
      if (!this.default_join_distribution_mode.equals(that.default_join_distribution_mode))
        return false;
    }

    boolean this_present_disable_codegen_rows_threshold = true && this.isSetDisable_codegen_rows_threshold();
    boolean that_present_disable_codegen_rows_threshold = true && that.isSetDisable_codegen_rows_threshold();
    if (this_present_disable_codegen_rows_threshold || that_present_disable_codegen_rows_threshold) {
      if (!(this_present_disable_codegen_rows_threshold && that_present_disable_codegen_rows_threshold))
        return false;
      if (this.disable_codegen_rows_threshold != that.disable_codegen_rows_threshold)
        return false;
    }

    boolean this_present_default_spillable_buffer_size = true && this.isSetDefault_spillable_buffer_size();
    boolean that_present_default_spillable_buffer_size = true && that.isSetDefault_spillable_buffer_size();
    if (this_present_default_spillable_buffer_size || that_present_default_spillable_buffer_size) {
      if (!(this_present_default_spillable_buffer_size && that_present_default_spillable_buffer_size))
        return false;
      if (this.default_spillable_buffer_size != that.default_spillable_buffer_size)
        return false;
    }

    boolean this_present_min_spillable_buffer_size = true && this.isSetMin_spillable_buffer_size();
    boolean that_present_min_spillable_buffer_size = true && that.isSetMin_spillable_buffer_size();
    if (this_present_min_spillable_buffer_size || that_present_min_spillable_buffer_size) {
      if (!(this_present_min_spillable_buffer_size && that_present_min_spillable_buffer_size))
        return false;
      if (this.min_spillable_buffer_size != that.min_spillable_buffer_size)
        return false;
    }

    boolean this_present_max_row_size = true && this.isSetMax_row_size();
    boolean that_present_max_row_size = true && that.isSetMax_row_size();
    if (this_present_max_row_size || that_present_max_row_size) {
      if (!(this_present_max_row_size && that_present_max_row_size))
        return false;
      if (this.max_row_size != that.max_row_size)
        return false;
    }

    boolean this_present_idle_session_timeout = true && this.isSetIdle_session_timeout();
    boolean that_present_idle_session_timeout = true && that.isSetIdle_session_timeout();
    if (this_present_idle_session_timeout || that_present_idle_session_timeout) {
      if (!(this_present_idle_session_timeout && that_present_idle_session_timeout))
        return false;
      if (this.idle_session_timeout != that.idle_session_timeout)
        return false;
    }

    boolean this_present_compute_stats_min_sample_size = true && this.isSetCompute_stats_min_sample_size();
    boolean that_present_compute_stats_min_sample_size = true && that.isSetCompute_stats_min_sample_size();
    if (this_present_compute_stats_min_sample_size || that_present_compute_stats_min_sample_size) {
      if (!(this_present_compute_stats_min_sample_size && that_present_compute_stats_min_sample_size))
        return false;
      if (this.compute_stats_min_sample_size != that.compute_stats_min_sample_size)
        return false;
    }

    boolean this_present_exec_time_limit_s = true && this.isSetExec_time_limit_s();
    boolean that_present_exec_time_limit_s = true && that.isSetExec_time_limit_s();
    if (this_present_exec_time_limit_s || that_present_exec_time_limit_s) {
      if (!(this_present_exec_time_limit_s && that_present_exec_time_limit_s))
        return false;
      if (this.exec_time_limit_s != that.exec_time_limit_s)
        return false;
    }

    boolean this_present_shuffle_distinct_exprs = true && this.isSetShuffle_distinct_exprs();
    boolean that_present_shuffle_distinct_exprs = true && that.isSetShuffle_distinct_exprs();
    if (this_present_shuffle_distinct_exprs || that_present_shuffle_distinct_exprs) {
      if (!(this_present_shuffle_distinct_exprs && that_present_shuffle_distinct_exprs))
        return false;
      if (this.shuffle_distinct_exprs != that.shuffle_distinct_exprs)
        return false;
    }

    boolean this_present_max_mem_estimate_for_admission = true && this.isSetMax_mem_estimate_for_admission();
    boolean that_present_max_mem_estimate_for_admission = true && that.isSetMax_mem_estimate_for_admission();
    if (this_present_max_mem_estimate_for_admission || that_present_max_mem_estimate_for_admission) {
      if (!(this_present_max_mem_estimate_for_admission && that_present_max_mem_estimate_for_admission))
        return false;
      if (this.max_mem_estimate_for_admission != that.max_mem_estimate_for_admission)
        return false;
    }

    boolean this_present_thread_reservation_limit = true && this.isSetThread_reservation_limit();
    boolean that_present_thread_reservation_limit = true && that.isSetThread_reservation_limit();
    if (this_present_thread_reservation_limit || that_present_thread_reservation_limit) {
      if (!(this_present_thread_reservation_limit && that_present_thread_reservation_limit))
        return false;
      if (this.thread_reservation_limit != that.thread_reservation_limit)
        return false;
    }

    boolean this_present_thread_reservation_aggregate_limit = true && this.isSetThread_reservation_aggregate_limit();
    boolean that_present_thread_reservation_aggregate_limit = true && that.isSetThread_reservation_aggregate_limit();
    if (this_present_thread_reservation_aggregate_limit || that_present_thread_reservation_aggregate_limit) {
      if (!(this_present_thread_reservation_aggregate_limit && that_present_thread_reservation_aggregate_limit))
        return false;
      if (this.thread_reservation_aggregate_limit != that.thread_reservation_aggregate_limit)
        return false;
    }

    boolean this_present_kudu_read_mode = true && this.isSetKudu_read_mode();
    boolean that_present_kudu_read_mode = true && that.isSetKudu_read_mode();
    if (this_present_kudu_read_mode || that_present_kudu_read_mode) {
      if (!(this_present_kudu_read_mode && that_present_kudu_read_mode))
        return false;
      if (!this.kudu_read_mode.equals(that.kudu_read_mode))
        return false;
    }

    boolean this_present_allow_erasure_coded_files = true && this.isSetAllow_erasure_coded_files();
    boolean that_present_allow_erasure_coded_files = true && that.isSetAllow_erasure_coded_files();
    if (this_present_allow_erasure_coded_files || that_present_allow_erasure_coded_files) {
      if (!(this_present_allow_erasure_coded_files && that_present_allow_erasure_coded_files))
        return false;
      if (this.allow_erasure_coded_files != that.allow_erasure_coded_files)
        return false;
    }

    boolean this_present_timezone = true && this.isSetTimezone();
    boolean that_present_timezone = true && that.isSetTimezone();
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (!this.timezone.equals(that.timezone))
        return false;
    }

    boolean this_present_scan_bytes_limit = true && this.isSetScan_bytes_limit();
    boolean that_present_scan_bytes_limit = true && that.isSetScan_bytes_limit();
    if (this_present_scan_bytes_limit || that_present_scan_bytes_limit) {
      if (!(this_present_scan_bytes_limit && that_present_scan_bytes_limit))
        return false;
      if (this.scan_bytes_limit != that.scan_bytes_limit)
        return false;
    }

    boolean this_present_cpu_limit_s = true && this.isSetCpu_limit_s();
    boolean that_present_cpu_limit_s = true && that.isSetCpu_limit_s();
    if (this_present_cpu_limit_s || that_present_cpu_limit_s) {
      if (!(this_present_cpu_limit_s && that_present_cpu_limit_s))
        return false;
      if (this.cpu_limit_s != that.cpu_limit_s)
        return false;
    }

    boolean this_present_topn_bytes_limit = true && this.isSetTopn_bytes_limit();
    boolean that_present_topn_bytes_limit = true && that.isSetTopn_bytes_limit();
    if (this_present_topn_bytes_limit || that_present_topn_bytes_limit) {
      if (!(this_present_topn_bytes_limit && that_present_topn_bytes_limit))
        return false;
      if (this.topn_bytes_limit != that.topn_bytes_limit)
        return false;
    }

    boolean this_present_client_identifier = true && this.isSetClient_identifier();
    boolean that_present_client_identifier = true && that.isSetClient_identifier();
    if (this_present_client_identifier || that_present_client_identifier) {
      if (!(this_present_client_identifier && that_present_client_identifier))
        return false;
      if (!this.client_identifier.equals(that.client_identifier))
        return false;
    }

    boolean this_present_resource_trace_ratio = true && this.isSetResource_trace_ratio();
    boolean that_present_resource_trace_ratio = true && that.isSetResource_trace_ratio();
    if (this_present_resource_trace_ratio || that_present_resource_trace_ratio) {
      if (!(this_present_resource_trace_ratio && that_present_resource_trace_ratio))
        return false;
      if (this.resource_trace_ratio != that.resource_trace_ratio)
        return false;
    }

    boolean this_present_num_remote_executor_candidates = true && this.isSetNum_remote_executor_candidates();
    boolean that_present_num_remote_executor_candidates = true && that.isSetNum_remote_executor_candidates();
    if (this_present_num_remote_executor_candidates || that_present_num_remote_executor_candidates) {
      if (!(this_present_num_remote_executor_candidates && that_present_num_remote_executor_candidates))
        return false;
      if (this.num_remote_executor_candidates != that.num_remote_executor_candidates)
        return false;
    }

    boolean this_present_num_rows_produced_limit = true && this.isSetNum_rows_produced_limit();
    boolean that_present_num_rows_produced_limit = true && that.isSetNum_rows_produced_limit();
    if (this_present_num_rows_produced_limit || that_present_num_rows_produced_limit) {
      if (!(this_present_num_rows_produced_limit && that_present_num_rows_produced_limit))
        return false;
      if (this.num_rows_produced_limit != that.num_rows_produced_limit)
        return false;
    }

    boolean this_present_planner_testcase_mode = true && this.isSetPlanner_testcase_mode();
    boolean that_present_planner_testcase_mode = true && that.isSetPlanner_testcase_mode();
    if (this_present_planner_testcase_mode || that_present_planner_testcase_mode) {
      if (!(this_present_planner_testcase_mode && that_present_planner_testcase_mode))
        return false;
      if (this.planner_testcase_mode != that.planner_testcase_mode)
        return false;
    }

    boolean this_present_default_file_format = true && this.isSetDefault_file_format();
    boolean that_present_default_file_format = true && that.isSetDefault_file_format();
    if (this_present_default_file_format || that_present_default_file_format) {
      if (!(this_present_default_file_format && that_present_default_file_format))
        return false;
      if (!this.default_file_format.equals(that.default_file_format))
        return false;
    }

    boolean this_present_parquet_timestamp_type = true && this.isSetParquet_timestamp_type();
    boolean that_present_parquet_timestamp_type = true && that.isSetParquet_timestamp_type();
    if (this_present_parquet_timestamp_type || that_present_parquet_timestamp_type) {
      if (!(this_present_parquet_timestamp_type && that_present_parquet_timestamp_type))
        return false;
      if (!this.parquet_timestamp_type.equals(that.parquet_timestamp_type))
        return false;
    }

    boolean this_present_parquet_read_page_index = true && this.isSetParquet_read_page_index();
    boolean that_present_parquet_read_page_index = true && that.isSetParquet_read_page_index();
    if (this_present_parquet_read_page_index || that_present_parquet_read_page_index) {
      if (!(this_present_parquet_read_page_index && that_present_parquet_read_page_index))
        return false;
      if (this.parquet_read_page_index != that.parquet_read_page_index)
        return false;
    }

    boolean this_present_parquet_write_page_index = true && this.isSetParquet_write_page_index();
    boolean that_present_parquet_write_page_index = true && that.isSetParquet_write_page_index();
    if (this_present_parquet_write_page_index || that_present_parquet_write_page_index) {
      if (!(this_present_parquet_write_page_index && that_present_parquet_write_page_index))
        return false;
      if (this.parquet_write_page_index != that.parquet_write_page_index)
        return false;
    }

    boolean this_present_parquet_page_row_count_limit = true && this.isSetParquet_page_row_count_limit();
    boolean that_present_parquet_page_row_count_limit = true && that.isSetParquet_page_row_count_limit();
    if (this_present_parquet_page_row_count_limit || that_present_parquet_page_row_count_limit) {
      if (!(this_present_parquet_page_row_count_limit && that_present_parquet_page_row_count_limit))
        return false;
      if (this.parquet_page_row_count_limit != that.parquet_page_row_count_limit)
        return false;
    }

    boolean this_present_disable_hdfs_num_rows_estimate = true && this.isSetDisable_hdfs_num_rows_estimate();
    boolean that_present_disable_hdfs_num_rows_estimate = true && that.isSetDisable_hdfs_num_rows_estimate();
    if (this_present_disable_hdfs_num_rows_estimate || that_present_disable_hdfs_num_rows_estimate) {
      if (!(this_present_disable_hdfs_num_rows_estimate && that_present_disable_hdfs_num_rows_estimate))
        return false;
      if (this.disable_hdfs_num_rows_estimate != that.disable_hdfs_num_rows_estimate)
        return false;
    }

    boolean this_present_default_hints_insert_statement = true && this.isSetDefault_hints_insert_statement();
    boolean that_present_default_hints_insert_statement = true && that.isSetDefault_hints_insert_statement();
    if (this_present_default_hints_insert_statement || that_present_default_hints_insert_statement) {
      if (!(this_present_default_hints_insert_statement && that_present_default_hints_insert_statement))
        return false;
      if (!this.default_hints_insert_statement.equals(that.default_hints_insert_statement))
        return false;
    }

    boolean this_present_spool_query_results = true && this.isSetSpool_query_results();
    boolean that_present_spool_query_results = true && that.isSetSpool_query_results();
    if (this_present_spool_query_results || that_present_spool_query_results) {
      if (!(this_present_spool_query_results && that_present_spool_query_results))
        return false;
      if (this.spool_query_results != that.spool_query_results)
        return false;
    }

    boolean this_present_default_transactional_type = true && this.isSetDefault_transactional_type();
    boolean that_present_default_transactional_type = true && that.isSetDefault_transactional_type();
    if (this_present_default_transactional_type || that_present_default_transactional_type) {
      if (!(this_present_default_transactional_type && that_present_default_transactional_type))
        return false;
      if (!this.default_transactional_type.equals(that.default_transactional_type))
        return false;
    }

    boolean this_present_statement_expression_limit = true && this.isSetStatement_expression_limit();
    boolean that_present_statement_expression_limit = true && that.isSetStatement_expression_limit();
    if (this_present_statement_expression_limit || that_present_statement_expression_limit) {
      if (!(this_present_statement_expression_limit && that_present_statement_expression_limit))
        return false;
      if (this.statement_expression_limit != that.statement_expression_limit)
        return false;
    }

    boolean this_present_max_statement_length_bytes = true && this.isSetMax_statement_length_bytes();
    boolean that_present_max_statement_length_bytes = true && that.isSetMax_statement_length_bytes();
    if (this_present_max_statement_length_bytes || that_present_max_statement_length_bytes) {
      if (!(this_present_max_statement_length_bytes && that_present_max_statement_length_bytes))
        return false;
      if (this.max_statement_length_bytes != that.max_statement_length_bytes)
        return false;
    }

    boolean this_present_disable_data_cache = true && this.isSetDisable_data_cache();
    boolean that_present_disable_data_cache = true && that.isSetDisable_data_cache();
    if (this_present_disable_data_cache || that_present_disable_data_cache) {
      if (!(this_present_disable_data_cache && that_present_disable_data_cache))
        return false;
      if (this.disable_data_cache != that.disable_data_cache)
        return false;
    }

    boolean this_present_max_result_spooling_mem = true && this.isSetMax_result_spooling_mem();
    boolean that_present_max_result_spooling_mem = true && that.isSetMax_result_spooling_mem();
    if (this_present_max_result_spooling_mem || that_present_max_result_spooling_mem) {
      if (!(this_present_max_result_spooling_mem && that_present_max_result_spooling_mem))
        return false;
      if (this.max_result_spooling_mem != that.max_result_spooling_mem)
        return false;
    }

    boolean this_present_max_spilled_result_spooling_mem = true && this.isSetMax_spilled_result_spooling_mem();
    boolean that_present_max_spilled_result_spooling_mem = true && that.isSetMax_spilled_result_spooling_mem();
    if (this_present_max_spilled_result_spooling_mem || that_present_max_spilled_result_spooling_mem) {
      if (!(this_present_max_spilled_result_spooling_mem && that_present_max_spilled_result_spooling_mem))
        return false;
      if (this.max_spilled_result_spooling_mem != that.max_spilled_result_spooling_mem)
        return false;
    }

    boolean this_present_disable_hbase_num_rows_estimate = true && this.isSetDisable_hbase_num_rows_estimate();
    boolean that_present_disable_hbase_num_rows_estimate = true && that.isSetDisable_hbase_num_rows_estimate();
    if (this_present_disable_hbase_num_rows_estimate || that_present_disable_hbase_num_rows_estimate) {
      if (!(this_present_disable_hbase_num_rows_estimate && that_present_disable_hbase_num_rows_estimate))
        return false;
      if (this.disable_hbase_num_rows_estimate != that.disable_hbase_num_rows_estimate)
        return false;
    }

    boolean this_present_fetch_rows_timeout_ms = true && this.isSetFetch_rows_timeout_ms();
    boolean that_present_fetch_rows_timeout_ms = true && that.isSetFetch_rows_timeout_ms();
    if (this_present_fetch_rows_timeout_ms || that_present_fetch_rows_timeout_ms) {
      if (!(this_present_fetch_rows_timeout_ms && that_present_fetch_rows_timeout_ms))
        return false;
      if (this.fetch_rows_timeout_ms != that.fetch_rows_timeout_ms)
        return false;
    }

    boolean this_present_now_string = true && this.isSetNow_string();
    boolean that_present_now_string = true && that.isSetNow_string();
    if (this_present_now_string || that_present_now_string) {
      if (!(this_present_now_string && that_present_now_string))
        return false;
      if (!this.now_string.equals(that.now_string))
        return false;
    }

    boolean this_present_parquet_object_store_split_size = true && this.isSetParquet_object_store_split_size();
    boolean that_present_parquet_object_store_split_size = true && that.isSetParquet_object_store_split_size();
    if (this_present_parquet_object_store_split_size || that_present_parquet_object_store_split_size) {
      if (!(this_present_parquet_object_store_split_size && that_present_parquet_object_store_split_size))
        return false;
      if (this.parquet_object_store_split_size != that.parquet_object_store_split_size)
        return false;
    }

    boolean this_present_mem_limit_executors = true && this.isSetMem_limit_executors();
    boolean that_present_mem_limit_executors = true && that.isSetMem_limit_executors();
    if (this_present_mem_limit_executors || that_present_mem_limit_executors) {
      if (!(this_present_mem_limit_executors && that_present_mem_limit_executors))
        return false;
      if (this.mem_limit_executors != that.mem_limit_executors)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_abort_on_error = true && (isSetAbort_on_error());
    list.add(present_abort_on_error);
    if (present_abort_on_error)
      list.add(abort_on_error);

    boolean present_max_errors = true && (isSetMax_errors());
    list.add(present_max_errors);
    if (present_max_errors)
      list.add(max_errors);

    boolean present_disable_codegen = true && (isSetDisable_codegen());
    list.add(present_disable_codegen);
    if (present_disable_codegen)
      list.add(disable_codegen);

    boolean present_batch_size = true && (isSetBatch_size());
    list.add(present_batch_size);
    if (present_batch_size)
      list.add(batch_size);

    boolean present_num_nodes = true && (isSetNum_nodes());
    list.add(present_num_nodes);
    if (present_num_nodes)
      list.add(num_nodes);

    boolean present_max_scan_range_length = true && (isSetMax_scan_range_length());
    list.add(present_max_scan_range_length);
    if (present_max_scan_range_length)
      list.add(max_scan_range_length);

    boolean present_num_scanner_threads = true && (isSetNum_scanner_threads());
    list.add(present_num_scanner_threads);
    if (present_num_scanner_threads)
      list.add(num_scanner_threads);

    boolean present_debug_action = true && (isSetDebug_action());
    list.add(present_debug_action);
    if (present_debug_action)
      list.add(debug_action);

    boolean present_mem_limit = true && (isSetMem_limit());
    list.add(present_mem_limit);
    if (present_mem_limit)
      list.add(mem_limit);

    boolean present_compression_codec = true && (isSetCompression_codec());
    list.add(present_compression_codec);
    if (present_compression_codec)
      list.add(compression_codec);

    boolean present_hbase_caching = true && (isSetHbase_caching());
    list.add(present_hbase_caching);
    if (present_hbase_caching)
      list.add(hbase_caching);

    boolean present_hbase_cache_blocks = true && (isSetHbase_cache_blocks());
    list.add(present_hbase_cache_blocks);
    if (present_hbase_cache_blocks)
      list.add(hbase_cache_blocks);

    boolean present_parquet_file_size = true && (isSetParquet_file_size());
    list.add(present_parquet_file_size);
    if (present_parquet_file_size)
      list.add(parquet_file_size);

    boolean present_explain_level = true && (isSetExplain_level());
    list.add(present_explain_level);
    if (present_explain_level)
      list.add(explain_level.getValue());

    boolean present_sync_ddl = true && (isSetSync_ddl());
    list.add(present_sync_ddl);
    if (present_sync_ddl)
      list.add(sync_ddl);

    boolean present_request_pool = true && (isSetRequest_pool());
    list.add(present_request_pool);
    if (present_request_pool)
      list.add(request_pool);

    boolean present_disable_outermost_topn = true && (isSetDisable_outermost_topn());
    list.add(present_disable_outermost_topn);
    if (present_disable_outermost_topn)
      list.add(disable_outermost_topn);

    boolean present_query_timeout_s = true && (isSetQuery_timeout_s());
    list.add(present_query_timeout_s);
    if (present_query_timeout_s)
      list.add(query_timeout_s);

    boolean present_buffer_pool_limit = true && (isSetBuffer_pool_limit());
    list.add(present_buffer_pool_limit);
    if (present_buffer_pool_limit)
      list.add(buffer_pool_limit);

    boolean present_appx_count_distinct = true && (isSetAppx_count_distinct());
    list.add(present_appx_count_distinct);
    if (present_appx_count_distinct)
      list.add(appx_count_distinct);

    boolean present_disable_unsafe_spills = true && (isSetDisable_unsafe_spills());
    list.add(present_disable_unsafe_spills);
    if (present_disable_unsafe_spills)
      list.add(disable_unsafe_spills);

    boolean present_exec_single_node_rows_threshold = true && (isSetExec_single_node_rows_threshold());
    list.add(present_exec_single_node_rows_threshold);
    if (present_exec_single_node_rows_threshold)
      list.add(exec_single_node_rows_threshold);

    boolean present_optimize_partition_key_scans = true && (isSetOptimize_partition_key_scans());
    list.add(present_optimize_partition_key_scans);
    if (present_optimize_partition_key_scans)
      list.add(optimize_partition_key_scans);

    boolean present_replica_preference = true && (isSetReplica_preference());
    list.add(present_replica_preference);
    if (present_replica_preference)
      list.add(replica_preference.getValue());

    boolean present_schedule_random_replica = true && (isSetSchedule_random_replica());
    list.add(present_schedule_random_replica);
    if (present_schedule_random_replica)
      list.add(schedule_random_replica);

    boolean present_disable_streaming_preaggregations = true && (isSetDisable_streaming_preaggregations());
    list.add(present_disable_streaming_preaggregations);
    if (present_disable_streaming_preaggregations)
      list.add(disable_streaming_preaggregations);

    boolean present_runtime_filter_mode = true && (isSetRuntime_filter_mode());
    list.add(present_runtime_filter_mode);
    if (present_runtime_filter_mode)
      list.add(runtime_filter_mode.getValue());

    boolean present_runtime_bloom_filter_size = true && (isSetRuntime_bloom_filter_size());
    list.add(present_runtime_bloom_filter_size);
    if (present_runtime_bloom_filter_size)
      list.add(runtime_bloom_filter_size);

    boolean present_runtime_filter_wait_time_ms = true && (isSetRuntime_filter_wait_time_ms());
    list.add(present_runtime_filter_wait_time_ms);
    if (present_runtime_filter_wait_time_ms)
      list.add(runtime_filter_wait_time_ms);

    boolean present_disable_row_runtime_filtering = true && (isSetDisable_row_runtime_filtering());
    list.add(present_disable_row_runtime_filtering);
    if (present_disable_row_runtime_filtering)
      list.add(disable_row_runtime_filtering);

    boolean present_max_num_runtime_filters = true && (isSetMax_num_runtime_filters());
    list.add(present_max_num_runtime_filters);
    if (present_max_num_runtime_filters)
      list.add(max_num_runtime_filters);

    boolean present_parquet_annotate_strings_utf8 = true && (isSetParquet_annotate_strings_utf8());
    list.add(present_parquet_annotate_strings_utf8);
    if (present_parquet_annotate_strings_utf8)
      list.add(parquet_annotate_strings_utf8);

    boolean present_parquet_fallback_schema_resolution = true && (isSetParquet_fallback_schema_resolution());
    list.add(present_parquet_fallback_schema_resolution);
    if (present_parquet_fallback_schema_resolution)
      list.add(parquet_fallback_schema_resolution.getValue());

    boolean present_mt_dop = true && (isSetMt_dop());
    list.add(present_mt_dop);
    if (present_mt_dop)
      list.add(mt_dop);

    boolean present_s3_skip_insert_staging = true && (isSetS3_skip_insert_staging());
    list.add(present_s3_skip_insert_staging);
    if (present_s3_skip_insert_staging)
      list.add(s3_skip_insert_staging);

    boolean present_runtime_filter_min_size = true && (isSetRuntime_filter_min_size());
    list.add(present_runtime_filter_min_size);
    if (present_runtime_filter_min_size)
      list.add(runtime_filter_min_size);

    boolean present_runtime_filter_max_size = true && (isSetRuntime_filter_max_size());
    list.add(present_runtime_filter_max_size);
    if (present_runtime_filter_max_size)
      list.add(runtime_filter_max_size);

    boolean present_prefetch_mode = true && (isSetPrefetch_mode());
    list.add(present_prefetch_mode);
    if (present_prefetch_mode)
      list.add(prefetch_mode.getValue());

    boolean present_strict_mode = true && (isSetStrict_mode());
    list.add(present_strict_mode);
    if (present_strict_mode)
      list.add(strict_mode);

    boolean present_scratch_limit = true && (isSetScratch_limit());
    list.add(present_scratch_limit);
    if (present_scratch_limit)
      list.add(scratch_limit);

    boolean present_enable_expr_rewrites = true && (isSetEnable_expr_rewrites());
    list.add(present_enable_expr_rewrites);
    if (present_enable_expr_rewrites)
      list.add(enable_expr_rewrites);

    boolean present_decimal_v2 = true && (isSetDecimal_v2());
    list.add(present_decimal_v2);
    if (present_decimal_v2)
      list.add(decimal_v2);

    boolean present_parquet_dictionary_filtering = true && (isSetParquet_dictionary_filtering());
    list.add(present_parquet_dictionary_filtering);
    if (present_parquet_dictionary_filtering)
      list.add(parquet_dictionary_filtering);

    boolean present_parquet_array_resolution = true && (isSetParquet_array_resolution());
    list.add(present_parquet_array_resolution);
    if (present_parquet_array_resolution)
      list.add(parquet_array_resolution.getValue());

    boolean present_parquet_read_statistics = true && (isSetParquet_read_statistics());
    list.add(present_parquet_read_statistics);
    if (present_parquet_read_statistics)
      list.add(parquet_read_statistics);

    boolean present_default_join_distribution_mode = true && (isSetDefault_join_distribution_mode());
    list.add(present_default_join_distribution_mode);
    if (present_default_join_distribution_mode)
      list.add(default_join_distribution_mode.getValue());

    boolean present_disable_codegen_rows_threshold = true && (isSetDisable_codegen_rows_threshold());
    list.add(present_disable_codegen_rows_threshold);
    if (present_disable_codegen_rows_threshold)
      list.add(disable_codegen_rows_threshold);

    boolean present_default_spillable_buffer_size = true && (isSetDefault_spillable_buffer_size());
    list.add(present_default_spillable_buffer_size);
    if (present_default_spillable_buffer_size)
      list.add(default_spillable_buffer_size);

    boolean present_min_spillable_buffer_size = true && (isSetMin_spillable_buffer_size());
    list.add(present_min_spillable_buffer_size);
    if (present_min_spillable_buffer_size)
      list.add(min_spillable_buffer_size);

    boolean present_max_row_size = true && (isSetMax_row_size());
    list.add(present_max_row_size);
    if (present_max_row_size)
      list.add(max_row_size);

    boolean present_idle_session_timeout = true && (isSetIdle_session_timeout());
    list.add(present_idle_session_timeout);
    if (present_idle_session_timeout)
      list.add(idle_session_timeout);

    boolean present_compute_stats_min_sample_size = true && (isSetCompute_stats_min_sample_size());
    list.add(present_compute_stats_min_sample_size);
    if (present_compute_stats_min_sample_size)
      list.add(compute_stats_min_sample_size);

    boolean present_exec_time_limit_s = true && (isSetExec_time_limit_s());
    list.add(present_exec_time_limit_s);
    if (present_exec_time_limit_s)
      list.add(exec_time_limit_s);

    boolean present_shuffle_distinct_exprs = true && (isSetShuffle_distinct_exprs());
    list.add(present_shuffle_distinct_exprs);
    if (present_shuffle_distinct_exprs)
      list.add(shuffle_distinct_exprs);

    boolean present_max_mem_estimate_for_admission = true && (isSetMax_mem_estimate_for_admission());
    list.add(present_max_mem_estimate_for_admission);
    if (present_max_mem_estimate_for_admission)
      list.add(max_mem_estimate_for_admission);

    boolean present_thread_reservation_limit = true && (isSetThread_reservation_limit());
    list.add(present_thread_reservation_limit);
    if (present_thread_reservation_limit)
      list.add(thread_reservation_limit);

    boolean present_thread_reservation_aggregate_limit = true && (isSetThread_reservation_aggregate_limit());
    list.add(present_thread_reservation_aggregate_limit);
    if (present_thread_reservation_aggregate_limit)
      list.add(thread_reservation_aggregate_limit);

    boolean present_kudu_read_mode = true && (isSetKudu_read_mode());
    list.add(present_kudu_read_mode);
    if (present_kudu_read_mode)
      list.add(kudu_read_mode.getValue());

    boolean present_allow_erasure_coded_files = true && (isSetAllow_erasure_coded_files());
    list.add(present_allow_erasure_coded_files);
    if (present_allow_erasure_coded_files)
      list.add(allow_erasure_coded_files);

    boolean present_timezone = true && (isSetTimezone());
    list.add(present_timezone);
    if (present_timezone)
      list.add(timezone);

    boolean present_scan_bytes_limit = true && (isSetScan_bytes_limit());
    list.add(present_scan_bytes_limit);
    if (present_scan_bytes_limit)
      list.add(scan_bytes_limit);

    boolean present_cpu_limit_s = true && (isSetCpu_limit_s());
    list.add(present_cpu_limit_s);
    if (present_cpu_limit_s)
      list.add(cpu_limit_s);

    boolean present_topn_bytes_limit = true && (isSetTopn_bytes_limit());
    list.add(present_topn_bytes_limit);
    if (present_topn_bytes_limit)
      list.add(topn_bytes_limit);

    boolean present_client_identifier = true && (isSetClient_identifier());
    list.add(present_client_identifier);
    if (present_client_identifier)
      list.add(client_identifier);

    boolean present_resource_trace_ratio = true && (isSetResource_trace_ratio());
    list.add(present_resource_trace_ratio);
    if (present_resource_trace_ratio)
      list.add(resource_trace_ratio);

    boolean present_num_remote_executor_candidates = true && (isSetNum_remote_executor_candidates());
    list.add(present_num_remote_executor_candidates);
    if (present_num_remote_executor_candidates)
      list.add(num_remote_executor_candidates);

    boolean present_num_rows_produced_limit = true && (isSetNum_rows_produced_limit());
    list.add(present_num_rows_produced_limit);
    if (present_num_rows_produced_limit)
      list.add(num_rows_produced_limit);

    boolean present_planner_testcase_mode = true && (isSetPlanner_testcase_mode());
    list.add(present_planner_testcase_mode);
    if (present_planner_testcase_mode)
      list.add(planner_testcase_mode);

    boolean present_default_file_format = true && (isSetDefault_file_format());
    list.add(present_default_file_format);
    if (present_default_file_format)
      list.add(default_file_format.getValue());

    boolean present_parquet_timestamp_type = true && (isSetParquet_timestamp_type());
    list.add(present_parquet_timestamp_type);
    if (present_parquet_timestamp_type)
      list.add(parquet_timestamp_type.getValue());

    boolean present_parquet_read_page_index = true && (isSetParquet_read_page_index());
    list.add(present_parquet_read_page_index);
    if (present_parquet_read_page_index)
      list.add(parquet_read_page_index);

    boolean present_parquet_write_page_index = true && (isSetParquet_write_page_index());
    list.add(present_parquet_write_page_index);
    if (present_parquet_write_page_index)
      list.add(parquet_write_page_index);

    boolean present_parquet_page_row_count_limit = true && (isSetParquet_page_row_count_limit());
    list.add(present_parquet_page_row_count_limit);
    if (present_parquet_page_row_count_limit)
      list.add(parquet_page_row_count_limit);

    boolean present_disable_hdfs_num_rows_estimate = true && (isSetDisable_hdfs_num_rows_estimate());
    list.add(present_disable_hdfs_num_rows_estimate);
    if (present_disable_hdfs_num_rows_estimate)
      list.add(disable_hdfs_num_rows_estimate);

    boolean present_default_hints_insert_statement = true && (isSetDefault_hints_insert_statement());
    list.add(present_default_hints_insert_statement);
    if (present_default_hints_insert_statement)
      list.add(default_hints_insert_statement);

    boolean present_spool_query_results = true && (isSetSpool_query_results());
    list.add(present_spool_query_results);
    if (present_spool_query_results)
      list.add(spool_query_results);

    boolean present_default_transactional_type = true && (isSetDefault_transactional_type());
    list.add(present_default_transactional_type);
    if (present_default_transactional_type)
      list.add(default_transactional_type.getValue());

    boolean present_statement_expression_limit = true && (isSetStatement_expression_limit());
    list.add(present_statement_expression_limit);
    if (present_statement_expression_limit)
      list.add(statement_expression_limit);

    boolean present_max_statement_length_bytes = true && (isSetMax_statement_length_bytes());
    list.add(present_max_statement_length_bytes);
    if (present_max_statement_length_bytes)
      list.add(max_statement_length_bytes);

    boolean present_disable_data_cache = true && (isSetDisable_data_cache());
    list.add(present_disable_data_cache);
    if (present_disable_data_cache)
      list.add(disable_data_cache);

    boolean present_max_result_spooling_mem = true && (isSetMax_result_spooling_mem());
    list.add(present_max_result_spooling_mem);
    if (present_max_result_spooling_mem)
      list.add(max_result_spooling_mem);

    boolean present_max_spilled_result_spooling_mem = true && (isSetMax_spilled_result_spooling_mem());
    list.add(present_max_spilled_result_spooling_mem);
    if (present_max_spilled_result_spooling_mem)
      list.add(max_spilled_result_spooling_mem);

    boolean present_disable_hbase_num_rows_estimate = true && (isSetDisable_hbase_num_rows_estimate());
    list.add(present_disable_hbase_num_rows_estimate);
    if (present_disable_hbase_num_rows_estimate)
      list.add(disable_hbase_num_rows_estimate);

    boolean present_fetch_rows_timeout_ms = true && (isSetFetch_rows_timeout_ms());
    list.add(present_fetch_rows_timeout_ms);
    if (present_fetch_rows_timeout_ms)
      list.add(fetch_rows_timeout_ms);

    boolean present_now_string = true && (isSetNow_string());
    list.add(present_now_string);
    if (present_now_string)
      list.add(now_string);

    boolean present_parquet_object_store_split_size = true && (isSetParquet_object_store_split_size());
    list.add(present_parquet_object_store_split_size);
    if (present_parquet_object_store_split_size)
      list.add(parquet_object_store_split_size);

    boolean present_mem_limit_executors = true && (isSetMem_limit_executors());
    list.add(present_mem_limit_executors);
    if (present_mem_limit_executors)
      list.add(mem_limit_executors);

    return list.hashCode();
  }

  @Override
  public int compareTo(TQueryOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAbort_on_error()).compareTo(other.isSetAbort_on_error());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbort_on_error()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abort_on_error, other.abort_on_error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_errors()).compareTo(other.isSetMax_errors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_errors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_errors, other.max_errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_codegen()).compareTo(other.isSetDisable_codegen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_codegen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_codegen, other.disable_codegen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatch_size()).compareTo(other.isSetBatch_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatch_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_size, other.batch_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_nodes()).compareTo(other.isSetNum_nodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_nodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_nodes, other.num_nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_scan_range_length()).compareTo(other.isSetMax_scan_range_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_scan_range_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_scan_range_length, other.max_scan_range_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_scanner_threads()).compareTo(other.isSetNum_scanner_threads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_scanner_threads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_scanner_threads, other.num_scanner_threads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_action()).compareTo(other.isSetDebug_action());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_action()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_action, other.debug_action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMem_limit()).compareTo(other.isSetMem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_limit, other.mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompression_codec()).compareTo(other.isSetCompression_codec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression_codec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression_codec, other.compression_codec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbase_caching()).compareTo(other.isSetHbase_caching());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbase_caching()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbase_caching, other.hbase_caching);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHbase_cache_blocks()).compareTo(other.isSetHbase_cache_blocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHbase_cache_blocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hbase_cache_blocks, other.hbase_cache_blocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_file_size()).compareTo(other.isSetParquet_file_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_file_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_file_size, other.parquet_file_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExplain_level()).compareTo(other.isSetExplain_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExplain_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.explain_level, other.explain_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSync_ddl()).compareTo(other.isSetSync_ddl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSync_ddl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync_ddl, other.sync_ddl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_pool()).compareTo(other.isSetRequest_pool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_pool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_pool, other.request_pool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_outermost_topn()).compareTo(other.isSetDisable_outermost_topn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_outermost_topn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_outermost_topn, other.disable_outermost_topn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_timeout_s()).compareTo(other.isSetQuery_timeout_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_timeout_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_timeout_s, other.query_timeout_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuffer_pool_limit()).compareTo(other.isSetBuffer_pool_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffer_pool_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffer_pool_limit, other.buffer_pool_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppx_count_distinct()).compareTo(other.isSetAppx_count_distinct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppx_count_distinct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appx_count_distinct, other.appx_count_distinct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_unsafe_spills()).compareTo(other.isSetDisable_unsafe_spills());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_unsafe_spills()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_unsafe_spills, other.disable_unsafe_spills);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExec_single_node_rows_threshold()).compareTo(other.isSetExec_single_node_rows_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExec_single_node_rows_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exec_single_node_rows_threshold, other.exec_single_node_rows_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptimize_partition_key_scans()).compareTo(other.isSetOptimize_partition_key_scans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptimize_partition_key_scans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optimize_partition_key_scans, other.optimize_partition_key_scans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplica_preference()).compareTo(other.isSetReplica_preference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplica_preference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replica_preference, other.replica_preference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchedule_random_replica()).compareTo(other.isSetSchedule_random_replica());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedule_random_replica()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedule_random_replica, other.schedule_random_replica);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_streaming_preaggregations()).compareTo(other.isSetDisable_streaming_preaggregations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_streaming_preaggregations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_streaming_preaggregations, other.disable_streaming_preaggregations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_filter_mode()).compareTo(other.isSetRuntime_filter_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_mode, other.runtime_filter_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_bloom_filter_size()).compareTo(other.isSetRuntime_bloom_filter_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_bloom_filter_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_bloom_filter_size, other.runtime_bloom_filter_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_filter_wait_time_ms()).compareTo(other.isSetRuntime_filter_wait_time_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_wait_time_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_wait_time_ms, other.runtime_filter_wait_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_row_runtime_filtering()).compareTo(other.isSetDisable_row_runtime_filtering());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_row_runtime_filtering()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_row_runtime_filtering, other.disable_row_runtime_filtering);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_num_runtime_filters()).compareTo(other.isSetMax_num_runtime_filters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_num_runtime_filters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_num_runtime_filters, other.max_num_runtime_filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_annotate_strings_utf8()).compareTo(other.isSetParquet_annotate_strings_utf8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_annotate_strings_utf8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_annotate_strings_utf8, other.parquet_annotate_strings_utf8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_fallback_schema_resolution()).compareTo(other.isSetParquet_fallback_schema_resolution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_fallback_schema_resolution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_fallback_schema_resolution, other.parquet_fallback_schema_resolution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMt_dop()).compareTo(other.isSetMt_dop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMt_dop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mt_dop, other.mt_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetS3_skip_insert_staging()).compareTo(other.isSetS3_skip_insert_staging());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS3_skip_insert_staging()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s3_skip_insert_staging, other.s3_skip_insert_staging);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_filter_min_size()).compareTo(other.isSetRuntime_filter_min_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_min_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_min_size, other.runtime_filter_min_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuntime_filter_max_size()).compareTo(other.isSetRuntime_filter_max_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntime_filter_max_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_max_size, other.runtime_filter_max_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrefetch_mode()).compareTo(other.isSetPrefetch_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrefetch_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefetch_mode, other.prefetch_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrict_mode()).compareTo(other.isSetStrict_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrict_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strict_mode, other.strict_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScratch_limit()).compareTo(other.isSetScratch_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScratch_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scratch_limit, other.scratch_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnable_expr_rewrites()).compareTo(other.isSetEnable_expr_rewrites());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_expr_rewrites()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_expr_rewrites, other.enable_expr_rewrites);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDecimal_v2()).compareTo(other.isSetDecimal_v2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecimal_v2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decimal_v2, other.decimal_v2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_dictionary_filtering()).compareTo(other.isSetParquet_dictionary_filtering());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_dictionary_filtering()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_dictionary_filtering, other.parquet_dictionary_filtering);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_array_resolution()).compareTo(other.isSetParquet_array_resolution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_array_resolution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_array_resolution, other.parquet_array_resolution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_read_statistics()).compareTo(other.isSetParquet_read_statistics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_read_statistics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_read_statistics, other.parquet_read_statistics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_join_distribution_mode()).compareTo(other.isSetDefault_join_distribution_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_join_distribution_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_join_distribution_mode, other.default_join_distribution_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_codegen_rows_threshold()).compareTo(other.isSetDisable_codegen_rows_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_codegen_rows_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_codegen_rows_threshold, other.disable_codegen_rows_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_spillable_buffer_size()).compareTo(other.isSetDefault_spillable_buffer_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_spillable_buffer_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_spillable_buffer_size, other.default_spillable_buffer_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_spillable_buffer_size()).compareTo(other.isSetMin_spillable_buffer_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_spillable_buffer_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_spillable_buffer_size, other.min_spillable_buffer_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_row_size()).compareTo(other.isSetMax_row_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_row_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_row_size, other.max_row_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdle_session_timeout()).compareTo(other.isSetIdle_session_timeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdle_session_timeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idle_session_timeout, other.idle_session_timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompute_stats_min_sample_size()).compareTo(other.isSetCompute_stats_min_sample_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompute_stats_min_sample_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compute_stats_min_sample_size, other.compute_stats_min_sample_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExec_time_limit_s()).compareTo(other.isSetExec_time_limit_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExec_time_limit_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exec_time_limit_s, other.exec_time_limit_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShuffle_distinct_exprs()).compareTo(other.isSetShuffle_distinct_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShuffle_distinct_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shuffle_distinct_exprs, other.shuffle_distinct_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_mem_estimate_for_admission()).compareTo(other.isSetMax_mem_estimate_for_admission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_mem_estimate_for_admission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_mem_estimate_for_admission, other.max_mem_estimate_for_admission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThread_reservation_limit()).compareTo(other.isSetThread_reservation_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThread_reservation_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thread_reservation_limit, other.thread_reservation_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThread_reservation_aggregate_limit()).compareTo(other.isSetThread_reservation_aggregate_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThread_reservation_aggregate_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thread_reservation_aggregate_limit, other.thread_reservation_aggregate_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKudu_read_mode()).compareTo(other.isSetKudu_read_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_read_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_read_mode, other.kudu_read_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllow_erasure_coded_files()).compareTo(other.isSetAllow_erasure_coded_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllow_erasure_coded_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allow_erasure_coded_files, other.allow_erasure_coded_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimezone()).compareTo(other.isSetTimezone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScan_bytes_limit()).compareTo(other.isSetScan_bytes_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScan_bytes_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_bytes_limit, other.scan_bytes_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpu_limit_s()).compareTo(other.isSetCpu_limit_s());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpu_limit_s()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpu_limit_s, other.cpu_limit_s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopn_bytes_limit()).compareTo(other.isSetTopn_bytes_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopn_bytes_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topn_bytes_limit, other.topn_bytes_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClient_identifier()).compareTo(other.isSetClient_identifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_identifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_identifier, other.client_identifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource_trace_ratio()).compareTo(other.isSetResource_trace_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource_trace_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_trace_ratio, other.resource_trace_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_remote_executor_candidates()).compareTo(other.isSetNum_remote_executor_candidates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_remote_executor_candidates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_remote_executor_candidates, other.num_remote_executor_candidates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_rows_produced_limit()).compareTo(other.isSetNum_rows_produced_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows_produced_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows_produced_limit, other.num_rows_produced_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanner_testcase_mode()).compareTo(other.isSetPlanner_testcase_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanner_testcase_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planner_testcase_mode, other.planner_testcase_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_file_format()).compareTo(other.isSetDefault_file_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_file_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_file_format, other.default_file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_timestamp_type()).compareTo(other.isSetParquet_timestamp_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_timestamp_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_timestamp_type, other.parquet_timestamp_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_read_page_index()).compareTo(other.isSetParquet_read_page_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_read_page_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_read_page_index, other.parquet_read_page_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_write_page_index()).compareTo(other.isSetParquet_write_page_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_write_page_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_write_page_index, other.parquet_write_page_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_page_row_count_limit()).compareTo(other.isSetParquet_page_row_count_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_page_row_count_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_page_row_count_limit, other.parquet_page_row_count_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_hdfs_num_rows_estimate()).compareTo(other.isSetDisable_hdfs_num_rows_estimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_hdfs_num_rows_estimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_hdfs_num_rows_estimate, other.disable_hdfs_num_rows_estimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_hints_insert_statement()).compareTo(other.isSetDefault_hints_insert_statement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_hints_insert_statement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_hints_insert_statement, other.default_hints_insert_statement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpool_query_results()).compareTo(other.isSetSpool_query_results());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpool_query_results()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spool_query_results, other.spool_query_results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_transactional_type()).compareTo(other.isSetDefault_transactional_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_transactional_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_transactional_type, other.default_transactional_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatement_expression_limit()).compareTo(other.isSetStatement_expression_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatement_expression_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement_expression_limit, other.statement_expression_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_statement_length_bytes()).compareTo(other.isSetMax_statement_length_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_statement_length_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_statement_length_bytes, other.max_statement_length_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_data_cache()).compareTo(other.isSetDisable_data_cache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_data_cache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_data_cache, other.disable_data_cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_result_spooling_mem()).compareTo(other.isSetMax_result_spooling_mem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_result_spooling_mem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_result_spooling_mem, other.max_result_spooling_mem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_spilled_result_spooling_mem()).compareTo(other.isSetMax_spilled_result_spooling_mem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_spilled_result_spooling_mem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_spilled_result_spooling_mem, other.max_spilled_result_spooling_mem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisable_hbase_num_rows_estimate()).compareTo(other.isSetDisable_hbase_num_rows_estimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisable_hbase_num_rows_estimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_hbase_num_rows_estimate, other.disable_hbase_num_rows_estimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetch_rows_timeout_ms()).compareTo(other.isSetFetch_rows_timeout_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetch_rows_timeout_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetch_rows_timeout_ms, other.fetch_rows_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_string()).compareTo(other.isSetNow_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_string, other.now_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParquet_object_store_split_size()).compareTo(other.isSetParquet_object_store_split_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParquet_object_store_split_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parquet_object_store_split_size, other.parquet_object_store_split_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMem_limit_executors()).compareTo(other.isSetMem_limit_executors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMem_limit_executors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_limit_executors, other.mem_limit_executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueryOptions(");
    boolean first = true;

    if (isSetAbort_on_error()) {
      sb.append("abort_on_error:");
      sb.append(this.abort_on_error);
      first = false;
    }
    if (isSetMax_errors()) {
      if (!first) sb.append(", ");
      sb.append("max_errors:");
      sb.append(this.max_errors);
      first = false;
    }
    if (isSetDisable_codegen()) {
      if (!first) sb.append(", ");
      sb.append("disable_codegen:");
      sb.append(this.disable_codegen);
      first = false;
    }
    if (isSetBatch_size()) {
      if (!first) sb.append(", ");
      sb.append("batch_size:");
      sb.append(this.batch_size);
      first = false;
    }
    if (isSetNum_nodes()) {
      if (!first) sb.append(", ");
      sb.append("num_nodes:");
      sb.append(this.num_nodes);
      first = false;
    }
    if (isSetMax_scan_range_length()) {
      if (!first) sb.append(", ");
      sb.append("max_scan_range_length:");
      sb.append(this.max_scan_range_length);
      first = false;
    }
    if (isSetNum_scanner_threads()) {
      if (!first) sb.append(", ");
      sb.append("num_scanner_threads:");
      sb.append(this.num_scanner_threads);
      first = false;
    }
    if (isSetDebug_action()) {
      if (!first) sb.append(", ");
      sb.append("debug_action:");
      if (this.debug_action == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_action);
      }
      first = false;
    }
    if (isSetMem_limit()) {
      if (!first) sb.append(", ");
      sb.append("mem_limit:");
      sb.append(this.mem_limit);
      first = false;
    }
    if (isSetCompression_codec()) {
      if (!first) sb.append(", ");
      sb.append("compression_codec:");
      if (this.compression_codec == null) {
        sb.append("null");
      } else {
        sb.append(this.compression_codec);
      }
      first = false;
    }
    if (isSetHbase_caching()) {
      if (!first) sb.append(", ");
      sb.append("hbase_caching:");
      sb.append(this.hbase_caching);
      first = false;
    }
    if (isSetHbase_cache_blocks()) {
      if (!first) sb.append(", ");
      sb.append("hbase_cache_blocks:");
      sb.append(this.hbase_cache_blocks);
      first = false;
    }
    if (isSetParquet_file_size()) {
      if (!first) sb.append(", ");
      sb.append("parquet_file_size:");
      sb.append(this.parquet_file_size);
      first = false;
    }
    if (isSetExplain_level()) {
      if (!first) sb.append(", ");
      sb.append("explain_level:");
      if (this.explain_level == null) {
        sb.append("null");
      } else {
        sb.append(this.explain_level);
      }
      first = false;
    }
    if (isSetSync_ddl()) {
      if (!first) sb.append(", ");
      sb.append("sync_ddl:");
      sb.append(this.sync_ddl);
      first = false;
    }
    if (isSetRequest_pool()) {
      if (!first) sb.append(", ");
      sb.append("request_pool:");
      if (this.request_pool == null) {
        sb.append("null");
      } else {
        sb.append(this.request_pool);
      }
      first = false;
    }
    if (isSetDisable_outermost_topn()) {
      if (!first) sb.append(", ");
      sb.append("disable_outermost_topn:");
      sb.append(this.disable_outermost_topn);
      first = false;
    }
    if (isSetQuery_timeout_s()) {
      if (!first) sb.append(", ");
      sb.append("query_timeout_s:");
      sb.append(this.query_timeout_s);
      first = false;
    }
    if (isSetBuffer_pool_limit()) {
      if (!first) sb.append(", ");
      sb.append("buffer_pool_limit:");
      sb.append(this.buffer_pool_limit);
      first = false;
    }
    if (isSetAppx_count_distinct()) {
      if (!first) sb.append(", ");
      sb.append("appx_count_distinct:");
      sb.append(this.appx_count_distinct);
      first = false;
    }
    if (isSetDisable_unsafe_spills()) {
      if (!first) sb.append(", ");
      sb.append("disable_unsafe_spills:");
      sb.append(this.disable_unsafe_spills);
      first = false;
    }
    if (isSetExec_single_node_rows_threshold()) {
      if (!first) sb.append(", ");
      sb.append("exec_single_node_rows_threshold:");
      sb.append(this.exec_single_node_rows_threshold);
      first = false;
    }
    if (isSetOptimize_partition_key_scans()) {
      if (!first) sb.append(", ");
      sb.append("optimize_partition_key_scans:");
      sb.append(this.optimize_partition_key_scans);
      first = false;
    }
    if (isSetReplica_preference()) {
      if (!first) sb.append(", ");
      sb.append("replica_preference:");
      if (this.replica_preference == null) {
        sb.append("null");
      } else {
        sb.append(this.replica_preference);
      }
      first = false;
    }
    if (isSetSchedule_random_replica()) {
      if (!first) sb.append(", ");
      sb.append("schedule_random_replica:");
      sb.append(this.schedule_random_replica);
      first = false;
    }
    if (isSetDisable_streaming_preaggregations()) {
      if (!first) sb.append(", ");
      sb.append("disable_streaming_preaggregations:");
      sb.append(this.disable_streaming_preaggregations);
      first = false;
    }
    if (isSetRuntime_filter_mode()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_mode:");
      if (this.runtime_filter_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_filter_mode);
      }
      first = false;
    }
    if (isSetRuntime_bloom_filter_size()) {
      if (!first) sb.append(", ");
      sb.append("runtime_bloom_filter_size:");
      sb.append(this.runtime_bloom_filter_size);
      first = false;
    }
    if (isSetRuntime_filter_wait_time_ms()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_wait_time_ms:");
      sb.append(this.runtime_filter_wait_time_ms);
      first = false;
    }
    if (isSetDisable_row_runtime_filtering()) {
      if (!first) sb.append(", ");
      sb.append("disable_row_runtime_filtering:");
      sb.append(this.disable_row_runtime_filtering);
      first = false;
    }
    if (isSetMax_num_runtime_filters()) {
      if (!first) sb.append(", ");
      sb.append("max_num_runtime_filters:");
      sb.append(this.max_num_runtime_filters);
      first = false;
    }
    if (isSetParquet_annotate_strings_utf8()) {
      if (!first) sb.append(", ");
      sb.append("parquet_annotate_strings_utf8:");
      sb.append(this.parquet_annotate_strings_utf8);
      first = false;
    }
    if (isSetParquet_fallback_schema_resolution()) {
      if (!first) sb.append(", ");
      sb.append("parquet_fallback_schema_resolution:");
      if (this.parquet_fallback_schema_resolution == null) {
        sb.append("null");
      } else {
        sb.append(this.parquet_fallback_schema_resolution);
      }
      first = false;
    }
    if (isSetMt_dop()) {
      if (!first) sb.append(", ");
      sb.append("mt_dop:");
      sb.append(this.mt_dop);
      first = false;
    }
    if (isSetS3_skip_insert_staging()) {
      if (!first) sb.append(", ");
      sb.append("s3_skip_insert_staging:");
      sb.append(this.s3_skip_insert_staging);
      first = false;
    }
    if (isSetRuntime_filter_min_size()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_min_size:");
      sb.append(this.runtime_filter_min_size);
      first = false;
    }
    if (isSetRuntime_filter_max_size()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_max_size:");
      sb.append(this.runtime_filter_max_size);
      first = false;
    }
    if (isSetPrefetch_mode()) {
      if (!first) sb.append(", ");
      sb.append("prefetch_mode:");
      if (this.prefetch_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.prefetch_mode);
      }
      first = false;
    }
    if (isSetStrict_mode()) {
      if (!first) sb.append(", ");
      sb.append("strict_mode:");
      sb.append(this.strict_mode);
      first = false;
    }
    if (isSetScratch_limit()) {
      if (!first) sb.append(", ");
      sb.append("scratch_limit:");
      sb.append(this.scratch_limit);
      first = false;
    }
    if (isSetEnable_expr_rewrites()) {
      if (!first) sb.append(", ");
      sb.append("enable_expr_rewrites:");
      sb.append(this.enable_expr_rewrites);
      first = false;
    }
    if (isSetDecimal_v2()) {
      if (!first) sb.append(", ");
      sb.append("decimal_v2:");
      sb.append(this.decimal_v2);
      first = false;
    }
    if (isSetParquet_dictionary_filtering()) {
      if (!first) sb.append(", ");
      sb.append("parquet_dictionary_filtering:");
      sb.append(this.parquet_dictionary_filtering);
      first = false;
    }
    if (isSetParquet_array_resolution()) {
      if (!first) sb.append(", ");
      sb.append("parquet_array_resolution:");
      if (this.parquet_array_resolution == null) {
        sb.append("null");
      } else {
        sb.append(this.parquet_array_resolution);
      }
      first = false;
    }
    if (isSetParquet_read_statistics()) {
      if (!first) sb.append(", ");
      sb.append("parquet_read_statistics:");
      sb.append(this.parquet_read_statistics);
      first = false;
    }
    if (isSetDefault_join_distribution_mode()) {
      if (!first) sb.append(", ");
      sb.append("default_join_distribution_mode:");
      if (this.default_join_distribution_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.default_join_distribution_mode);
      }
      first = false;
    }
    if (isSetDisable_codegen_rows_threshold()) {
      if (!first) sb.append(", ");
      sb.append("disable_codegen_rows_threshold:");
      sb.append(this.disable_codegen_rows_threshold);
      first = false;
    }
    if (isSetDefault_spillable_buffer_size()) {
      if (!first) sb.append(", ");
      sb.append("default_spillable_buffer_size:");
      sb.append(this.default_spillable_buffer_size);
      first = false;
    }
    if (isSetMin_spillable_buffer_size()) {
      if (!first) sb.append(", ");
      sb.append("min_spillable_buffer_size:");
      sb.append(this.min_spillable_buffer_size);
      first = false;
    }
    if (isSetMax_row_size()) {
      if (!first) sb.append(", ");
      sb.append("max_row_size:");
      sb.append(this.max_row_size);
      first = false;
    }
    if (isSetIdle_session_timeout()) {
      if (!first) sb.append(", ");
      sb.append("idle_session_timeout:");
      sb.append(this.idle_session_timeout);
      first = false;
    }
    if (isSetCompute_stats_min_sample_size()) {
      if (!first) sb.append(", ");
      sb.append("compute_stats_min_sample_size:");
      sb.append(this.compute_stats_min_sample_size);
      first = false;
    }
    if (isSetExec_time_limit_s()) {
      if (!first) sb.append(", ");
      sb.append("exec_time_limit_s:");
      sb.append(this.exec_time_limit_s);
      first = false;
    }
    if (isSetShuffle_distinct_exprs()) {
      if (!first) sb.append(", ");
      sb.append("shuffle_distinct_exprs:");
      sb.append(this.shuffle_distinct_exprs);
      first = false;
    }
    if (isSetMax_mem_estimate_for_admission()) {
      if (!first) sb.append(", ");
      sb.append("max_mem_estimate_for_admission:");
      sb.append(this.max_mem_estimate_for_admission);
      first = false;
    }
    if (isSetThread_reservation_limit()) {
      if (!first) sb.append(", ");
      sb.append("thread_reservation_limit:");
      sb.append(this.thread_reservation_limit);
      first = false;
    }
    if (isSetThread_reservation_aggregate_limit()) {
      if (!first) sb.append(", ");
      sb.append("thread_reservation_aggregate_limit:");
      sb.append(this.thread_reservation_aggregate_limit);
      first = false;
    }
    if (isSetKudu_read_mode()) {
      if (!first) sb.append(", ");
      sb.append("kudu_read_mode:");
      if (this.kudu_read_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.kudu_read_mode);
      }
      first = false;
    }
    if (isSetAllow_erasure_coded_files()) {
      if (!first) sb.append(", ");
      sb.append("allow_erasure_coded_files:");
      sb.append(this.allow_erasure_coded_files);
      first = false;
    }
    if (isSetTimezone()) {
      if (!first) sb.append(", ");
      sb.append("timezone:");
      if (this.timezone == null) {
        sb.append("null");
      } else {
        sb.append(this.timezone);
      }
      first = false;
    }
    if (isSetScan_bytes_limit()) {
      if (!first) sb.append(", ");
      sb.append("scan_bytes_limit:");
      sb.append(this.scan_bytes_limit);
      first = false;
    }
    if (isSetCpu_limit_s()) {
      if (!first) sb.append(", ");
      sb.append("cpu_limit_s:");
      sb.append(this.cpu_limit_s);
      first = false;
    }
    if (isSetTopn_bytes_limit()) {
      if (!first) sb.append(", ");
      sb.append("topn_bytes_limit:");
      sb.append(this.topn_bytes_limit);
      first = false;
    }
    if (isSetClient_identifier()) {
      if (!first) sb.append(", ");
      sb.append("client_identifier:");
      if (this.client_identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.client_identifier);
      }
      first = false;
    }
    if (isSetResource_trace_ratio()) {
      if (!first) sb.append(", ");
      sb.append("resource_trace_ratio:");
      sb.append(this.resource_trace_ratio);
      first = false;
    }
    if (isSetNum_remote_executor_candidates()) {
      if (!first) sb.append(", ");
      sb.append("num_remote_executor_candidates:");
      sb.append(this.num_remote_executor_candidates);
      first = false;
    }
    if (isSetNum_rows_produced_limit()) {
      if (!first) sb.append(", ");
      sb.append("num_rows_produced_limit:");
      sb.append(this.num_rows_produced_limit);
      first = false;
    }
    if (isSetPlanner_testcase_mode()) {
      if (!first) sb.append(", ");
      sb.append("planner_testcase_mode:");
      sb.append(this.planner_testcase_mode);
      first = false;
    }
    if (isSetDefault_file_format()) {
      if (!first) sb.append(", ");
      sb.append("default_file_format:");
      if (this.default_file_format == null) {
        sb.append("null");
      } else {
        sb.append(this.default_file_format);
      }
      first = false;
    }
    if (isSetParquet_timestamp_type()) {
      if (!first) sb.append(", ");
      sb.append("parquet_timestamp_type:");
      if (this.parquet_timestamp_type == null) {
        sb.append("null");
      } else {
        sb.append(this.parquet_timestamp_type);
      }
      first = false;
    }
    if (isSetParquet_read_page_index()) {
      if (!first) sb.append(", ");
      sb.append("parquet_read_page_index:");
      sb.append(this.parquet_read_page_index);
      first = false;
    }
    if (isSetParquet_write_page_index()) {
      if (!first) sb.append(", ");
      sb.append("parquet_write_page_index:");
      sb.append(this.parquet_write_page_index);
      first = false;
    }
    if (isSetParquet_page_row_count_limit()) {
      if (!first) sb.append(", ");
      sb.append("parquet_page_row_count_limit:");
      sb.append(this.parquet_page_row_count_limit);
      first = false;
    }
    if (isSetDisable_hdfs_num_rows_estimate()) {
      if (!first) sb.append(", ");
      sb.append("disable_hdfs_num_rows_estimate:");
      sb.append(this.disable_hdfs_num_rows_estimate);
      first = false;
    }
    if (isSetDefault_hints_insert_statement()) {
      if (!first) sb.append(", ");
      sb.append("default_hints_insert_statement:");
      if (this.default_hints_insert_statement == null) {
        sb.append("null");
      } else {
        sb.append(this.default_hints_insert_statement);
      }
      first = false;
    }
    if (isSetSpool_query_results()) {
      if (!first) sb.append(", ");
      sb.append("spool_query_results:");
      sb.append(this.spool_query_results);
      first = false;
    }
    if (isSetDefault_transactional_type()) {
      if (!first) sb.append(", ");
      sb.append("default_transactional_type:");
      if (this.default_transactional_type == null) {
        sb.append("null");
      } else {
        sb.append(this.default_transactional_type);
      }
      first = false;
    }
    if (isSetStatement_expression_limit()) {
      if (!first) sb.append(", ");
      sb.append("statement_expression_limit:");
      sb.append(this.statement_expression_limit);
      first = false;
    }
    if (isSetMax_statement_length_bytes()) {
      if (!first) sb.append(", ");
      sb.append("max_statement_length_bytes:");
      sb.append(this.max_statement_length_bytes);
      first = false;
    }
    if (isSetDisable_data_cache()) {
      if (!first) sb.append(", ");
      sb.append("disable_data_cache:");
      sb.append(this.disable_data_cache);
      first = false;
    }
    if (isSetMax_result_spooling_mem()) {
      if (!first) sb.append(", ");
      sb.append("max_result_spooling_mem:");
      sb.append(this.max_result_spooling_mem);
      first = false;
    }
    if (isSetMax_spilled_result_spooling_mem()) {
      if (!first) sb.append(", ");
      sb.append("max_spilled_result_spooling_mem:");
      sb.append(this.max_spilled_result_spooling_mem);
      first = false;
    }
    if (isSetDisable_hbase_num_rows_estimate()) {
      if (!first) sb.append(", ");
      sb.append("disable_hbase_num_rows_estimate:");
      sb.append(this.disable_hbase_num_rows_estimate);
      first = false;
    }
    if (isSetFetch_rows_timeout_ms()) {
      if (!first) sb.append(", ");
      sb.append("fetch_rows_timeout_ms:");
      sb.append(this.fetch_rows_timeout_ms);
      first = false;
    }
    if (isSetNow_string()) {
      if (!first) sb.append(", ");
      sb.append("now_string:");
      if (this.now_string == null) {
        sb.append("null");
      } else {
        sb.append(this.now_string);
      }
      first = false;
    }
    if (isSetParquet_object_store_split_size()) {
      if (!first) sb.append(", ");
      sb.append("parquet_object_store_split_size:");
      sb.append(this.parquet_object_store_split_size);
      first = false;
    }
    if (isSetMem_limit_executors()) {
      if (!first) sb.append(", ");
      sb.append("mem_limit_executors:");
      sb.append(this.mem_limit_executors);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (compression_codec != null) {
      compression_codec.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryOptionsStandardSchemeFactory implements SchemeFactory {
    public TQueryOptionsStandardScheme getScheme() {
      return new TQueryOptionsStandardScheme();
    }
  }

  private static class TQueryOptionsStandardScheme extends StandardScheme<TQueryOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ABORT_ON_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.abort_on_error = iprot.readBool();
              struct.setAbort_on_errorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_errors = iprot.readI32();
              struct.setMax_errorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISABLE_CODEGEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_codegen = iprot.readBool();
              struct.setDisable_codegenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batch_size = iprot.readI32();
              struct.setBatch_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_nodes = iprot.readI32();
              struct.setNum_nodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_SCAN_RANGE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_scan_range_length = iprot.readI64();
              struct.setMax_scan_range_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUM_SCANNER_THREADS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_scanner_threads = iprot.readI32();
              struct.setNum_scanner_threadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEBUG_ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debug_action = iprot.readString();
              struct.setDebug_actionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_limit = iprot.readI64();
              struct.setMem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COMPRESSION_CODEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compression_codec = new org.apache.impala.thrift.TCompressionCodec();
              struct.compression_codec.read(iprot);
              struct.setCompression_codecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HBASE_CACHING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hbase_caching = iprot.readI32();
              struct.setHbase_cachingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HBASE_CACHE_BLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hbase_cache_blocks = iprot.readBool();
              struct.setHbase_cache_blocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PARQUET_FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parquet_file_size = iprot.readI64();
              struct.setParquet_file_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXPLAIN_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.explain_level = org.apache.impala.thrift.TExplainLevel.findByValue(iprot.readI32());
              struct.setExplain_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SYNC_DDL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sync_ddl = iprot.readBool();
              struct.setSync_ddlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REQUEST_POOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.request_pool = iprot.readString();
              struct.setRequest_poolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // DISABLE_OUTERMOST_TOPN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_outermost_topn = iprot.readBool();
              struct.setDisable_outermost_topnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // QUERY_TIMEOUT_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query_timeout_s = iprot.readI32();
              struct.setQuery_timeout_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // BUFFER_POOL_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.buffer_pool_limit = iprot.readI64();
              struct.setBuffer_pool_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // APPX_COUNT_DISTINCT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.appx_count_distinct = iprot.readBool();
              struct.setAppx_count_distinctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // DISABLE_UNSAFE_SPILLS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_unsafe_spills = iprot.readBool();
              struct.setDisable_unsafe_spillsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // EXEC_SINGLE_NODE_ROWS_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exec_single_node_rows_threshold = iprot.readI32();
              struct.setExec_single_node_rows_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // OPTIMIZE_PARTITION_KEY_SCANS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.optimize_partition_key_scans = iprot.readBool();
              struct.setOptimize_partition_key_scansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // REPLICA_PREFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replica_preference = org.apache.impala.thrift.TReplicaPreference.findByValue(iprot.readI32());
              struct.setReplica_preferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // SCHEDULE_RANDOM_REPLICA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.schedule_random_replica = iprot.readBool();
              struct.setSchedule_random_replicaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // DISABLE_STREAMING_PREAGGREGATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_streaming_preaggregations = iprot.readBool();
              struct.setDisable_streaming_preaggregationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // RUNTIME_FILTER_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime_filter_mode = org.apache.impala.thrift.TRuntimeFilterMode.findByValue(iprot.readI32());
              struct.setRuntime_filter_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // RUNTIME_BLOOM_FILTER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime_bloom_filter_size = iprot.readI32();
              struct.setRuntime_bloom_filter_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // RUNTIME_FILTER_WAIT_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime_filter_wait_time_ms = iprot.readI32();
              struct.setRuntime_filter_wait_time_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // DISABLE_ROW_RUNTIME_FILTERING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_row_runtime_filtering = iprot.readBool();
              struct.setDisable_row_runtime_filteringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // MAX_NUM_RUNTIME_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_num_runtime_filters = iprot.readI32();
              struct.setMax_num_runtime_filtersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // PARQUET_ANNOTATE_STRINGS_UTF8
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.parquet_annotate_strings_utf8 = iprot.readBool();
              struct.setParquet_annotate_strings_utf8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // PARQUET_FALLBACK_SCHEMA_RESOLUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parquet_fallback_schema_resolution = org.apache.impala.thrift.TParquetFallbackSchemaResolution.findByValue(iprot.readI32());
              struct.setParquet_fallback_schema_resolutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // MT_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mt_dop = iprot.readI32();
              struct.setMt_dopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // S3_SKIP_INSERT_STAGING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.s3_skip_insert_staging = iprot.readBool();
              struct.setS3_skip_insert_stagingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // RUNTIME_FILTER_MIN_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime_filter_min_size = iprot.readI32();
              struct.setRuntime_filter_min_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // RUNTIME_FILTER_MAX_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime_filter_max_size = iprot.readI32();
              struct.setRuntime_filter_max_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // PREFETCH_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prefetch_mode = org.apache.impala.thrift.TPrefetchMode.findByValue(iprot.readI32());
              struct.setPrefetch_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // STRICT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strict_mode = iprot.readBool();
              struct.setStrict_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // SCRATCH_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scratch_limit = iprot.readI64();
              struct.setScratch_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // ENABLE_EXPR_REWRITES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_expr_rewrites = iprot.readBool();
              struct.setEnable_expr_rewritesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // DECIMAL_V2
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.decimal_v2 = iprot.readBool();
              struct.setDecimal_v2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // PARQUET_DICTIONARY_FILTERING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.parquet_dictionary_filtering = iprot.readBool();
              struct.setParquet_dictionary_filteringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // PARQUET_ARRAY_RESOLUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parquet_array_resolution = org.apache.impala.thrift.TParquetArrayResolution.findByValue(iprot.readI32());
              struct.setParquet_array_resolutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // PARQUET_READ_STATISTICS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.parquet_read_statistics = iprot.readBool();
              struct.setParquet_read_statisticsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // DEFAULT_JOIN_DISTRIBUTION_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.default_join_distribution_mode = org.apache.impala.thrift.TJoinDistributionMode.findByValue(iprot.readI32());
              struct.setDefault_join_distribution_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // DISABLE_CODEGEN_ROWS_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.disable_codegen_rows_threshold = iprot.readI32();
              struct.setDisable_codegen_rows_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // DEFAULT_SPILLABLE_BUFFER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.default_spillable_buffer_size = iprot.readI64();
              struct.setDefault_spillable_buffer_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // MIN_SPILLABLE_BUFFER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_spillable_buffer_size = iprot.readI64();
              struct.setMin_spillable_buffer_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // MAX_ROW_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_row_size = iprot.readI64();
              struct.setMax_row_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // IDLE_SESSION_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idle_session_timeout = iprot.readI32();
              struct.setIdle_session_timeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // COMPUTE_STATS_MIN_SAMPLE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.compute_stats_min_sample_size = iprot.readI64();
              struct.setCompute_stats_min_sample_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // EXEC_TIME_LIMIT_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exec_time_limit_s = iprot.readI32();
              struct.setExec_time_limit_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // SHUFFLE_DISTINCT_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.shuffle_distinct_exprs = iprot.readBool();
              struct.setShuffle_distinct_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // MAX_MEM_ESTIMATE_FOR_ADMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_mem_estimate_for_admission = iprot.readI64();
              struct.setMax_mem_estimate_for_admissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // THREAD_RESERVATION_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thread_reservation_limit = iprot.readI32();
              struct.setThread_reservation_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // THREAD_RESERVATION_AGGREGATE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thread_reservation_aggregate_limit = iprot.readI32();
              struct.setThread_reservation_aggregate_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // KUDU_READ_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kudu_read_mode = org.apache.impala.thrift.TKuduReadMode.findByValue(iprot.readI32());
              struct.setKudu_read_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // ALLOW_ERASURE_CODED_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allow_erasure_coded_files = iprot.readBool();
              struct.setAllow_erasure_coded_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // TIMEZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timezone = iprot.readString();
              struct.setTimezoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // SCAN_BYTES_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scan_bytes_limit = iprot.readI64();
              struct.setScan_bytes_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // CPU_LIMIT_S
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpu_limit_s = iprot.readI64();
              struct.setCpu_limit_sIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // TOPN_BYTES_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.topn_bytes_limit = iprot.readI64();
              struct.setTopn_bytes_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // CLIENT_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.client_identifier = iprot.readString();
              struct.setClient_identifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // RESOURCE_TRACE_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.resource_trace_ratio = iprot.readDouble();
              struct.setResource_trace_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // NUM_REMOTE_EXECUTOR_CANDIDATES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_remote_executor_candidates = iprot.readI32();
              struct.setNum_remote_executor_candidatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // NUM_ROWS_PRODUCED_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_rows_produced_limit = iprot.readI64();
              struct.setNum_rows_produced_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // PLANNER_TESTCASE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.planner_testcase_mode = iprot.readBool();
              struct.setPlanner_testcase_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 79: // DEFAULT_FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.default_file_format = org.apache.impala.thrift.THdfsFileFormat.findByValue(iprot.readI32());
              struct.setDefault_file_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // PARQUET_TIMESTAMP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parquet_timestamp_type = org.apache.impala.thrift.TParquetTimestampType.findByValue(iprot.readI32());
              struct.setParquet_timestamp_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // PARQUET_READ_PAGE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.parquet_read_page_index = iprot.readBool();
              struct.setParquet_read_page_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 82: // PARQUET_WRITE_PAGE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.parquet_write_page_index = iprot.readBool();
              struct.setParquet_write_page_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 83: // PARQUET_PAGE_ROW_COUNT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parquet_page_row_count_limit = iprot.readI32();
              struct.setParquet_page_row_count_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 84: // DISABLE_HDFS_NUM_ROWS_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_hdfs_num_rows_estimate = iprot.readBool();
              struct.setDisable_hdfs_num_rows_estimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 85: // DEFAULT_HINTS_INSERT_STATEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.default_hints_insert_statement = iprot.readString();
              struct.setDefault_hints_insert_statementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 86: // SPOOL_QUERY_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.spool_query_results = iprot.readBool();
              struct.setSpool_query_resultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 87: // DEFAULT_TRANSACTIONAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.default_transactional_type = org.apache.impala.thrift.TTransactionalType.findByValue(iprot.readI32());
              struct.setDefault_transactional_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 88: // STATEMENT_EXPRESSION_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statement_expression_limit = iprot.readI32();
              struct.setStatement_expression_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 89: // MAX_STATEMENT_LENGTH_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_statement_length_bytes = iprot.readI32();
              struct.setMax_statement_length_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // DISABLE_DATA_CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_data_cache = iprot.readBool();
              struct.setDisable_data_cacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 91: // MAX_RESULT_SPOOLING_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_result_spooling_mem = iprot.readI64();
              struct.setMax_result_spooling_memIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 92: // MAX_SPILLED_RESULT_SPOOLING_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_spilled_result_spooling_mem = iprot.readI64();
              struct.setMax_spilled_result_spooling_memIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 93: // DISABLE_HBASE_NUM_ROWS_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_hbase_num_rows_estimate = iprot.readBool();
              struct.setDisable_hbase_num_rows_estimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 94: // FETCH_ROWS_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fetch_rows_timeout_ms = iprot.readI64();
              struct.setFetch_rows_timeout_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 95: // NOW_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.now_string = iprot.readString();
              struct.setNow_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 96: // PARQUET_OBJECT_STORE_SPLIT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parquet_object_store_split_size = iprot.readI64();
              struct.setParquet_object_store_split_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 97: // MEM_LIMIT_EXECUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_limit_executors = iprot.readI64();
              struct.setMem_limit_executorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAbort_on_error()) {
        oprot.writeFieldBegin(ABORT_ON_ERROR_FIELD_DESC);
        oprot.writeBool(struct.abort_on_error);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_errors()) {
        oprot.writeFieldBegin(MAX_ERRORS_FIELD_DESC);
        oprot.writeI32(struct.max_errors);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable_codegen()) {
        oprot.writeFieldBegin(DISABLE_CODEGEN_FIELD_DESC);
        oprot.writeBool(struct.disable_codegen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBatch_size()) {
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.batch_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_nodes()) {
        oprot.writeFieldBegin(NUM_NODES_FIELD_DESC);
        oprot.writeI32(struct.num_nodes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_scan_range_length()) {
        oprot.writeFieldBegin(MAX_SCAN_RANGE_LENGTH_FIELD_DESC);
        oprot.writeI64(struct.max_scan_range_length);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_scanner_threads()) {
        oprot.writeFieldBegin(NUM_SCANNER_THREADS_FIELD_DESC);
        oprot.writeI32(struct.num_scanner_threads);
        oprot.writeFieldEnd();
      }
      if (struct.debug_action != null) {
        if (struct.isSetDebug_action()) {
          oprot.writeFieldBegin(DEBUG_ACTION_FIELD_DESC);
          oprot.writeString(struct.debug_action);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMem_limit()) {
        oprot.writeFieldBegin(MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.compression_codec != null) {
        if (struct.isSetCompression_codec()) {
          oprot.writeFieldBegin(COMPRESSION_CODEC_FIELD_DESC);
          struct.compression_codec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHbase_caching()) {
        oprot.writeFieldBegin(HBASE_CACHING_FIELD_DESC);
        oprot.writeI32(struct.hbase_caching);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHbase_cache_blocks()) {
        oprot.writeFieldBegin(HBASE_CACHE_BLOCKS_FIELD_DESC);
        oprot.writeBool(struct.hbase_cache_blocks);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParquet_file_size()) {
        oprot.writeFieldBegin(PARQUET_FILE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.parquet_file_size);
        oprot.writeFieldEnd();
      }
      if (struct.explain_level != null) {
        if (struct.isSetExplain_level()) {
          oprot.writeFieldBegin(EXPLAIN_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.explain_level.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSync_ddl()) {
        oprot.writeFieldBegin(SYNC_DDL_FIELD_DESC);
        oprot.writeBool(struct.sync_ddl);
        oprot.writeFieldEnd();
      }
      if (struct.request_pool != null) {
        if (struct.isSetRequest_pool()) {
          oprot.writeFieldBegin(REQUEST_POOL_FIELD_DESC);
          oprot.writeString(struct.request_pool);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisable_outermost_topn()) {
        oprot.writeFieldBegin(DISABLE_OUTERMOST_TOPN_FIELD_DESC);
        oprot.writeBool(struct.disable_outermost_topn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuery_timeout_s()) {
        oprot.writeFieldBegin(QUERY_TIMEOUT_S_FIELD_DESC);
        oprot.writeI32(struct.query_timeout_s);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBuffer_pool_limit()) {
        oprot.writeFieldBegin(BUFFER_POOL_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.buffer_pool_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppx_count_distinct()) {
        oprot.writeFieldBegin(APPX_COUNT_DISTINCT_FIELD_DESC);
        oprot.writeBool(struct.appx_count_distinct);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable_unsafe_spills()) {
        oprot.writeFieldBegin(DISABLE_UNSAFE_SPILLS_FIELD_DESC);
        oprot.writeBool(struct.disable_unsafe_spills);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExec_single_node_rows_threshold()) {
        oprot.writeFieldBegin(EXEC_SINGLE_NODE_ROWS_THRESHOLD_FIELD_DESC);
        oprot.writeI32(struct.exec_single_node_rows_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOptimize_partition_key_scans()) {
        oprot.writeFieldBegin(OPTIMIZE_PARTITION_KEY_SCANS_FIELD_DESC);
        oprot.writeBool(struct.optimize_partition_key_scans);
        oprot.writeFieldEnd();
      }
      if (struct.replica_preference != null) {
        if (struct.isSetReplica_preference()) {
          oprot.writeFieldBegin(REPLICA_PREFERENCE_FIELD_DESC);
          oprot.writeI32(struct.replica_preference.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSchedule_random_replica()) {
        oprot.writeFieldBegin(SCHEDULE_RANDOM_REPLICA_FIELD_DESC);
        oprot.writeBool(struct.schedule_random_replica);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable_streaming_preaggregations()) {
        oprot.writeFieldBegin(DISABLE_STREAMING_PREAGGREGATIONS_FIELD_DESC);
        oprot.writeBool(struct.disable_streaming_preaggregations);
        oprot.writeFieldEnd();
      }
      if (struct.runtime_filter_mode != null) {
        if (struct.isSetRuntime_filter_mode()) {
          oprot.writeFieldBegin(RUNTIME_FILTER_MODE_FIELD_DESC);
          oprot.writeI32(struct.runtime_filter_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRuntime_bloom_filter_size()) {
        oprot.writeFieldBegin(RUNTIME_BLOOM_FILTER_SIZE_FIELD_DESC);
        oprot.writeI32(struct.runtime_bloom_filter_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_filter_wait_time_ms()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_WAIT_TIME_MS_FIELD_DESC);
        oprot.writeI32(struct.runtime_filter_wait_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable_row_runtime_filtering()) {
        oprot.writeFieldBegin(DISABLE_ROW_RUNTIME_FILTERING_FIELD_DESC);
        oprot.writeBool(struct.disable_row_runtime_filtering);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_num_runtime_filters()) {
        oprot.writeFieldBegin(MAX_NUM_RUNTIME_FILTERS_FIELD_DESC);
        oprot.writeI32(struct.max_num_runtime_filters);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParquet_annotate_strings_utf8()) {
        oprot.writeFieldBegin(PARQUET_ANNOTATE_STRINGS_UTF8_FIELD_DESC);
        oprot.writeBool(struct.parquet_annotate_strings_utf8);
        oprot.writeFieldEnd();
      }
      if (struct.parquet_fallback_schema_resolution != null) {
        if (struct.isSetParquet_fallback_schema_resolution()) {
          oprot.writeFieldBegin(PARQUET_FALLBACK_SCHEMA_RESOLUTION_FIELD_DESC);
          oprot.writeI32(struct.parquet_fallback_schema_resolution.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMt_dop()) {
        oprot.writeFieldBegin(MT_DOP_FIELD_DESC);
        oprot.writeI32(struct.mt_dop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetS3_skip_insert_staging()) {
        oprot.writeFieldBegin(S3_SKIP_INSERT_STAGING_FIELD_DESC);
        oprot.writeBool(struct.s3_skip_insert_staging);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_filter_min_size()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_MIN_SIZE_FIELD_DESC);
        oprot.writeI32(struct.runtime_filter_min_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntime_filter_max_size()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_MAX_SIZE_FIELD_DESC);
        oprot.writeI32(struct.runtime_filter_max_size);
        oprot.writeFieldEnd();
      }
      if (struct.prefetch_mode != null) {
        if (struct.isSetPrefetch_mode()) {
          oprot.writeFieldBegin(PREFETCH_MODE_FIELD_DESC);
          oprot.writeI32(struct.prefetch_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrict_mode()) {
        oprot.writeFieldBegin(STRICT_MODE_FIELD_DESC);
        oprot.writeBool(struct.strict_mode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScratch_limit()) {
        oprot.writeFieldBegin(SCRATCH_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.scratch_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_expr_rewrites()) {
        oprot.writeFieldBegin(ENABLE_EXPR_REWRITES_FIELD_DESC);
        oprot.writeBool(struct.enable_expr_rewrites);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDecimal_v2()) {
        oprot.writeFieldBegin(DECIMAL_V2_FIELD_DESC);
        oprot.writeBool(struct.decimal_v2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParquet_dictionary_filtering()) {
        oprot.writeFieldBegin(PARQUET_DICTIONARY_FILTERING_FIELD_DESC);
        oprot.writeBool(struct.parquet_dictionary_filtering);
        oprot.writeFieldEnd();
      }
      if (struct.parquet_array_resolution != null) {
        if (struct.isSetParquet_array_resolution()) {
          oprot.writeFieldBegin(PARQUET_ARRAY_RESOLUTION_FIELD_DESC);
          oprot.writeI32(struct.parquet_array_resolution.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParquet_read_statistics()) {
        oprot.writeFieldBegin(PARQUET_READ_STATISTICS_FIELD_DESC);
        oprot.writeBool(struct.parquet_read_statistics);
        oprot.writeFieldEnd();
      }
      if (struct.default_join_distribution_mode != null) {
        if (struct.isSetDefault_join_distribution_mode()) {
          oprot.writeFieldBegin(DEFAULT_JOIN_DISTRIBUTION_MODE_FIELD_DESC);
          oprot.writeI32(struct.default_join_distribution_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisable_codegen_rows_threshold()) {
        oprot.writeFieldBegin(DISABLE_CODEGEN_ROWS_THRESHOLD_FIELD_DESC);
        oprot.writeI32(struct.disable_codegen_rows_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDefault_spillable_buffer_size()) {
        oprot.writeFieldBegin(DEFAULT_SPILLABLE_BUFFER_SIZE_FIELD_DESC);
        oprot.writeI64(struct.default_spillable_buffer_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMin_spillable_buffer_size()) {
        oprot.writeFieldBegin(MIN_SPILLABLE_BUFFER_SIZE_FIELD_DESC);
        oprot.writeI64(struct.min_spillable_buffer_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_row_size()) {
        oprot.writeFieldBegin(MAX_ROW_SIZE_FIELD_DESC);
        oprot.writeI64(struct.max_row_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIdle_session_timeout()) {
        oprot.writeFieldBegin(IDLE_SESSION_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.idle_session_timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompute_stats_min_sample_size()) {
        oprot.writeFieldBegin(COMPUTE_STATS_MIN_SAMPLE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.compute_stats_min_sample_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExec_time_limit_s()) {
        oprot.writeFieldBegin(EXEC_TIME_LIMIT_S_FIELD_DESC);
        oprot.writeI32(struct.exec_time_limit_s);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShuffle_distinct_exprs()) {
        oprot.writeFieldBegin(SHUFFLE_DISTINCT_EXPRS_FIELD_DESC);
        oprot.writeBool(struct.shuffle_distinct_exprs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_mem_estimate_for_admission()) {
        oprot.writeFieldBegin(MAX_MEM_ESTIMATE_FOR_ADMISSION_FIELD_DESC);
        oprot.writeI64(struct.max_mem_estimate_for_admission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThread_reservation_limit()) {
        oprot.writeFieldBegin(THREAD_RESERVATION_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.thread_reservation_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetThread_reservation_aggregate_limit()) {
        oprot.writeFieldBegin(THREAD_RESERVATION_AGGREGATE_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.thread_reservation_aggregate_limit);
        oprot.writeFieldEnd();
      }
      if (struct.kudu_read_mode != null) {
        if (struct.isSetKudu_read_mode()) {
          oprot.writeFieldBegin(KUDU_READ_MODE_FIELD_DESC);
          oprot.writeI32(struct.kudu_read_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllow_erasure_coded_files()) {
        oprot.writeFieldBegin(ALLOW_ERASURE_CODED_FILES_FIELD_DESC);
        oprot.writeBool(struct.allow_erasure_coded_files);
        oprot.writeFieldEnd();
      }
      if (struct.timezone != null) {
        if (struct.isSetTimezone()) {
          oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
          oprot.writeString(struct.timezone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScan_bytes_limit()) {
        oprot.writeFieldBegin(SCAN_BYTES_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.scan_bytes_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpu_limit_s()) {
        oprot.writeFieldBegin(CPU_LIMIT_S_FIELD_DESC);
        oprot.writeI64(struct.cpu_limit_s);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTopn_bytes_limit()) {
        oprot.writeFieldBegin(TOPN_BYTES_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.topn_bytes_limit);
        oprot.writeFieldEnd();
      }
      if (struct.client_identifier != null) {
        if (struct.isSetClient_identifier()) {
          oprot.writeFieldBegin(CLIENT_IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.client_identifier);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResource_trace_ratio()) {
        oprot.writeFieldBegin(RESOURCE_TRACE_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.resource_trace_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_remote_executor_candidates()) {
        oprot.writeFieldBegin(NUM_REMOTE_EXECUTOR_CANDIDATES_FIELD_DESC);
        oprot.writeI32(struct.num_remote_executor_candidates);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_rows_produced_limit()) {
        oprot.writeFieldBegin(NUM_ROWS_PRODUCED_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.num_rows_produced_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPlanner_testcase_mode()) {
        oprot.writeFieldBegin(PLANNER_TESTCASE_MODE_FIELD_DESC);
        oprot.writeBool(struct.planner_testcase_mode);
        oprot.writeFieldEnd();
      }
      if (struct.default_file_format != null) {
        if (struct.isSetDefault_file_format()) {
          oprot.writeFieldBegin(DEFAULT_FILE_FORMAT_FIELD_DESC);
          oprot.writeI32(struct.default_file_format.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.parquet_timestamp_type != null) {
        if (struct.isSetParquet_timestamp_type()) {
          oprot.writeFieldBegin(PARQUET_TIMESTAMP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.parquet_timestamp_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParquet_read_page_index()) {
        oprot.writeFieldBegin(PARQUET_READ_PAGE_INDEX_FIELD_DESC);
        oprot.writeBool(struct.parquet_read_page_index);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParquet_write_page_index()) {
        oprot.writeFieldBegin(PARQUET_WRITE_PAGE_INDEX_FIELD_DESC);
        oprot.writeBool(struct.parquet_write_page_index);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParquet_page_row_count_limit()) {
        oprot.writeFieldBegin(PARQUET_PAGE_ROW_COUNT_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.parquet_page_row_count_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable_hdfs_num_rows_estimate()) {
        oprot.writeFieldBegin(DISABLE_HDFS_NUM_ROWS_ESTIMATE_FIELD_DESC);
        oprot.writeBool(struct.disable_hdfs_num_rows_estimate);
        oprot.writeFieldEnd();
      }
      if (struct.default_hints_insert_statement != null) {
        if (struct.isSetDefault_hints_insert_statement()) {
          oprot.writeFieldBegin(DEFAULT_HINTS_INSERT_STATEMENT_FIELD_DESC);
          oprot.writeString(struct.default_hints_insert_statement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSpool_query_results()) {
        oprot.writeFieldBegin(SPOOL_QUERY_RESULTS_FIELD_DESC);
        oprot.writeBool(struct.spool_query_results);
        oprot.writeFieldEnd();
      }
      if (struct.default_transactional_type != null) {
        if (struct.isSetDefault_transactional_type()) {
          oprot.writeFieldBegin(DEFAULT_TRANSACTIONAL_TYPE_FIELD_DESC);
          oprot.writeI32(struct.default_transactional_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatement_expression_limit()) {
        oprot.writeFieldBegin(STATEMENT_EXPRESSION_LIMIT_FIELD_DESC);
        oprot.writeI32(struct.statement_expression_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_statement_length_bytes()) {
        oprot.writeFieldBegin(MAX_STATEMENT_LENGTH_BYTES_FIELD_DESC);
        oprot.writeI32(struct.max_statement_length_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable_data_cache()) {
        oprot.writeFieldBegin(DISABLE_DATA_CACHE_FIELD_DESC);
        oprot.writeBool(struct.disable_data_cache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_result_spooling_mem()) {
        oprot.writeFieldBegin(MAX_RESULT_SPOOLING_MEM_FIELD_DESC);
        oprot.writeI64(struct.max_result_spooling_mem);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_spilled_result_spooling_mem()) {
        oprot.writeFieldBegin(MAX_SPILLED_RESULT_SPOOLING_MEM_FIELD_DESC);
        oprot.writeI64(struct.max_spilled_result_spooling_mem);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisable_hbase_num_rows_estimate()) {
        oprot.writeFieldBegin(DISABLE_HBASE_NUM_ROWS_ESTIMATE_FIELD_DESC);
        oprot.writeBool(struct.disable_hbase_num_rows_estimate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFetch_rows_timeout_ms()) {
        oprot.writeFieldBegin(FETCH_ROWS_TIMEOUT_MS_FIELD_DESC);
        oprot.writeI64(struct.fetch_rows_timeout_ms);
        oprot.writeFieldEnd();
      }
      if (struct.now_string != null) {
        if (struct.isSetNow_string()) {
          oprot.writeFieldBegin(NOW_STRING_FIELD_DESC);
          oprot.writeString(struct.now_string);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParquet_object_store_split_size()) {
        oprot.writeFieldBegin(PARQUET_OBJECT_STORE_SPLIT_SIZE_FIELD_DESC);
        oprot.writeI64(struct.parquet_object_store_split_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMem_limit_executors()) {
        oprot.writeFieldBegin(MEM_LIMIT_EXECUTORS_FIELD_DESC);
        oprot.writeI64(struct.mem_limit_executors);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryOptionsTupleSchemeFactory implements SchemeFactory {
    public TQueryOptionsTupleScheme getScheme() {
      return new TQueryOptionsTupleScheme();
    }
  }

  private static class TQueryOptionsTupleScheme extends TupleScheme<TQueryOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAbort_on_error()) {
        optionals.set(0);
      }
      if (struct.isSetMax_errors()) {
        optionals.set(1);
      }
      if (struct.isSetDisable_codegen()) {
        optionals.set(2);
      }
      if (struct.isSetBatch_size()) {
        optionals.set(3);
      }
      if (struct.isSetNum_nodes()) {
        optionals.set(4);
      }
      if (struct.isSetMax_scan_range_length()) {
        optionals.set(5);
      }
      if (struct.isSetNum_scanner_threads()) {
        optionals.set(6);
      }
      if (struct.isSetDebug_action()) {
        optionals.set(7);
      }
      if (struct.isSetMem_limit()) {
        optionals.set(8);
      }
      if (struct.isSetCompression_codec()) {
        optionals.set(9);
      }
      if (struct.isSetHbase_caching()) {
        optionals.set(10);
      }
      if (struct.isSetHbase_cache_blocks()) {
        optionals.set(11);
      }
      if (struct.isSetParquet_file_size()) {
        optionals.set(12);
      }
      if (struct.isSetExplain_level()) {
        optionals.set(13);
      }
      if (struct.isSetSync_ddl()) {
        optionals.set(14);
      }
      if (struct.isSetRequest_pool()) {
        optionals.set(15);
      }
      if (struct.isSetDisable_outermost_topn()) {
        optionals.set(16);
      }
      if (struct.isSetQuery_timeout_s()) {
        optionals.set(17);
      }
      if (struct.isSetBuffer_pool_limit()) {
        optionals.set(18);
      }
      if (struct.isSetAppx_count_distinct()) {
        optionals.set(19);
      }
      if (struct.isSetDisable_unsafe_spills()) {
        optionals.set(20);
      }
      if (struct.isSetExec_single_node_rows_threshold()) {
        optionals.set(21);
      }
      if (struct.isSetOptimize_partition_key_scans()) {
        optionals.set(22);
      }
      if (struct.isSetReplica_preference()) {
        optionals.set(23);
      }
      if (struct.isSetSchedule_random_replica()) {
        optionals.set(24);
      }
      if (struct.isSetDisable_streaming_preaggregations()) {
        optionals.set(25);
      }
      if (struct.isSetRuntime_filter_mode()) {
        optionals.set(26);
      }
      if (struct.isSetRuntime_bloom_filter_size()) {
        optionals.set(27);
      }
      if (struct.isSetRuntime_filter_wait_time_ms()) {
        optionals.set(28);
      }
      if (struct.isSetDisable_row_runtime_filtering()) {
        optionals.set(29);
      }
      if (struct.isSetMax_num_runtime_filters()) {
        optionals.set(30);
      }
      if (struct.isSetParquet_annotate_strings_utf8()) {
        optionals.set(31);
      }
      if (struct.isSetParquet_fallback_schema_resolution()) {
        optionals.set(32);
      }
      if (struct.isSetMt_dop()) {
        optionals.set(33);
      }
      if (struct.isSetS3_skip_insert_staging()) {
        optionals.set(34);
      }
      if (struct.isSetRuntime_filter_min_size()) {
        optionals.set(35);
      }
      if (struct.isSetRuntime_filter_max_size()) {
        optionals.set(36);
      }
      if (struct.isSetPrefetch_mode()) {
        optionals.set(37);
      }
      if (struct.isSetStrict_mode()) {
        optionals.set(38);
      }
      if (struct.isSetScratch_limit()) {
        optionals.set(39);
      }
      if (struct.isSetEnable_expr_rewrites()) {
        optionals.set(40);
      }
      if (struct.isSetDecimal_v2()) {
        optionals.set(41);
      }
      if (struct.isSetParquet_dictionary_filtering()) {
        optionals.set(42);
      }
      if (struct.isSetParquet_array_resolution()) {
        optionals.set(43);
      }
      if (struct.isSetParquet_read_statistics()) {
        optionals.set(44);
      }
      if (struct.isSetDefault_join_distribution_mode()) {
        optionals.set(45);
      }
      if (struct.isSetDisable_codegen_rows_threshold()) {
        optionals.set(46);
      }
      if (struct.isSetDefault_spillable_buffer_size()) {
        optionals.set(47);
      }
      if (struct.isSetMin_spillable_buffer_size()) {
        optionals.set(48);
      }
      if (struct.isSetMax_row_size()) {
        optionals.set(49);
      }
      if (struct.isSetIdle_session_timeout()) {
        optionals.set(50);
      }
      if (struct.isSetCompute_stats_min_sample_size()) {
        optionals.set(51);
      }
      if (struct.isSetExec_time_limit_s()) {
        optionals.set(52);
      }
      if (struct.isSetShuffle_distinct_exprs()) {
        optionals.set(53);
      }
      if (struct.isSetMax_mem_estimate_for_admission()) {
        optionals.set(54);
      }
      if (struct.isSetThread_reservation_limit()) {
        optionals.set(55);
      }
      if (struct.isSetThread_reservation_aggregate_limit()) {
        optionals.set(56);
      }
      if (struct.isSetKudu_read_mode()) {
        optionals.set(57);
      }
      if (struct.isSetAllow_erasure_coded_files()) {
        optionals.set(58);
      }
      if (struct.isSetTimezone()) {
        optionals.set(59);
      }
      if (struct.isSetScan_bytes_limit()) {
        optionals.set(60);
      }
      if (struct.isSetCpu_limit_s()) {
        optionals.set(61);
      }
      if (struct.isSetTopn_bytes_limit()) {
        optionals.set(62);
      }
      if (struct.isSetClient_identifier()) {
        optionals.set(63);
      }
      if (struct.isSetResource_trace_ratio()) {
        optionals.set(64);
      }
      if (struct.isSetNum_remote_executor_candidates()) {
        optionals.set(65);
      }
      if (struct.isSetNum_rows_produced_limit()) {
        optionals.set(66);
      }
      if (struct.isSetPlanner_testcase_mode()) {
        optionals.set(67);
      }
      if (struct.isSetDefault_file_format()) {
        optionals.set(68);
      }
      if (struct.isSetParquet_timestamp_type()) {
        optionals.set(69);
      }
      if (struct.isSetParquet_read_page_index()) {
        optionals.set(70);
      }
      if (struct.isSetParquet_write_page_index()) {
        optionals.set(71);
      }
      if (struct.isSetParquet_page_row_count_limit()) {
        optionals.set(72);
      }
      if (struct.isSetDisable_hdfs_num_rows_estimate()) {
        optionals.set(73);
      }
      if (struct.isSetDefault_hints_insert_statement()) {
        optionals.set(74);
      }
      if (struct.isSetSpool_query_results()) {
        optionals.set(75);
      }
      if (struct.isSetDefault_transactional_type()) {
        optionals.set(76);
      }
      if (struct.isSetStatement_expression_limit()) {
        optionals.set(77);
      }
      if (struct.isSetMax_statement_length_bytes()) {
        optionals.set(78);
      }
      if (struct.isSetDisable_data_cache()) {
        optionals.set(79);
      }
      if (struct.isSetMax_result_spooling_mem()) {
        optionals.set(80);
      }
      if (struct.isSetMax_spilled_result_spooling_mem()) {
        optionals.set(81);
      }
      if (struct.isSetDisable_hbase_num_rows_estimate()) {
        optionals.set(82);
      }
      if (struct.isSetFetch_rows_timeout_ms()) {
        optionals.set(83);
      }
      if (struct.isSetNow_string()) {
        optionals.set(84);
      }
      if (struct.isSetParquet_object_store_split_size()) {
        optionals.set(85);
      }
      if (struct.isSetMem_limit_executors()) {
        optionals.set(86);
      }
      oprot.writeBitSet(optionals, 87);
      if (struct.isSetAbort_on_error()) {
        oprot.writeBool(struct.abort_on_error);
      }
      if (struct.isSetMax_errors()) {
        oprot.writeI32(struct.max_errors);
      }
      if (struct.isSetDisable_codegen()) {
        oprot.writeBool(struct.disable_codegen);
      }
      if (struct.isSetBatch_size()) {
        oprot.writeI32(struct.batch_size);
      }
      if (struct.isSetNum_nodes()) {
        oprot.writeI32(struct.num_nodes);
      }
      if (struct.isSetMax_scan_range_length()) {
        oprot.writeI64(struct.max_scan_range_length);
      }
      if (struct.isSetNum_scanner_threads()) {
        oprot.writeI32(struct.num_scanner_threads);
      }
      if (struct.isSetDebug_action()) {
        oprot.writeString(struct.debug_action);
      }
      if (struct.isSetMem_limit()) {
        oprot.writeI64(struct.mem_limit);
      }
      if (struct.isSetCompression_codec()) {
        struct.compression_codec.write(oprot);
      }
      if (struct.isSetHbase_caching()) {
        oprot.writeI32(struct.hbase_caching);
      }
      if (struct.isSetHbase_cache_blocks()) {
        oprot.writeBool(struct.hbase_cache_blocks);
      }
      if (struct.isSetParquet_file_size()) {
        oprot.writeI64(struct.parquet_file_size);
      }
      if (struct.isSetExplain_level()) {
        oprot.writeI32(struct.explain_level.getValue());
      }
      if (struct.isSetSync_ddl()) {
        oprot.writeBool(struct.sync_ddl);
      }
      if (struct.isSetRequest_pool()) {
        oprot.writeString(struct.request_pool);
      }
      if (struct.isSetDisable_outermost_topn()) {
        oprot.writeBool(struct.disable_outermost_topn);
      }
      if (struct.isSetQuery_timeout_s()) {
        oprot.writeI32(struct.query_timeout_s);
      }
      if (struct.isSetBuffer_pool_limit()) {
        oprot.writeI64(struct.buffer_pool_limit);
      }
      if (struct.isSetAppx_count_distinct()) {
        oprot.writeBool(struct.appx_count_distinct);
      }
      if (struct.isSetDisable_unsafe_spills()) {
        oprot.writeBool(struct.disable_unsafe_spills);
      }
      if (struct.isSetExec_single_node_rows_threshold()) {
        oprot.writeI32(struct.exec_single_node_rows_threshold);
      }
      if (struct.isSetOptimize_partition_key_scans()) {
        oprot.writeBool(struct.optimize_partition_key_scans);
      }
      if (struct.isSetReplica_preference()) {
        oprot.writeI32(struct.replica_preference.getValue());
      }
      if (struct.isSetSchedule_random_replica()) {
        oprot.writeBool(struct.schedule_random_replica);
      }
      if (struct.isSetDisable_streaming_preaggregations()) {
        oprot.writeBool(struct.disable_streaming_preaggregations);
      }
      if (struct.isSetRuntime_filter_mode()) {
        oprot.writeI32(struct.runtime_filter_mode.getValue());
      }
      if (struct.isSetRuntime_bloom_filter_size()) {
        oprot.writeI32(struct.runtime_bloom_filter_size);
      }
      if (struct.isSetRuntime_filter_wait_time_ms()) {
        oprot.writeI32(struct.runtime_filter_wait_time_ms);
      }
      if (struct.isSetDisable_row_runtime_filtering()) {
        oprot.writeBool(struct.disable_row_runtime_filtering);
      }
      if (struct.isSetMax_num_runtime_filters()) {
        oprot.writeI32(struct.max_num_runtime_filters);
      }
      if (struct.isSetParquet_annotate_strings_utf8()) {
        oprot.writeBool(struct.parquet_annotate_strings_utf8);
      }
      if (struct.isSetParquet_fallback_schema_resolution()) {
        oprot.writeI32(struct.parquet_fallback_schema_resolution.getValue());
      }
      if (struct.isSetMt_dop()) {
        oprot.writeI32(struct.mt_dop);
      }
      if (struct.isSetS3_skip_insert_staging()) {
        oprot.writeBool(struct.s3_skip_insert_staging);
      }
      if (struct.isSetRuntime_filter_min_size()) {
        oprot.writeI32(struct.runtime_filter_min_size);
      }
      if (struct.isSetRuntime_filter_max_size()) {
        oprot.writeI32(struct.runtime_filter_max_size);
      }
      if (struct.isSetPrefetch_mode()) {
        oprot.writeI32(struct.prefetch_mode.getValue());
      }
      if (struct.isSetStrict_mode()) {
        oprot.writeBool(struct.strict_mode);
      }
      if (struct.isSetScratch_limit()) {
        oprot.writeI64(struct.scratch_limit);
      }
      if (struct.isSetEnable_expr_rewrites()) {
        oprot.writeBool(struct.enable_expr_rewrites);
      }
      if (struct.isSetDecimal_v2()) {
        oprot.writeBool(struct.decimal_v2);
      }
      if (struct.isSetParquet_dictionary_filtering()) {
        oprot.writeBool(struct.parquet_dictionary_filtering);
      }
      if (struct.isSetParquet_array_resolution()) {
        oprot.writeI32(struct.parquet_array_resolution.getValue());
      }
      if (struct.isSetParquet_read_statistics()) {
        oprot.writeBool(struct.parquet_read_statistics);
      }
      if (struct.isSetDefault_join_distribution_mode()) {
        oprot.writeI32(struct.default_join_distribution_mode.getValue());
      }
      if (struct.isSetDisable_codegen_rows_threshold()) {
        oprot.writeI32(struct.disable_codegen_rows_threshold);
      }
      if (struct.isSetDefault_spillable_buffer_size()) {
        oprot.writeI64(struct.default_spillable_buffer_size);
      }
      if (struct.isSetMin_spillable_buffer_size()) {
        oprot.writeI64(struct.min_spillable_buffer_size);
      }
      if (struct.isSetMax_row_size()) {
        oprot.writeI64(struct.max_row_size);
      }
      if (struct.isSetIdle_session_timeout()) {
        oprot.writeI32(struct.idle_session_timeout);
      }
      if (struct.isSetCompute_stats_min_sample_size()) {
        oprot.writeI64(struct.compute_stats_min_sample_size);
      }
      if (struct.isSetExec_time_limit_s()) {
        oprot.writeI32(struct.exec_time_limit_s);
      }
      if (struct.isSetShuffle_distinct_exprs()) {
        oprot.writeBool(struct.shuffle_distinct_exprs);
      }
      if (struct.isSetMax_mem_estimate_for_admission()) {
        oprot.writeI64(struct.max_mem_estimate_for_admission);
      }
      if (struct.isSetThread_reservation_limit()) {
        oprot.writeI32(struct.thread_reservation_limit);
      }
      if (struct.isSetThread_reservation_aggregate_limit()) {
        oprot.writeI32(struct.thread_reservation_aggregate_limit);
      }
      if (struct.isSetKudu_read_mode()) {
        oprot.writeI32(struct.kudu_read_mode.getValue());
      }
      if (struct.isSetAllow_erasure_coded_files()) {
        oprot.writeBool(struct.allow_erasure_coded_files);
      }
      if (struct.isSetTimezone()) {
        oprot.writeString(struct.timezone);
      }
      if (struct.isSetScan_bytes_limit()) {
        oprot.writeI64(struct.scan_bytes_limit);
      }
      if (struct.isSetCpu_limit_s()) {
        oprot.writeI64(struct.cpu_limit_s);
      }
      if (struct.isSetTopn_bytes_limit()) {
        oprot.writeI64(struct.topn_bytes_limit);
      }
      if (struct.isSetClient_identifier()) {
        oprot.writeString(struct.client_identifier);
      }
      if (struct.isSetResource_trace_ratio()) {
        oprot.writeDouble(struct.resource_trace_ratio);
      }
      if (struct.isSetNum_remote_executor_candidates()) {
        oprot.writeI32(struct.num_remote_executor_candidates);
      }
      if (struct.isSetNum_rows_produced_limit()) {
        oprot.writeI64(struct.num_rows_produced_limit);
      }
      if (struct.isSetPlanner_testcase_mode()) {
        oprot.writeBool(struct.planner_testcase_mode);
      }
      if (struct.isSetDefault_file_format()) {
        oprot.writeI32(struct.default_file_format.getValue());
      }
      if (struct.isSetParquet_timestamp_type()) {
        oprot.writeI32(struct.parquet_timestamp_type.getValue());
      }
      if (struct.isSetParquet_read_page_index()) {
        oprot.writeBool(struct.parquet_read_page_index);
      }
      if (struct.isSetParquet_write_page_index()) {
        oprot.writeBool(struct.parquet_write_page_index);
      }
      if (struct.isSetParquet_page_row_count_limit()) {
        oprot.writeI32(struct.parquet_page_row_count_limit);
      }
      if (struct.isSetDisable_hdfs_num_rows_estimate()) {
        oprot.writeBool(struct.disable_hdfs_num_rows_estimate);
      }
      if (struct.isSetDefault_hints_insert_statement()) {
        oprot.writeString(struct.default_hints_insert_statement);
      }
      if (struct.isSetSpool_query_results()) {
        oprot.writeBool(struct.spool_query_results);
      }
      if (struct.isSetDefault_transactional_type()) {
        oprot.writeI32(struct.default_transactional_type.getValue());
      }
      if (struct.isSetStatement_expression_limit()) {
        oprot.writeI32(struct.statement_expression_limit);
      }
      if (struct.isSetMax_statement_length_bytes()) {
        oprot.writeI32(struct.max_statement_length_bytes);
      }
      if (struct.isSetDisable_data_cache()) {
        oprot.writeBool(struct.disable_data_cache);
      }
      if (struct.isSetMax_result_spooling_mem()) {
        oprot.writeI64(struct.max_result_spooling_mem);
      }
      if (struct.isSetMax_spilled_result_spooling_mem()) {
        oprot.writeI64(struct.max_spilled_result_spooling_mem);
      }
      if (struct.isSetDisable_hbase_num_rows_estimate()) {
        oprot.writeBool(struct.disable_hbase_num_rows_estimate);
      }
      if (struct.isSetFetch_rows_timeout_ms()) {
        oprot.writeI64(struct.fetch_rows_timeout_ms);
      }
      if (struct.isSetNow_string()) {
        oprot.writeString(struct.now_string);
      }
      if (struct.isSetParquet_object_store_split_size()) {
        oprot.writeI64(struct.parquet_object_store_split_size);
      }
      if (struct.isSetMem_limit_executors()) {
        oprot.writeI64(struct.mem_limit_executors);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(87);
      if (incoming.get(0)) {
        struct.abort_on_error = iprot.readBool();
        struct.setAbort_on_errorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.max_errors = iprot.readI32();
        struct.setMax_errorsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.disable_codegen = iprot.readBool();
        struct.setDisable_codegenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.batch_size = iprot.readI32();
        struct.setBatch_sizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.num_nodes = iprot.readI32();
        struct.setNum_nodesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max_scan_range_length = iprot.readI64();
        struct.setMax_scan_range_lengthIsSet(true);
      }
      if (incoming.get(6)) {
        struct.num_scanner_threads = iprot.readI32();
        struct.setNum_scanner_threadsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.debug_action = iprot.readString();
        struct.setDebug_actionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mem_limit = iprot.readI64();
        struct.setMem_limitIsSet(true);
      }
      if (incoming.get(9)) {
        struct.compression_codec = new org.apache.impala.thrift.TCompressionCodec();
        struct.compression_codec.read(iprot);
        struct.setCompression_codecIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hbase_caching = iprot.readI32();
        struct.setHbase_cachingIsSet(true);
      }
      if (incoming.get(11)) {
        struct.hbase_cache_blocks = iprot.readBool();
        struct.setHbase_cache_blocksIsSet(true);
      }
      if (incoming.get(12)) {
        struct.parquet_file_size = iprot.readI64();
        struct.setParquet_file_sizeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.explain_level = org.apache.impala.thrift.TExplainLevel.findByValue(iprot.readI32());
        struct.setExplain_levelIsSet(true);
      }
      if (incoming.get(14)) {
        struct.sync_ddl = iprot.readBool();
        struct.setSync_ddlIsSet(true);
      }
      if (incoming.get(15)) {
        struct.request_pool = iprot.readString();
        struct.setRequest_poolIsSet(true);
      }
      if (incoming.get(16)) {
        struct.disable_outermost_topn = iprot.readBool();
        struct.setDisable_outermost_topnIsSet(true);
      }
      if (incoming.get(17)) {
        struct.query_timeout_s = iprot.readI32();
        struct.setQuery_timeout_sIsSet(true);
      }
      if (incoming.get(18)) {
        struct.buffer_pool_limit = iprot.readI64();
        struct.setBuffer_pool_limitIsSet(true);
      }
      if (incoming.get(19)) {
        struct.appx_count_distinct = iprot.readBool();
        struct.setAppx_count_distinctIsSet(true);
      }
      if (incoming.get(20)) {
        struct.disable_unsafe_spills = iprot.readBool();
        struct.setDisable_unsafe_spillsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.exec_single_node_rows_threshold = iprot.readI32();
        struct.setExec_single_node_rows_thresholdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.optimize_partition_key_scans = iprot.readBool();
        struct.setOptimize_partition_key_scansIsSet(true);
      }
      if (incoming.get(23)) {
        struct.replica_preference = org.apache.impala.thrift.TReplicaPreference.findByValue(iprot.readI32());
        struct.setReplica_preferenceIsSet(true);
      }
      if (incoming.get(24)) {
        struct.schedule_random_replica = iprot.readBool();
        struct.setSchedule_random_replicaIsSet(true);
      }
      if (incoming.get(25)) {
        struct.disable_streaming_preaggregations = iprot.readBool();
        struct.setDisable_streaming_preaggregationsIsSet(true);
      }
      if (incoming.get(26)) {
        struct.runtime_filter_mode = org.apache.impala.thrift.TRuntimeFilterMode.findByValue(iprot.readI32());
        struct.setRuntime_filter_modeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.runtime_bloom_filter_size = iprot.readI32();
        struct.setRuntime_bloom_filter_sizeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.runtime_filter_wait_time_ms = iprot.readI32();
        struct.setRuntime_filter_wait_time_msIsSet(true);
      }
      if (incoming.get(29)) {
        struct.disable_row_runtime_filtering = iprot.readBool();
        struct.setDisable_row_runtime_filteringIsSet(true);
      }
      if (incoming.get(30)) {
        struct.max_num_runtime_filters = iprot.readI32();
        struct.setMax_num_runtime_filtersIsSet(true);
      }
      if (incoming.get(31)) {
        struct.parquet_annotate_strings_utf8 = iprot.readBool();
        struct.setParquet_annotate_strings_utf8IsSet(true);
      }
      if (incoming.get(32)) {
        struct.parquet_fallback_schema_resolution = org.apache.impala.thrift.TParquetFallbackSchemaResolution.findByValue(iprot.readI32());
        struct.setParquet_fallback_schema_resolutionIsSet(true);
      }
      if (incoming.get(33)) {
        struct.mt_dop = iprot.readI32();
        struct.setMt_dopIsSet(true);
      }
      if (incoming.get(34)) {
        struct.s3_skip_insert_staging = iprot.readBool();
        struct.setS3_skip_insert_stagingIsSet(true);
      }
      if (incoming.get(35)) {
        struct.runtime_filter_min_size = iprot.readI32();
        struct.setRuntime_filter_min_sizeIsSet(true);
      }
      if (incoming.get(36)) {
        struct.runtime_filter_max_size = iprot.readI32();
        struct.setRuntime_filter_max_sizeIsSet(true);
      }
      if (incoming.get(37)) {
        struct.prefetch_mode = org.apache.impala.thrift.TPrefetchMode.findByValue(iprot.readI32());
        struct.setPrefetch_modeIsSet(true);
      }
      if (incoming.get(38)) {
        struct.strict_mode = iprot.readBool();
        struct.setStrict_modeIsSet(true);
      }
      if (incoming.get(39)) {
        struct.scratch_limit = iprot.readI64();
        struct.setScratch_limitIsSet(true);
      }
      if (incoming.get(40)) {
        struct.enable_expr_rewrites = iprot.readBool();
        struct.setEnable_expr_rewritesIsSet(true);
      }
      if (incoming.get(41)) {
        struct.decimal_v2 = iprot.readBool();
        struct.setDecimal_v2IsSet(true);
      }
      if (incoming.get(42)) {
        struct.parquet_dictionary_filtering = iprot.readBool();
        struct.setParquet_dictionary_filteringIsSet(true);
      }
      if (incoming.get(43)) {
        struct.parquet_array_resolution = org.apache.impala.thrift.TParquetArrayResolution.findByValue(iprot.readI32());
        struct.setParquet_array_resolutionIsSet(true);
      }
      if (incoming.get(44)) {
        struct.parquet_read_statistics = iprot.readBool();
        struct.setParquet_read_statisticsIsSet(true);
      }
      if (incoming.get(45)) {
        struct.default_join_distribution_mode = org.apache.impala.thrift.TJoinDistributionMode.findByValue(iprot.readI32());
        struct.setDefault_join_distribution_modeIsSet(true);
      }
      if (incoming.get(46)) {
        struct.disable_codegen_rows_threshold = iprot.readI32();
        struct.setDisable_codegen_rows_thresholdIsSet(true);
      }
      if (incoming.get(47)) {
        struct.default_spillable_buffer_size = iprot.readI64();
        struct.setDefault_spillable_buffer_sizeIsSet(true);
      }
      if (incoming.get(48)) {
        struct.min_spillable_buffer_size = iprot.readI64();
        struct.setMin_spillable_buffer_sizeIsSet(true);
      }
      if (incoming.get(49)) {
        struct.max_row_size = iprot.readI64();
        struct.setMax_row_sizeIsSet(true);
      }
      if (incoming.get(50)) {
        struct.idle_session_timeout = iprot.readI32();
        struct.setIdle_session_timeoutIsSet(true);
      }
      if (incoming.get(51)) {
        struct.compute_stats_min_sample_size = iprot.readI64();
        struct.setCompute_stats_min_sample_sizeIsSet(true);
      }
      if (incoming.get(52)) {
        struct.exec_time_limit_s = iprot.readI32();
        struct.setExec_time_limit_sIsSet(true);
      }
      if (incoming.get(53)) {
        struct.shuffle_distinct_exprs = iprot.readBool();
        struct.setShuffle_distinct_exprsIsSet(true);
      }
      if (incoming.get(54)) {
        struct.max_mem_estimate_for_admission = iprot.readI64();
        struct.setMax_mem_estimate_for_admissionIsSet(true);
      }
      if (incoming.get(55)) {
        struct.thread_reservation_limit = iprot.readI32();
        struct.setThread_reservation_limitIsSet(true);
      }
      if (incoming.get(56)) {
        struct.thread_reservation_aggregate_limit = iprot.readI32();
        struct.setThread_reservation_aggregate_limitIsSet(true);
      }
      if (incoming.get(57)) {
        struct.kudu_read_mode = org.apache.impala.thrift.TKuduReadMode.findByValue(iprot.readI32());
        struct.setKudu_read_modeIsSet(true);
      }
      if (incoming.get(58)) {
        struct.allow_erasure_coded_files = iprot.readBool();
        struct.setAllow_erasure_coded_filesIsSet(true);
      }
      if (incoming.get(59)) {
        struct.timezone = iprot.readString();
        struct.setTimezoneIsSet(true);
      }
      if (incoming.get(60)) {
        struct.scan_bytes_limit = iprot.readI64();
        struct.setScan_bytes_limitIsSet(true);
      }
      if (incoming.get(61)) {
        struct.cpu_limit_s = iprot.readI64();
        struct.setCpu_limit_sIsSet(true);
      }
      if (incoming.get(62)) {
        struct.topn_bytes_limit = iprot.readI64();
        struct.setTopn_bytes_limitIsSet(true);
      }
      if (incoming.get(63)) {
        struct.client_identifier = iprot.readString();
        struct.setClient_identifierIsSet(true);
      }
      if (incoming.get(64)) {
        struct.resource_trace_ratio = iprot.readDouble();
        struct.setResource_trace_ratioIsSet(true);
      }
      if (incoming.get(65)) {
        struct.num_remote_executor_candidates = iprot.readI32();
        struct.setNum_remote_executor_candidatesIsSet(true);
      }
      if (incoming.get(66)) {
        struct.num_rows_produced_limit = iprot.readI64();
        struct.setNum_rows_produced_limitIsSet(true);
      }
      if (incoming.get(67)) {
        struct.planner_testcase_mode = iprot.readBool();
        struct.setPlanner_testcase_modeIsSet(true);
      }
      if (incoming.get(68)) {
        struct.default_file_format = org.apache.impala.thrift.THdfsFileFormat.findByValue(iprot.readI32());
        struct.setDefault_file_formatIsSet(true);
      }
      if (incoming.get(69)) {
        struct.parquet_timestamp_type = org.apache.impala.thrift.TParquetTimestampType.findByValue(iprot.readI32());
        struct.setParquet_timestamp_typeIsSet(true);
      }
      if (incoming.get(70)) {
        struct.parquet_read_page_index = iprot.readBool();
        struct.setParquet_read_page_indexIsSet(true);
      }
      if (incoming.get(71)) {
        struct.parquet_write_page_index = iprot.readBool();
        struct.setParquet_write_page_indexIsSet(true);
      }
      if (incoming.get(72)) {
        struct.parquet_page_row_count_limit = iprot.readI32();
        struct.setParquet_page_row_count_limitIsSet(true);
      }
      if (incoming.get(73)) {
        struct.disable_hdfs_num_rows_estimate = iprot.readBool();
        struct.setDisable_hdfs_num_rows_estimateIsSet(true);
      }
      if (incoming.get(74)) {
        struct.default_hints_insert_statement = iprot.readString();
        struct.setDefault_hints_insert_statementIsSet(true);
      }
      if (incoming.get(75)) {
        struct.spool_query_results = iprot.readBool();
        struct.setSpool_query_resultsIsSet(true);
      }
      if (incoming.get(76)) {
        struct.default_transactional_type = org.apache.impala.thrift.TTransactionalType.findByValue(iprot.readI32());
        struct.setDefault_transactional_typeIsSet(true);
      }
      if (incoming.get(77)) {
        struct.statement_expression_limit = iprot.readI32();
        struct.setStatement_expression_limitIsSet(true);
      }
      if (incoming.get(78)) {
        struct.max_statement_length_bytes = iprot.readI32();
        struct.setMax_statement_length_bytesIsSet(true);
      }
      if (incoming.get(79)) {
        struct.disable_data_cache = iprot.readBool();
        struct.setDisable_data_cacheIsSet(true);
      }
      if (incoming.get(80)) {
        struct.max_result_spooling_mem = iprot.readI64();
        struct.setMax_result_spooling_memIsSet(true);
      }
      if (incoming.get(81)) {
        struct.max_spilled_result_spooling_mem = iprot.readI64();
        struct.setMax_spilled_result_spooling_memIsSet(true);
      }
      if (incoming.get(82)) {
        struct.disable_hbase_num_rows_estimate = iprot.readBool();
        struct.setDisable_hbase_num_rows_estimateIsSet(true);
      }
      if (incoming.get(83)) {
        struct.fetch_rows_timeout_ms = iprot.readI64();
        struct.setFetch_rows_timeout_msIsSet(true);
      }
      if (incoming.get(84)) {
        struct.now_string = iprot.readString();
        struct.setNow_stringIsSet(true);
      }
      if (incoming.get(85)) {
        struct.parquet_object_store_split_size = iprot.readI64();
        struct.setParquet_object_store_split_sizeIsSet(true);
      }
      if (incoming.get(86)) {
        struct.mem_limit_executors = iprot.readI64();
        struct.setMem_limit_executorsIsSet(true);
      }
    }
  }

}

