/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class THdfsPartitionLocation implements org.apache.thrift.TBase<THdfsPartitionLocation, THdfsPartitionLocation._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsPartitionLocation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsPartitionLocation");

  private static final org.apache.thrift.protocol.TField PREFIX_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix_index", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUFFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("suffix", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THdfsPartitionLocationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THdfsPartitionLocationTupleSchemeFactory());
  }

  private int prefix_index; // required
  private String suffix; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PREFIX_INDEX((short)1, "prefix_index"),
    SUFFIX((short)2, "suffix");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PREFIX_INDEX
          return PREFIX_INDEX;
        case 2: // SUFFIX
          return SUFFIX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PREFIX_INDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PREFIX_INDEX, new org.apache.thrift.meta_data.FieldMetaData("prefix_index", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUFFIX, new org.apache.thrift.meta_data.FieldMetaData("suffix", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsPartitionLocation.class, metaDataMap);
  }

  public THdfsPartitionLocation() {
    this.prefix_index = -1;

  }

  public THdfsPartitionLocation(
    int prefix_index,
    String suffix)
  {
    this();
    this.prefix_index = prefix_index;
    setPrefix_indexIsSet(true);
    this.suffix = suffix;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsPartitionLocation(THdfsPartitionLocation other) {
    __isset_bitfield = other.__isset_bitfield;
    this.prefix_index = other.prefix_index;
    if (other.isSetSuffix()) {
      this.suffix = other.suffix;
    }
  }

  public THdfsPartitionLocation deepCopy() {
    return new THdfsPartitionLocation(this);
  }

  @Override
  public void clear() {
    this.prefix_index = -1;

    this.suffix = null;
  }

  public int getPrefix_index() {
    return this.prefix_index;
  }

  public void setPrefix_index(int prefix_index) {
    this.prefix_index = prefix_index;
    setPrefix_indexIsSet(true);
  }

  public void unsetPrefix_index() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREFIX_INDEX_ISSET_ID);
  }

  /** Returns true if field prefix_index is set (has been assigned a value) and false otherwise */
  public boolean isSetPrefix_index() {
    return EncodingUtils.testBit(__isset_bitfield, __PREFIX_INDEX_ISSET_ID);
  }

  public void setPrefix_indexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREFIX_INDEX_ISSET_ID, value);
  }

  public String getSuffix() {
    return this.suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }

  public void unsetSuffix() {
    this.suffix = null;
  }

  /** Returns true if field suffix is set (has been assigned a value) and false otherwise */
  public boolean isSetSuffix() {
    return this.suffix != null;
  }

  public void setSuffixIsSet(boolean value) {
    if (!value) {
      this.suffix = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PREFIX_INDEX:
      if (value == null) {
        unsetPrefix_index();
      } else {
        setPrefix_index((Integer)value);
      }
      break;

    case SUFFIX:
      if (value == null) {
        unsetSuffix();
      } else {
        setSuffix((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PREFIX_INDEX:
      return getPrefix_index();

    case SUFFIX:
      return getSuffix();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PREFIX_INDEX:
      return isSetPrefix_index();
    case SUFFIX:
      return isSetSuffix();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THdfsPartitionLocation)
      return this.equals((THdfsPartitionLocation)that);
    return false;
  }

  public boolean equals(THdfsPartitionLocation that) {
    if (that == null)
      return false;

    boolean this_present_prefix_index = true;
    boolean that_present_prefix_index = true;
    if (this_present_prefix_index || that_present_prefix_index) {
      if (!(this_present_prefix_index && that_present_prefix_index))
        return false;
      if (this.prefix_index != that.prefix_index)
        return false;
    }

    boolean this_present_suffix = true && this.isSetSuffix();
    boolean that_present_suffix = true && that.isSetSuffix();
    if (this_present_suffix || that_present_suffix) {
      if (!(this_present_suffix && that_present_suffix))
        return false;
      if (!this.suffix.equals(that.suffix))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_prefix_index = true;
    list.add(present_prefix_index);
    if (present_prefix_index)
      list.add(prefix_index);

    boolean present_suffix = true && (isSetSuffix());
    list.add(present_suffix);
    if (present_suffix)
      list.add(suffix);

    return list.hashCode();
  }

  @Override
  public int compareTo(THdfsPartitionLocation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPrefix_index()).compareTo(other.isSetPrefix_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrefix_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix_index, other.prefix_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuffix()).compareTo(other.isSetSuffix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuffix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suffix, other.suffix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THdfsPartitionLocation(");
    boolean first = true;

    sb.append("prefix_index:");
    sb.append(this.prefix_index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("suffix:");
    if (this.suffix == null) {
      sb.append("null");
    } else {
      sb.append(this.suffix);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetPrefix_index()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'prefix_index' is unset! Struct:" + toString());
    }

    if (!isSetSuffix()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'suffix' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsPartitionLocationStandardSchemeFactory implements SchemeFactory {
    public THdfsPartitionLocationStandardScheme getScheme() {
      return new THdfsPartitionLocationStandardScheme();
    }
  }

  private static class THdfsPartitionLocationStandardScheme extends StandardScheme<THdfsPartitionLocation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsPartitionLocation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PREFIX_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.prefix_index = iprot.readI32();
              struct.setPrefix_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUFFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suffix = iprot.readString();
              struct.setSuffixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsPartitionLocation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PREFIX_INDEX_FIELD_DESC);
      oprot.writeI32(struct.prefix_index);
      oprot.writeFieldEnd();
      if (struct.suffix != null) {
        oprot.writeFieldBegin(SUFFIX_FIELD_DESC);
        oprot.writeString(struct.suffix);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsPartitionLocationTupleSchemeFactory implements SchemeFactory {
    public THdfsPartitionLocationTupleScheme getScheme() {
      return new THdfsPartitionLocationTupleScheme();
    }
  }

  private static class THdfsPartitionLocationTupleScheme extends TupleScheme<THdfsPartitionLocation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsPartitionLocation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.prefix_index);
      oprot.writeString(struct.suffix);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsPartitionLocation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.prefix_index = iprot.readI32();
      struct.setPrefix_indexIsSet(true);
      struct.suffix = iprot.readString();
      struct.setSuffixIsSet(true);
    }
  }

}

