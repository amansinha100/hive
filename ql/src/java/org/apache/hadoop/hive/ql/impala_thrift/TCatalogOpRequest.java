/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TCatalogOpRequest implements org.apache.thrift.TBase<TCatalogOpRequest, TCatalogOpRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TCatalogOpRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCatalogOpRequest");

  private static final org.apache.thrift.protocol.TField OP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("op_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SYNC_DDL_FIELD_DESC = new org.apache.thrift.protocol.TField("sync_ddl", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField USE_DB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("use_db_params", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIBE_DB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("describe_db_params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIBE_TABLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("describe_table_params", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SHOW_DBS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_dbs_params", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SHOW_TABLES_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_tables_params", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SHOW_FNS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_fns_params", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField SHOW_DATA_SRCS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_data_srcs_params", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SHOW_ROLES_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_roles_params", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SHOW_GRANT_PRINCIPAL_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_grant_principal_params", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField DDL_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("ddl_params", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField RESET_METADATA_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("reset_metadata_params", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField SHOW_STATS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_stats_params", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField SHOW_CREATE_TABLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_create_table_params", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField SHOW_FILES_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_files_params", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField LINEAGE_GRAPH_FIELD_DESC = new org.apache.thrift.protocol.TField("lineage_graph", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField SHOW_CREATE_FUNCTION_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("show_create_function_params", org.apache.thrift.protocol.TType.STRUCT, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCatalogOpRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCatalogOpRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TCatalogOpType
   */
  public TCatalogOpType op_type; // required
  public boolean sync_ddl; // required
  public TUseDbParams use_db_params; // optional
  public TDescribeDbParams describe_db_params; // optional
  public TDescribeTableParams describe_table_params; // optional
  public TShowDbsParams show_dbs_params; // optional
  public TShowTablesParams show_tables_params; // optional
  public TShowFunctionsParams show_fns_params; // optional
  public TShowDataSrcsParams show_data_srcs_params; // optional
  public TShowRolesParams show_roles_params; // optional
  public TShowGrantPrincipalParams show_grant_principal_params; // optional
  public org.apache.impala.thrift.TDdlExecRequest ddl_params; // optional
  public org.apache.impala.thrift.TResetMetadataRequest reset_metadata_params; // optional
  public TShowStatsParams show_stats_params; // optional
  public org.apache.impala.thrift.TTableName show_create_table_params; // optional
  public TShowFilesParams show_files_params; // optional
  public org.apache.impala.thrift.TLineageGraph lineage_graph; // optional
  public TGetFunctionsParams show_create_function_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TCatalogOpType
     */
    OP_TYPE((short)1, "op_type"),
    SYNC_DDL((short)2, "sync_ddl"),
    USE_DB_PARAMS((short)3, "use_db_params"),
    DESCRIBE_DB_PARAMS((short)4, "describe_db_params"),
    DESCRIBE_TABLE_PARAMS((short)5, "describe_table_params"),
    SHOW_DBS_PARAMS((short)6, "show_dbs_params"),
    SHOW_TABLES_PARAMS((short)7, "show_tables_params"),
    SHOW_FNS_PARAMS((short)8, "show_fns_params"),
    SHOW_DATA_SRCS_PARAMS((short)9, "show_data_srcs_params"),
    SHOW_ROLES_PARAMS((short)10, "show_roles_params"),
    SHOW_GRANT_PRINCIPAL_PARAMS((short)11, "show_grant_principal_params"),
    DDL_PARAMS((short)12, "ddl_params"),
    RESET_METADATA_PARAMS((short)13, "reset_metadata_params"),
    SHOW_STATS_PARAMS((short)14, "show_stats_params"),
    SHOW_CREATE_TABLE_PARAMS((short)15, "show_create_table_params"),
    SHOW_FILES_PARAMS((short)16, "show_files_params"),
    LINEAGE_GRAPH((short)17, "lineage_graph"),
    SHOW_CREATE_FUNCTION_PARAMS((short)18, "show_create_function_params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OP_TYPE
          return OP_TYPE;
        case 2: // SYNC_DDL
          return SYNC_DDL;
        case 3: // USE_DB_PARAMS
          return USE_DB_PARAMS;
        case 4: // DESCRIBE_DB_PARAMS
          return DESCRIBE_DB_PARAMS;
        case 5: // DESCRIBE_TABLE_PARAMS
          return DESCRIBE_TABLE_PARAMS;
        case 6: // SHOW_DBS_PARAMS
          return SHOW_DBS_PARAMS;
        case 7: // SHOW_TABLES_PARAMS
          return SHOW_TABLES_PARAMS;
        case 8: // SHOW_FNS_PARAMS
          return SHOW_FNS_PARAMS;
        case 9: // SHOW_DATA_SRCS_PARAMS
          return SHOW_DATA_SRCS_PARAMS;
        case 10: // SHOW_ROLES_PARAMS
          return SHOW_ROLES_PARAMS;
        case 11: // SHOW_GRANT_PRINCIPAL_PARAMS
          return SHOW_GRANT_PRINCIPAL_PARAMS;
        case 12: // DDL_PARAMS
          return DDL_PARAMS;
        case 13: // RESET_METADATA_PARAMS
          return RESET_METADATA_PARAMS;
        case 14: // SHOW_STATS_PARAMS
          return SHOW_STATS_PARAMS;
        case 15: // SHOW_CREATE_TABLE_PARAMS
          return SHOW_CREATE_TABLE_PARAMS;
        case 16: // SHOW_FILES_PARAMS
          return SHOW_FILES_PARAMS;
        case 17: // LINEAGE_GRAPH
          return LINEAGE_GRAPH;
        case 18: // SHOW_CREATE_FUNCTION_PARAMS
          return SHOW_CREATE_FUNCTION_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SYNC_DDL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USE_DB_PARAMS,_Fields.DESCRIBE_DB_PARAMS,_Fields.DESCRIBE_TABLE_PARAMS,_Fields.SHOW_DBS_PARAMS,_Fields.SHOW_TABLES_PARAMS,_Fields.SHOW_FNS_PARAMS,_Fields.SHOW_DATA_SRCS_PARAMS,_Fields.SHOW_ROLES_PARAMS,_Fields.SHOW_GRANT_PRINCIPAL_PARAMS,_Fields.DDL_PARAMS,_Fields.RESET_METADATA_PARAMS,_Fields.SHOW_STATS_PARAMS,_Fields.SHOW_CREATE_TABLE_PARAMS,_Fields.SHOW_FILES_PARAMS,_Fields.LINEAGE_GRAPH,_Fields.SHOW_CREATE_FUNCTION_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("op_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCatalogOpType.class)));
    tmpMap.put(_Fields.SYNC_DDL, new org.apache.thrift.meta_data.FieldMetaData("sync_ddl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_DB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("use_db_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUseDbParams.class)));
    tmpMap.put(_Fields.DESCRIBE_DB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("describe_db_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDescribeDbParams.class)));
    tmpMap.put(_Fields.DESCRIBE_TABLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("describe_table_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDescribeTableParams.class)));
    tmpMap.put(_Fields.SHOW_DBS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_dbs_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowDbsParams.class)));
    tmpMap.put(_Fields.SHOW_TABLES_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_tables_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowTablesParams.class)));
    tmpMap.put(_Fields.SHOW_FNS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_fns_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowFunctionsParams.class)));
    tmpMap.put(_Fields.SHOW_DATA_SRCS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_data_srcs_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowDataSrcsParams.class)));
    tmpMap.put(_Fields.SHOW_ROLES_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_roles_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowRolesParams.class)));
    tmpMap.put(_Fields.SHOW_GRANT_PRINCIPAL_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_grant_principal_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowGrantPrincipalParams.class)));
    tmpMap.put(_Fields.DDL_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("ddl_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDdlExecRequest.class)));
    tmpMap.put(_Fields.RESET_METADATA_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("reset_metadata_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TResetMetadataRequest.class)));
    tmpMap.put(_Fields.SHOW_STATS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_stats_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowStatsParams.class)));
    tmpMap.put(_Fields.SHOW_CREATE_TABLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_create_table_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.SHOW_FILES_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_files_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TShowFilesParams.class)));
    tmpMap.put(_Fields.LINEAGE_GRAPH, new org.apache.thrift.meta_data.FieldMetaData("lineage_graph", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TLineageGraph.class)));
    tmpMap.put(_Fields.SHOW_CREATE_FUNCTION_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("show_create_function_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetFunctionsParams.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCatalogOpRequest.class, metaDataMap);
  }

  public TCatalogOpRequest() {
  }

  public TCatalogOpRequest(
    TCatalogOpType op_type,
    boolean sync_ddl)
  {
    this();
    this.op_type = op_type;
    this.sync_ddl = sync_ddl;
    setSync_ddlIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCatalogOpRequest(TCatalogOpRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOp_type()) {
      this.op_type = other.op_type;
    }
    this.sync_ddl = other.sync_ddl;
    if (other.isSetUse_db_params()) {
      this.use_db_params = new TUseDbParams(other.use_db_params);
    }
    if (other.isSetDescribe_db_params()) {
      this.describe_db_params = new TDescribeDbParams(other.describe_db_params);
    }
    if (other.isSetDescribe_table_params()) {
      this.describe_table_params = new TDescribeTableParams(other.describe_table_params);
    }
    if (other.isSetShow_dbs_params()) {
      this.show_dbs_params = new TShowDbsParams(other.show_dbs_params);
    }
    if (other.isSetShow_tables_params()) {
      this.show_tables_params = new TShowTablesParams(other.show_tables_params);
    }
    if (other.isSetShow_fns_params()) {
      this.show_fns_params = new TShowFunctionsParams(other.show_fns_params);
    }
    if (other.isSetShow_data_srcs_params()) {
      this.show_data_srcs_params = new TShowDataSrcsParams(other.show_data_srcs_params);
    }
    if (other.isSetShow_roles_params()) {
      this.show_roles_params = new TShowRolesParams(other.show_roles_params);
    }
    if (other.isSetShow_grant_principal_params()) {
      this.show_grant_principal_params = new TShowGrantPrincipalParams(other.show_grant_principal_params);
    }
    if (other.isSetDdl_params()) {
      this.ddl_params = new org.apache.impala.thrift.TDdlExecRequest(other.ddl_params);
    }
    if (other.isSetReset_metadata_params()) {
      this.reset_metadata_params = new org.apache.impala.thrift.TResetMetadataRequest(other.reset_metadata_params);
    }
    if (other.isSetShow_stats_params()) {
      this.show_stats_params = new TShowStatsParams(other.show_stats_params);
    }
    if (other.isSetShow_create_table_params()) {
      this.show_create_table_params = new org.apache.impala.thrift.TTableName(other.show_create_table_params);
    }
    if (other.isSetShow_files_params()) {
      this.show_files_params = new TShowFilesParams(other.show_files_params);
    }
    if (other.isSetLineage_graph()) {
      this.lineage_graph = new org.apache.impala.thrift.TLineageGraph(other.lineage_graph);
    }
    if (other.isSetShow_create_function_params()) {
      this.show_create_function_params = new TGetFunctionsParams(other.show_create_function_params);
    }
  }

  public TCatalogOpRequest deepCopy() {
    return new TCatalogOpRequest(this);
  }

  @Override
  public void clear() {
    this.op_type = null;
    setSync_ddlIsSet(false);
    this.sync_ddl = false;
    this.use_db_params = null;
    this.describe_db_params = null;
    this.describe_table_params = null;
    this.show_dbs_params = null;
    this.show_tables_params = null;
    this.show_fns_params = null;
    this.show_data_srcs_params = null;
    this.show_roles_params = null;
    this.show_grant_principal_params = null;
    this.ddl_params = null;
    this.reset_metadata_params = null;
    this.show_stats_params = null;
    this.show_create_table_params = null;
    this.show_files_params = null;
    this.lineage_graph = null;
    this.show_create_function_params = null;
  }

  /**
   * 
   * @see TCatalogOpType
   */
  public TCatalogOpType getOp_type() {
    return this.op_type;
  }

  /**
   * 
   * @see TCatalogOpType
   */
  public TCatalogOpRequest setOp_type(TCatalogOpType op_type) {
    this.op_type = op_type;
    return this;
  }

  public void unsetOp_type() {
    this.op_type = null;
  }

  /** Returns true if field op_type is set (has been assigned a value) and false otherwise */
  public boolean isSetOp_type() {
    return this.op_type != null;
  }

  public void setOp_typeIsSet(boolean value) {
    if (!value) {
      this.op_type = null;
    }
  }

  public boolean isSync_ddl() {
    return this.sync_ddl;
  }

  public TCatalogOpRequest setSync_ddl(boolean sync_ddl) {
    this.sync_ddl = sync_ddl;
    setSync_ddlIsSet(true);
    return this;
  }

  public void unsetSync_ddl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYNC_DDL_ISSET_ID);
  }

  /** Returns true if field sync_ddl is set (has been assigned a value) and false otherwise */
  public boolean isSetSync_ddl() {
    return EncodingUtils.testBit(__isset_bitfield, __SYNC_DDL_ISSET_ID);
  }

  public void setSync_ddlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYNC_DDL_ISSET_ID, value);
  }

  public TUseDbParams getUse_db_params() {
    return this.use_db_params;
  }

  public TCatalogOpRequest setUse_db_params(TUseDbParams use_db_params) {
    this.use_db_params = use_db_params;
    return this;
  }

  public void unsetUse_db_params() {
    this.use_db_params = null;
  }

  /** Returns true if field use_db_params is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_db_params() {
    return this.use_db_params != null;
  }

  public void setUse_db_paramsIsSet(boolean value) {
    if (!value) {
      this.use_db_params = null;
    }
  }

  public TDescribeDbParams getDescribe_db_params() {
    return this.describe_db_params;
  }

  public TCatalogOpRequest setDescribe_db_params(TDescribeDbParams describe_db_params) {
    this.describe_db_params = describe_db_params;
    return this;
  }

  public void unsetDescribe_db_params() {
    this.describe_db_params = null;
  }

  /** Returns true if field describe_db_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDescribe_db_params() {
    return this.describe_db_params != null;
  }

  public void setDescribe_db_paramsIsSet(boolean value) {
    if (!value) {
      this.describe_db_params = null;
    }
  }

  public TDescribeTableParams getDescribe_table_params() {
    return this.describe_table_params;
  }

  public TCatalogOpRequest setDescribe_table_params(TDescribeTableParams describe_table_params) {
    this.describe_table_params = describe_table_params;
    return this;
  }

  public void unsetDescribe_table_params() {
    this.describe_table_params = null;
  }

  /** Returns true if field describe_table_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDescribe_table_params() {
    return this.describe_table_params != null;
  }

  public void setDescribe_table_paramsIsSet(boolean value) {
    if (!value) {
      this.describe_table_params = null;
    }
  }

  public TShowDbsParams getShow_dbs_params() {
    return this.show_dbs_params;
  }

  public TCatalogOpRequest setShow_dbs_params(TShowDbsParams show_dbs_params) {
    this.show_dbs_params = show_dbs_params;
    return this;
  }

  public void unsetShow_dbs_params() {
    this.show_dbs_params = null;
  }

  /** Returns true if field show_dbs_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_dbs_params() {
    return this.show_dbs_params != null;
  }

  public void setShow_dbs_paramsIsSet(boolean value) {
    if (!value) {
      this.show_dbs_params = null;
    }
  }

  public TShowTablesParams getShow_tables_params() {
    return this.show_tables_params;
  }

  public TCatalogOpRequest setShow_tables_params(TShowTablesParams show_tables_params) {
    this.show_tables_params = show_tables_params;
    return this;
  }

  public void unsetShow_tables_params() {
    this.show_tables_params = null;
  }

  /** Returns true if field show_tables_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_tables_params() {
    return this.show_tables_params != null;
  }

  public void setShow_tables_paramsIsSet(boolean value) {
    if (!value) {
      this.show_tables_params = null;
    }
  }

  public TShowFunctionsParams getShow_fns_params() {
    return this.show_fns_params;
  }

  public TCatalogOpRequest setShow_fns_params(TShowFunctionsParams show_fns_params) {
    this.show_fns_params = show_fns_params;
    return this;
  }

  public void unsetShow_fns_params() {
    this.show_fns_params = null;
  }

  /** Returns true if field show_fns_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_fns_params() {
    return this.show_fns_params != null;
  }

  public void setShow_fns_paramsIsSet(boolean value) {
    if (!value) {
      this.show_fns_params = null;
    }
  }

  public TShowDataSrcsParams getShow_data_srcs_params() {
    return this.show_data_srcs_params;
  }

  public TCatalogOpRequest setShow_data_srcs_params(TShowDataSrcsParams show_data_srcs_params) {
    this.show_data_srcs_params = show_data_srcs_params;
    return this;
  }

  public void unsetShow_data_srcs_params() {
    this.show_data_srcs_params = null;
  }

  /** Returns true if field show_data_srcs_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_data_srcs_params() {
    return this.show_data_srcs_params != null;
  }

  public void setShow_data_srcs_paramsIsSet(boolean value) {
    if (!value) {
      this.show_data_srcs_params = null;
    }
  }

  public TShowRolesParams getShow_roles_params() {
    return this.show_roles_params;
  }

  public TCatalogOpRequest setShow_roles_params(TShowRolesParams show_roles_params) {
    this.show_roles_params = show_roles_params;
    return this;
  }

  public void unsetShow_roles_params() {
    this.show_roles_params = null;
  }

  /** Returns true if field show_roles_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_roles_params() {
    return this.show_roles_params != null;
  }

  public void setShow_roles_paramsIsSet(boolean value) {
    if (!value) {
      this.show_roles_params = null;
    }
  }

  public TShowGrantPrincipalParams getShow_grant_principal_params() {
    return this.show_grant_principal_params;
  }

  public TCatalogOpRequest setShow_grant_principal_params(TShowGrantPrincipalParams show_grant_principal_params) {
    this.show_grant_principal_params = show_grant_principal_params;
    return this;
  }

  public void unsetShow_grant_principal_params() {
    this.show_grant_principal_params = null;
  }

  /** Returns true if field show_grant_principal_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_grant_principal_params() {
    return this.show_grant_principal_params != null;
  }

  public void setShow_grant_principal_paramsIsSet(boolean value) {
    if (!value) {
      this.show_grant_principal_params = null;
    }
  }

  public org.apache.impala.thrift.TDdlExecRequest getDdl_params() {
    return this.ddl_params;
  }

  public TCatalogOpRequest setDdl_params(org.apache.impala.thrift.TDdlExecRequest ddl_params) {
    this.ddl_params = ddl_params;
    return this;
  }

  public void unsetDdl_params() {
    this.ddl_params = null;
  }

  /** Returns true if field ddl_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDdl_params() {
    return this.ddl_params != null;
  }

  public void setDdl_paramsIsSet(boolean value) {
    if (!value) {
      this.ddl_params = null;
    }
  }

  public org.apache.impala.thrift.TResetMetadataRequest getReset_metadata_params() {
    return this.reset_metadata_params;
  }

  public TCatalogOpRequest setReset_metadata_params(org.apache.impala.thrift.TResetMetadataRequest reset_metadata_params) {
    this.reset_metadata_params = reset_metadata_params;
    return this;
  }

  public void unsetReset_metadata_params() {
    this.reset_metadata_params = null;
  }

  /** Returns true if field reset_metadata_params is set (has been assigned a value) and false otherwise */
  public boolean isSetReset_metadata_params() {
    return this.reset_metadata_params != null;
  }

  public void setReset_metadata_paramsIsSet(boolean value) {
    if (!value) {
      this.reset_metadata_params = null;
    }
  }

  public TShowStatsParams getShow_stats_params() {
    return this.show_stats_params;
  }

  public TCatalogOpRequest setShow_stats_params(TShowStatsParams show_stats_params) {
    this.show_stats_params = show_stats_params;
    return this;
  }

  public void unsetShow_stats_params() {
    this.show_stats_params = null;
  }

  /** Returns true if field show_stats_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_stats_params() {
    return this.show_stats_params != null;
  }

  public void setShow_stats_paramsIsSet(boolean value) {
    if (!value) {
      this.show_stats_params = null;
    }
  }

  public org.apache.impala.thrift.TTableName getShow_create_table_params() {
    return this.show_create_table_params;
  }

  public TCatalogOpRequest setShow_create_table_params(org.apache.impala.thrift.TTableName show_create_table_params) {
    this.show_create_table_params = show_create_table_params;
    return this;
  }

  public void unsetShow_create_table_params() {
    this.show_create_table_params = null;
  }

  /** Returns true if field show_create_table_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_create_table_params() {
    return this.show_create_table_params != null;
  }

  public void setShow_create_table_paramsIsSet(boolean value) {
    if (!value) {
      this.show_create_table_params = null;
    }
  }

  public TShowFilesParams getShow_files_params() {
    return this.show_files_params;
  }

  public TCatalogOpRequest setShow_files_params(TShowFilesParams show_files_params) {
    this.show_files_params = show_files_params;
    return this;
  }

  public void unsetShow_files_params() {
    this.show_files_params = null;
  }

  /** Returns true if field show_files_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_files_params() {
    return this.show_files_params != null;
  }

  public void setShow_files_paramsIsSet(boolean value) {
    if (!value) {
      this.show_files_params = null;
    }
  }

  public org.apache.impala.thrift.TLineageGraph getLineage_graph() {
    return this.lineage_graph;
  }

  public TCatalogOpRequest setLineage_graph(org.apache.impala.thrift.TLineageGraph lineage_graph) {
    this.lineage_graph = lineage_graph;
    return this;
  }

  public void unsetLineage_graph() {
    this.lineage_graph = null;
  }

  /** Returns true if field lineage_graph is set (has been assigned a value) and false otherwise */
  public boolean isSetLineage_graph() {
    return this.lineage_graph != null;
  }

  public void setLineage_graphIsSet(boolean value) {
    if (!value) {
      this.lineage_graph = null;
    }
  }

  public TGetFunctionsParams getShow_create_function_params() {
    return this.show_create_function_params;
  }

  public TCatalogOpRequest setShow_create_function_params(TGetFunctionsParams show_create_function_params) {
    this.show_create_function_params = show_create_function_params;
    return this;
  }

  public void unsetShow_create_function_params() {
    this.show_create_function_params = null;
  }

  /** Returns true if field show_create_function_params is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_create_function_params() {
    return this.show_create_function_params != null;
  }

  public void setShow_create_function_paramsIsSet(boolean value) {
    if (!value) {
      this.show_create_function_params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OP_TYPE:
      if (value == null) {
        unsetOp_type();
      } else {
        setOp_type((TCatalogOpType)value);
      }
      break;

    case SYNC_DDL:
      if (value == null) {
        unsetSync_ddl();
      } else {
        setSync_ddl((Boolean)value);
      }
      break;

    case USE_DB_PARAMS:
      if (value == null) {
        unsetUse_db_params();
      } else {
        setUse_db_params((TUseDbParams)value);
      }
      break;

    case DESCRIBE_DB_PARAMS:
      if (value == null) {
        unsetDescribe_db_params();
      } else {
        setDescribe_db_params((TDescribeDbParams)value);
      }
      break;

    case DESCRIBE_TABLE_PARAMS:
      if (value == null) {
        unsetDescribe_table_params();
      } else {
        setDescribe_table_params((TDescribeTableParams)value);
      }
      break;

    case SHOW_DBS_PARAMS:
      if (value == null) {
        unsetShow_dbs_params();
      } else {
        setShow_dbs_params((TShowDbsParams)value);
      }
      break;

    case SHOW_TABLES_PARAMS:
      if (value == null) {
        unsetShow_tables_params();
      } else {
        setShow_tables_params((TShowTablesParams)value);
      }
      break;

    case SHOW_FNS_PARAMS:
      if (value == null) {
        unsetShow_fns_params();
      } else {
        setShow_fns_params((TShowFunctionsParams)value);
      }
      break;

    case SHOW_DATA_SRCS_PARAMS:
      if (value == null) {
        unsetShow_data_srcs_params();
      } else {
        setShow_data_srcs_params((TShowDataSrcsParams)value);
      }
      break;

    case SHOW_ROLES_PARAMS:
      if (value == null) {
        unsetShow_roles_params();
      } else {
        setShow_roles_params((TShowRolesParams)value);
      }
      break;

    case SHOW_GRANT_PRINCIPAL_PARAMS:
      if (value == null) {
        unsetShow_grant_principal_params();
      } else {
        setShow_grant_principal_params((TShowGrantPrincipalParams)value);
      }
      break;

    case DDL_PARAMS:
      if (value == null) {
        unsetDdl_params();
      } else {
        setDdl_params((org.apache.impala.thrift.TDdlExecRequest)value);
      }
      break;

    case RESET_METADATA_PARAMS:
      if (value == null) {
        unsetReset_metadata_params();
      } else {
        setReset_metadata_params((org.apache.impala.thrift.TResetMetadataRequest)value);
      }
      break;

    case SHOW_STATS_PARAMS:
      if (value == null) {
        unsetShow_stats_params();
      } else {
        setShow_stats_params((TShowStatsParams)value);
      }
      break;

    case SHOW_CREATE_TABLE_PARAMS:
      if (value == null) {
        unsetShow_create_table_params();
      } else {
        setShow_create_table_params((org.apache.impala.thrift.TTableName)value);
      }
      break;

    case SHOW_FILES_PARAMS:
      if (value == null) {
        unsetShow_files_params();
      } else {
        setShow_files_params((TShowFilesParams)value);
      }
      break;

    case LINEAGE_GRAPH:
      if (value == null) {
        unsetLineage_graph();
      } else {
        setLineage_graph((org.apache.impala.thrift.TLineageGraph)value);
      }
      break;

    case SHOW_CREATE_FUNCTION_PARAMS:
      if (value == null) {
        unsetShow_create_function_params();
      } else {
        setShow_create_function_params((TGetFunctionsParams)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OP_TYPE:
      return getOp_type();

    case SYNC_DDL:
      return isSync_ddl();

    case USE_DB_PARAMS:
      return getUse_db_params();

    case DESCRIBE_DB_PARAMS:
      return getDescribe_db_params();

    case DESCRIBE_TABLE_PARAMS:
      return getDescribe_table_params();

    case SHOW_DBS_PARAMS:
      return getShow_dbs_params();

    case SHOW_TABLES_PARAMS:
      return getShow_tables_params();

    case SHOW_FNS_PARAMS:
      return getShow_fns_params();

    case SHOW_DATA_SRCS_PARAMS:
      return getShow_data_srcs_params();

    case SHOW_ROLES_PARAMS:
      return getShow_roles_params();

    case SHOW_GRANT_PRINCIPAL_PARAMS:
      return getShow_grant_principal_params();

    case DDL_PARAMS:
      return getDdl_params();

    case RESET_METADATA_PARAMS:
      return getReset_metadata_params();

    case SHOW_STATS_PARAMS:
      return getShow_stats_params();

    case SHOW_CREATE_TABLE_PARAMS:
      return getShow_create_table_params();

    case SHOW_FILES_PARAMS:
      return getShow_files_params();

    case LINEAGE_GRAPH:
      return getLineage_graph();

    case SHOW_CREATE_FUNCTION_PARAMS:
      return getShow_create_function_params();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OP_TYPE:
      return isSetOp_type();
    case SYNC_DDL:
      return isSetSync_ddl();
    case USE_DB_PARAMS:
      return isSetUse_db_params();
    case DESCRIBE_DB_PARAMS:
      return isSetDescribe_db_params();
    case DESCRIBE_TABLE_PARAMS:
      return isSetDescribe_table_params();
    case SHOW_DBS_PARAMS:
      return isSetShow_dbs_params();
    case SHOW_TABLES_PARAMS:
      return isSetShow_tables_params();
    case SHOW_FNS_PARAMS:
      return isSetShow_fns_params();
    case SHOW_DATA_SRCS_PARAMS:
      return isSetShow_data_srcs_params();
    case SHOW_ROLES_PARAMS:
      return isSetShow_roles_params();
    case SHOW_GRANT_PRINCIPAL_PARAMS:
      return isSetShow_grant_principal_params();
    case DDL_PARAMS:
      return isSetDdl_params();
    case RESET_METADATA_PARAMS:
      return isSetReset_metadata_params();
    case SHOW_STATS_PARAMS:
      return isSetShow_stats_params();
    case SHOW_CREATE_TABLE_PARAMS:
      return isSetShow_create_table_params();
    case SHOW_FILES_PARAMS:
      return isSetShow_files_params();
    case LINEAGE_GRAPH:
      return isSetLineage_graph();
    case SHOW_CREATE_FUNCTION_PARAMS:
      return isSetShow_create_function_params();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCatalogOpRequest)
      return this.equals((TCatalogOpRequest)that);
    return false;
  }

  public boolean equals(TCatalogOpRequest that) {
    if (that == null)
      return false;

    boolean this_present_op_type = true && this.isSetOp_type();
    boolean that_present_op_type = true && that.isSetOp_type();
    if (this_present_op_type || that_present_op_type) {
      if (!(this_present_op_type && that_present_op_type))
        return false;
      if (!this.op_type.equals(that.op_type))
        return false;
    }

    boolean this_present_sync_ddl = true;
    boolean that_present_sync_ddl = true;
    if (this_present_sync_ddl || that_present_sync_ddl) {
      if (!(this_present_sync_ddl && that_present_sync_ddl))
        return false;
      if (this.sync_ddl != that.sync_ddl)
        return false;
    }

    boolean this_present_use_db_params = true && this.isSetUse_db_params();
    boolean that_present_use_db_params = true && that.isSetUse_db_params();
    if (this_present_use_db_params || that_present_use_db_params) {
      if (!(this_present_use_db_params && that_present_use_db_params))
        return false;
      if (!this.use_db_params.equals(that.use_db_params))
        return false;
    }

    boolean this_present_describe_db_params = true && this.isSetDescribe_db_params();
    boolean that_present_describe_db_params = true && that.isSetDescribe_db_params();
    if (this_present_describe_db_params || that_present_describe_db_params) {
      if (!(this_present_describe_db_params && that_present_describe_db_params))
        return false;
      if (!this.describe_db_params.equals(that.describe_db_params))
        return false;
    }

    boolean this_present_describe_table_params = true && this.isSetDescribe_table_params();
    boolean that_present_describe_table_params = true && that.isSetDescribe_table_params();
    if (this_present_describe_table_params || that_present_describe_table_params) {
      if (!(this_present_describe_table_params && that_present_describe_table_params))
        return false;
      if (!this.describe_table_params.equals(that.describe_table_params))
        return false;
    }

    boolean this_present_show_dbs_params = true && this.isSetShow_dbs_params();
    boolean that_present_show_dbs_params = true && that.isSetShow_dbs_params();
    if (this_present_show_dbs_params || that_present_show_dbs_params) {
      if (!(this_present_show_dbs_params && that_present_show_dbs_params))
        return false;
      if (!this.show_dbs_params.equals(that.show_dbs_params))
        return false;
    }

    boolean this_present_show_tables_params = true && this.isSetShow_tables_params();
    boolean that_present_show_tables_params = true && that.isSetShow_tables_params();
    if (this_present_show_tables_params || that_present_show_tables_params) {
      if (!(this_present_show_tables_params && that_present_show_tables_params))
        return false;
      if (!this.show_tables_params.equals(that.show_tables_params))
        return false;
    }

    boolean this_present_show_fns_params = true && this.isSetShow_fns_params();
    boolean that_present_show_fns_params = true && that.isSetShow_fns_params();
    if (this_present_show_fns_params || that_present_show_fns_params) {
      if (!(this_present_show_fns_params && that_present_show_fns_params))
        return false;
      if (!this.show_fns_params.equals(that.show_fns_params))
        return false;
    }

    boolean this_present_show_data_srcs_params = true && this.isSetShow_data_srcs_params();
    boolean that_present_show_data_srcs_params = true && that.isSetShow_data_srcs_params();
    if (this_present_show_data_srcs_params || that_present_show_data_srcs_params) {
      if (!(this_present_show_data_srcs_params && that_present_show_data_srcs_params))
        return false;
      if (!this.show_data_srcs_params.equals(that.show_data_srcs_params))
        return false;
    }

    boolean this_present_show_roles_params = true && this.isSetShow_roles_params();
    boolean that_present_show_roles_params = true && that.isSetShow_roles_params();
    if (this_present_show_roles_params || that_present_show_roles_params) {
      if (!(this_present_show_roles_params && that_present_show_roles_params))
        return false;
      if (!this.show_roles_params.equals(that.show_roles_params))
        return false;
    }

    boolean this_present_show_grant_principal_params = true && this.isSetShow_grant_principal_params();
    boolean that_present_show_grant_principal_params = true && that.isSetShow_grant_principal_params();
    if (this_present_show_grant_principal_params || that_present_show_grant_principal_params) {
      if (!(this_present_show_grant_principal_params && that_present_show_grant_principal_params))
        return false;
      if (!this.show_grant_principal_params.equals(that.show_grant_principal_params))
        return false;
    }

    boolean this_present_ddl_params = true && this.isSetDdl_params();
    boolean that_present_ddl_params = true && that.isSetDdl_params();
    if (this_present_ddl_params || that_present_ddl_params) {
      if (!(this_present_ddl_params && that_present_ddl_params))
        return false;
      if (!this.ddl_params.equals(that.ddl_params))
        return false;
    }

    boolean this_present_reset_metadata_params = true && this.isSetReset_metadata_params();
    boolean that_present_reset_metadata_params = true && that.isSetReset_metadata_params();
    if (this_present_reset_metadata_params || that_present_reset_metadata_params) {
      if (!(this_present_reset_metadata_params && that_present_reset_metadata_params))
        return false;
      if (!this.reset_metadata_params.equals(that.reset_metadata_params))
        return false;
    }

    boolean this_present_show_stats_params = true && this.isSetShow_stats_params();
    boolean that_present_show_stats_params = true && that.isSetShow_stats_params();
    if (this_present_show_stats_params || that_present_show_stats_params) {
      if (!(this_present_show_stats_params && that_present_show_stats_params))
        return false;
      if (!this.show_stats_params.equals(that.show_stats_params))
        return false;
    }

    boolean this_present_show_create_table_params = true && this.isSetShow_create_table_params();
    boolean that_present_show_create_table_params = true && that.isSetShow_create_table_params();
    if (this_present_show_create_table_params || that_present_show_create_table_params) {
      if (!(this_present_show_create_table_params && that_present_show_create_table_params))
        return false;
      if (!this.show_create_table_params.equals(that.show_create_table_params))
        return false;
    }

    boolean this_present_show_files_params = true && this.isSetShow_files_params();
    boolean that_present_show_files_params = true && that.isSetShow_files_params();
    if (this_present_show_files_params || that_present_show_files_params) {
      if (!(this_present_show_files_params && that_present_show_files_params))
        return false;
      if (!this.show_files_params.equals(that.show_files_params))
        return false;
    }

    boolean this_present_lineage_graph = true && this.isSetLineage_graph();
    boolean that_present_lineage_graph = true && that.isSetLineage_graph();
    if (this_present_lineage_graph || that_present_lineage_graph) {
      if (!(this_present_lineage_graph && that_present_lineage_graph))
        return false;
      if (!this.lineage_graph.equals(that.lineage_graph))
        return false;
    }

    boolean this_present_show_create_function_params = true && this.isSetShow_create_function_params();
    boolean that_present_show_create_function_params = true && that.isSetShow_create_function_params();
    if (this_present_show_create_function_params || that_present_show_create_function_params) {
      if (!(this_present_show_create_function_params && that_present_show_create_function_params))
        return false;
      if (!this.show_create_function_params.equals(that.show_create_function_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_op_type = true && (isSetOp_type());
    list.add(present_op_type);
    if (present_op_type)
      list.add(op_type.getValue());

    boolean present_sync_ddl = true;
    list.add(present_sync_ddl);
    if (present_sync_ddl)
      list.add(sync_ddl);

    boolean present_use_db_params = true && (isSetUse_db_params());
    list.add(present_use_db_params);
    if (present_use_db_params)
      list.add(use_db_params);

    boolean present_describe_db_params = true && (isSetDescribe_db_params());
    list.add(present_describe_db_params);
    if (present_describe_db_params)
      list.add(describe_db_params);

    boolean present_describe_table_params = true && (isSetDescribe_table_params());
    list.add(present_describe_table_params);
    if (present_describe_table_params)
      list.add(describe_table_params);

    boolean present_show_dbs_params = true && (isSetShow_dbs_params());
    list.add(present_show_dbs_params);
    if (present_show_dbs_params)
      list.add(show_dbs_params);

    boolean present_show_tables_params = true && (isSetShow_tables_params());
    list.add(present_show_tables_params);
    if (present_show_tables_params)
      list.add(show_tables_params);

    boolean present_show_fns_params = true && (isSetShow_fns_params());
    list.add(present_show_fns_params);
    if (present_show_fns_params)
      list.add(show_fns_params);

    boolean present_show_data_srcs_params = true && (isSetShow_data_srcs_params());
    list.add(present_show_data_srcs_params);
    if (present_show_data_srcs_params)
      list.add(show_data_srcs_params);

    boolean present_show_roles_params = true && (isSetShow_roles_params());
    list.add(present_show_roles_params);
    if (present_show_roles_params)
      list.add(show_roles_params);

    boolean present_show_grant_principal_params = true && (isSetShow_grant_principal_params());
    list.add(present_show_grant_principal_params);
    if (present_show_grant_principal_params)
      list.add(show_grant_principal_params);

    boolean present_ddl_params = true && (isSetDdl_params());
    list.add(present_ddl_params);
    if (present_ddl_params)
      list.add(ddl_params);

    boolean present_reset_metadata_params = true && (isSetReset_metadata_params());
    list.add(present_reset_metadata_params);
    if (present_reset_metadata_params)
      list.add(reset_metadata_params);

    boolean present_show_stats_params = true && (isSetShow_stats_params());
    list.add(present_show_stats_params);
    if (present_show_stats_params)
      list.add(show_stats_params);

    boolean present_show_create_table_params = true && (isSetShow_create_table_params());
    list.add(present_show_create_table_params);
    if (present_show_create_table_params)
      list.add(show_create_table_params);

    boolean present_show_files_params = true && (isSetShow_files_params());
    list.add(present_show_files_params);
    if (present_show_files_params)
      list.add(show_files_params);

    boolean present_lineage_graph = true && (isSetLineage_graph());
    list.add(present_lineage_graph);
    if (present_lineage_graph)
      list.add(lineage_graph);

    boolean present_show_create_function_params = true && (isSetShow_create_function_params());
    list.add(present_show_create_function_params);
    if (present_show_create_function_params)
      list.add(show_create_function_params);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCatalogOpRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOp_type()).compareTo(other.isSetOp_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op_type, other.op_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSync_ddl()).compareTo(other.isSetSync_ddl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSync_ddl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync_ddl, other.sync_ddl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_db_params()).compareTo(other.isSetUse_db_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_db_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_db_params, other.use_db_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescribe_db_params()).compareTo(other.isSetDescribe_db_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescribe_db_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.describe_db_params, other.describe_db_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescribe_table_params()).compareTo(other.isSetDescribe_table_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescribe_table_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.describe_table_params, other.describe_table_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_dbs_params()).compareTo(other.isSetShow_dbs_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_dbs_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_dbs_params, other.show_dbs_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_tables_params()).compareTo(other.isSetShow_tables_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_tables_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_tables_params, other.show_tables_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_fns_params()).compareTo(other.isSetShow_fns_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_fns_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_fns_params, other.show_fns_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_data_srcs_params()).compareTo(other.isSetShow_data_srcs_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_data_srcs_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_data_srcs_params, other.show_data_srcs_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_roles_params()).compareTo(other.isSetShow_roles_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_roles_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_roles_params, other.show_roles_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_grant_principal_params()).compareTo(other.isSetShow_grant_principal_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_grant_principal_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_grant_principal_params, other.show_grant_principal_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDdl_params()).compareTo(other.isSetDdl_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDdl_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ddl_params, other.ddl_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReset_metadata_params()).compareTo(other.isSetReset_metadata_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReset_metadata_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reset_metadata_params, other.reset_metadata_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_stats_params()).compareTo(other.isSetShow_stats_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_stats_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_stats_params, other.show_stats_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_create_table_params()).compareTo(other.isSetShow_create_table_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_create_table_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_create_table_params, other.show_create_table_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_files_params()).compareTo(other.isSetShow_files_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_files_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_files_params, other.show_files_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineage_graph()).compareTo(other.isSetLineage_graph());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineage_graph()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineage_graph, other.lineage_graph);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShow_create_function_params()).compareTo(other.isSetShow_create_function_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_create_function_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_create_function_params, other.show_create_function_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCatalogOpRequest(");
    boolean first = true;

    sb.append("op_type:");
    if (this.op_type == null) {
      sb.append("null");
    } else {
      sb.append(this.op_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sync_ddl:");
    sb.append(this.sync_ddl);
    first = false;
    if (isSetUse_db_params()) {
      if (!first) sb.append(", ");
      sb.append("use_db_params:");
      if (this.use_db_params == null) {
        sb.append("null");
      } else {
        sb.append(this.use_db_params);
      }
      first = false;
    }
    if (isSetDescribe_db_params()) {
      if (!first) sb.append(", ");
      sb.append("describe_db_params:");
      if (this.describe_db_params == null) {
        sb.append("null");
      } else {
        sb.append(this.describe_db_params);
      }
      first = false;
    }
    if (isSetDescribe_table_params()) {
      if (!first) sb.append(", ");
      sb.append("describe_table_params:");
      if (this.describe_table_params == null) {
        sb.append("null");
      } else {
        sb.append(this.describe_table_params);
      }
      first = false;
    }
    if (isSetShow_dbs_params()) {
      if (!first) sb.append(", ");
      sb.append("show_dbs_params:");
      if (this.show_dbs_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_dbs_params);
      }
      first = false;
    }
    if (isSetShow_tables_params()) {
      if (!first) sb.append(", ");
      sb.append("show_tables_params:");
      if (this.show_tables_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_tables_params);
      }
      first = false;
    }
    if (isSetShow_fns_params()) {
      if (!first) sb.append(", ");
      sb.append("show_fns_params:");
      if (this.show_fns_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_fns_params);
      }
      first = false;
    }
    if (isSetShow_data_srcs_params()) {
      if (!first) sb.append(", ");
      sb.append("show_data_srcs_params:");
      if (this.show_data_srcs_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_data_srcs_params);
      }
      first = false;
    }
    if (isSetShow_roles_params()) {
      if (!first) sb.append(", ");
      sb.append("show_roles_params:");
      if (this.show_roles_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_roles_params);
      }
      first = false;
    }
    if (isSetShow_grant_principal_params()) {
      if (!first) sb.append(", ");
      sb.append("show_grant_principal_params:");
      if (this.show_grant_principal_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_grant_principal_params);
      }
      first = false;
    }
    if (isSetDdl_params()) {
      if (!first) sb.append(", ");
      sb.append("ddl_params:");
      if (this.ddl_params == null) {
        sb.append("null");
      } else {
        sb.append(this.ddl_params);
      }
      first = false;
    }
    if (isSetReset_metadata_params()) {
      if (!first) sb.append(", ");
      sb.append("reset_metadata_params:");
      if (this.reset_metadata_params == null) {
        sb.append("null");
      } else {
        sb.append(this.reset_metadata_params);
      }
      first = false;
    }
    if (isSetShow_stats_params()) {
      if (!first) sb.append(", ");
      sb.append("show_stats_params:");
      if (this.show_stats_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_stats_params);
      }
      first = false;
    }
    if (isSetShow_create_table_params()) {
      if (!first) sb.append(", ");
      sb.append("show_create_table_params:");
      if (this.show_create_table_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_create_table_params);
      }
      first = false;
    }
    if (isSetShow_files_params()) {
      if (!first) sb.append(", ");
      sb.append("show_files_params:");
      if (this.show_files_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_files_params);
      }
      first = false;
    }
    if (isSetLineage_graph()) {
      if (!first) sb.append(", ");
      sb.append("lineage_graph:");
      if (this.lineage_graph == null) {
        sb.append("null");
      } else {
        sb.append(this.lineage_graph);
      }
      first = false;
    }
    if (isSetShow_create_function_params()) {
      if (!first) sb.append(", ");
      sb.append("show_create_function_params:");
      if (this.show_create_function_params == null) {
        sb.append("null");
      } else {
        sb.append(this.show_create_function_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (op_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'op_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sync_ddl' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (use_db_params != null) {
      use_db_params.validate();
    }
    if (describe_db_params != null) {
      describe_db_params.validate();
    }
    if (describe_table_params != null) {
      describe_table_params.validate();
    }
    if (show_dbs_params != null) {
      show_dbs_params.validate();
    }
    if (show_tables_params != null) {
      show_tables_params.validate();
    }
    if (show_fns_params != null) {
      show_fns_params.validate();
    }
    if (show_data_srcs_params != null) {
      show_data_srcs_params.validate();
    }
    if (show_roles_params != null) {
      show_roles_params.validate();
    }
    if (show_grant_principal_params != null) {
      show_grant_principal_params.validate();
    }
    if (ddl_params != null) {
      ddl_params.validate();
    }
    if (reset_metadata_params != null) {
      reset_metadata_params.validate();
    }
    if (show_stats_params != null) {
      show_stats_params.validate();
    }
    if (show_create_table_params != null) {
      show_create_table_params.validate();
    }
    if (show_files_params != null) {
      show_files_params.validate();
    }
    if (lineage_graph != null) {
      lineage_graph.validate();
    }
    if (show_create_function_params != null) {
      show_create_function_params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCatalogOpRequestStandardSchemeFactory implements SchemeFactory {
    public TCatalogOpRequestStandardScheme getScheme() {
      return new TCatalogOpRequestStandardScheme();
    }
  }

  private static class TCatalogOpRequestStandardScheme extends StandardScheme<TCatalogOpRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCatalogOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op_type = org.apache.impala.thrift.TCatalogOpType.findByValue(iprot.readI32());
              struct.setOp_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYNC_DDL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sync_ddl = iprot.readBool();
              struct.setSync_ddlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USE_DB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.use_db_params = new TUseDbParams();
              struct.use_db_params.read(iprot);
              struct.setUse_db_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIBE_DB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.describe_db_params = new TDescribeDbParams();
              struct.describe_db_params.read(iprot);
              struct.setDescribe_db_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIBE_TABLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.describe_table_params = new TDescribeTableParams();
              struct.describe_table_params.read(iprot);
              struct.setDescribe_table_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHOW_DBS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_dbs_params = new TShowDbsParams();
              struct.show_dbs_params.read(iprot);
              struct.setShow_dbs_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOW_TABLES_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_tables_params = new TShowTablesParams();
              struct.show_tables_params.read(iprot);
              struct.setShow_tables_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SHOW_FNS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_fns_params = new TShowFunctionsParams();
              struct.show_fns_params.read(iprot);
              struct.setShow_fns_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHOW_DATA_SRCS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_data_srcs_params = new TShowDataSrcsParams();
              struct.show_data_srcs_params.read(iprot);
              struct.setShow_data_srcs_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SHOW_ROLES_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_roles_params = new TShowRolesParams();
              struct.show_roles_params.read(iprot);
              struct.setShow_roles_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SHOW_GRANT_PRINCIPAL_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_grant_principal_params = new TShowGrantPrincipalParams();
              struct.show_grant_principal_params.read(iprot);
              struct.setShow_grant_principal_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DDL_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ddl_params = new org.apache.impala.thrift.TDdlExecRequest();
              struct.ddl_params.read(iprot);
              struct.setDdl_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RESET_METADATA_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reset_metadata_params = new org.apache.impala.thrift.TResetMetadataRequest();
              struct.reset_metadata_params.read(iprot);
              struct.setReset_metadata_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHOW_STATS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_stats_params = new TShowStatsParams();
              struct.show_stats_params.read(iprot);
              struct.setShow_stats_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SHOW_CREATE_TABLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_create_table_params = new org.apache.impala.thrift.TTableName();
              struct.show_create_table_params.read(iprot);
              struct.setShow_create_table_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SHOW_FILES_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_files_params = new TShowFilesParams();
              struct.show_files_params.read(iprot);
              struct.setShow_files_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LINEAGE_GRAPH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lineage_graph = new org.apache.impala.thrift.TLineageGraph();
              struct.lineage_graph.read(iprot);
              struct.setLineage_graphIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SHOW_CREATE_FUNCTION_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.show_create_function_params = new TGetFunctionsParams();
              struct.show_create_function_params.read(iprot);
              struct.setShow_create_function_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSync_ddl()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sync_ddl' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCatalogOpRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.op_type != null) {
        oprot.writeFieldBegin(OP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.op_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SYNC_DDL_FIELD_DESC);
      oprot.writeBool(struct.sync_ddl);
      oprot.writeFieldEnd();
      if (struct.use_db_params != null) {
        if (struct.isSetUse_db_params()) {
          oprot.writeFieldBegin(USE_DB_PARAMS_FIELD_DESC);
          struct.use_db_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.describe_db_params != null) {
        if (struct.isSetDescribe_db_params()) {
          oprot.writeFieldBegin(DESCRIBE_DB_PARAMS_FIELD_DESC);
          struct.describe_db_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.describe_table_params != null) {
        if (struct.isSetDescribe_table_params()) {
          oprot.writeFieldBegin(DESCRIBE_TABLE_PARAMS_FIELD_DESC);
          struct.describe_table_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_dbs_params != null) {
        if (struct.isSetShow_dbs_params()) {
          oprot.writeFieldBegin(SHOW_DBS_PARAMS_FIELD_DESC);
          struct.show_dbs_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_tables_params != null) {
        if (struct.isSetShow_tables_params()) {
          oprot.writeFieldBegin(SHOW_TABLES_PARAMS_FIELD_DESC);
          struct.show_tables_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_fns_params != null) {
        if (struct.isSetShow_fns_params()) {
          oprot.writeFieldBegin(SHOW_FNS_PARAMS_FIELD_DESC);
          struct.show_fns_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_data_srcs_params != null) {
        if (struct.isSetShow_data_srcs_params()) {
          oprot.writeFieldBegin(SHOW_DATA_SRCS_PARAMS_FIELD_DESC);
          struct.show_data_srcs_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_roles_params != null) {
        if (struct.isSetShow_roles_params()) {
          oprot.writeFieldBegin(SHOW_ROLES_PARAMS_FIELD_DESC);
          struct.show_roles_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_grant_principal_params != null) {
        if (struct.isSetShow_grant_principal_params()) {
          oprot.writeFieldBegin(SHOW_GRANT_PRINCIPAL_PARAMS_FIELD_DESC);
          struct.show_grant_principal_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ddl_params != null) {
        if (struct.isSetDdl_params()) {
          oprot.writeFieldBegin(DDL_PARAMS_FIELD_DESC);
          struct.ddl_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reset_metadata_params != null) {
        if (struct.isSetReset_metadata_params()) {
          oprot.writeFieldBegin(RESET_METADATA_PARAMS_FIELD_DESC);
          struct.reset_metadata_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_stats_params != null) {
        if (struct.isSetShow_stats_params()) {
          oprot.writeFieldBegin(SHOW_STATS_PARAMS_FIELD_DESC);
          struct.show_stats_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_create_table_params != null) {
        if (struct.isSetShow_create_table_params()) {
          oprot.writeFieldBegin(SHOW_CREATE_TABLE_PARAMS_FIELD_DESC);
          struct.show_create_table_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_files_params != null) {
        if (struct.isSetShow_files_params()) {
          oprot.writeFieldBegin(SHOW_FILES_PARAMS_FIELD_DESC);
          struct.show_files_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lineage_graph != null) {
        if (struct.isSetLineage_graph()) {
          oprot.writeFieldBegin(LINEAGE_GRAPH_FIELD_DESC);
          struct.lineage_graph.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.show_create_function_params != null) {
        if (struct.isSetShow_create_function_params()) {
          oprot.writeFieldBegin(SHOW_CREATE_FUNCTION_PARAMS_FIELD_DESC);
          struct.show_create_function_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCatalogOpRequestTupleSchemeFactory implements SchemeFactory {
    public TCatalogOpRequestTupleScheme getScheme() {
      return new TCatalogOpRequestTupleScheme();
    }
  }

  private static class TCatalogOpRequestTupleScheme extends TupleScheme<TCatalogOpRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCatalogOpRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.op_type.getValue());
      oprot.writeBool(struct.sync_ddl);
      BitSet optionals = new BitSet();
      if (struct.isSetUse_db_params()) {
        optionals.set(0);
      }
      if (struct.isSetDescribe_db_params()) {
        optionals.set(1);
      }
      if (struct.isSetDescribe_table_params()) {
        optionals.set(2);
      }
      if (struct.isSetShow_dbs_params()) {
        optionals.set(3);
      }
      if (struct.isSetShow_tables_params()) {
        optionals.set(4);
      }
      if (struct.isSetShow_fns_params()) {
        optionals.set(5);
      }
      if (struct.isSetShow_data_srcs_params()) {
        optionals.set(6);
      }
      if (struct.isSetShow_roles_params()) {
        optionals.set(7);
      }
      if (struct.isSetShow_grant_principal_params()) {
        optionals.set(8);
      }
      if (struct.isSetDdl_params()) {
        optionals.set(9);
      }
      if (struct.isSetReset_metadata_params()) {
        optionals.set(10);
      }
      if (struct.isSetShow_stats_params()) {
        optionals.set(11);
      }
      if (struct.isSetShow_create_table_params()) {
        optionals.set(12);
      }
      if (struct.isSetShow_files_params()) {
        optionals.set(13);
      }
      if (struct.isSetLineage_graph()) {
        optionals.set(14);
      }
      if (struct.isSetShow_create_function_params()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetUse_db_params()) {
        struct.use_db_params.write(oprot);
      }
      if (struct.isSetDescribe_db_params()) {
        struct.describe_db_params.write(oprot);
      }
      if (struct.isSetDescribe_table_params()) {
        struct.describe_table_params.write(oprot);
      }
      if (struct.isSetShow_dbs_params()) {
        struct.show_dbs_params.write(oprot);
      }
      if (struct.isSetShow_tables_params()) {
        struct.show_tables_params.write(oprot);
      }
      if (struct.isSetShow_fns_params()) {
        struct.show_fns_params.write(oprot);
      }
      if (struct.isSetShow_data_srcs_params()) {
        struct.show_data_srcs_params.write(oprot);
      }
      if (struct.isSetShow_roles_params()) {
        struct.show_roles_params.write(oprot);
      }
      if (struct.isSetShow_grant_principal_params()) {
        struct.show_grant_principal_params.write(oprot);
      }
      if (struct.isSetDdl_params()) {
        struct.ddl_params.write(oprot);
      }
      if (struct.isSetReset_metadata_params()) {
        struct.reset_metadata_params.write(oprot);
      }
      if (struct.isSetShow_stats_params()) {
        struct.show_stats_params.write(oprot);
      }
      if (struct.isSetShow_create_table_params()) {
        struct.show_create_table_params.write(oprot);
      }
      if (struct.isSetShow_files_params()) {
        struct.show_files_params.write(oprot);
      }
      if (struct.isSetLineage_graph()) {
        struct.lineage_graph.write(oprot);
      }
      if (struct.isSetShow_create_function_params()) {
        struct.show_create_function_params.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCatalogOpRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.op_type = org.apache.impala.thrift.TCatalogOpType.findByValue(iprot.readI32());
      struct.setOp_typeIsSet(true);
      struct.sync_ddl = iprot.readBool();
      struct.setSync_ddlIsSet(true);
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.use_db_params = new TUseDbParams();
        struct.use_db_params.read(iprot);
        struct.setUse_db_paramsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.describe_db_params = new TDescribeDbParams();
        struct.describe_db_params.read(iprot);
        struct.setDescribe_db_paramsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.describe_table_params = new TDescribeTableParams();
        struct.describe_table_params.read(iprot);
        struct.setDescribe_table_paramsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.show_dbs_params = new TShowDbsParams();
        struct.show_dbs_params.read(iprot);
        struct.setShow_dbs_paramsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.show_tables_params = new TShowTablesParams();
        struct.show_tables_params.read(iprot);
        struct.setShow_tables_paramsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.show_fns_params = new TShowFunctionsParams();
        struct.show_fns_params.read(iprot);
        struct.setShow_fns_paramsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.show_data_srcs_params = new TShowDataSrcsParams();
        struct.show_data_srcs_params.read(iprot);
        struct.setShow_data_srcs_paramsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.show_roles_params = new TShowRolesParams();
        struct.show_roles_params.read(iprot);
        struct.setShow_roles_paramsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.show_grant_principal_params = new TShowGrantPrincipalParams();
        struct.show_grant_principal_params.read(iprot);
        struct.setShow_grant_principal_paramsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ddl_params = new org.apache.impala.thrift.TDdlExecRequest();
        struct.ddl_params.read(iprot);
        struct.setDdl_paramsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reset_metadata_params = new org.apache.impala.thrift.TResetMetadataRequest();
        struct.reset_metadata_params.read(iprot);
        struct.setReset_metadata_paramsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.show_stats_params = new TShowStatsParams();
        struct.show_stats_params.read(iprot);
        struct.setShow_stats_paramsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.show_create_table_params = new org.apache.impala.thrift.TTableName();
        struct.show_create_table_params.read(iprot);
        struct.setShow_create_table_paramsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.show_files_params = new TShowFilesParams();
        struct.show_files_params.read(iprot);
        struct.setShow_files_paramsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.lineage_graph = new org.apache.impala.thrift.TLineageGraph();
        struct.lineage_graph.read(iprot);
        struct.setLineage_graphIsSet(true);
      }
      if (incoming.get(15)) {
        struct.show_create_function_params = new TGetFunctionsParams();
        struct.show_create_function_params.read(iprot);
        struct.setShow_create_function_paramsIsSet(true);
      }
    }
  }

}

