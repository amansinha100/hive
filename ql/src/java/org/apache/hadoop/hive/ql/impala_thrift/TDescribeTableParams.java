/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TDescribeTableParams implements org.apache.thrift.TBase<TDescribeTableParams, TDescribeTableParams._Fields>, java.io.Serializable, Cloneable, Comparable<TDescribeTableParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDescribeTableParams");

  private static final org.apache.thrift.protocol.TField OUTPUT_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("output_style", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("result_struct", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDescribeTableParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDescribeTableParamsTupleSchemeFactory());
  }

  private TDescribeOutputStyle output_style; // required
  private org.apache.impala.thrift.TTableName table_name; // optional
  private org.apache.impala.thrift.TColumnType result_struct; // optional
  private org.apache.impala.thrift.TSessionState session; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TDescribeOutputStyle
     */
    OUTPUT_STYLE((short)1, "output_style"),
    TABLE_NAME((short)2, "table_name"),
    RESULT_STRUCT((short)3, "result_struct"),
    SESSION((short)4, "session");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUTPUT_STYLE
          return OUTPUT_STYLE;
        case 2: // TABLE_NAME
          return TABLE_NAME;
        case 3: // RESULT_STRUCT
          return RESULT_STRUCT;
        case 4: // SESSION
          return SESSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TABLE_NAME,_Fields.RESULT_STRUCT,_Fields.SESSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTPUT_STYLE, new org.apache.thrift.meta_data.FieldMetaData("output_style", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDescribeOutputStyle.class)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.RESULT_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("result_struct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumnType.class)));
    tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TSessionState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDescribeTableParams.class, metaDataMap);
  }

  public TDescribeTableParams() {
  }

  public TDescribeTableParams(
    TDescribeOutputStyle output_style)
  {
    this();
    this.output_style = output_style;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDescribeTableParams(TDescribeTableParams other) {
    if (other.isSetOutput_style()) {
      this.output_style = other.output_style;
    }
    if (other.isSetTable_name()) {
      this.table_name = new org.apache.impala.thrift.TTableName(other.table_name);
    }
    if (other.isSetResult_struct()) {
      this.result_struct = new org.apache.impala.thrift.TColumnType(other.result_struct);
    }
    if (other.isSetSession()) {
      this.session = new org.apache.impala.thrift.TSessionState(other.session);
    }
  }

  public TDescribeTableParams deepCopy() {
    return new TDescribeTableParams(this);
  }

  @Override
  public void clear() {
    this.output_style = null;
    this.table_name = null;
    this.result_struct = null;
    this.session = null;
  }

  /**
   * 
   * @see TDescribeOutputStyle
   */
  public TDescribeOutputStyle getOutput_style() {
    return this.output_style;
  }

  /**
   * 
   * @see TDescribeOutputStyle
   */
  public void setOutput_style(TDescribeOutputStyle output_style) {
    this.output_style = output_style;
  }

  public void unsetOutput_style() {
    this.output_style = null;
  }

  /** Returns true if field output_style is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_style() {
    return this.output_style != null;
  }

  public void setOutput_styleIsSet(boolean value) {
    if (!value) {
      this.output_style = null;
    }
  }

  public org.apache.impala.thrift.TTableName getTable_name() {
    return this.table_name;
  }

  public void setTable_name(org.apache.impala.thrift.TTableName table_name) {
    this.table_name = table_name;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public org.apache.impala.thrift.TColumnType getResult_struct() {
    return this.result_struct;
  }

  public void setResult_struct(org.apache.impala.thrift.TColumnType result_struct) {
    this.result_struct = result_struct;
  }

  public void unsetResult_struct() {
    this.result_struct = null;
  }

  /** Returns true if field result_struct is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_struct() {
    return this.result_struct != null;
  }

  public void setResult_structIsSet(boolean value) {
    if (!value) {
      this.result_struct = null;
    }
  }

  public org.apache.impala.thrift.TSessionState getSession() {
    return this.session;
  }

  public void setSession(org.apache.impala.thrift.TSessionState session) {
    this.session = session;
  }

  public void unsetSession() {
    this.session = null;
  }

  /** Returns true if field session is set (has been assigned a value) and false otherwise */
  public boolean isSetSession() {
    return this.session != null;
  }

  public void setSessionIsSet(boolean value) {
    if (!value) {
      this.session = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OUTPUT_STYLE:
      if (value == null) {
        unsetOutput_style();
      } else {
        setOutput_style((TDescribeOutputStyle)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((org.apache.impala.thrift.TTableName)value);
      }
      break;

    case RESULT_STRUCT:
      if (value == null) {
        unsetResult_struct();
      } else {
        setResult_struct((org.apache.impala.thrift.TColumnType)value);
      }
      break;

    case SESSION:
      if (value == null) {
        unsetSession();
      } else {
        setSession((org.apache.impala.thrift.TSessionState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTPUT_STYLE:
      return getOutput_style();

    case TABLE_NAME:
      return getTable_name();

    case RESULT_STRUCT:
      return getResult_struct();

    case SESSION:
      return getSession();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OUTPUT_STYLE:
      return isSetOutput_style();
    case TABLE_NAME:
      return isSetTable_name();
    case RESULT_STRUCT:
      return isSetResult_struct();
    case SESSION:
      return isSetSession();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDescribeTableParams)
      return this.equals((TDescribeTableParams)that);
    return false;
  }

  public boolean equals(TDescribeTableParams that) {
    if (that == null)
      return false;

    boolean this_present_output_style = true && this.isSetOutput_style();
    boolean that_present_output_style = true && that.isSetOutput_style();
    if (this_present_output_style || that_present_output_style) {
      if (!(this_present_output_style && that_present_output_style))
        return false;
      if (!this.output_style.equals(that.output_style))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_result_struct = true && this.isSetResult_struct();
    boolean that_present_result_struct = true && that.isSetResult_struct();
    if (this_present_result_struct || that_present_result_struct) {
      if (!(this_present_result_struct && that_present_result_struct))
        return false;
      if (!this.result_struct.equals(that.result_struct))
        return false;
    }

    boolean this_present_session = true && this.isSetSession();
    boolean that_present_session = true && that.isSetSession();
    if (this_present_session || that_present_session) {
      if (!(this_present_session && that_present_session))
        return false;
      if (!this.session.equals(that.session))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_output_style = true && (isSetOutput_style());
    list.add(present_output_style);
    if (present_output_style)
      list.add(output_style.getValue());

    boolean present_table_name = true && (isSetTable_name());
    list.add(present_table_name);
    if (present_table_name)
      list.add(table_name);

    boolean present_result_struct = true && (isSetResult_struct());
    list.add(present_result_struct);
    if (present_result_struct)
      list.add(result_struct);

    boolean present_session = true && (isSetSession());
    list.add(present_session);
    if (present_session)
      list.add(session);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDescribeTableParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOutput_style()).compareTo(other.isSetOutput_style());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_style()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_style, other.output_style);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_struct()).compareTo(other.isSetResult_struct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_struct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_struct, other.result_struct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDescribeTableParams(");
    boolean first = true;

    sb.append("output_style:");
    if (this.output_style == null) {
      sb.append("null");
    } else {
      sb.append(this.output_style);
    }
    first = false;
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetResult_struct()) {
      if (!first) sb.append(", ");
      sb.append("result_struct:");
      if (this.result_struct == null) {
        sb.append("null");
      } else {
        sb.append(this.result_struct);
      }
      first = false;
    }
    if (isSetSession()) {
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetOutput_style()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_style' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
    if (result_struct != null) {
      result_struct.validate();
    }
    if (session != null) {
      session.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDescribeTableParamsStandardSchemeFactory implements SchemeFactory {
    public TDescribeTableParamsStandardScheme getScheme() {
      return new TDescribeTableParamsStandardScheme();
    }
  }

  private static class TDescribeTableParamsStandardScheme extends StandardScheme<TDescribeTableParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDescribeTableParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUTPUT_STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_style = org.apache.impala.thrift.TDescribeOutputStyle.findByValue(iprot.readI32());
              struct.setOutput_styleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new org.apache.impala.thrift.TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_struct = new org.apache.impala.thrift.TColumnType();
              struct.result_struct.read(iprot);
              struct.setResult_structIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.session = new org.apache.impala.thrift.TSessionState();
              struct.session.read(iprot);
              struct.setSessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDescribeTableParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.output_style != null) {
        oprot.writeFieldBegin(OUTPUT_STYLE_FIELD_DESC);
        oprot.writeI32(struct.output_style.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          struct.table_name.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result_struct != null) {
        if (struct.isSetResult_struct()) {
          oprot.writeFieldBegin(RESULT_STRUCT_FIELD_DESC);
          struct.result_struct.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.session != null) {
        if (struct.isSetSession()) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDescribeTableParamsTupleSchemeFactory implements SchemeFactory {
    public TDescribeTableParamsTupleScheme getScheme() {
      return new TDescribeTableParamsTupleScheme();
    }
  }

  private static class TDescribeTableParamsTupleScheme extends TupleScheme<TDescribeTableParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDescribeTableParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.output_style.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetTable_name()) {
        optionals.set(0);
      }
      if (struct.isSetResult_struct()) {
        optionals.set(1);
      }
      if (struct.isSetSession()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTable_name()) {
        struct.table_name.write(oprot);
      }
      if (struct.isSetResult_struct()) {
        struct.result_struct.write(oprot);
      }
      if (struct.isSetSession()) {
        struct.session.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDescribeTableParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.output_style = org.apache.impala.thrift.TDescribeOutputStyle.findByValue(iprot.readI32());
      struct.setOutput_styleIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.table_name = new org.apache.impala.thrift.TTableName();
        struct.table_name.read(iprot);
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.result_struct = new org.apache.impala.thrift.TColumnType();
        struct.result_struct.read(iprot);
        struct.setResult_structIsSet(true);
      }
      if (incoming.get(2)) {
        struct.session = new org.apache.impala.thrift.TSessionState();
        struct.session.read(iprot);
        struct.setSessionIsSet(true);
      }
    }
  }

}

