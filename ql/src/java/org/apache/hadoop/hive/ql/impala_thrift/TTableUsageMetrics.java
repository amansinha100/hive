/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TTableUsageMetrics implements org.apache.thrift.TBase<TTableUsageMetrics, TTableUsageMetrics._Fields>, java.io.Serializable, Cloneable, Comparable<TTableUsageMetrics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableUsageMetrics");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField MEMORY_ESTIMATE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("memory_estimate_bytes", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_METADATA_OPERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_metadata_operations", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_files", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTableUsageMetricsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTableUsageMetricsTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TTableName table_name; // required
  private long memory_estimate_bytes; // optional
  private long num_metadata_operations; // optional
  private long num_files; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    MEMORY_ESTIMATE_BYTES((short)2, "memory_estimate_bytes"),
    NUM_METADATA_OPERATIONS((short)3, "num_metadata_operations"),
    NUM_FILES((short)4, "num_files");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // MEMORY_ESTIMATE_BYTES
          return MEMORY_ESTIMATE_BYTES;
        case 3: // NUM_METADATA_OPERATIONS
          return NUM_METADATA_OPERATIONS;
        case 4: // NUM_FILES
          return NUM_FILES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMORY_ESTIMATE_BYTES_ISSET_ID = 0;
  private static final int __NUM_METADATA_OPERATIONS_ISSET_ID = 1;
  private static final int __NUM_FILES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MEMORY_ESTIMATE_BYTES,_Fields.NUM_METADATA_OPERATIONS,_Fields.NUM_FILES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.MEMORY_ESTIMATE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("memory_estimate_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_METADATA_OPERATIONS, new org.apache.thrift.meta_data.FieldMetaData("num_metadata_operations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_FILES, new org.apache.thrift.meta_data.FieldMetaData("num_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableUsageMetrics.class, metaDataMap);
  }

  public TTableUsageMetrics() {
  }

  public TTableUsageMetrics(
    org.apache.impala.thrift.TTableName table_name)
  {
    this();
    this.table_name = table_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableUsageMetrics(TTableUsageMetrics other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_name()) {
      this.table_name = new org.apache.impala.thrift.TTableName(other.table_name);
    }
    this.memory_estimate_bytes = other.memory_estimate_bytes;
    this.num_metadata_operations = other.num_metadata_operations;
    this.num_files = other.num_files;
  }

  public TTableUsageMetrics deepCopy() {
    return new TTableUsageMetrics(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    setMemory_estimate_bytesIsSet(false);
    this.memory_estimate_bytes = 0;
    setNum_metadata_operationsIsSet(false);
    this.num_metadata_operations = 0;
    setNum_filesIsSet(false);
    this.num_files = 0;
  }

  public org.apache.impala.thrift.TTableName getTable_name() {
    return this.table_name;
  }

  public void setTable_name(org.apache.impala.thrift.TTableName table_name) {
    this.table_name = table_name;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public long getMemory_estimate_bytes() {
    return this.memory_estimate_bytes;
  }

  public void setMemory_estimate_bytes(long memory_estimate_bytes) {
    this.memory_estimate_bytes = memory_estimate_bytes;
    setMemory_estimate_bytesIsSet(true);
  }

  public void unsetMemory_estimate_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMORY_ESTIMATE_BYTES_ISSET_ID);
  }

  /** Returns true if field memory_estimate_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMemory_estimate_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMORY_ESTIMATE_BYTES_ISSET_ID);
  }

  public void setMemory_estimate_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMORY_ESTIMATE_BYTES_ISSET_ID, value);
  }

  public long getNum_metadata_operations() {
    return this.num_metadata_operations;
  }

  public void setNum_metadata_operations(long num_metadata_operations) {
    this.num_metadata_operations = num_metadata_operations;
    setNum_metadata_operationsIsSet(true);
  }

  public void unsetNum_metadata_operations() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_METADATA_OPERATIONS_ISSET_ID);
  }

  /** Returns true if field num_metadata_operations is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_metadata_operations() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_METADATA_OPERATIONS_ISSET_ID);
  }

  public void setNum_metadata_operationsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_METADATA_OPERATIONS_ISSET_ID, value);
  }

  public long getNum_files() {
    return this.num_files;
  }

  public void setNum_files(long num_files) {
    this.num_files = num_files;
    setNum_filesIsSet(true);
  }

  public void unsetNum_files() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_FILES_ISSET_ID);
  }

  /** Returns true if field num_files is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_files() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_FILES_ISSET_ID);
  }

  public void setNum_filesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_FILES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((org.apache.impala.thrift.TTableName)value);
      }
      break;

    case MEMORY_ESTIMATE_BYTES:
      if (value == null) {
        unsetMemory_estimate_bytes();
      } else {
        setMemory_estimate_bytes((Long)value);
      }
      break;

    case NUM_METADATA_OPERATIONS:
      if (value == null) {
        unsetNum_metadata_operations();
      } else {
        setNum_metadata_operations((Long)value);
      }
      break;

    case NUM_FILES:
      if (value == null) {
        unsetNum_files();
      } else {
        setNum_files((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTable_name();

    case MEMORY_ESTIMATE_BYTES:
      return getMemory_estimate_bytes();

    case NUM_METADATA_OPERATIONS:
      return getNum_metadata_operations();

    case NUM_FILES:
      return getNum_files();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTable_name();
    case MEMORY_ESTIMATE_BYTES:
      return isSetMemory_estimate_bytes();
    case NUM_METADATA_OPERATIONS:
      return isSetNum_metadata_operations();
    case NUM_FILES:
      return isSetNum_files();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTableUsageMetrics)
      return this.equals((TTableUsageMetrics)that);
    return false;
  }

  public boolean equals(TTableUsageMetrics that) {
    if (that == null)
      return false;

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_memory_estimate_bytes = true && this.isSetMemory_estimate_bytes();
    boolean that_present_memory_estimate_bytes = true && that.isSetMemory_estimate_bytes();
    if (this_present_memory_estimate_bytes || that_present_memory_estimate_bytes) {
      if (!(this_present_memory_estimate_bytes && that_present_memory_estimate_bytes))
        return false;
      if (this.memory_estimate_bytes != that.memory_estimate_bytes)
        return false;
    }

    boolean this_present_num_metadata_operations = true && this.isSetNum_metadata_operations();
    boolean that_present_num_metadata_operations = true && that.isSetNum_metadata_operations();
    if (this_present_num_metadata_operations || that_present_num_metadata_operations) {
      if (!(this_present_num_metadata_operations && that_present_num_metadata_operations))
        return false;
      if (this.num_metadata_operations != that.num_metadata_operations)
        return false;
    }

    boolean this_present_num_files = true && this.isSetNum_files();
    boolean that_present_num_files = true && that.isSetNum_files();
    if (this_present_num_files || that_present_num_files) {
      if (!(this_present_num_files && that_present_num_files))
        return false;
      if (this.num_files != that.num_files)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_table_name = true && (isSetTable_name());
    list.add(present_table_name);
    if (present_table_name)
      list.add(table_name);

    boolean present_memory_estimate_bytes = true && (isSetMemory_estimate_bytes());
    list.add(present_memory_estimate_bytes);
    if (present_memory_estimate_bytes)
      list.add(memory_estimate_bytes);

    boolean present_num_metadata_operations = true && (isSetNum_metadata_operations());
    list.add(present_num_metadata_operations);
    if (present_num_metadata_operations)
      list.add(num_metadata_operations);

    boolean present_num_files = true && (isSetNum_files());
    list.add(present_num_files);
    if (present_num_files)
      list.add(num_files);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTableUsageMetrics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemory_estimate_bytes()).compareTo(other.isSetMemory_estimate_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemory_estimate_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory_estimate_bytes, other.memory_estimate_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_metadata_operations()).compareTo(other.isSetNum_metadata_operations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_metadata_operations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_metadata_operations, other.num_metadata_operations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_files()).compareTo(other.isSetNum_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_files, other.num_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTableUsageMetrics(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (isSetMemory_estimate_bytes()) {
      if (!first) sb.append(", ");
      sb.append("memory_estimate_bytes:");
      sb.append(this.memory_estimate_bytes);
      first = false;
    }
    if (isSetNum_metadata_operations()) {
      if (!first) sb.append(", ");
      sb.append("num_metadata_operations:");
      sb.append(this.num_metadata_operations);
      first = false;
    }
    if (isSetNum_files()) {
      if (!first) sb.append(", ");
      sb.append("num_files:");
      sb.append(this.num_files);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTable_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableUsageMetricsStandardSchemeFactory implements SchemeFactory {
    public TTableUsageMetricsStandardScheme getScheme() {
      return new TTableUsageMetricsStandardScheme();
    }
  }

  private static class TTableUsageMetricsStandardScheme extends StandardScheme<TTableUsageMetrics> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableUsageMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new org.apache.impala.thrift.TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMORY_ESTIMATE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memory_estimate_bytes = iprot.readI64();
              struct.setMemory_estimate_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_METADATA_OPERATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_metadata_operations = iprot.readI64();
              struct.setNum_metadata_operationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_files = iprot.readI64();
              struct.setNum_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableUsageMetrics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemory_estimate_bytes()) {
        oprot.writeFieldBegin(MEMORY_ESTIMATE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.memory_estimate_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_metadata_operations()) {
        oprot.writeFieldBegin(NUM_METADATA_OPERATIONS_FIELD_DESC);
        oprot.writeI64(struct.num_metadata_operations);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_files()) {
        oprot.writeFieldBegin(NUM_FILES_FIELD_DESC);
        oprot.writeI64(struct.num_files);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableUsageMetricsTupleSchemeFactory implements SchemeFactory {
    public TTableUsageMetricsTupleScheme getScheme() {
      return new TTableUsageMetricsTupleScheme();
    }
  }

  private static class TTableUsageMetricsTupleScheme extends TupleScheme<TTableUsageMetrics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableUsageMetrics struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.table_name.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetMemory_estimate_bytes()) {
        optionals.set(0);
      }
      if (struct.isSetNum_metadata_operations()) {
        optionals.set(1);
      }
      if (struct.isSetNum_files()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMemory_estimate_bytes()) {
        oprot.writeI64(struct.memory_estimate_bytes);
      }
      if (struct.isSetNum_metadata_operations()) {
        oprot.writeI64(struct.num_metadata_operations);
      }
      if (struct.isSetNum_files()) {
        oprot.writeI64(struct.num_files);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableUsageMetrics struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table_name = new org.apache.impala.thrift.TTableName();
      struct.table_name.read(iprot);
      struct.setTable_nameIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.memory_estimate_bytes = iprot.readI64();
        struct.setMemory_estimate_bytesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.num_metadata_operations = iprot.readI64();
        struct.setNum_metadata_operationsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num_files = iprot.readI64();
        struct.setNum_filesIsSet(true);
      }
    }
  }

}

