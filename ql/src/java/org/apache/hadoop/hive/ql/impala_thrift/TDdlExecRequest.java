/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TDdlExecRequest implements org.apache.thrift.TBase<TDdlExecRequest, TDdlExecRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TDdlExecRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDdlExecRequest");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DDL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ddl_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ALTER_TABLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_table_params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ALTER_VIEW_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_view_params", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_DB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_db_params", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TABLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_table_params", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TABLE_LIKE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_table_like_params", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_VIEW_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_view_params", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_FN_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_fn_params", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField DROP_DB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_db_params", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField DROP_TABLE_OR_VIEW_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_table_or_view_params", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField TRUNCATE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("truncate_params", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField DROP_FN_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_fn_params", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField COMPUTE_STATS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("compute_stats_params", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField CREATE_DATA_SOURCE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_data_source_params", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField DROP_DATA_SOURCE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_data_source_params", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField DROP_STATS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_stats_params", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_DROP_ROLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("create_drop_role_params", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField GRANT_REVOKE_ROLE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("grant_revoke_role_params", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField GRANT_REVOKE_PRIV_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("grant_revoke_priv_params", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField SYNC_DDL_FIELD_DESC = new org.apache.thrift.protocol.TField("sync_ddl", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField COMMENT_ON_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("comment_on_params", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField ALTER_DB_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_db_params", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField COPY_TEST_CASE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("copy_test_case_params", org.apache.thrift.protocol.TType.STRUCT, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDdlExecRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDdlExecRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public CatalogServiceVersion protocol_version; // required
  public TCatalogServiceRequestHeader header; // optional
  /**
   * 
   * @see org.apache.impala.thrift.TDdlType
   */
  public org.apache.impala.thrift.TDdlType ddl_type; // required
  public org.apache.impala.thrift.TAlterTableParams alter_table_params; // optional
  public org.apache.impala.thrift.TCreateOrAlterViewParams alter_view_params; // optional
  public org.apache.impala.thrift.TCreateDbParams create_db_params; // optional
  public org.apache.impala.thrift.TCreateTableParams create_table_params; // optional
  public org.apache.impala.thrift.TCreateTableLikeParams create_table_like_params; // optional
  public org.apache.impala.thrift.TCreateOrAlterViewParams create_view_params; // optional
  public org.apache.impala.thrift.TCreateFunctionParams create_fn_params; // optional
  public org.apache.impala.thrift.TDropDbParams drop_db_params; // optional
  public org.apache.impala.thrift.TDropTableOrViewParams drop_table_or_view_params; // optional
  public org.apache.impala.thrift.TTruncateParams truncate_params; // optional
  public org.apache.impala.thrift.TDropFunctionParams drop_fn_params; // optional
  public org.apache.impala.thrift.TComputeStatsParams compute_stats_params; // optional
  public org.apache.impala.thrift.TCreateDataSourceParams create_data_source_params; // optional
  public org.apache.impala.thrift.TDropDataSourceParams drop_data_source_params; // optional
  public org.apache.impala.thrift.TDropStatsParams drop_stats_params; // optional
  public org.apache.impala.thrift.TCreateDropRoleParams create_drop_role_params; // optional
  public org.apache.impala.thrift.TGrantRevokeRoleParams grant_revoke_role_params; // optional
  public org.apache.impala.thrift.TGrantRevokePrivParams grant_revoke_priv_params; // optional
  public boolean sync_ddl; // required
  public org.apache.impala.thrift.TCommentOnParams comment_on_params; // optional
  public org.apache.impala.thrift.TAlterDbParams alter_db_params; // optional
  public org.apache.impala.thrift.TCopyTestCaseReq copy_test_case_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see CatalogServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    HEADER((short)2, "header"),
    /**
     * 
     * @see org.apache.impala.thrift.TDdlType
     */
    DDL_TYPE((short)3, "ddl_type"),
    ALTER_TABLE_PARAMS((short)4, "alter_table_params"),
    ALTER_VIEW_PARAMS((short)5, "alter_view_params"),
    CREATE_DB_PARAMS((short)6, "create_db_params"),
    CREATE_TABLE_PARAMS((short)7, "create_table_params"),
    CREATE_TABLE_LIKE_PARAMS((short)8, "create_table_like_params"),
    CREATE_VIEW_PARAMS((short)9, "create_view_params"),
    CREATE_FN_PARAMS((short)10, "create_fn_params"),
    DROP_DB_PARAMS((short)11, "drop_db_params"),
    DROP_TABLE_OR_VIEW_PARAMS((short)12, "drop_table_or_view_params"),
    TRUNCATE_PARAMS((short)13, "truncate_params"),
    DROP_FN_PARAMS((short)14, "drop_fn_params"),
    COMPUTE_STATS_PARAMS((short)15, "compute_stats_params"),
    CREATE_DATA_SOURCE_PARAMS((short)16, "create_data_source_params"),
    DROP_DATA_SOURCE_PARAMS((short)17, "drop_data_source_params"),
    DROP_STATS_PARAMS((short)18, "drop_stats_params"),
    CREATE_DROP_ROLE_PARAMS((short)19, "create_drop_role_params"),
    GRANT_REVOKE_ROLE_PARAMS((short)20, "grant_revoke_role_params"),
    GRANT_REVOKE_PRIV_PARAMS((short)21, "grant_revoke_priv_params"),
    SYNC_DDL((short)22, "sync_ddl"),
    COMMENT_ON_PARAMS((short)23, "comment_on_params"),
    ALTER_DB_PARAMS((short)24, "alter_db_params"),
    COPY_TEST_CASE_PARAMS((short)25, "copy_test_case_params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // HEADER
          return HEADER;
        case 3: // DDL_TYPE
          return DDL_TYPE;
        case 4: // ALTER_TABLE_PARAMS
          return ALTER_TABLE_PARAMS;
        case 5: // ALTER_VIEW_PARAMS
          return ALTER_VIEW_PARAMS;
        case 6: // CREATE_DB_PARAMS
          return CREATE_DB_PARAMS;
        case 7: // CREATE_TABLE_PARAMS
          return CREATE_TABLE_PARAMS;
        case 8: // CREATE_TABLE_LIKE_PARAMS
          return CREATE_TABLE_LIKE_PARAMS;
        case 9: // CREATE_VIEW_PARAMS
          return CREATE_VIEW_PARAMS;
        case 10: // CREATE_FN_PARAMS
          return CREATE_FN_PARAMS;
        case 11: // DROP_DB_PARAMS
          return DROP_DB_PARAMS;
        case 12: // DROP_TABLE_OR_VIEW_PARAMS
          return DROP_TABLE_OR_VIEW_PARAMS;
        case 13: // TRUNCATE_PARAMS
          return TRUNCATE_PARAMS;
        case 14: // DROP_FN_PARAMS
          return DROP_FN_PARAMS;
        case 15: // COMPUTE_STATS_PARAMS
          return COMPUTE_STATS_PARAMS;
        case 16: // CREATE_DATA_SOURCE_PARAMS
          return CREATE_DATA_SOURCE_PARAMS;
        case 17: // DROP_DATA_SOURCE_PARAMS
          return DROP_DATA_SOURCE_PARAMS;
        case 18: // DROP_STATS_PARAMS
          return DROP_STATS_PARAMS;
        case 19: // CREATE_DROP_ROLE_PARAMS
          return CREATE_DROP_ROLE_PARAMS;
        case 20: // GRANT_REVOKE_ROLE_PARAMS
          return GRANT_REVOKE_ROLE_PARAMS;
        case 21: // GRANT_REVOKE_PRIV_PARAMS
          return GRANT_REVOKE_PRIV_PARAMS;
        case 22: // SYNC_DDL
          return SYNC_DDL;
        case 23: // COMMENT_ON_PARAMS
          return COMMENT_ON_PARAMS;
        case 24: // ALTER_DB_PARAMS
          return ALTER_DB_PARAMS;
        case 25: // COPY_TEST_CASE_PARAMS
          return COPY_TEST_CASE_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SYNC_DDL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HEADER,_Fields.ALTER_TABLE_PARAMS,_Fields.ALTER_VIEW_PARAMS,_Fields.CREATE_DB_PARAMS,_Fields.CREATE_TABLE_PARAMS,_Fields.CREATE_TABLE_LIKE_PARAMS,_Fields.CREATE_VIEW_PARAMS,_Fields.CREATE_FN_PARAMS,_Fields.DROP_DB_PARAMS,_Fields.DROP_TABLE_OR_VIEW_PARAMS,_Fields.TRUNCATE_PARAMS,_Fields.DROP_FN_PARAMS,_Fields.COMPUTE_STATS_PARAMS,_Fields.CREATE_DATA_SOURCE_PARAMS,_Fields.DROP_DATA_SOURCE_PARAMS,_Fields.DROP_STATS_PARAMS,_Fields.CREATE_DROP_ROLE_PARAMS,_Fields.GRANT_REVOKE_ROLE_PARAMS,_Fields.GRANT_REVOKE_PRIV_PARAMS,_Fields.COMMENT_ON_PARAMS,_Fields.ALTER_DB_PARAMS,_Fields.COPY_TEST_CASE_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CatalogServiceVersion.class)));
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCatalogServiceRequestHeader.class)));
    tmpMap.put(_Fields.DDL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ddl_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TDdlType.class)));
    tmpMap.put(_Fields.ALTER_TABLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("alter_table_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TAlterTableParams.class)));
    tmpMap.put(_Fields.ALTER_VIEW_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("alter_view_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCreateOrAlterViewParams.class)));
    tmpMap.put(_Fields.CREATE_DB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_db_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCreateDbParams.class)));
    tmpMap.put(_Fields.CREATE_TABLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_table_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCreateTableParams.class)));
    tmpMap.put(_Fields.CREATE_TABLE_LIKE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_table_like_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCreateTableLikeParams.class)));
    tmpMap.put(_Fields.CREATE_VIEW_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_view_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCreateOrAlterViewParams.class)));
    tmpMap.put(_Fields.CREATE_FN_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_fn_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCreateFunctionParams.class)));
    tmpMap.put(_Fields.DROP_DB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("drop_db_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDropDbParams.class)));
    tmpMap.put(_Fields.DROP_TABLE_OR_VIEW_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("drop_table_or_view_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDropTableOrViewParams.class)));
    tmpMap.put(_Fields.TRUNCATE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("truncate_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTruncateParams.class)));
    tmpMap.put(_Fields.DROP_FN_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("drop_fn_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDropFunctionParams.class)));
    tmpMap.put(_Fields.COMPUTE_STATS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("compute_stats_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TComputeStatsParams.class)));
    tmpMap.put(_Fields.CREATE_DATA_SOURCE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_data_source_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCreateDataSourceParams.class)));
    tmpMap.put(_Fields.DROP_DATA_SOURCE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("drop_data_source_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDropDataSourceParams.class)));
    tmpMap.put(_Fields.DROP_STATS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("drop_stats_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDropStatsParams.class)));
    tmpMap.put(_Fields.CREATE_DROP_ROLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("create_drop_role_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCreateDropRoleParams.class)));
    tmpMap.put(_Fields.GRANT_REVOKE_ROLE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("grant_revoke_role_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TGrantRevokeRoleParams.class)));
    tmpMap.put(_Fields.GRANT_REVOKE_PRIV_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("grant_revoke_priv_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TGrantRevokePrivParams.class)));
    tmpMap.put(_Fields.SYNC_DDL, new org.apache.thrift.meta_data.FieldMetaData("sync_ddl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMMENT_ON_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("comment_on_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCommentOnParams.class)));
    tmpMap.put(_Fields.ALTER_DB_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("alter_db_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TAlterDbParams.class)));
    tmpMap.put(_Fields.COPY_TEST_CASE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("copy_test_case_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TCopyTestCaseReq.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDdlExecRequest.class, metaDataMap);
  }

  public TDdlExecRequest() {
    this.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.V1;

  }

  public TDdlExecRequest(
    CatalogServiceVersion protocol_version,
    org.apache.impala.thrift.TDdlType ddl_type,
    boolean sync_ddl)
  {
    this();
    this.protocol_version = protocol_version;
    this.ddl_type = ddl_type;
    this.sync_ddl = sync_ddl;
    setSync_ddlIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDdlExecRequest(TDdlExecRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol_version()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetHeader()) {
      this.header = new TCatalogServiceRequestHeader(other.header);
    }
    if (other.isSetDdl_type()) {
      this.ddl_type = other.ddl_type;
    }
    if (other.isSetAlter_table_params()) {
      this.alter_table_params = new org.apache.impala.thrift.TAlterTableParams(other.alter_table_params);
    }
    if (other.isSetAlter_view_params()) {
      this.alter_view_params = new org.apache.impala.thrift.TCreateOrAlterViewParams(other.alter_view_params);
    }
    if (other.isSetCreate_db_params()) {
      this.create_db_params = new org.apache.impala.thrift.TCreateDbParams(other.create_db_params);
    }
    if (other.isSetCreate_table_params()) {
      this.create_table_params = new org.apache.impala.thrift.TCreateTableParams(other.create_table_params);
    }
    if (other.isSetCreate_table_like_params()) {
      this.create_table_like_params = new org.apache.impala.thrift.TCreateTableLikeParams(other.create_table_like_params);
    }
    if (other.isSetCreate_view_params()) {
      this.create_view_params = new org.apache.impala.thrift.TCreateOrAlterViewParams(other.create_view_params);
    }
    if (other.isSetCreate_fn_params()) {
      this.create_fn_params = new org.apache.impala.thrift.TCreateFunctionParams(other.create_fn_params);
    }
    if (other.isSetDrop_db_params()) {
      this.drop_db_params = new org.apache.impala.thrift.TDropDbParams(other.drop_db_params);
    }
    if (other.isSetDrop_table_or_view_params()) {
      this.drop_table_or_view_params = new org.apache.impala.thrift.TDropTableOrViewParams(other.drop_table_or_view_params);
    }
    if (other.isSetTruncate_params()) {
      this.truncate_params = new org.apache.impala.thrift.TTruncateParams(other.truncate_params);
    }
    if (other.isSetDrop_fn_params()) {
      this.drop_fn_params = new org.apache.impala.thrift.TDropFunctionParams(other.drop_fn_params);
    }
    if (other.isSetCompute_stats_params()) {
      this.compute_stats_params = new org.apache.impala.thrift.TComputeStatsParams(other.compute_stats_params);
    }
    if (other.isSetCreate_data_source_params()) {
      this.create_data_source_params = new org.apache.impala.thrift.TCreateDataSourceParams(other.create_data_source_params);
    }
    if (other.isSetDrop_data_source_params()) {
      this.drop_data_source_params = new org.apache.impala.thrift.TDropDataSourceParams(other.drop_data_source_params);
    }
    if (other.isSetDrop_stats_params()) {
      this.drop_stats_params = new org.apache.impala.thrift.TDropStatsParams(other.drop_stats_params);
    }
    if (other.isSetCreate_drop_role_params()) {
      this.create_drop_role_params = new org.apache.impala.thrift.TCreateDropRoleParams(other.create_drop_role_params);
    }
    if (other.isSetGrant_revoke_role_params()) {
      this.grant_revoke_role_params = new org.apache.impala.thrift.TGrantRevokeRoleParams(other.grant_revoke_role_params);
    }
    if (other.isSetGrant_revoke_priv_params()) {
      this.grant_revoke_priv_params = new org.apache.impala.thrift.TGrantRevokePrivParams(other.grant_revoke_priv_params);
    }
    this.sync_ddl = other.sync_ddl;
    if (other.isSetComment_on_params()) {
      this.comment_on_params = new org.apache.impala.thrift.TCommentOnParams(other.comment_on_params);
    }
    if (other.isSetAlter_db_params()) {
      this.alter_db_params = new org.apache.impala.thrift.TAlterDbParams(other.alter_db_params);
    }
    if (other.isSetCopy_test_case_params()) {
      this.copy_test_case_params = new org.apache.impala.thrift.TCopyTestCaseReq(other.copy_test_case_params);
    }
  }

  public TDdlExecRequest deepCopy() {
    return new TDdlExecRequest(this);
  }

  @Override
  public void clear() {
    this.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.V1;

    this.header = null;
    this.ddl_type = null;
    this.alter_table_params = null;
    this.alter_view_params = null;
    this.create_db_params = null;
    this.create_table_params = null;
    this.create_table_like_params = null;
    this.create_view_params = null;
    this.create_fn_params = null;
    this.drop_db_params = null;
    this.drop_table_or_view_params = null;
    this.truncate_params = null;
    this.drop_fn_params = null;
    this.compute_stats_params = null;
    this.create_data_source_params = null;
    this.drop_data_source_params = null;
    this.drop_stats_params = null;
    this.create_drop_role_params = null;
    this.grant_revoke_role_params = null;
    this.grant_revoke_priv_params = null;
    setSync_ddlIsSet(false);
    this.sync_ddl = false;
    this.comment_on_params = null;
    this.alter_db_params = null;
    this.copy_test_case_params = null;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public CatalogServiceVersion getProtocol_version() {
    return this.protocol_version;
  }

  /**
   * 
   * @see CatalogServiceVersion
   */
  public TDdlExecRequest setProtocol_version(CatalogServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocol_version() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol_version() {
    return this.protocol_version != null;
  }

  public void setProtocol_versionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  public TCatalogServiceRequestHeader getHeader() {
    return this.header;
  }

  public TDdlExecRequest setHeader(TCatalogServiceRequestHeader header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  /**
   * 
   * @see org.apache.impala.thrift.TDdlType
   */
  public org.apache.impala.thrift.TDdlType getDdl_type() {
    return this.ddl_type;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TDdlType
   */
  public TDdlExecRequest setDdl_type(org.apache.impala.thrift.TDdlType ddl_type) {
    this.ddl_type = ddl_type;
    return this;
  }

  public void unsetDdl_type() {
    this.ddl_type = null;
  }

  /** Returns true if field ddl_type is set (has been assigned a value) and false otherwise */
  public boolean isSetDdl_type() {
    return this.ddl_type != null;
  }

  public void setDdl_typeIsSet(boolean value) {
    if (!value) {
      this.ddl_type = null;
    }
  }

  public org.apache.impala.thrift.TAlterTableParams getAlter_table_params() {
    return this.alter_table_params;
  }

  public TDdlExecRequest setAlter_table_params(org.apache.impala.thrift.TAlterTableParams alter_table_params) {
    this.alter_table_params = alter_table_params;
    return this;
  }

  public void unsetAlter_table_params() {
    this.alter_table_params = null;
  }

  /** Returns true if field alter_table_params is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_table_params() {
    return this.alter_table_params != null;
  }

  public void setAlter_table_paramsIsSet(boolean value) {
    if (!value) {
      this.alter_table_params = null;
    }
  }

  public org.apache.impala.thrift.TCreateOrAlterViewParams getAlter_view_params() {
    return this.alter_view_params;
  }

  public TDdlExecRequest setAlter_view_params(org.apache.impala.thrift.TCreateOrAlterViewParams alter_view_params) {
    this.alter_view_params = alter_view_params;
    return this;
  }

  public void unsetAlter_view_params() {
    this.alter_view_params = null;
  }

  /** Returns true if field alter_view_params is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_view_params() {
    return this.alter_view_params != null;
  }

  public void setAlter_view_paramsIsSet(boolean value) {
    if (!value) {
      this.alter_view_params = null;
    }
  }

  public org.apache.impala.thrift.TCreateDbParams getCreate_db_params() {
    return this.create_db_params;
  }

  public TDdlExecRequest setCreate_db_params(org.apache.impala.thrift.TCreateDbParams create_db_params) {
    this.create_db_params = create_db_params;
    return this;
  }

  public void unsetCreate_db_params() {
    this.create_db_params = null;
  }

  /** Returns true if field create_db_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_db_params() {
    return this.create_db_params != null;
  }

  public void setCreate_db_paramsIsSet(boolean value) {
    if (!value) {
      this.create_db_params = null;
    }
  }

  public org.apache.impala.thrift.TCreateTableParams getCreate_table_params() {
    return this.create_table_params;
  }

  public TDdlExecRequest setCreate_table_params(org.apache.impala.thrift.TCreateTableParams create_table_params) {
    this.create_table_params = create_table_params;
    return this;
  }

  public void unsetCreate_table_params() {
    this.create_table_params = null;
  }

  /** Returns true if field create_table_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_table_params() {
    return this.create_table_params != null;
  }

  public void setCreate_table_paramsIsSet(boolean value) {
    if (!value) {
      this.create_table_params = null;
    }
  }

  public org.apache.impala.thrift.TCreateTableLikeParams getCreate_table_like_params() {
    return this.create_table_like_params;
  }

  public TDdlExecRequest setCreate_table_like_params(org.apache.impala.thrift.TCreateTableLikeParams create_table_like_params) {
    this.create_table_like_params = create_table_like_params;
    return this;
  }

  public void unsetCreate_table_like_params() {
    this.create_table_like_params = null;
  }

  /** Returns true if field create_table_like_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_table_like_params() {
    return this.create_table_like_params != null;
  }

  public void setCreate_table_like_paramsIsSet(boolean value) {
    if (!value) {
      this.create_table_like_params = null;
    }
  }

  public org.apache.impala.thrift.TCreateOrAlterViewParams getCreate_view_params() {
    return this.create_view_params;
  }

  public TDdlExecRequest setCreate_view_params(org.apache.impala.thrift.TCreateOrAlterViewParams create_view_params) {
    this.create_view_params = create_view_params;
    return this;
  }

  public void unsetCreate_view_params() {
    this.create_view_params = null;
  }

  /** Returns true if field create_view_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_view_params() {
    return this.create_view_params != null;
  }

  public void setCreate_view_paramsIsSet(boolean value) {
    if (!value) {
      this.create_view_params = null;
    }
  }

  public org.apache.impala.thrift.TCreateFunctionParams getCreate_fn_params() {
    return this.create_fn_params;
  }

  public TDdlExecRequest setCreate_fn_params(org.apache.impala.thrift.TCreateFunctionParams create_fn_params) {
    this.create_fn_params = create_fn_params;
    return this;
  }

  public void unsetCreate_fn_params() {
    this.create_fn_params = null;
  }

  /** Returns true if field create_fn_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_fn_params() {
    return this.create_fn_params != null;
  }

  public void setCreate_fn_paramsIsSet(boolean value) {
    if (!value) {
      this.create_fn_params = null;
    }
  }

  public org.apache.impala.thrift.TDropDbParams getDrop_db_params() {
    return this.drop_db_params;
  }

  public TDdlExecRequest setDrop_db_params(org.apache.impala.thrift.TDropDbParams drop_db_params) {
    this.drop_db_params = drop_db_params;
    return this;
  }

  public void unsetDrop_db_params() {
    this.drop_db_params = null;
  }

  /** Returns true if field drop_db_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_db_params() {
    return this.drop_db_params != null;
  }

  public void setDrop_db_paramsIsSet(boolean value) {
    if (!value) {
      this.drop_db_params = null;
    }
  }

  public org.apache.impala.thrift.TDropTableOrViewParams getDrop_table_or_view_params() {
    return this.drop_table_or_view_params;
  }

  public TDdlExecRequest setDrop_table_or_view_params(org.apache.impala.thrift.TDropTableOrViewParams drop_table_or_view_params) {
    this.drop_table_or_view_params = drop_table_or_view_params;
    return this;
  }

  public void unsetDrop_table_or_view_params() {
    this.drop_table_or_view_params = null;
  }

  /** Returns true if field drop_table_or_view_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_table_or_view_params() {
    return this.drop_table_or_view_params != null;
  }

  public void setDrop_table_or_view_paramsIsSet(boolean value) {
    if (!value) {
      this.drop_table_or_view_params = null;
    }
  }

  public org.apache.impala.thrift.TTruncateParams getTruncate_params() {
    return this.truncate_params;
  }

  public TDdlExecRequest setTruncate_params(org.apache.impala.thrift.TTruncateParams truncate_params) {
    this.truncate_params = truncate_params;
    return this;
  }

  public void unsetTruncate_params() {
    this.truncate_params = null;
  }

  /** Returns true if field truncate_params is set (has been assigned a value) and false otherwise */
  public boolean isSetTruncate_params() {
    return this.truncate_params != null;
  }

  public void setTruncate_paramsIsSet(boolean value) {
    if (!value) {
      this.truncate_params = null;
    }
  }

  public org.apache.impala.thrift.TDropFunctionParams getDrop_fn_params() {
    return this.drop_fn_params;
  }

  public TDdlExecRequest setDrop_fn_params(org.apache.impala.thrift.TDropFunctionParams drop_fn_params) {
    this.drop_fn_params = drop_fn_params;
    return this;
  }

  public void unsetDrop_fn_params() {
    this.drop_fn_params = null;
  }

  /** Returns true if field drop_fn_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_fn_params() {
    return this.drop_fn_params != null;
  }

  public void setDrop_fn_paramsIsSet(boolean value) {
    if (!value) {
      this.drop_fn_params = null;
    }
  }

  public org.apache.impala.thrift.TComputeStatsParams getCompute_stats_params() {
    return this.compute_stats_params;
  }

  public TDdlExecRequest setCompute_stats_params(org.apache.impala.thrift.TComputeStatsParams compute_stats_params) {
    this.compute_stats_params = compute_stats_params;
    return this;
  }

  public void unsetCompute_stats_params() {
    this.compute_stats_params = null;
  }

  /** Returns true if field compute_stats_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCompute_stats_params() {
    return this.compute_stats_params != null;
  }

  public void setCompute_stats_paramsIsSet(boolean value) {
    if (!value) {
      this.compute_stats_params = null;
    }
  }

  public org.apache.impala.thrift.TCreateDataSourceParams getCreate_data_source_params() {
    return this.create_data_source_params;
  }

  public TDdlExecRequest setCreate_data_source_params(org.apache.impala.thrift.TCreateDataSourceParams create_data_source_params) {
    this.create_data_source_params = create_data_source_params;
    return this;
  }

  public void unsetCreate_data_source_params() {
    this.create_data_source_params = null;
  }

  /** Returns true if field create_data_source_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_data_source_params() {
    return this.create_data_source_params != null;
  }

  public void setCreate_data_source_paramsIsSet(boolean value) {
    if (!value) {
      this.create_data_source_params = null;
    }
  }

  public org.apache.impala.thrift.TDropDataSourceParams getDrop_data_source_params() {
    return this.drop_data_source_params;
  }

  public TDdlExecRequest setDrop_data_source_params(org.apache.impala.thrift.TDropDataSourceParams drop_data_source_params) {
    this.drop_data_source_params = drop_data_source_params;
    return this;
  }

  public void unsetDrop_data_source_params() {
    this.drop_data_source_params = null;
  }

  /** Returns true if field drop_data_source_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_data_source_params() {
    return this.drop_data_source_params != null;
  }

  public void setDrop_data_source_paramsIsSet(boolean value) {
    if (!value) {
      this.drop_data_source_params = null;
    }
  }

  public org.apache.impala.thrift.TDropStatsParams getDrop_stats_params() {
    return this.drop_stats_params;
  }

  public TDdlExecRequest setDrop_stats_params(org.apache.impala.thrift.TDropStatsParams drop_stats_params) {
    this.drop_stats_params = drop_stats_params;
    return this;
  }

  public void unsetDrop_stats_params() {
    this.drop_stats_params = null;
  }

  /** Returns true if field drop_stats_params is set (has been assigned a value) and false otherwise */
  public boolean isSetDrop_stats_params() {
    return this.drop_stats_params != null;
  }

  public void setDrop_stats_paramsIsSet(boolean value) {
    if (!value) {
      this.drop_stats_params = null;
    }
  }

  public org.apache.impala.thrift.TCreateDropRoleParams getCreate_drop_role_params() {
    return this.create_drop_role_params;
  }

  public TDdlExecRequest setCreate_drop_role_params(org.apache.impala.thrift.TCreateDropRoleParams create_drop_role_params) {
    this.create_drop_role_params = create_drop_role_params;
    return this;
  }

  public void unsetCreate_drop_role_params() {
    this.create_drop_role_params = null;
  }

  /** Returns true if field create_drop_role_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_drop_role_params() {
    return this.create_drop_role_params != null;
  }

  public void setCreate_drop_role_paramsIsSet(boolean value) {
    if (!value) {
      this.create_drop_role_params = null;
    }
  }

  public org.apache.impala.thrift.TGrantRevokeRoleParams getGrant_revoke_role_params() {
    return this.grant_revoke_role_params;
  }

  public TDdlExecRequest setGrant_revoke_role_params(org.apache.impala.thrift.TGrantRevokeRoleParams grant_revoke_role_params) {
    this.grant_revoke_role_params = grant_revoke_role_params;
    return this;
  }

  public void unsetGrant_revoke_role_params() {
    this.grant_revoke_role_params = null;
  }

  /** Returns true if field grant_revoke_role_params is set (has been assigned a value) and false otherwise */
  public boolean isSetGrant_revoke_role_params() {
    return this.grant_revoke_role_params != null;
  }

  public void setGrant_revoke_role_paramsIsSet(boolean value) {
    if (!value) {
      this.grant_revoke_role_params = null;
    }
  }

  public org.apache.impala.thrift.TGrantRevokePrivParams getGrant_revoke_priv_params() {
    return this.grant_revoke_priv_params;
  }

  public TDdlExecRequest setGrant_revoke_priv_params(org.apache.impala.thrift.TGrantRevokePrivParams grant_revoke_priv_params) {
    this.grant_revoke_priv_params = grant_revoke_priv_params;
    return this;
  }

  public void unsetGrant_revoke_priv_params() {
    this.grant_revoke_priv_params = null;
  }

  /** Returns true if field grant_revoke_priv_params is set (has been assigned a value) and false otherwise */
  public boolean isSetGrant_revoke_priv_params() {
    return this.grant_revoke_priv_params != null;
  }

  public void setGrant_revoke_priv_paramsIsSet(boolean value) {
    if (!value) {
      this.grant_revoke_priv_params = null;
    }
  }

  public boolean isSync_ddl() {
    return this.sync_ddl;
  }

  public TDdlExecRequest setSync_ddl(boolean sync_ddl) {
    this.sync_ddl = sync_ddl;
    setSync_ddlIsSet(true);
    return this;
  }

  public void unsetSync_ddl() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SYNC_DDL_ISSET_ID);
  }

  /** Returns true if field sync_ddl is set (has been assigned a value) and false otherwise */
  public boolean isSetSync_ddl() {
    return EncodingUtils.testBit(__isset_bitfield, __SYNC_DDL_ISSET_ID);
  }

  public void setSync_ddlIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SYNC_DDL_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TCommentOnParams getComment_on_params() {
    return this.comment_on_params;
  }

  public TDdlExecRequest setComment_on_params(org.apache.impala.thrift.TCommentOnParams comment_on_params) {
    this.comment_on_params = comment_on_params;
    return this;
  }

  public void unsetComment_on_params() {
    this.comment_on_params = null;
  }

  /** Returns true if field comment_on_params is set (has been assigned a value) and false otherwise */
  public boolean isSetComment_on_params() {
    return this.comment_on_params != null;
  }

  public void setComment_on_paramsIsSet(boolean value) {
    if (!value) {
      this.comment_on_params = null;
    }
  }

  public org.apache.impala.thrift.TAlterDbParams getAlter_db_params() {
    return this.alter_db_params;
  }

  public TDdlExecRequest setAlter_db_params(org.apache.impala.thrift.TAlterDbParams alter_db_params) {
    this.alter_db_params = alter_db_params;
    return this;
  }

  public void unsetAlter_db_params() {
    this.alter_db_params = null;
  }

  /** Returns true if field alter_db_params is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_db_params() {
    return this.alter_db_params != null;
  }

  public void setAlter_db_paramsIsSet(boolean value) {
    if (!value) {
      this.alter_db_params = null;
    }
  }

  public org.apache.impala.thrift.TCopyTestCaseReq getCopy_test_case_params() {
    return this.copy_test_case_params;
  }

  public TDdlExecRequest setCopy_test_case_params(org.apache.impala.thrift.TCopyTestCaseReq copy_test_case_params) {
    this.copy_test_case_params = copy_test_case_params;
    return this;
  }

  public void unsetCopy_test_case_params() {
    this.copy_test_case_params = null;
  }

  /** Returns true if field copy_test_case_params is set (has been assigned a value) and false otherwise */
  public boolean isSetCopy_test_case_params() {
    return this.copy_test_case_params != null;
  }

  public void setCopy_test_case_paramsIsSet(boolean value) {
    if (!value) {
      this.copy_test_case_params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocol_version();
      } else {
        setProtocol_version((CatalogServiceVersion)value);
      }
      break;

    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((TCatalogServiceRequestHeader)value);
      }
      break;

    case DDL_TYPE:
      if (value == null) {
        unsetDdl_type();
      } else {
        setDdl_type((org.apache.impala.thrift.TDdlType)value);
      }
      break;

    case ALTER_TABLE_PARAMS:
      if (value == null) {
        unsetAlter_table_params();
      } else {
        setAlter_table_params((org.apache.impala.thrift.TAlterTableParams)value);
      }
      break;

    case ALTER_VIEW_PARAMS:
      if (value == null) {
        unsetAlter_view_params();
      } else {
        setAlter_view_params((org.apache.impala.thrift.TCreateOrAlterViewParams)value);
      }
      break;

    case CREATE_DB_PARAMS:
      if (value == null) {
        unsetCreate_db_params();
      } else {
        setCreate_db_params((org.apache.impala.thrift.TCreateDbParams)value);
      }
      break;

    case CREATE_TABLE_PARAMS:
      if (value == null) {
        unsetCreate_table_params();
      } else {
        setCreate_table_params((org.apache.impala.thrift.TCreateTableParams)value);
      }
      break;

    case CREATE_TABLE_LIKE_PARAMS:
      if (value == null) {
        unsetCreate_table_like_params();
      } else {
        setCreate_table_like_params((org.apache.impala.thrift.TCreateTableLikeParams)value);
      }
      break;

    case CREATE_VIEW_PARAMS:
      if (value == null) {
        unsetCreate_view_params();
      } else {
        setCreate_view_params((org.apache.impala.thrift.TCreateOrAlterViewParams)value);
      }
      break;

    case CREATE_FN_PARAMS:
      if (value == null) {
        unsetCreate_fn_params();
      } else {
        setCreate_fn_params((org.apache.impala.thrift.TCreateFunctionParams)value);
      }
      break;

    case DROP_DB_PARAMS:
      if (value == null) {
        unsetDrop_db_params();
      } else {
        setDrop_db_params((org.apache.impala.thrift.TDropDbParams)value);
      }
      break;

    case DROP_TABLE_OR_VIEW_PARAMS:
      if (value == null) {
        unsetDrop_table_or_view_params();
      } else {
        setDrop_table_or_view_params((org.apache.impala.thrift.TDropTableOrViewParams)value);
      }
      break;

    case TRUNCATE_PARAMS:
      if (value == null) {
        unsetTruncate_params();
      } else {
        setTruncate_params((org.apache.impala.thrift.TTruncateParams)value);
      }
      break;

    case DROP_FN_PARAMS:
      if (value == null) {
        unsetDrop_fn_params();
      } else {
        setDrop_fn_params((org.apache.impala.thrift.TDropFunctionParams)value);
      }
      break;

    case COMPUTE_STATS_PARAMS:
      if (value == null) {
        unsetCompute_stats_params();
      } else {
        setCompute_stats_params((org.apache.impala.thrift.TComputeStatsParams)value);
      }
      break;

    case CREATE_DATA_SOURCE_PARAMS:
      if (value == null) {
        unsetCreate_data_source_params();
      } else {
        setCreate_data_source_params((org.apache.impala.thrift.TCreateDataSourceParams)value);
      }
      break;

    case DROP_DATA_SOURCE_PARAMS:
      if (value == null) {
        unsetDrop_data_source_params();
      } else {
        setDrop_data_source_params((org.apache.impala.thrift.TDropDataSourceParams)value);
      }
      break;

    case DROP_STATS_PARAMS:
      if (value == null) {
        unsetDrop_stats_params();
      } else {
        setDrop_stats_params((org.apache.impala.thrift.TDropStatsParams)value);
      }
      break;

    case CREATE_DROP_ROLE_PARAMS:
      if (value == null) {
        unsetCreate_drop_role_params();
      } else {
        setCreate_drop_role_params((org.apache.impala.thrift.TCreateDropRoleParams)value);
      }
      break;

    case GRANT_REVOKE_ROLE_PARAMS:
      if (value == null) {
        unsetGrant_revoke_role_params();
      } else {
        setGrant_revoke_role_params((org.apache.impala.thrift.TGrantRevokeRoleParams)value);
      }
      break;

    case GRANT_REVOKE_PRIV_PARAMS:
      if (value == null) {
        unsetGrant_revoke_priv_params();
      } else {
        setGrant_revoke_priv_params((org.apache.impala.thrift.TGrantRevokePrivParams)value);
      }
      break;

    case SYNC_DDL:
      if (value == null) {
        unsetSync_ddl();
      } else {
        setSync_ddl((Boolean)value);
      }
      break;

    case COMMENT_ON_PARAMS:
      if (value == null) {
        unsetComment_on_params();
      } else {
        setComment_on_params((org.apache.impala.thrift.TCommentOnParams)value);
      }
      break;

    case ALTER_DB_PARAMS:
      if (value == null) {
        unsetAlter_db_params();
      } else {
        setAlter_db_params((org.apache.impala.thrift.TAlterDbParams)value);
      }
      break;

    case COPY_TEST_CASE_PARAMS:
      if (value == null) {
        unsetCopy_test_case_params();
      } else {
        setCopy_test_case_params((org.apache.impala.thrift.TCopyTestCaseReq)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocol_version();

    case HEADER:
      return getHeader();

    case DDL_TYPE:
      return getDdl_type();

    case ALTER_TABLE_PARAMS:
      return getAlter_table_params();

    case ALTER_VIEW_PARAMS:
      return getAlter_view_params();

    case CREATE_DB_PARAMS:
      return getCreate_db_params();

    case CREATE_TABLE_PARAMS:
      return getCreate_table_params();

    case CREATE_TABLE_LIKE_PARAMS:
      return getCreate_table_like_params();

    case CREATE_VIEW_PARAMS:
      return getCreate_view_params();

    case CREATE_FN_PARAMS:
      return getCreate_fn_params();

    case DROP_DB_PARAMS:
      return getDrop_db_params();

    case DROP_TABLE_OR_VIEW_PARAMS:
      return getDrop_table_or_view_params();

    case TRUNCATE_PARAMS:
      return getTruncate_params();

    case DROP_FN_PARAMS:
      return getDrop_fn_params();

    case COMPUTE_STATS_PARAMS:
      return getCompute_stats_params();

    case CREATE_DATA_SOURCE_PARAMS:
      return getCreate_data_source_params();

    case DROP_DATA_SOURCE_PARAMS:
      return getDrop_data_source_params();

    case DROP_STATS_PARAMS:
      return getDrop_stats_params();

    case CREATE_DROP_ROLE_PARAMS:
      return getCreate_drop_role_params();

    case GRANT_REVOKE_ROLE_PARAMS:
      return getGrant_revoke_role_params();

    case GRANT_REVOKE_PRIV_PARAMS:
      return getGrant_revoke_priv_params();

    case SYNC_DDL:
      return isSync_ddl();

    case COMMENT_ON_PARAMS:
      return getComment_on_params();

    case ALTER_DB_PARAMS:
      return getAlter_db_params();

    case COPY_TEST_CASE_PARAMS:
      return getCopy_test_case_params();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocol_version();
    case HEADER:
      return isSetHeader();
    case DDL_TYPE:
      return isSetDdl_type();
    case ALTER_TABLE_PARAMS:
      return isSetAlter_table_params();
    case ALTER_VIEW_PARAMS:
      return isSetAlter_view_params();
    case CREATE_DB_PARAMS:
      return isSetCreate_db_params();
    case CREATE_TABLE_PARAMS:
      return isSetCreate_table_params();
    case CREATE_TABLE_LIKE_PARAMS:
      return isSetCreate_table_like_params();
    case CREATE_VIEW_PARAMS:
      return isSetCreate_view_params();
    case CREATE_FN_PARAMS:
      return isSetCreate_fn_params();
    case DROP_DB_PARAMS:
      return isSetDrop_db_params();
    case DROP_TABLE_OR_VIEW_PARAMS:
      return isSetDrop_table_or_view_params();
    case TRUNCATE_PARAMS:
      return isSetTruncate_params();
    case DROP_FN_PARAMS:
      return isSetDrop_fn_params();
    case COMPUTE_STATS_PARAMS:
      return isSetCompute_stats_params();
    case CREATE_DATA_SOURCE_PARAMS:
      return isSetCreate_data_source_params();
    case DROP_DATA_SOURCE_PARAMS:
      return isSetDrop_data_source_params();
    case DROP_STATS_PARAMS:
      return isSetDrop_stats_params();
    case CREATE_DROP_ROLE_PARAMS:
      return isSetCreate_drop_role_params();
    case GRANT_REVOKE_ROLE_PARAMS:
      return isSetGrant_revoke_role_params();
    case GRANT_REVOKE_PRIV_PARAMS:
      return isSetGrant_revoke_priv_params();
    case SYNC_DDL:
      return isSetSync_ddl();
    case COMMENT_ON_PARAMS:
      return isSetComment_on_params();
    case ALTER_DB_PARAMS:
      return isSetAlter_db_params();
    case COPY_TEST_CASE_PARAMS:
      return isSetCopy_test_case_params();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDdlExecRequest)
      return this.equals((TDdlExecRequest)that);
    return false;
  }

  public boolean equals(TDdlExecRequest that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true && this.isSetProtocol_version();
    boolean that_present_protocol_version = true && that.isSetProtocol_version();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_ddl_type = true && this.isSetDdl_type();
    boolean that_present_ddl_type = true && that.isSetDdl_type();
    if (this_present_ddl_type || that_present_ddl_type) {
      if (!(this_present_ddl_type && that_present_ddl_type))
        return false;
      if (!this.ddl_type.equals(that.ddl_type))
        return false;
    }

    boolean this_present_alter_table_params = true && this.isSetAlter_table_params();
    boolean that_present_alter_table_params = true && that.isSetAlter_table_params();
    if (this_present_alter_table_params || that_present_alter_table_params) {
      if (!(this_present_alter_table_params && that_present_alter_table_params))
        return false;
      if (!this.alter_table_params.equals(that.alter_table_params))
        return false;
    }

    boolean this_present_alter_view_params = true && this.isSetAlter_view_params();
    boolean that_present_alter_view_params = true && that.isSetAlter_view_params();
    if (this_present_alter_view_params || that_present_alter_view_params) {
      if (!(this_present_alter_view_params && that_present_alter_view_params))
        return false;
      if (!this.alter_view_params.equals(that.alter_view_params))
        return false;
    }

    boolean this_present_create_db_params = true && this.isSetCreate_db_params();
    boolean that_present_create_db_params = true && that.isSetCreate_db_params();
    if (this_present_create_db_params || that_present_create_db_params) {
      if (!(this_present_create_db_params && that_present_create_db_params))
        return false;
      if (!this.create_db_params.equals(that.create_db_params))
        return false;
    }

    boolean this_present_create_table_params = true && this.isSetCreate_table_params();
    boolean that_present_create_table_params = true && that.isSetCreate_table_params();
    if (this_present_create_table_params || that_present_create_table_params) {
      if (!(this_present_create_table_params && that_present_create_table_params))
        return false;
      if (!this.create_table_params.equals(that.create_table_params))
        return false;
    }

    boolean this_present_create_table_like_params = true && this.isSetCreate_table_like_params();
    boolean that_present_create_table_like_params = true && that.isSetCreate_table_like_params();
    if (this_present_create_table_like_params || that_present_create_table_like_params) {
      if (!(this_present_create_table_like_params && that_present_create_table_like_params))
        return false;
      if (!this.create_table_like_params.equals(that.create_table_like_params))
        return false;
    }

    boolean this_present_create_view_params = true && this.isSetCreate_view_params();
    boolean that_present_create_view_params = true && that.isSetCreate_view_params();
    if (this_present_create_view_params || that_present_create_view_params) {
      if (!(this_present_create_view_params && that_present_create_view_params))
        return false;
      if (!this.create_view_params.equals(that.create_view_params))
        return false;
    }

    boolean this_present_create_fn_params = true && this.isSetCreate_fn_params();
    boolean that_present_create_fn_params = true && that.isSetCreate_fn_params();
    if (this_present_create_fn_params || that_present_create_fn_params) {
      if (!(this_present_create_fn_params && that_present_create_fn_params))
        return false;
      if (!this.create_fn_params.equals(that.create_fn_params))
        return false;
    }

    boolean this_present_drop_db_params = true && this.isSetDrop_db_params();
    boolean that_present_drop_db_params = true && that.isSetDrop_db_params();
    if (this_present_drop_db_params || that_present_drop_db_params) {
      if (!(this_present_drop_db_params && that_present_drop_db_params))
        return false;
      if (!this.drop_db_params.equals(that.drop_db_params))
        return false;
    }

    boolean this_present_drop_table_or_view_params = true && this.isSetDrop_table_or_view_params();
    boolean that_present_drop_table_or_view_params = true && that.isSetDrop_table_or_view_params();
    if (this_present_drop_table_or_view_params || that_present_drop_table_or_view_params) {
      if (!(this_present_drop_table_or_view_params && that_present_drop_table_or_view_params))
        return false;
      if (!this.drop_table_or_view_params.equals(that.drop_table_or_view_params))
        return false;
    }

    boolean this_present_truncate_params = true && this.isSetTruncate_params();
    boolean that_present_truncate_params = true && that.isSetTruncate_params();
    if (this_present_truncate_params || that_present_truncate_params) {
      if (!(this_present_truncate_params && that_present_truncate_params))
        return false;
      if (!this.truncate_params.equals(that.truncate_params))
        return false;
    }

    boolean this_present_drop_fn_params = true && this.isSetDrop_fn_params();
    boolean that_present_drop_fn_params = true && that.isSetDrop_fn_params();
    if (this_present_drop_fn_params || that_present_drop_fn_params) {
      if (!(this_present_drop_fn_params && that_present_drop_fn_params))
        return false;
      if (!this.drop_fn_params.equals(that.drop_fn_params))
        return false;
    }

    boolean this_present_compute_stats_params = true && this.isSetCompute_stats_params();
    boolean that_present_compute_stats_params = true && that.isSetCompute_stats_params();
    if (this_present_compute_stats_params || that_present_compute_stats_params) {
      if (!(this_present_compute_stats_params && that_present_compute_stats_params))
        return false;
      if (!this.compute_stats_params.equals(that.compute_stats_params))
        return false;
    }

    boolean this_present_create_data_source_params = true && this.isSetCreate_data_source_params();
    boolean that_present_create_data_source_params = true && that.isSetCreate_data_source_params();
    if (this_present_create_data_source_params || that_present_create_data_source_params) {
      if (!(this_present_create_data_source_params && that_present_create_data_source_params))
        return false;
      if (!this.create_data_source_params.equals(that.create_data_source_params))
        return false;
    }

    boolean this_present_drop_data_source_params = true && this.isSetDrop_data_source_params();
    boolean that_present_drop_data_source_params = true && that.isSetDrop_data_source_params();
    if (this_present_drop_data_source_params || that_present_drop_data_source_params) {
      if (!(this_present_drop_data_source_params && that_present_drop_data_source_params))
        return false;
      if (!this.drop_data_source_params.equals(that.drop_data_source_params))
        return false;
    }

    boolean this_present_drop_stats_params = true && this.isSetDrop_stats_params();
    boolean that_present_drop_stats_params = true && that.isSetDrop_stats_params();
    if (this_present_drop_stats_params || that_present_drop_stats_params) {
      if (!(this_present_drop_stats_params && that_present_drop_stats_params))
        return false;
      if (!this.drop_stats_params.equals(that.drop_stats_params))
        return false;
    }

    boolean this_present_create_drop_role_params = true && this.isSetCreate_drop_role_params();
    boolean that_present_create_drop_role_params = true && that.isSetCreate_drop_role_params();
    if (this_present_create_drop_role_params || that_present_create_drop_role_params) {
      if (!(this_present_create_drop_role_params && that_present_create_drop_role_params))
        return false;
      if (!this.create_drop_role_params.equals(that.create_drop_role_params))
        return false;
    }

    boolean this_present_grant_revoke_role_params = true && this.isSetGrant_revoke_role_params();
    boolean that_present_grant_revoke_role_params = true && that.isSetGrant_revoke_role_params();
    if (this_present_grant_revoke_role_params || that_present_grant_revoke_role_params) {
      if (!(this_present_grant_revoke_role_params && that_present_grant_revoke_role_params))
        return false;
      if (!this.grant_revoke_role_params.equals(that.grant_revoke_role_params))
        return false;
    }

    boolean this_present_grant_revoke_priv_params = true && this.isSetGrant_revoke_priv_params();
    boolean that_present_grant_revoke_priv_params = true && that.isSetGrant_revoke_priv_params();
    if (this_present_grant_revoke_priv_params || that_present_grant_revoke_priv_params) {
      if (!(this_present_grant_revoke_priv_params && that_present_grant_revoke_priv_params))
        return false;
      if (!this.grant_revoke_priv_params.equals(that.grant_revoke_priv_params))
        return false;
    }

    boolean this_present_sync_ddl = true;
    boolean that_present_sync_ddl = true;
    if (this_present_sync_ddl || that_present_sync_ddl) {
      if (!(this_present_sync_ddl && that_present_sync_ddl))
        return false;
      if (this.sync_ddl != that.sync_ddl)
        return false;
    }

    boolean this_present_comment_on_params = true && this.isSetComment_on_params();
    boolean that_present_comment_on_params = true && that.isSetComment_on_params();
    if (this_present_comment_on_params || that_present_comment_on_params) {
      if (!(this_present_comment_on_params && that_present_comment_on_params))
        return false;
      if (!this.comment_on_params.equals(that.comment_on_params))
        return false;
    }

    boolean this_present_alter_db_params = true && this.isSetAlter_db_params();
    boolean that_present_alter_db_params = true && that.isSetAlter_db_params();
    if (this_present_alter_db_params || that_present_alter_db_params) {
      if (!(this_present_alter_db_params && that_present_alter_db_params))
        return false;
      if (!this.alter_db_params.equals(that.alter_db_params))
        return false;
    }

    boolean this_present_copy_test_case_params = true && this.isSetCopy_test_case_params();
    boolean that_present_copy_test_case_params = true && that.isSetCopy_test_case_params();
    if (this_present_copy_test_case_params || that_present_copy_test_case_params) {
      if (!(this_present_copy_test_case_params && that_present_copy_test_case_params))
        return false;
      if (!this.copy_test_case_params.equals(that.copy_test_case_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocol_version = true && (isSetProtocol_version());
    list.add(present_protocol_version);
    if (present_protocol_version)
      list.add(protocol_version.getValue());

    boolean present_header = true && (isSetHeader());
    list.add(present_header);
    if (present_header)
      list.add(header);

    boolean present_ddl_type = true && (isSetDdl_type());
    list.add(present_ddl_type);
    if (present_ddl_type)
      list.add(ddl_type.getValue());

    boolean present_alter_table_params = true && (isSetAlter_table_params());
    list.add(present_alter_table_params);
    if (present_alter_table_params)
      list.add(alter_table_params);

    boolean present_alter_view_params = true && (isSetAlter_view_params());
    list.add(present_alter_view_params);
    if (present_alter_view_params)
      list.add(alter_view_params);

    boolean present_create_db_params = true && (isSetCreate_db_params());
    list.add(present_create_db_params);
    if (present_create_db_params)
      list.add(create_db_params);

    boolean present_create_table_params = true && (isSetCreate_table_params());
    list.add(present_create_table_params);
    if (present_create_table_params)
      list.add(create_table_params);

    boolean present_create_table_like_params = true && (isSetCreate_table_like_params());
    list.add(present_create_table_like_params);
    if (present_create_table_like_params)
      list.add(create_table_like_params);

    boolean present_create_view_params = true && (isSetCreate_view_params());
    list.add(present_create_view_params);
    if (present_create_view_params)
      list.add(create_view_params);

    boolean present_create_fn_params = true && (isSetCreate_fn_params());
    list.add(present_create_fn_params);
    if (present_create_fn_params)
      list.add(create_fn_params);

    boolean present_drop_db_params = true && (isSetDrop_db_params());
    list.add(present_drop_db_params);
    if (present_drop_db_params)
      list.add(drop_db_params);

    boolean present_drop_table_or_view_params = true && (isSetDrop_table_or_view_params());
    list.add(present_drop_table_or_view_params);
    if (present_drop_table_or_view_params)
      list.add(drop_table_or_view_params);

    boolean present_truncate_params = true && (isSetTruncate_params());
    list.add(present_truncate_params);
    if (present_truncate_params)
      list.add(truncate_params);

    boolean present_drop_fn_params = true && (isSetDrop_fn_params());
    list.add(present_drop_fn_params);
    if (present_drop_fn_params)
      list.add(drop_fn_params);

    boolean present_compute_stats_params = true && (isSetCompute_stats_params());
    list.add(present_compute_stats_params);
    if (present_compute_stats_params)
      list.add(compute_stats_params);

    boolean present_create_data_source_params = true && (isSetCreate_data_source_params());
    list.add(present_create_data_source_params);
    if (present_create_data_source_params)
      list.add(create_data_source_params);

    boolean present_drop_data_source_params = true && (isSetDrop_data_source_params());
    list.add(present_drop_data_source_params);
    if (present_drop_data_source_params)
      list.add(drop_data_source_params);

    boolean present_drop_stats_params = true && (isSetDrop_stats_params());
    list.add(present_drop_stats_params);
    if (present_drop_stats_params)
      list.add(drop_stats_params);

    boolean present_create_drop_role_params = true && (isSetCreate_drop_role_params());
    list.add(present_create_drop_role_params);
    if (present_create_drop_role_params)
      list.add(create_drop_role_params);

    boolean present_grant_revoke_role_params = true && (isSetGrant_revoke_role_params());
    list.add(present_grant_revoke_role_params);
    if (present_grant_revoke_role_params)
      list.add(grant_revoke_role_params);

    boolean present_grant_revoke_priv_params = true && (isSetGrant_revoke_priv_params());
    list.add(present_grant_revoke_priv_params);
    if (present_grant_revoke_priv_params)
      list.add(grant_revoke_priv_params);

    boolean present_sync_ddl = true;
    list.add(present_sync_ddl);
    if (present_sync_ddl)
      list.add(sync_ddl);

    boolean present_comment_on_params = true && (isSetComment_on_params());
    list.add(present_comment_on_params);
    if (present_comment_on_params)
      list.add(comment_on_params);

    boolean present_alter_db_params = true && (isSetAlter_db_params());
    list.add(present_alter_db_params);
    if (present_alter_db_params)
      list.add(alter_db_params);

    boolean present_copy_test_case_params = true && (isSetCopy_test_case_params());
    list.add(present_copy_test_case_params);
    if (present_copy_test_case_params)
      list.add(copy_test_case_params);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDdlExecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocol_version()).compareTo(other.isSetProtocol_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(other.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, other.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDdl_type()).compareTo(other.isSetDdl_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDdl_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ddl_type, other.ddl_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlter_table_params()).compareTo(other.isSetAlter_table_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_table_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_table_params, other.alter_table_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlter_view_params()).compareTo(other.isSetAlter_view_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_view_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_view_params, other.alter_view_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_db_params()).compareTo(other.isSetCreate_db_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_db_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_db_params, other.create_db_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_table_params()).compareTo(other.isSetCreate_table_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_table_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_table_params, other.create_table_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_table_like_params()).compareTo(other.isSetCreate_table_like_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_table_like_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_table_like_params, other.create_table_like_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_view_params()).compareTo(other.isSetCreate_view_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_view_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_view_params, other.create_view_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_fn_params()).compareTo(other.isSetCreate_fn_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_fn_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_fn_params, other.create_fn_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrop_db_params()).compareTo(other.isSetDrop_db_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_db_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_db_params, other.drop_db_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrop_table_or_view_params()).compareTo(other.isSetDrop_table_or_view_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_table_or_view_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_table_or_view_params, other.drop_table_or_view_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTruncate_params()).compareTo(other.isSetTruncate_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTruncate_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.truncate_params, other.truncate_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrop_fn_params()).compareTo(other.isSetDrop_fn_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_fn_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_fn_params, other.drop_fn_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompute_stats_params()).compareTo(other.isSetCompute_stats_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompute_stats_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compute_stats_params, other.compute_stats_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_data_source_params()).compareTo(other.isSetCreate_data_source_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_data_source_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_data_source_params, other.create_data_source_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrop_data_source_params()).compareTo(other.isSetDrop_data_source_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_data_source_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_data_source_params, other.drop_data_source_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrop_stats_params()).compareTo(other.isSetDrop_stats_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrop_stats_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_stats_params, other.drop_stats_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_drop_role_params()).compareTo(other.isSetCreate_drop_role_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_drop_role_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_drop_role_params, other.create_drop_role_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrant_revoke_role_params()).compareTo(other.isSetGrant_revoke_role_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrant_revoke_role_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grant_revoke_role_params, other.grant_revoke_role_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrant_revoke_priv_params()).compareTo(other.isSetGrant_revoke_priv_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrant_revoke_priv_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grant_revoke_priv_params, other.grant_revoke_priv_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSync_ddl()).compareTo(other.isSetSync_ddl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSync_ddl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sync_ddl, other.sync_ddl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment_on_params()).compareTo(other.isSetComment_on_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment_on_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment_on_params, other.comment_on_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlter_db_params()).compareTo(other.isSetAlter_db_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_db_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_db_params, other.alter_db_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCopy_test_case_params()).compareTo(other.isSetCopy_test_case_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopy_test_case_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copy_test_case_params, other.copy_test_case_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDdlExecRequest(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetHeader()) {
      if (!first) sb.append(", ");
      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ddl_type:");
    if (this.ddl_type == null) {
      sb.append("null");
    } else {
      sb.append(this.ddl_type);
    }
    first = false;
    if (isSetAlter_table_params()) {
      if (!first) sb.append(", ");
      sb.append("alter_table_params:");
      if (this.alter_table_params == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_table_params);
      }
      first = false;
    }
    if (isSetAlter_view_params()) {
      if (!first) sb.append(", ");
      sb.append("alter_view_params:");
      if (this.alter_view_params == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_view_params);
      }
      first = false;
    }
    if (isSetCreate_db_params()) {
      if (!first) sb.append(", ");
      sb.append("create_db_params:");
      if (this.create_db_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_db_params);
      }
      first = false;
    }
    if (isSetCreate_table_params()) {
      if (!first) sb.append(", ");
      sb.append("create_table_params:");
      if (this.create_table_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_table_params);
      }
      first = false;
    }
    if (isSetCreate_table_like_params()) {
      if (!first) sb.append(", ");
      sb.append("create_table_like_params:");
      if (this.create_table_like_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_table_like_params);
      }
      first = false;
    }
    if (isSetCreate_view_params()) {
      if (!first) sb.append(", ");
      sb.append("create_view_params:");
      if (this.create_view_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_view_params);
      }
      first = false;
    }
    if (isSetCreate_fn_params()) {
      if (!first) sb.append(", ");
      sb.append("create_fn_params:");
      if (this.create_fn_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_fn_params);
      }
      first = false;
    }
    if (isSetDrop_db_params()) {
      if (!first) sb.append(", ");
      sb.append("drop_db_params:");
      if (this.drop_db_params == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_db_params);
      }
      first = false;
    }
    if (isSetDrop_table_or_view_params()) {
      if (!first) sb.append(", ");
      sb.append("drop_table_or_view_params:");
      if (this.drop_table_or_view_params == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_table_or_view_params);
      }
      first = false;
    }
    if (isSetTruncate_params()) {
      if (!first) sb.append(", ");
      sb.append("truncate_params:");
      if (this.truncate_params == null) {
        sb.append("null");
      } else {
        sb.append(this.truncate_params);
      }
      first = false;
    }
    if (isSetDrop_fn_params()) {
      if (!first) sb.append(", ");
      sb.append("drop_fn_params:");
      if (this.drop_fn_params == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_fn_params);
      }
      first = false;
    }
    if (isSetCompute_stats_params()) {
      if (!first) sb.append(", ");
      sb.append("compute_stats_params:");
      if (this.compute_stats_params == null) {
        sb.append("null");
      } else {
        sb.append(this.compute_stats_params);
      }
      first = false;
    }
    if (isSetCreate_data_source_params()) {
      if (!first) sb.append(", ");
      sb.append("create_data_source_params:");
      if (this.create_data_source_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_data_source_params);
      }
      first = false;
    }
    if (isSetDrop_data_source_params()) {
      if (!first) sb.append(", ");
      sb.append("drop_data_source_params:");
      if (this.drop_data_source_params == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_data_source_params);
      }
      first = false;
    }
    if (isSetDrop_stats_params()) {
      if (!first) sb.append(", ");
      sb.append("drop_stats_params:");
      if (this.drop_stats_params == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_stats_params);
      }
      first = false;
    }
    if (isSetCreate_drop_role_params()) {
      if (!first) sb.append(", ");
      sb.append("create_drop_role_params:");
      if (this.create_drop_role_params == null) {
        sb.append("null");
      } else {
        sb.append(this.create_drop_role_params);
      }
      first = false;
    }
    if (isSetGrant_revoke_role_params()) {
      if (!first) sb.append(", ");
      sb.append("grant_revoke_role_params:");
      if (this.grant_revoke_role_params == null) {
        sb.append("null");
      } else {
        sb.append(this.grant_revoke_role_params);
      }
      first = false;
    }
    if (isSetGrant_revoke_priv_params()) {
      if (!first) sb.append(", ");
      sb.append("grant_revoke_priv_params:");
      if (this.grant_revoke_priv_params == null) {
        sb.append("null");
      } else {
        sb.append(this.grant_revoke_priv_params);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sync_ddl:");
    sb.append(this.sync_ddl);
    first = false;
    if (isSetComment_on_params()) {
      if (!first) sb.append(", ");
      sb.append("comment_on_params:");
      if (this.comment_on_params == null) {
        sb.append("null");
      } else {
        sb.append(this.comment_on_params);
      }
      first = false;
    }
    if (isSetAlter_db_params()) {
      if (!first) sb.append(", ");
      sb.append("alter_db_params:");
      if (this.alter_db_params == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_db_params);
      }
      first = false;
    }
    if (isSetCopy_test_case_params()) {
      if (!first) sb.append(", ");
      sb.append("copy_test_case_params:");
      if (this.copy_test_case_params == null) {
        sb.append("null");
      } else {
        sb.append(this.copy_test_case_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    if (ddl_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ddl_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sync_ddl' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (header != null) {
      header.validate();
    }
    if (alter_table_params != null) {
      alter_table_params.validate();
    }
    if (alter_view_params != null) {
      alter_view_params.validate();
    }
    if (create_db_params != null) {
      create_db_params.validate();
    }
    if (create_table_params != null) {
      create_table_params.validate();
    }
    if (create_table_like_params != null) {
      create_table_like_params.validate();
    }
    if (create_view_params != null) {
      create_view_params.validate();
    }
    if (create_fn_params != null) {
      create_fn_params.validate();
    }
    if (drop_db_params != null) {
      drop_db_params.validate();
    }
    if (drop_table_or_view_params != null) {
      drop_table_or_view_params.validate();
    }
    if (truncate_params != null) {
      truncate_params.validate();
    }
    if (drop_fn_params != null) {
      drop_fn_params.validate();
    }
    if (compute_stats_params != null) {
      compute_stats_params.validate();
    }
    if (create_data_source_params != null) {
      create_data_source_params.validate();
    }
    if (drop_data_source_params != null) {
      drop_data_source_params.validate();
    }
    if (drop_stats_params != null) {
      drop_stats_params.validate();
    }
    if (create_drop_role_params != null) {
      create_drop_role_params.validate();
    }
    if (grant_revoke_role_params != null) {
      grant_revoke_role_params.validate();
    }
    if (grant_revoke_priv_params != null) {
      grant_revoke_priv_params.validate();
    }
    if (comment_on_params != null) {
      comment_on_params.validate();
    }
    if (alter_db_params != null) {
      alter_db_params.validate();
    }
    if (copy_test_case_params != null) {
      copy_test_case_params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDdlExecRequestStandardSchemeFactory implements SchemeFactory {
    public TDdlExecRequestStandardScheme getScheme() {
      return new TDdlExecRequestStandardScheme();
    }
  }

  private static class TDdlExecRequestStandardScheme extends StandardScheme<TDdlExecRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDdlExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.findByValue(iprot.readI32());
              struct.setProtocol_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new TCatalogServiceRequestHeader();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DDL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ddl_type = org.apache.impala.thrift.TDdlType.findByValue(iprot.readI32());
              struct.setDdl_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALTER_TABLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_table_params = new org.apache.impala.thrift.TAlterTableParams();
              struct.alter_table_params.read(iprot);
              struct.setAlter_table_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALTER_VIEW_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_view_params = new org.apache.impala.thrift.TCreateOrAlterViewParams();
              struct.alter_view_params.read(iprot);
              struct.setAlter_view_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_DB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_db_params = new org.apache.impala.thrift.TCreateDbParams();
              struct.create_db_params.read(iprot);
              struct.setCreate_db_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TABLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_table_params = new org.apache.impala.thrift.TCreateTableParams();
              struct.create_table_params.read(iprot);
              struct.setCreate_table_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TABLE_LIKE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_table_like_params = new org.apache.impala.thrift.TCreateTableLikeParams();
              struct.create_table_like_params.read(iprot);
              struct.setCreate_table_like_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_VIEW_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_view_params = new org.apache.impala.thrift.TCreateOrAlterViewParams();
              struct.create_view_params.read(iprot);
              struct.setCreate_view_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_FN_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_fn_params = new org.apache.impala.thrift.TCreateFunctionParams();
              struct.create_fn_params.read(iprot);
              struct.setCreate_fn_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DROP_DB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_db_params = new org.apache.impala.thrift.TDropDbParams();
              struct.drop_db_params.read(iprot);
              struct.setDrop_db_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DROP_TABLE_OR_VIEW_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_table_or_view_params = new org.apache.impala.thrift.TDropTableOrViewParams();
              struct.drop_table_or_view_params.read(iprot);
              struct.setDrop_table_or_view_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TRUNCATE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.truncate_params = new org.apache.impala.thrift.TTruncateParams();
              struct.truncate_params.read(iprot);
              struct.setTruncate_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DROP_FN_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_fn_params = new org.apache.impala.thrift.TDropFunctionParams();
              struct.drop_fn_params.read(iprot);
              struct.setDrop_fn_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMPUTE_STATS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compute_stats_params = new org.apache.impala.thrift.TComputeStatsParams();
              struct.compute_stats_params.read(iprot);
              struct.setCompute_stats_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CREATE_DATA_SOURCE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_data_source_params = new org.apache.impala.thrift.TCreateDataSourceParams();
              struct.create_data_source_params.read(iprot);
              struct.setCreate_data_source_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DROP_DATA_SOURCE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_data_source_params = new org.apache.impala.thrift.TDropDataSourceParams();
              struct.drop_data_source_params.read(iprot);
              struct.setDrop_data_source_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DROP_STATS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_stats_params = new org.apache.impala.thrift.TDropStatsParams();
              struct.drop_stats_params.read(iprot);
              struct.setDrop_stats_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_DROP_ROLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_drop_role_params = new org.apache.impala.thrift.TCreateDropRoleParams();
              struct.create_drop_role_params.read(iprot);
              struct.setCreate_drop_role_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // GRANT_REVOKE_ROLE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.grant_revoke_role_params = new org.apache.impala.thrift.TGrantRevokeRoleParams();
              struct.grant_revoke_role_params.read(iprot);
              struct.setGrant_revoke_role_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // GRANT_REVOKE_PRIV_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.grant_revoke_priv_params = new org.apache.impala.thrift.TGrantRevokePrivParams();
              struct.grant_revoke_priv_params.read(iprot);
              struct.setGrant_revoke_priv_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SYNC_DDL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sync_ddl = iprot.readBool();
              struct.setSync_ddlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // COMMENT_ON_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.comment_on_params = new org.apache.impala.thrift.TCommentOnParams();
              struct.comment_on_params.read(iprot);
              struct.setComment_on_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ALTER_DB_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_db_params = new org.apache.impala.thrift.TAlterDbParams();
              struct.alter_db_params.read(iprot);
              struct.setAlter_db_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // COPY_TEST_CASE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.copy_test_case_params = new org.apache.impala.thrift.TCopyTestCaseReq();
              struct.copy_test_case_params.read(iprot);
              struct.setCopy_test_case_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSync_ddl()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sync_ddl' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDdlExecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.header != null) {
        if (struct.isSetHeader()) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          struct.header.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ddl_type != null) {
        oprot.writeFieldBegin(DDL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.ddl_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.alter_table_params != null) {
        if (struct.isSetAlter_table_params()) {
          oprot.writeFieldBegin(ALTER_TABLE_PARAMS_FIELD_DESC);
          struct.alter_table_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_view_params != null) {
        if (struct.isSetAlter_view_params()) {
          oprot.writeFieldBegin(ALTER_VIEW_PARAMS_FIELD_DESC);
          struct.alter_view_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_db_params != null) {
        if (struct.isSetCreate_db_params()) {
          oprot.writeFieldBegin(CREATE_DB_PARAMS_FIELD_DESC);
          struct.create_db_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_table_params != null) {
        if (struct.isSetCreate_table_params()) {
          oprot.writeFieldBegin(CREATE_TABLE_PARAMS_FIELD_DESC);
          struct.create_table_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_table_like_params != null) {
        if (struct.isSetCreate_table_like_params()) {
          oprot.writeFieldBegin(CREATE_TABLE_LIKE_PARAMS_FIELD_DESC);
          struct.create_table_like_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_view_params != null) {
        if (struct.isSetCreate_view_params()) {
          oprot.writeFieldBegin(CREATE_VIEW_PARAMS_FIELD_DESC);
          struct.create_view_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_fn_params != null) {
        if (struct.isSetCreate_fn_params()) {
          oprot.writeFieldBegin(CREATE_FN_PARAMS_FIELD_DESC);
          struct.create_fn_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_db_params != null) {
        if (struct.isSetDrop_db_params()) {
          oprot.writeFieldBegin(DROP_DB_PARAMS_FIELD_DESC);
          struct.drop_db_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_table_or_view_params != null) {
        if (struct.isSetDrop_table_or_view_params()) {
          oprot.writeFieldBegin(DROP_TABLE_OR_VIEW_PARAMS_FIELD_DESC);
          struct.drop_table_or_view_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.truncate_params != null) {
        if (struct.isSetTruncate_params()) {
          oprot.writeFieldBegin(TRUNCATE_PARAMS_FIELD_DESC);
          struct.truncate_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_fn_params != null) {
        if (struct.isSetDrop_fn_params()) {
          oprot.writeFieldBegin(DROP_FN_PARAMS_FIELD_DESC);
          struct.drop_fn_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.compute_stats_params != null) {
        if (struct.isSetCompute_stats_params()) {
          oprot.writeFieldBegin(COMPUTE_STATS_PARAMS_FIELD_DESC);
          struct.compute_stats_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_data_source_params != null) {
        if (struct.isSetCreate_data_source_params()) {
          oprot.writeFieldBegin(CREATE_DATA_SOURCE_PARAMS_FIELD_DESC);
          struct.create_data_source_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_data_source_params != null) {
        if (struct.isSetDrop_data_source_params()) {
          oprot.writeFieldBegin(DROP_DATA_SOURCE_PARAMS_FIELD_DESC);
          struct.drop_data_source_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_stats_params != null) {
        if (struct.isSetDrop_stats_params()) {
          oprot.writeFieldBegin(DROP_STATS_PARAMS_FIELD_DESC);
          struct.drop_stats_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_drop_role_params != null) {
        if (struct.isSetCreate_drop_role_params()) {
          oprot.writeFieldBegin(CREATE_DROP_ROLE_PARAMS_FIELD_DESC);
          struct.create_drop_role_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.grant_revoke_role_params != null) {
        if (struct.isSetGrant_revoke_role_params()) {
          oprot.writeFieldBegin(GRANT_REVOKE_ROLE_PARAMS_FIELD_DESC);
          struct.grant_revoke_role_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.grant_revoke_priv_params != null) {
        if (struct.isSetGrant_revoke_priv_params()) {
          oprot.writeFieldBegin(GRANT_REVOKE_PRIV_PARAMS_FIELD_DESC);
          struct.grant_revoke_priv_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SYNC_DDL_FIELD_DESC);
      oprot.writeBool(struct.sync_ddl);
      oprot.writeFieldEnd();
      if (struct.comment_on_params != null) {
        if (struct.isSetComment_on_params()) {
          oprot.writeFieldBegin(COMMENT_ON_PARAMS_FIELD_DESC);
          struct.comment_on_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_db_params != null) {
        if (struct.isSetAlter_db_params()) {
          oprot.writeFieldBegin(ALTER_DB_PARAMS_FIELD_DESC);
          struct.alter_db_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.copy_test_case_params != null) {
        if (struct.isSetCopy_test_case_params()) {
          oprot.writeFieldBegin(COPY_TEST_CASE_PARAMS_FIELD_DESC);
          struct.copy_test_case_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDdlExecRequestTupleSchemeFactory implements SchemeFactory {
    public TDdlExecRequestTupleScheme getScheme() {
      return new TDdlExecRequestTupleScheme();
    }
  }

  private static class TDdlExecRequestTupleScheme extends TupleScheme<TDdlExecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDdlExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      oprot.writeI32(struct.ddl_type.getValue());
      oprot.writeBool(struct.sync_ddl);
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      if (struct.isSetAlter_table_params()) {
        optionals.set(1);
      }
      if (struct.isSetAlter_view_params()) {
        optionals.set(2);
      }
      if (struct.isSetCreate_db_params()) {
        optionals.set(3);
      }
      if (struct.isSetCreate_table_params()) {
        optionals.set(4);
      }
      if (struct.isSetCreate_table_like_params()) {
        optionals.set(5);
      }
      if (struct.isSetCreate_view_params()) {
        optionals.set(6);
      }
      if (struct.isSetCreate_fn_params()) {
        optionals.set(7);
      }
      if (struct.isSetDrop_db_params()) {
        optionals.set(8);
      }
      if (struct.isSetDrop_table_or_view_params()) {
        optionals.set(9);
      }
      if (struct.isSetTruncate_params()) {
        optionals.set(10);
      }
      if (struct.isSetDrop_fn_params()) {
        optionals.set(11);
      }
      if (struct.isSetCompute_stats_params()) {
        optionals.set(12);
      }
      if (struct.isSetCreate_data_source_params()) {
        optionals.set(13);
      }
      if (struct.isSetDrop_data_source_params()) {
        optionals.set(14);
      }
      if (struct.isSetDrop_stats_params()) {
        optionals.set(15);
      }
      if (struct.isSetCreate_drop_role_params()) {
        optionals.set(16);
      }
      if (struct.isSetGrant_revoke_role_params()) {
        optionals.set(17);
      }
      if (struct.isSetGrant_revoke_priv_params()) {
        optionals.set(18);
      }
      if (struct.isSetComment_on_params()) {
        optionals.set(19);
      }
      if (struct.isSetAlter_db_params()) {
        optionals.set(20);
      }
      if (struct.isSetCopy_test_case_params()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetHeader()) {
        struct.header.write(oprot);
      }
      if (struct.isSetAlter_table_params()) {
        struct.alter_table_params.write(oprot);
      }
      if (struct.isSetAlter_view_params()) {
        struct.alter_view_params.write(oprot);
      }
      if (struct.isSetCreate_db_params()) {
        struct.create_db_params.write(oprot);
      }
      if (struct.isSetCreate_table_params()) {
        struct.create_table_params.write(oprot);
      }
      if (struct.isSetCreate_table_like_params()) {
        struct.create_table_like_params.write(oprot);
      }
      if (struct.isSetCreate_view_params()) {
        struct.create_view_params.write(oprot);
      }
      if (struct.isSetCreate_fn_params()) {
        struct.create_fn_params.write(oprot);
      }
      if (struct.isSetDrop_db_params()) {
        struct.drop_db_params.write(oprot);
      }
      if (struct.isSetDrop_table_or_view_params()) {
        struct.drop_table_or_view_params.write(oprot);
      }
      if (struct.isSetTruncate_params()) {
        struct.truncate_params.write(oprot);
      }
      if (struct.isSetDrop_fn_params()) {
        struct.drop_fn_params.write(oprot);
      }
      if (struct.isSetCompute_stats_params()) {
        struct.compute_stats_params.write(oprot);
      }
      if (struct.isSetCreate_data_source_params()) {
        struct.create_data_source_params.write(oprot);
      }
      if (struct.isSetDrop_data_source_params()) {
        struct.drop_data_source_params.write(oprot);
      }
      if (struct.isSetDrop_stats_params()) {
        struct.drop_stats_params.write(oprot);
      }
      if (struct.isSetCreate_drop_role_params()) {
        struct.create_drop_role_params.write(oprot);
      }
      if (struct.isSetGrant_revoke_role_params()) {
        struct.grant_revoke_role_params.write(oprot);
      }
      if (struct.isSetGrant_revoke_priv_params()) {
        struct.grant_revoke_priv_params.write(oprot);
      }
      if (struct.isSetComment_on_params()) {
        struct.comment_on_params.write(oprot);
      }
      if (struct.isSetAlter_db_params()) {
        struct.alter_db_params.write(oprot);
      }
      if (struct.isSetCopy_test_case_params()) {
        struct.copy_test_case_params.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDdlExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol_version = org.apache.impala.thrift.CatalogServiceVersion.findByValue(iprot.readI32());
      struct.setProtocol_versionIsSet(true);
      struct.ddl_type = org.apache.impala.thrift.TDdlType.findByValue(iprot.readI32());
      struct.setDdl_typeIsSet(true);
      struct.sync_ddl = iprot.readBool();
      struct.setSync_ddlIsSet(true);
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.header = new TCatalogServiceRequestHeader();
        struct.header.read(iprot);
        struct.setHeaderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.alter_table_params = new org.apache.impala.thrift.TAlterTableParams();
        struct.alter_table_params.read(iprot);
        struct.setAlter_table_paramsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.alter_view_params = new org.apache.impala.thrift.TCreateOrAlterViewParams();
        struct.alter_view_params.read(iprot);
        struct.setAlter_view_paramsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.create_db_params = new org.apache.impala.thrift.TCreateDbParams();
        struct.create_db_params.read(iprot);
        struct.setCreate_db_paramsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.create_table_params = new org.apache.impala.thrift.TCreateTableParams();
        struct.create_table_params.read(iprot);
        struct.setCreate_table_paramsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.create_table_like_params = new org.apache.impala.thrift.TCreateTableLikeParams();
        struct.create_table_like_params.read(iprot);
        struct.setCreate_table_like_paramsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.create_view_params = new org.apache.impala.thrift.TCreateOrAlterViewParams();
        struct.create_view_params.read(iprot);
        struct.setCreate_view_paramsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.create_fn_params = new org.apache.impala.thrift.TCreateFunctionParams();
        struct.create_fn_params.read(iprot);
        struct.setCreate_fn_paramsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.drop_db_params = new org.apache.impala.thrift.TDropDbParams();
        struct.drop_db_params.read(iprot);
        struct.setDrop_db_paramsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.drop_table_or_view_params = new org.apache.impala.thrift.TDropTableOrViewParams();
        struct.drop_table_or_view_params.read(iprot);
        struct.setDrop_table_or_view_paramsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.truncate_params = new org.apache.impala.thrift.TTruncateParams();
        struct.truncate_params.read(iprot);
        struct.setTruncate_paramsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.drop_fn_params = new org.apache.impala.thrift.TDropFunctionParams();
        struct.drop_fn_params.read(iprot);
        struct.setDrop_fn_paramsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.compute_stats_params = new org.apache.impala.thrift.TComputeStatsParams();
        struct.compute_stats_params.read(iprot);
        struct.setCompute_stats_paramsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.create_data_source_params = new org.apache.impala.thrift.TCreateDataSourceParams();
        struct.create_data_source_params.read(iprot);
        struct.setCreate_data_source_paramsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.drop_data_source_params = new org.apache.impala.thrift.TDropDataSourceParams();
        struct.drop_data_source_params.read(iprot);
        struct.setDrop_data_source_paramsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.drop_stats_params = new org.apache.impala.thrift.TDropStatsParams();
        struct.drop_stats_params.read(iprot);
        struct.setDrop_stats_paramsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.create_drop_role_params = new org.apache.impala.thrift.TCreateDropRoleParams();
        struct.create_drop_role_params.read(iprot);
        struct.setCreate_drop_role_paramsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.grant_revoke_role_params = new org.apache.impala.thrift.TGrantRevokeRoleParams();
        struct.grant_revoke_role_params.read(iprot);
        struct.setGrant_revoke_role_paramsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.grant_revoke_priv_params = new org.apache.impala.thrift.TGrantRevokePrivParams();
        struct.grant_revoke_priv_params.read(iprot);
        struct.setGrant_revoke_priv_paramsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.comment_on_params = new org.apache.impala.thrift.TCommentOnParams();
        struct.comment_on_params.read(iprot);
        struct.setComment_on_paramsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.alter_db_params = new org.apache.impala.thrift.TAlterDbParams();
        struct.alter_db_params.read(iprot);
        struct.setAlter_db_paramsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.copy_test_case_params = new org.apache.impala.thrift.TCopyTestCaseReq();
        struct.copy_test_case_params.read(iprot);
        struct.setCopy_test_case_paramsIsSet(true);
      }
    }
  }

}

