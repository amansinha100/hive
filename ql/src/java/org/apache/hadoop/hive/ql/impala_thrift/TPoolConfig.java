/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TPoolConfig implements org.apache.thrift.TBase<TPoolConfig, TPoolConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TPoolConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPoolConfig");

  private static final org.apache.thrift.protocol.TField MAX_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_requests", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_QUEUED_FIELD_DESC = new org.apache.thrift.protocol.TField("max_queued", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_MEM_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("max_mem_resources", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField QUEUE_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("queue_timeout_ms", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DEFAULT_QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("default_query_options", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_QUERY_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("max_query_mem_limit", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MIN_QUERY_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("min_query_mem_limit", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CLAMP_MEM_LIMIT_QUERY_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("clamp_mem_limit_query_option", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_RUNNING_QUERIES_MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_running_queries_multiple", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField MAX_QUEUED_QUERIES_MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_queued_queries_multiple", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_MEMORY_MULTIPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_memory_multiple", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPoolConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPoolConfigTupleSchemeFactory());
  }

  private long max_requests; // required
  private long max_queued; // required
  private long max_mem_resources; // required
  private long queue_timeout_ms; // optional
  private String default_query_options; // required
  private long max_query_mem_limit; // required
  private long min_query_mem_limit; // required
  private boolean clamp_mem_limit_query_option; // required
  private double max_running_queries_multiple; // required
  private double max_queued_queries_multiple; // required
  private long max_memory_multiple; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAX_REQUESTS((short)1, "max_requests"),
    MAX_QUEUED((short)2, "max_queued"),
    MAX_MEM_RESOURCES((short)3, "max_mem_resources"),
    QUEUE_TIMEOUT_MS((short)4, "queue_timeout_ms"),
    DEFAULT_QUERY_OPTIONS((short)5, "default_query_options"),
    MAX_QUERY_MEM_LIMIT((short)6, "max_query_mem_limit"),
    MIN_QUERY_MEM_LIMIT((short)7, "min_query_mem_limit"),
    CLAMP_MEM_LIMIT_QUERY_OPTION((short)8, "clamp_mem_limit_query_option"),
    MAX_RUNNING_QUERIES_MULTIPLE((short)9, "max_running_queries_multiple"),
    MAX_QUEUED_QUERIES_MULTIPLE((short)10, "max_queued_queries_multiple"),
    MAX_MEMORY_MULTIPLE((short)11, "max_memory_multiple");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_REQUESTS
          return MAX_REQUESTS;
        case 2: // MAX_QUEUED
          return MAX_QUEUED;
        case 3: // MAX_MEM_RESOURCES
          return MAX_MEM_RESOURCES;
        case 4: // QUEUE_TIMEOUT_MS
          return QUEUE_TIMEOUT_MS;
        case 5: // DEFAULT_QUERY_OPTIONS
          return DEFAULT_QUERY_OPTIONS;
        case 6: // MAX_QUERY_MEM_LIMIT
          return MAX_QUERY_MEM_LIMIT;
        case 7: // MIN_QUERY_MEM_LIMIT
          return MIN_QUERY_MEM_LIMIT;
        case 8: // CLAMP_MEM_LIMIT_QUERY_OPTION
          return CLAMP_MEM_LIMIT_QUERY_OPTION;
        case 9: // MAX_RUNNING_QUERIES_MULTIPLE
          return MAX_RUNNING_QUERIES_MULTIPLE;
        case 10: // MAX_QUEUED_QUERIES_MULTIPLE
          return MAX_QUEUED_QUERIES_MULTIPLE;
        case 11: // MAX_MEMORY_MULTIPLE
          return MAX_MEMORY_MULTIPLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_REQUESTS_ISSET_ID = 0;
  private static final int __MAX_QUEUED_ISSET_ID = 1;
  private static final int __MAX_MEM_RESOURCES_ISSET_ID = 2;
  private static final int __QUEUE_TIMEOUT_MS_ISSET_ID = 3;
  private static final int __MAX_QUERY_MEM_LIMIT_ISSET_ID = 4;
  private static final int __MIN_QUERY_MEM_LIMIT_ISSET_ID = 5;
  private static final int __CLAMP_MEM_LIMIT_QUERY_OPTION_ISSET_ID = 6;
  private static final int __MAX_RUNNING_QUERIES_MULTIPLE_ISSET_ID = 7;
  private static final int __MAX_QUEUED_QUERIES_MULTIPLE_ISSET_ID = 8;
  private static final int __MAX_MEMORY_MULTIPLE_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUEUE_TIMEOUT_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("max_requests", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_QUEUED, new org.apache.thrift.meta_data.FieldMetaData("max_queued", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_MEM_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("max_mem_resources", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUEUE_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("queue_timeout_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEFAULT_QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("default_query_options", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_QUERY_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("max_query_mem_limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_QUERY_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("min_query_mem_limit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLAMP_MEM_LIMIT_QUERY_OPTION, new org.apache.thrift.meta_data.FieldMetaData("clamp_mem_limit_query_option", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_RUNNING_QUERIES_MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("max_running_queries_multiple", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_QUEUED_QUERIES_MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("max_queued_queries_multiple", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_MEMORY_MULTIPLE, new org.apache.thrift.meta_data.FieldMetaData("max_memory_multiple", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPoolConfig.class, metaDataMap);
  }

  public TPoolConfig() {
    this.max_query_mem_limit = 0L;

    this.min_query_mem_limit = 0L;

    this.clamp_mem_limit_query_option = true;

    this.max_running_queries_multiple = (double)0;

    this.max_queued_queries_multiple = (double)0;

    this.max_memory_multiple = 0L;

  }

  public TPoolConfig(
    long max_requests,
    long max_queued,
    long max_mem_resources,
    String default_query_options,
    long max_query_mem_limit,
    long min_query_mem_limit,
    boolean clamp_mem_limit_query_option,
    double max_running_queries_multiple,
    double max_queued_queries_multiple,
    long max_memory_multiple)
  {
    this();
    this.max_requests = max_requests;
    setMax_requestsIsSet(true);
    this.max_queued = max_queued;
    setMax_queuedIsSet(true);
    this.max_mem_resources = max_mem_resources;
    setMax_mem_resourcesIsSet(true);
    this.default_query_options = default_query_options;
    this.max_query_mem_limit = max_query_mem_limit;
    setMax_query_mem_limitIsSet(true);
    this.min_query_mem_limit = min_query_mem_limit;
    setMin_query_mem_limitIsSet(true);
    this.clamp_mem_limit_query_option = clamp_mem_limit_query_option;
    setClamp_mem_limit_query_optionIsSet(true);
    this.max_running_queries_multiple = max_running_queries_multiple;
    setMax_running_queries_multipleIsSet(true);
    this.max_queued_queries_multiple = max_queued_queries_multiple;
    setMax_queued_queries_multipleIsSet(true);
    this.max_memory_multiple = max_memory_multiple;
    setMax_memory_multipleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPoolConfig(TPoolConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.max_requests = other.max_requests;
    this.max_queued = other.max_queued;
    this.max_mem_resources = other.max_mem_resources;
    this.queue_timeout_ms = other.queue_timeout_ms;
    if (other.isSetDefault_query_options()) {
      this.default_query_options = other.default_query_options;
    }
    this.max_query_mem_limit = other.max_query_mem_limit;
    this.min_query_mem_limit = other.min_query_mem_limit;
    this.clamp_mem_limit_query_option = other.clamp_mem_limit_query_option;
    this.max_running_queries_multiple = other.max_running_queries_multiple;
    this.max_queued_queries_multiple = other.max_queued_queries_multiple;
    this.max_memory_multiple = other.max_memory_multiple;
  }

  public TPoolConfig deepCopy() {
    return new TPoolConfig(this);
  }

  @Override
  public void clear() {
    setMax_requestsIsSet(false);
    this.max_requests = 0;
    setMax_queuedIsSet(false);
    this.max_queued = 0;
    setMax_mem_resourcesIsSet(false);
    this.max_mem_resources = 0;
    setQueue_timeout_msIsSet(false);
    this.queue_timeout_ms = 0;
    this.default_query_options = null;
    this.max_query_mem_limit = 0L;

    this.min_query_mem_limit = 0L;

    this.clamp_mem_limit_query_option = true;

    this.max_running_queries_multiple = (double)0;

    this.max_queued_queries_multiple = (double)0;

    this.max_memory_multiple = 0L;

  }

  public long getMax_requests() {
    return this.max_requests;
  }

  public void setMax_requests(long max_requests) {
    this.max_requests = max_requests;
    setMax_requestsIsSet(true);
  }

  public void unsetMax_requests() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_REQUESTS_ISSET_ID);
  }

  /** Returns true if field max_requests is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_requests() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_REQUESTS_ISSET_ID);
  }

  public void setMax_requestsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_REQUESTS_ISSET_ID, value);
  }

  public long getMax_queued() {
    return this.max_queued;
  }

  public void setMax_queued(long max_queued) {
    this.max_queued = max_queued;
    setMax_queuedIsSet(true);
  }

  public void unsetMax_queued() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_QUEUED_ISSET_ID);
  }

  /** Returns true if field max_queued is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_queued() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_QUEUED_ISSET_ID);
  }

  public void setMax_queuedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_QUEUED_ISSET_ID, value);
  }

  public long getMax_mem_resources() {
    return this.max_mem_resources;
  }

  public void setMax_mem_resources(long max_mem_resources) {
    this.max_mem_resources = max_mem_resources;
    setMax_mem_resourcesIsSet(true);
  }

  public void unsetMax_mem_resources() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_MEM_RESOURCES_ISSET_ID);
  }

  /** Returns true if field max_mem_resources is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_mem_resources() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_MEM_RESOURCES_ISSET_ID);
  }

  public void setMax_mem_resourcesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_MEM_RESOURCES_ISSET_ID, value);
  }

  public long getQueue_timeout_ms() {
    return this.queue_timeout_ms;
  }

  public void setQueue_timeout_ms(long queue_timeout_ms) {
    this.queue_timeout_ms = queue_timeout_ms;
    setQueue_timeout_msIsSet(true);
  }

  public void unsetQueue_timeout_ms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUE_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field queue_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetQueue_timeout_ms() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUE_TIMEOUT_MS_ISSET_ID);
  }

  public void setQueue_timeout_msIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUE_TIMEOUT_MS_ISSET_ID, value);
  }

  public String getDefault_query_options() {
    return this.default_query_options;
  }

  public void setDefault_query_options(String default_query_options) {
    this.default_query_options = default_query_options;
  }

  public void unsetDefault_query_options() {
    this.default_query_options = null;
  }

  /** Returns true if field default_query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetDefault_query_options() {
    return this.default_query_options != null;
  }

  public void setDefault_query_optionsIsSet(boolean value) {
    if (!value) {
      this.default_query_options = null;
    }
  }

  public long getMax_query_mem_limit() {
    return this.max_query_mem_limit;
  }

  public void setMax_query_mem_limit(long max_query_mem_limit) {
    this.max_query_mem_limit = max_query_mem_limit;
    setMax_query_mem_limitIsSet(true);
  }

  public void unsetMax_query_mem_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_QUERY_MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field max_query_mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_query_mem_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_QUERY_MEM_LIMIT_ISSET_ID);
  }

  public void setMax_query_mem_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_QUERY_MEM_LIMIT_ISSET_ID, value);
  }

  public long getMin_query_mem_limit() {
    return this.min_query_mem_limit;
  }

  public void setMin_query_mem_limit(long min_query_mem_limit) {
    this.min_query_mem_limit = min_query_mem_limit;
    setMin_query_mem_limitIsSet(true);
  }

  public void unsetMin_query_mem_limit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_QUERY_MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field min_query_mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_query_mem_limit() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_QUERY_MEM_LIMIT_ISSET_ID);
  }

  public void setMin_query_mem_limitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_QUERY_MEM_LIMIT_ISSET_ID, value);
  }

  public boolean isClamp_mem_limit_query_option() {
    return this.clamp_mem_limit_query_option;
  }

  public void setClamp_mem_limit_query_option(boolean clamp_mem_limit_query_option) {
    this.clamp_mem_limit_query_option = clamp_mem_limit_query_option;
    setClamp_mem_limit_query_optionIsSet(true);
  }

  public void unsetClamp_mem_limit_query_option() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLAMP_MEM_LIMIT_QUERY_OPTION_ISSET_ID);
  }

  /** Returns true if field clamp_mem_limit_query_option is set (has been assigned a value) and false otherwise */
  public boolean isSetClamp_mem_limit_query_option() {
    return EncodingUtils.testBit(__isset_bitfield, __CLAMP_MEM_LIMIT_QUERY_OPTION_ISSET_ID);
  }

  public void setClamp_mem_limit_query_optionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLAMP_MEM_LIMIT_QUERY_OPTION_ISSET_ID, value);
  }

  public double getMax_running_queries_multiple() {
    return this.max_running_queries_multiple;
  }

  public void setMax_running_queries_multiple(double max_running_queries_multiple) {
    this.max_running_queries_multiple = max_running_queries_multiple;
    setMax_running_queries_multipleIsSet(true);
  }

  public void unsetMax_running_queries_multiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_RUNNING_QUERIES_MULTIPLE_ISSET_ID);
  }

  /** Returns true if field max_running_queries_multiple is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_running_queries_multiple() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_RUNNING_QUERIES_MULTIPLE_ISSET_ID);
  }

  public void setMax_running_queries_multipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_RUNNING_QUERIES_MULTIPLE_ISSET_ID, value);
  }

  public double getMax_queued_queries_multiple() {
    return this.max_queued_queries_multiple;
  }

  public void setMax_queued_queries_multiple(double max_queued_queries_multiple) {
    this.max_queued_queries_multiple = max_queued_queries_multiple;
    setMax_queued_queries_multipleIsSet(true);
  }

  public void unsetMax_queued_queries_multiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_QUEUED_QUERIES_MULTIPLE_ISSET_ID);
  }

  /** Returns true if field max_queued_queries_multiple is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_queued_queries_multiple() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_QUEUED_QUERIES_MULTIPLE_ISSET_ID);
  }

  public void setMax_queued_queries_multipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_QUEUED_QUERIES_MULTIPLE_ISSET_ID, value);
  }

  public long getMax_memory_multiple() {
    return this.max_memory_multiple;
  }

  public void setMax_memory_multiple(long max_memory_multiple) {
    this.max_memory_multiple = max_memory_multiple;
    setMax_memory_multipleIsSet(true);
  }

  public void unsetMax_memory_multiple() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_MEMORY_MULTIPLE_ISSET_ID);
  }

  /** Returns true if field max_memory_multiple is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_memory_multiple() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_MEMORY_MULTIPLE_ISSET_ID);
  }

  public void setMax_memory_multipleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_MEMORY_MULTIPLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_REQUESTS:
      if (value == null) {
        unsetMax_requests();
      } else {
        setMax_requests((Long)value);
      }
      break;

    case MAX_QUEUED:
      if (value == null) {
        unsetMax_queued();
      } else {
        setMax_queued((Long)value);
      }
      break;

    case MAX_MEM_RESOURCES:
      if (value == null) {
        unsetMax_mem_resources();
      } else {
        setMax_mem_resources((Long)value);
      }
      break;

    case QUEUE_TIMEOUT_MS:
      if (value == null) {
        unsetQueue_timeout_ms();
      } else {
        setQueue_timeout_ms((Long)value);
      }
      break;

    case DEFAULT_QUERY_OPTIONS:
      if (value == null) {
        unsetDefault_query_options();
      } else {
        setDefault_query_options((String)value);
      }
      break;

    case MAX_QUERY_MEM_LIMIT:
      if (value == null) {
        unsetMax_query_mem_limit();
      } else {
        setMax_query_mem_limit((Long)value);
      }
      break;

    case MIN_QUERY_MEM_LIMIT:
      if (value == null) {
        unsetMin_query_mem_limit();
      } else {
        setMin_query_mem_limit((Long)value);
      }
      break;

    case CLAMP_MEM_LIMIT_QUERY_OPTION:
      if (value == null) {
        unsetClamp_mem_limit_query_option();
      } else {
        setClamp_mem_limit_query_option((Boolean)value);
      }
      break;

    case MAX_RUNNING_QUERIES_MULTIPLE:
      if (value == null) {
        unsetMax_running_queries_multiple();
      } else {
        setMax_running_queries_multiple((Double)value);
      }
      break;

    case MAX_QUEUED_QUERIES_MULTIPLE:
      if (value == null) {
        unsetMax_queued_queries_multiple();
      } else {
        setMax_queued_queries_multiple((Double)value);
      }
      break;

    case MAX_MEMORY_MULTIPLE:
      if (value == null) {
        unsetMax_memory_multiple();
      } else {
        setMax_memory_multiple((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_REQUESTS:
      return getMax_requests();

    case MAX_QUEUED:
      return getMax_queued();

    case MAX_MEM_RESOURCES:
      return getMax_mem_resources();

    case QUEUE_TIMEOUT_MS:
      return getQueue_timeout_ms();

    case DEFAULT_QUERY_OPTIONS:
      return getDefault_query_options();

    case MAX_QUERY_MEM_LIMIT:
      return getMax_query_mem_limit();

    case MIN_QUERY_MEM_LIMIT:
      return getMin_query_mem_limit();

    case CLAMP_MEM_LIMIT_QUERY_OPTION:
      return isClamp_mem_limit_query_option();

    case MAX_RUNNING_QUERIES_MULTIPLE:
      return getMax_running_queries_multiple();

    case MAX_QUEUED_QUERIES_MULTIPLE:
      return getMax_queued_queries_multiple();

    case MAX_MEMORY_MULTIPLE:
      return getMax_memory_multiple();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_REQUESTS:
      return isSetMax_requests();
    case MAX_QUEUED:
      return isSetMax_queued();
    case MAX_MEM_RESOURCES:
      return isSetMax_mem_resources();
    case QUEUE_TIMEOUT_MS:
      return isSetQueue_timeout_ms();
    case DEFAULT_QUERY_OPTIONS:
      return isSetDefault_query_options();
    case MAX_QUERY_MEM_LIMIT:
      return isSetMax_query_mem_limit();
    case MIN_QUERY_MEM_LIMIT:
      return isSetMin_query_mem_limit();
    case CLAMP_MEM_LIMIT_QUERY_OPTION:
      return isSetClamp_mem_limit_query_option();
    case MAX_RUNNING_QUERIES_MULTIPLE:
      return isSetMax_running_queries_multiple();
    case MAX_QUEUED_QUERIES_MULTIPLE:
      return isSetMax_queued_queries_multiple();
    case MAX_MEMORY_MULTIPLE:
      return isSetMax_memory_multiple();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPoolConfig)
      return this.equals((TPoolConfig)that);
    return false;
  }

  public boolean equals(TPoolConfig that) {
    if (that == null)
      return false;

    boolean this_present_max_requests = true;
    boolean that_present_max_requests = true;
    if (this_present_max_requests || that_present_max_requests) {
      if (!(this_present_max_requests && that_present_max_requests))
        return false;
      if (this.max_requests != that.max_requests)
        return false;
    }

    boolean this_present_max_queued = true;
    boolean that_present_max_queued = true;
    if (this_present_max_queued || that_present_max_queued) {
      if (!(this_present_max_queued && that_present_max_queued))
        return false;
      if (this.max_queued != that.max_queued)
        return false;
    }

    boolean this_present_max_mem_resources = true;
    boolean that_present_max_mem_resources = true;
    if (this_present_max_mem_resources || that_present_max_mem_resources) {
      if (!(this_present_max_mem_resources && that_present_max_mem_resources))
        return false;
      if (this.max_mem_resources != that.max_mem_resources)
        return false;
    }

    boolean this_present_queue_timeout_ms = true && this.isSetQueue_timeout_ms();
    boolean that_present_queue_timeout_ms = true && that.isSetQueue_timeout_ms();
    if (this_present_queue_timeout_ms || that_present_queue_timeout_ms) {
      if (!(this_present_queue_timeout_ms && that_present_queue_timeout_ms))
        return false;
      if (this.queue_timeout_ms != that.queue_timeout_ms)
        return false;
    }

    boolean this_present_default_query_options = true && this.isSetDefault_query_options();
    boolean that_present_default_query_options = true && that.isSetDefault_query_options();
    if (this_present_default_query_options || that_present_default_query_options) {
      if (!(this_present_default_query_options && that_present_default_query_options))
        return false;
      if (!this.default_query_options.equals(that.default_query_options))
        return false;
    }

    boolean this_present_max_query_mem_limit = true;
    boolean that_present_max_query_mem_limit = true;
    if (this_present_max_query_mem_limit || that_present_max_query_mem_limit) {
      if (!(this_present_max_query_mem_limit && that_present_max_query_mem_limit))
        return false;
      if (this.max_query_mem_limit != that.max_query_mem_limit)
        return false;
    }

    boolean this_present_min_query_mem_limit = true;
    boolean that_present_min_query_mem_limit = true;
    if (this_present_min_query_mem_limit || that_present_min_query_mem_limit) {
      if (!(this_present_min_query_mem_limit && that_present_min_query_mem_limit))
        return false;
      if (this.min_query_mem_limit != that.min_query_mem_limit)
        return false;
    }

    boolean this_present_clamp_mem_limit_query_option = true;
    boolean that_present_clamp_mem_limit_query_option = true;
    if (this_present_clamp_mem_limit_query_option || that_present_clamp_mem_limit_query_option) {
      if (!(this_present_clamp_mem_limit_query_option && that_present_clamp_mem_limit_query_option))
        return false;
      if (this.clamp_mem_limit_query_option != that.clamp_mem_limit_query_option)
        return false;
    }

    boolean this_present_max_running_queries_multiple = true;
    boolean that_present_max_running_queries_multiple = true;
    if (this_present_max_running_queries_multiple || that_present_max_running_queries_multiple) {
      if (!(this_present_max_running_queries_multiple && that_present_max_running_queries_multiple))
        return false;
      if (this.max_running_queries_multiple != that.max_running_queries_multiple)
        return false;
    }

    boolean this_present_max_queued_queries_multiple = true;
    boolean that_present_max_queued_queries_multiple = true;
    if (this_present_max_queued_queries_multiple || that_present_max_queued_queries_multiple) {
      if (!(this_present_max_queued_queries_multiple && that_present_max_queued_queries_multiple))
        return false;
      if (this.max_queued_queries_multiple != that.max_queued_queries_multiple)
        return false;
    }

    boolean this_present_max_memory_multiple = true;
    boolean that_present_max_memory_multiple = true;
    if (this_present_max_memory_multiple || that_present_max_memory_multiple) {
      if (!(this_present_max_memory_multiple && that_present_max_memory_multiple))
        return false;
      if (this.max_memory_multiple != that.max_memory_multiple)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_max_requests = true;
    list.add(present_max_requests);
    if (present_max_requests)
      list.add(max_requests);

    boolean present_max_queued = true;
    list.add(present_max_queued);
    if (present_max_queued)
      list.add(max_queued);

    boolean present_max_mem_resources = true;
    list.add(present_max_mem_resources);
    if (present_max_mem_resources)
      list.add(max_mem_resources);

    boolean present_queue_timeout_ms = true && (isSetQueue_timeout_ms());
    list.add(present_queue_timeout_ms);
    if (present_queue_timeout_ms)
      list.add(queue_timeout_ms);

    boolean present_default_query_options = true && (isSetDefault_query_options());
    list.add(present_default_query_options);
    if (present_default_query_options)
      list.add(default_query_options);

    boolean present_max_query_mem_limit = true;
    list.add(present_max_query_mem_limit);
    if (present_max_query_mem_limit)
      list.add(max_query_mem_limit);

    boolean present_min_query_mem_limit = true;
    list.add(present_min_query_mem_limit);
    if (present_min_query_mem_limit)
      list.add(min_query_mem_limit);

    boolean present_clamp_mem_limit_query_option = true;
    list.add(present_clamp_mem_limit_query_option);
    if (present_clamp_mem_limit_query_option)
      list.add(clamp_mem_limit_query_option);

    boolean present_max_running_queries_multiple = true;
    list.add(present_max_running_queries_multiple);
    if (present_max_running_queries_multiple)
      list.add(max_running_queries_multiple);

    boolean present_max_queued_queries_multiple = true;
    list.add(present_max_queued_queries_multiple);
    if (present_max_queued_queries_multiple)
      list.add(max_queued_queries_multiple);

    boolean present_max_memory_multiple = true;
    list.add(present_max_memory_multiple);
    if (present_max_memory_multiple)
      list.add(max_memory_multiple);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPoolConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMax_requests()).compareTo(other.isSetMax_requests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_requests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_requests, other.max_requests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_queued()).compareTo(other.isSetMax_queued());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_queued()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_queued, other.max_queued);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_mem_resources()).compareTo(other.isSetMax_mem_resources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_mem_resources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_mem_resources, other.max_mem_resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueue_timeout_ms()).compareTo(other.isSetQueue_timeout_ms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueue_timeout_ms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queue_timeout_ms, other.queue_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefault_query_options()).compareTo(other.isSetDefault_query_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefault_query_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_query_options, other.default_query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_query_mem_limit()).compareTo(other.isSetMax_query_mem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_query_mem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_query_mem_limit, other.max_query_mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin_query_mem_limit()).compareTo(other.isSetMin_query_mem_limit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_query_mem_limit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_query_mem_limit, other.min_query_mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClamp_mem_limit_query_option()).compareTo(other.isSetClamp_mem_limit_query_option());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClamp_mem_limit_query_option()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clamp_mem_limit_query_option, other.clamp_mem_limit_query_option);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_running_queries_multiple()).compareTo(other.isSetMax_running_queries_multiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_running_queries_multiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_running_queries_multiple, other.max_running_queries_multiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_queued_queries_multiple()).compareTo(other.isSetMax_queued_queries_multiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_queued_queries_multiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_queued_queries_multiple, other.max_queued_queries_multiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_memory_multiple()).compareTo(other.isSetMax_memory_multiple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_memory_multiple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_memory_multiple, other.max_memory_multiple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPoolConfig(");
    boolean first = true;

    sb.append("max_requests:");
    sb.append(this.max_requests);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_queued:");
    sb.append(this.max_queued);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_mem_resources:");
    sb.append(this.max_mem_resources);
    first = false;
    if (isSetQueue_timeout_ms()) {
      if (!first) sb.append(", ");
      sb.append("queue_timeout_ms:");
      sb.append(this.queue_timeout_ms);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("default_query_options:");
    if (this.default_query_options == null) {
      sb.append("null");
    } else {
      sb.append(this.default_query_options);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_query_mem_limit:");
    sb.append(this.max_query_mem_limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_query_mem_limit:");
    sb.append(this.min_query_mem_limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clamp_mem_limit_query_option:");
    sb.append(this.clamp_mem_limit_query_option);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_running_queries_multiple:");
    sb.append(this.max_running_queries_multiple);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_queued_queries_multiple:");
    sb.append(this.max_queued_queries_multiple);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_memory_multiple:");
    sb.append(this.max_memory_multiple);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetMax_requests()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_requests' is unset! Struct:" + toString());
    }

    if (!isSetMax_queued()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_queued' is unset! Struct:" + toString());
    }

    if (!isSetMax_mem_resources()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_mem_resources' is unset! Struct:" + toString());
    }

    if (!isSetDefault_query_options()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'default_query_options' is unset! Struct:" + toString());
    }

    if (!isSetMax_query_mem_limit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_query_mem_limit' is unset! Struct:" + toString());
    }

    if (!isSetMin_query_mem_limit()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'min_query_mem_limit' is unset! Struct:" + toString());
    }

    if (!isSetClamp_mem_limit_query_option()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clamp_mem_limit_query_option' is unset! Struct:" + toString());
    }

    if (!isSetMax_running_queries_multiple()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_running_queries_multiple' is unset! Struct:" + toString());
    }

    if (!isSetMax_queued_queries_multiple()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_queued_queries_multiple' is unset! Struct:" + toString());
    }

    if (!isSetMax_memory_multiple()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_memory_multiple' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPoolConfigStandardSchemeFactory implements SchemeFactory {
    public TPoolConfigStandardScheme getScheme() {
      return new TPoolConfigStandardScheme();
    }
  }

  private static class TPoolConfigStandardScheme extends StandardScheme<TPoolConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPoolConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_requests = iprot.readI64();
              struct.setMax_requestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_QUEUED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_queued = iprot.readI64();
              struct.setMax_queuedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_MEM_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_mem_resources = iprot.readI64();
              struct.setMax_mem_resourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUEUE_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queue_timeout_ms = iprot.readI64();
              struct.setQueue_timeout_msIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEFAULT_QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.default_query_options = iprot.readString();
              struct.setDefault_query_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_QUERY_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_query_mem_limit = iprot.readI64();
              struct.setMax_query_mem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MIN_QUERY_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_query_mem_limit = iprot.readI64();
              struct.setMin_query_mem_limitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLAMP_MEM_LIMIT_QUERY_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clamp_mem_limit_query_option = iprot.readBool();
              struct.setClamp_mem_limit_query_optionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_RUNNING_QUERIES_MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_running_queries_multiple = iprot.readDouble();
              struct.setMax_running_queries_multipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAX_QUEUED_QUERIES_MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_queued_queries_multiple = iprot.readDouble();
              struct.setMax_queued_queries_multipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_MEMORY_MULTIPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_memory_multiple = iprot.readI64();
              struct.setMax_memory_multipleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPoolConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_REQUESTS_FIELD_DESC);
      oprot.writeI64(struct.max_requests);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_QUEUED_FIELD_DESC);
      oprot.writeI64(struct.max_queued);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_MEM_RESOURCES_FIELD_DESC);
      oprot.writeI64(struct.max_mem_resources);
      oprot.writeFieldEnd();
      if (struct.isSetQueue_timeout_ms()) {
        oprot.writeFieldBegin(QUEUE_TIMEOUT_MS_FIELD_DESC);
        oprot.writeI64(struct.queue_timeout_ms);
        oprot.writeFieldEnd();
      }
      if (struct.default_query_options != null) {
        oprot.writeFieldBegin(DEFAULT_QUERY_OPTIONS_FIELD_DESC);
        oprot.writeString(struct.default_query_options);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_QUERY_MEM_LIMIT_FIELD_DESC);
      oprot.writeI64(struct.max_query_mem_limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_QUERY_MEM_LIMIT_FIELD_DESC);
      oprot.writeI64(struct.min_query_mem_limit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLAMP_MEM_LIMIT_QUERY_OPTION_FIELD_DESC);
      oprot.writeBool(struct.clamp_mem_limit_query_option);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_RUNNING_QUERIES_MULTIPLE_FIELD_DESC);
      oprot.writeDouble(struct.max_running_queries_multiple);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_QUEUED_QUERIES_MULTIPLE_FIELD_DESC);
      oprot.writeDouble(struct.max_queued_queries_multiple);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_MEMORY_MULTIPLE_FIELD_DESC);
      oprot.writeI64(struct.max_memory_multiple);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPoolConfigTupleSchemeFactory implements SchemeFactory {
    public TPoolConfigTupleScheme getScheme() {
      return new TPoolConfigTupleScheme();
    }
  }

  private static class TPoolConfigTupleScheme extends TupleScheme<TPoolConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPoolConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.max_requests);
      oprot.writeI64(struct.max_queued);
      oprot.writeI64(struct.max_mem_resources);
      oprot.writeString(struct.default_query_options);
      oprot.writeI64(struct.max_query_mem_limit);
      oprot.writeI64(struct.min_query_mem_limit);
      oprot.writeBool(struct.clamp_mem_limit_query_option);
      oprot.writeDouble(struct.max_running_queries_multiple);
      oprot.writeDouble(struct.max_queued_queries_multiple);
      oprot.writeI64(struct.max_memory_multiple);
      BitSet optionals = new BitSet();
      if (struct.isSetQueue_timeout_ms()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetQueue_timeout_ms()) {
        oprot.writeI64(struct.queue_timeout_ms);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPoolConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.max_requests = iprot.readI64();
      struct.setMax_requestsIsSet(true);
      struct.max_queued = iprot.readI64();
      struct.setMax_queuedIsSet(true);
      struct.max_mem_resources = iprot.readI64();
      struct.setMax_mem_resourcesIsSet(true);
      struct.default_query_options = iprot.readString();
      struct.setDefault_query_optionsIsSet(true);
      struct.max_query_mem_limit = iprot.readI64();
      struct.setMax_query_mem_limitIsSet(true);
      struct.min_query_mem_limit = iprot.readI64();
      struct.setMin_query_mem_limitIsSet(true);
      struct.clamp_mem_limit_query_option = iprot.readBool();
      struct.setClamp_mem_limit_query_optionIsSet(true);
      struct.max_running_queries_multiple = iprot.readDouble();
      struct.setMax_running_queries_multipleIsSet(true);
      struct.max_queued_queries_multiple = iprot.readDouble();
      struct.setMax_queued_queries_multipleIsSet(true);
      struct.max_memory_multiple = iprot.readI64();
      struct.setMax_memory_multipleIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.queue_timeout_ms = iprot.readI64();
        struct.setQueue_timeout_msIsSet(true);
      }
    }
  }

}

