/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TTableStats implements org.apache.thrift.TBase<TTableStats, TTableStats._Fields>, java.io.Serializable, Cloneable, Comparable<TTableStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableStats");

  private static final org.apache.thrift.protocol.TField NUM_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_rows", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_FILE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("total_file_bytes", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTableStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTableStatsTupleSchemeFactory());
  }

  private long num_rows; // required
  private long total_file_bytes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_ROWS((short)1, "num_rows"),
    TOTAL_FILE_BYTES((short)2, "total_file_bytes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_ROWS
          return NUM_ROWS;
        case 2: // TOTAL_FILE_BYTES
          return TOTAL_FILE_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_ROWS_ISSET_ID = 0;
  private static final int __TOTAL_FILE_BYTES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TOTAL_FILE_BYTES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_ROWS, new org.apache.thrift.meta_data.FieldMetaData("num_rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_FILE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("total_file_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableStats.class, metaDataMap);
  }

  public TTableStats() {
  }

  public TTableStats(
    long num_rows)
  {
    this();
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableStats(TTableStats other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_rows = other.num_rows;
    this.total_file_bytes = other.total_file_bytes;
  }

  public TTableStats deepCopy() {
    return new TTableStats(this);
  }

  @Override
  public void clear() {
    setNum_rowsIsSet(false);
    this.num_rows = 0;
    setTotal_file_bytesIsSet(false);
    this.total_file_bytes = 0;
  }

  public long getNum_rows() {
    return this.num_rows;
  }

  public void setNum_rows(long num_rows) {
    this.num_rows = num_rows;
    setNum_rowsIsSet(true);
  }

  public void unsetNum_rows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  /** Returns true if field num_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_rows() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_ROWS_ISSET_ID);
  }

  public void setNum_rowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ROWS_ISSET_ID, value);
  }

  public long getTotal_file_bytes() {
    return this.total_file_bytes;
  }

  public void setTotal_file_bytes(long total_file_bytes) {
    this.total_file_bytes = total_file_bytes;
    setTotal_file_bytesIsSet(true);
  }

  public void unsetTotal_file_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_FILE_BYTES_ISSET_ID);
  }

  /** Returns true if field total_file_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_file_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_FILE_BYTES_ISSET_ID);
  }

  public void setTotal_file_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_FILE_BYTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_ROWS:
      if (value == null) {
        unsetNum_rows();
      } else {
        setNum_rows((Long)value);
      }
      break;

    case TOTAL_FILE_BYTES:
      if (value == null) {
        unsetTotal_file_bytes();
      } else {
        setTotal_file_bytes((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_ROWS:
      return getNum_rows();

    case TOTAL_FILE_BYTES:
      return getTotal_file_bytes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_ROWS:
      return isSetNum_rows();
    case TOTAL_FILE_BYTES:
      return isSetTotal_file_bytes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTableStats)
      return this.equals((TTableStats)that);
    return false;
  }

  public boolean equals(TTableStats that) {
    if (that == null)
      return false;

    boolean this_present_num_rows = true;
    boolean that_present_num_rows = true;
    if (this_present_num_rows || that_present_num_rows) {
      if (!(this_present_num_rows && that_present_num_rows))
        return false;
      if (this.num_rows != that.num_rows)
        return false;
    }

    boolean this_present_total_file_bytes = true && this.isSetTotal_file_bytes();
    boolean that_present_total_file_bytes = true && that.isSetTotal_file_bytes();
    if (this_present_total_file_bytes || that_present_total_file_bytes) {
      if (!(this_present_total_file_bytes && that_present_total_file_bytes))
        return false;
      if (this.total_file_bytes != that.total_file_bytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_num_rows = true;
    list.add(present_num_rows);
    if (present_num_rows)
      list.add(num_rows);

    boolean present_total_file_bytes = true && (isSetTotal_file_bytes());
    list.add(present_total_file_bytes);
    if (present_total_file_bytes)
      list.add(total_file_bytes);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTableStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNum_rows()).compareTo(other.isSetNum_rows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_rows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_rows, other.num_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_file_bytes()).compareTo(other.isSetTotal_file_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_file_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_file_bytes, other.total_file_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTableStats(");
    boolean first = true;

    sb.append("num_rows:");
    sb.append(this.num_rows);
    first = false;
    if (isSetTotal_file_bytes()) {
      if (!first) sb.append(", ");
      sb.append("total_file_bytes:");
      sb.append(this.total_file_bytes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetNum_rows()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_rows' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableStatsStandardSchemeFactory implements SchemeFactory {
    public TTableStatsStandardScheme getScheme() {
      return new TTableStatsStandardScheme();
    }
  }

  private static class TTableStatsStandardScheme extends StandardScheme<TTableStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_rows = iprot.readI64();
              struct.setNum_rowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_FILE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_file_bytes = iprot.readI64();
              struct.setTotal_file_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);
      oprot.writeI64(struct.num_rows);
      oprot.writeFieldEnd();
      if (struct.isSetTotal_file_bytes()) {
        oprot.writeFieldBegin(TOTAL_FILE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.total_file_bytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableStatsTupleSchemeFactory implements SchemeFactory {
    public TTableStatsTupleScheme getScheme() {
      return new TTableStatsTupleScheme();
    }
  }

  private static class TTableStatsTupleScheme extends TupleScheme<TTableStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.num_rows);
      BitSet optionals = new BitSet();
      if (struct.isSetTotal_file_bytes()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTotal_file_bytes()) {
        oprot.writeI64(struct.total_file_bytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.num_rows = iprot.readI64();
      struct.setNum_rowsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.total_file_bytes = iprot.readI64();
        struct.setTotal_file_bytesIsSet(true);
      }
    }
  }

}

