/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TAlterDbParams implements org.apache.thrift.TBase<TAlterDbParams, TAlterDbParams._Fields>, java.io.Serializable, Cloneable, Comparable<TAlterDbParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlterDbParams");

  private static final org.apache.thrift.protocol.TField ALTER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SET_OWNER_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("set_owner_params", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAlterDbParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAlterDbParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see TAlterDbType
   */
  public TAlterDbType alter_type; // required
  public String db; // required
  public TAlterDbSetOwnerParams set_owner_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TAlterDbType
     */
    ALTER_TYPE((short)1, "alter_type"),
    DB((short)2, "db"),
    SET_OWNER_PARAMS((short)3, "set_owner_params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALTER_TYPE
          return ALTER_TYPE;
        case 2: // DB
          return DB;
        case 3: // SET_OWNER_PARAMS
          return SET_OWNER_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SET_OWNER_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALTER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("alter_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TAlterDbType.class)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SET_OWNER_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("set_owner_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterDbSetOwnerParams.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlterDbParams.class, metaDataMap);
  }

  public TAlterDbParams() {
  }

  public TAlterDbParams(
    TAlterDbType alter_type,
    String db)
  {
    this();
    this.alter_type = alter_type;
    this.db = db;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlterDbParams(TAlterDbParams other) {
    if (other.isSetAlter_type()) {
      this.alter_type = other.alter_type;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetSet_owner_params()) {
      this.set_owner_params = new TAlterDbSetOwnerParams(other.set_owner_params);
    }
  }

  public TAlterDbParams deepCopy() {
    return new TAlterDbParams(this);
  }

  @Override
  public void clear() {
    this.alter_type = null;
    this.db = null;
    this.set_owner_params = null;
  }

  /**
   * 
   * @see TAlterDbType
   */
  public TAlterDbType getAlter_type() {
    return this.alter_type;
  }

  /**
   * 
   * @see TAlterDbType
   */
  public TAlterDbParams setAlter_type(TAlterDbType alter_type) {
    this.alter_type = alter_type;
    return this;
  }

  public void unsetAlter_type() {
    this.alter_type = null;
  }

  /** Returns true if field alter_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAlter_type() {
    return this.alter_type != null;
  }

  public void setAlter_typeIsSet(boolean value) {
    if (!value) {
      this.alter_type = null;
    }
  }

  public String getDb() {
    return this.db;
  }

  public TAlterDbParams setDb(String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  public TAlterDbSetOwnerParams getSet_owner_params() {
    return this.set_owner_params;
  }

  public TAlterDbParams setSet_owner_params(TAlterDbSetOwnerParams set_owner_params) {
    this.set_owner_params = set_owner_params;
    return this;
  }

  public void unsetSet_owner_params() {
    this.set_owner_params = null;
  }

  /** Returns true if field set_owner_params is set (has been assigned a value) and false otherwise */
  public boolean isSetSet_owner_params() {
    return this.set_owner_params != null;
  }

  public void setSet_owner_paramsIsSet(boolean value) {
    if (!value) {
      this.set_owner_params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALTER_TYPE:
      if (value == null) {
        unsetAlter_type();
      } else {
        setAlter_type((TAlterDbType)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((String)value);
      }
      break;

    case SET_OWNER_PARAMS:
      if (value == null) {
        unsetSet_owner_params();
      } else {
        setSet_owner_params((TAlterDbSetOwnerParams)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALTER_TYPE:
      return getAlter_type();

    case DB:
      return getDb();

    case SET_OWNER_PARAMS:
      return getSet_owner_params();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALTER_TYPE:
      return isSetAlter_type();
    case DB:
      return isSetDb();
    case SET_OWNER_PARAMS:
      return isSetSet_owner_params();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAlterDbParams)
      return this.equals((TAlterDbParams)that);
    return false;
  }

  public boolean equals(TAlterDbParams that) {
    if (that == null)
      return false;

    boolean this_present_alter_type = true && this.isSetAlter_type();
    boolean that_present_alter_type = true && that.isSetAlter_type();
    if (this_present_alter_type || that_present_alter_type) {
      if (!(this_present_alter_type && that_present_alter_type))
        return false;
      if (!this.alter_type.equals(that.alter_type))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_set_owner_params = true && this.isSetSet_owner_params();
    boolean that_present_set_owner_params = true && that.isSetSet_owner_params();
    if (this_present_set_owner_params || that_present_set_owner_params) {
      if (!(this_present_set_owner_params && that_present_set_owner_params))
        return false;
      if (!this.set_owner_params.equals(that.set_owner_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_alter_type = true && (isSetAlter_type());
    list.add(present_alter_type);
    if (present_alter_type)
      list.add(alter_type.getValue());

    boolean present_db = true && (isSetDb());
    list.add(present_db);
    if (present_db)
      list.add(db);

    boolean present_set_owner_params = true && (isSetSet_owner_params());
    list.add(present_set_owner_params);
    if (present_set_owner_params)
      list.add(set_owner_params);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAlterDbParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAlter_type()).compareTo(other.isSetAlter_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlter_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_type, other.alter_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDb()).compareTo(other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSet_owner_params()).compareTo(other.isSetSet_owner_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSet_owner_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_owner_params, other.set_owner_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAlterDbParams(");
    boolean first = true;

    sb.append("alter_type:");
    if (this.alter_type == null) {
      sb.append("null");
    } else {
      sb.append(this.alter_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db:");
    if (this.db == null) {
      sb.append("null");
    } else {
      sb.append(this.db);
    }
    first = false;
    if (isSetSet_owner_params()) {
      if (!first) sb.append(", ");
      sb.append("set_owner_params:");
      if (this.set_owner_params == null) {
        sb.append("null");
      } else {
        sb.append(this.set_owner_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (alter_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'alter_type' was not present! Struct: " + toString());
    }
    if (db == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (set_owner_params != null) {
      set_owner_params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlterDbParamsStandardSchemeFactory implements SchemeFactory {
    public TAlterDbParamsStandardScheme getScheme() {
      return new TAlterDbParamsStandardScheme();
    }
  }

  private static class TAlterDbParamsStandardScheme extends StandardScheme<TAlterDbParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlterDbParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALTER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alter_type = org.apache.impala.thrift.TAlterDbType.findByValue(iprot.readI32());
              struct.setAlter_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SET_OWNER_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.set_owner_params = new TAlterDbSetOwnerParams();
              struct.set_owner_params.read(iprot);
              struct.setSet_owner_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlterDbParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.alter_type != null) {
        oprot.writeFieldBegin(ALTER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.alter_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(struct.db);
        oprot.writeFieldEnd();
      }
      if (struct.set_owner_params != null) {
        if (struct.isSetSet_owner_params()) {
          oprot.writeFieldBegin(SET_OWNER_PARAMS_FIELD_DESC);
          struct.set_owner_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlterDbParamsTupleSchemeFactory implements SchemeFactory {
    public TAlterDbParamsTupleScheme getScheme() {
      return new TAlterDbParamsTupleScheme();
    }
  }

  private static class TAlterDbParamsTupleScheme extends TupleScheme<TAlterDbParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlterDbParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.alter_type.getValue());
      oprot.writeString(struct.db);
      BitSet optionals = new BitSet();
      if (struct.isSetSet_owner_params()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSet_owner_params()) {
        struct.set_owner_params.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlterDbParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.alter_type = org.apache.impala.thrift.TAlterDbType.findByValue(iprot.readI32());
      struct.setAlter_typeIsSet(true);
      struct.db = iprot.readString();
      struct.setDbIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.set_owner_params = new TAlterDbSetOwnerParams();
        struct.set_owner_params.read(iprot);
        struct.setSet_owner_paramsIsSet(true);
      }
    }
  }

}

