/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TPartialTableInfo implements org.apache.thrift.TBase<TPartialTableInfo, TPartialTableInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TPartialTableInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPartialTableInfo");

  private static final org.apache.thrift.protocol.TField HMS_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("hms_table", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_stats", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STORAGE_METADATA_LOAD_TIME_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_metadata_load_time_ns", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NETWORK_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("network_addresses", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPartialTableInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPartialTableInfoTupleSchemeFactory());
  }

  private org.apache.hadoop.hive.metastore.api.Table hms_table; // optional
  private List<TPartialPartitionInfo> partitions; // optional
  private List<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj> column_stats; // optional
  private long storage_metadata_load_time_ns; // optional
  private List<org.apache.impala.thrift.TNetworkAddress> network_addresses; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HMS_TABLE((short)1, "hms_table"),
    PARTITIONS((short)2, "partitions"),
    COLUMN_STATS((short)3, "column_stats"),
    STORAGE_METADATA_LOAD_TIME_NS((short)4, "storage_metadata_load_time_ns"),
    NETWORK_ADDRESSES((short)7, "network_addresses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HMS_TABLE
          return HMS_TABLE;
        case 2: // PARTITIONS
          return PARTITIONS;
        case 3: // COLUMN_STATS
          return COLUMN_STATS;
        case 4: // STORAGE_METADATA_LOAD_TIME_NS
          return STORAGE_METADATA_LOAD_TIME_NS;
        case 7: // NETWORK_ADDRESSES
          return NETWORK_ADDRESSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STORAGE_METADATA_LOAD_TIME_NS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HMS_TABLE,_Fields.PARTITIONS,_Fields.COLUMN_STATS,_Fields.STORAGE_METADATA_LOAD_TIME_NS,_Fields.NETWORK_ADDRESSES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HMS_TABLE, new org.apache.thrift.meta_data.FieldMetaData("hms_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hadoop.hive.metastore.api.Table.class)));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartialPartitionInfo.class))));
    tmpMap.put(_Fields.COLUMN_STATS, new org.apache.thrift.meta_data.FieldMetaData("column_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj.class))));
    tmpMap.put(_Fields.STORAGE_METADATA_LOAD_TIME_NS, new org.apache.thrift.meta_data.FieldMetaData("storage_metadata_load_time_ns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NETWORK_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("network_addresses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPartialTableInfo.class, metaDataMap);
  }

  public TPartialTableInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPartialTableInfo(TPartialTableInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHms_table()) {
      this.hms_table = new org.apache.hadoop.hive.metastore.api.Table(other.hms_table);
    }
    if (other.isSetPartitions()) {
      List<TPartialPartitionInfo> __this__partitions = new ArrayList<TPartialPartitionInfo>(other.partitions.size());
      for (TPartialPartitionInfo other_element : other.partitions) {
        __this__partitions.add(new TPartialPartitionInfo(other_element));
      }
      this.partitions = __this__partitions;
    }
    if (other.isSetColumn_stats()) {
      List<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj> __this__column_stats = new ArrayList<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj>(other.column_stats.size());
      for (org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj other_element : other.column_stats) {
        __this__column_stats.add(new org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj(other_element));
      }
      this.column_stats = __this__column_stats;
    }
    this.storage_metadata_load_time_ns = other.storage_metadata_load_time_ns;
    if (other.isSetNetwork_addresses()) {
      List<org.apache.impala.thrift.TNetworkAddress> __this__network_addresses = new ArrayList<org.apache.impala.thrift.TNetworkAddress>(other.network_addresses.size());
      for (org.apache.impala.thrift.TNetworkAddress other_element : other.network_addresses) {
        __this__network_addresses.add(new org.apache.impala.thrift.TNetworkAddress(other_element));
      }
      this.network_addresses = __this__network_addresses;
    }
  }

  public TPartialTableInfo deepCopy() {
    return new TPartialTableInfo(this);
  }

  @Override
  public void clear() {
    this.hms_table = null;
    this.partitions = null;
    this.column_stats = null;
    setStorage_metadata_load_time_nsIsSet(false);
    this.storage_metadata_load_time_ns = 0;
    this.network_addresses = null;
  }

  public org.apache.hadoop.hive.metastore.api.Table getHms_table() {
    return this.hms_table;
  }

  public void setHms_table(org.apache.hadoop.hive.metastore.api.Table hms_table) {
    this.hms_table = hms_table;
  }

  public void unsetHms_table() {
    this.hms_table = null;
  }

  /** Returns true if field hms_table is set (has been assigned a value) and false otherwise */
  public boolean isSetHms_table() {
    return this.hms_table != null;
  }

  public void setHms_tableIsSet(boolean value) {
    if (!value) {
      this.hms_table = null;
    }
  }

  public int getPartitionsSize() {
    return (this.partitions == null) ? 0 : this.partitions.size();
  }

  public java.util.Iterator<TPartialPartitionInfo> getPartitionsIterator() {
    return (this.partitions == null) ? null : this.partitions.iterator();
  }

  public void addToPartitions(TPartialPartitionInfo elem) {
    if (this.partitions == null) {
      this.partitions = new ArrayList<TPartialPartitionInfo>();
    }
    this.partitions.add(elem);
  }

  public List<TPartialPartitionInfo> getPartitions() {
    return this.partitions;
  }

  public void setPartitions(List<TPartialPartitionInfo> partitions) {
    this.partitions = partitions;
  }

  public void unsetPartitions() {
    this.partitions = null;
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return this.partitions != null;
  }

  public void setPartitionsIsSet(boolean value) {
    if (!value) {
      this.partitions = null;
    }
  }

  public int getColumn_statsSize() {
    return (this.column_stats == null) ? 0 : this.column_stats.size();
  }

  public java.util.Iterator<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj> getColumn_statsIterator() {
    return (this.column_stats == null) ? null : this.column_stats.iterator();
  }

  public void addToColumn_stats(org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj elem) {
    if (this.column_stats == null) {
      this.column_stats = new ArrayList<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj>();
    }
    this.column_stats.add(elem);
  }

  public List<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj> getColumn_stats() {
    return this.column_stats;
  }

  public void setColumn_stats(List<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj> column_stats) {
    this.column_stats = column_stats;
  }

  public void unsetColumn_stats() {
    this.column_stats = null;
  }

  /** Returns true if field column_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_stats() {
    return this.column_stats != null;
  }

  public void setColumn_statsIsSet(boolean value) {
    if (!value) {
      this.column_stats = null;
    }
  }

  public long getStorage_metadata_load_time_ns() {
    return this.storage_metadata_load_time_ns;
  }

  public void setStorage_metadata_load_time_ns(long storage_metadata_load_time_ns) {
    this.storage_metadata_load_time_ns = storage_metadata_load_time_ns;
    setStorage_metadata_load_time_nsIsSet(true);
  }

  public void unsetStorage_metadata_load_time_ns() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORAGE_METADATA_LOAD_TIME_NS_ISSET_ID);
  }

  /** Returns true if field storage_metadata_load_time_ns is set (has been assigned a value) and false otherwise */
  public boolean isSetStorage_metadata_load_time_ns() {
    return EncodingUtils.testBit(__isset_bitfield, __STORAGE_METADATA_LOAD_TIME_NS_ISSET_ID);
  }

  public void setStorage_metadata_load_time_nsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORAGE_METADATA_LOAD_TIME_NS_ISSET_ID, value);
  }

  public int getNetwork_addressesSize() {
    return (this.network_addresses == null) ? 0 : this.network_addresses.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TNetworkAddress> getNetwork_addressesIterator() {
    return (this.network_addresses == null) ? null : this.network_addresses.iterator();
  }

  public void addToNetwork_addresses(org.apache.impala.thrift.TNetworkAddress elem) {
    if (this.network_addresses == null) {
      this.network_addresses = new ArrayList<org.apache.impala.thrift.TNetworkAddress>();
    }
    this.network_addresses.add(elem);
  }

  public List<org.apache.impala.thrift.TNetworkAddress> getNetwork_addresses() {
    return this.network_addresses;
  }

  public void setNetwork_addresses(List<org.apache.impala.thrift.TNetworkAddress> network_addresses) {
    this.network_addresses = network_addresses;
  }

  public void unsetNetwork_addresses() {
    this.network_addresses = null;
  }

  /** Returns true if field network_addresses is set (has been assigned a value) and false otherwise */
  public boolean isSetNetwork_addresses() {
    return this.network_addresses != null;
  }

  public void setNetwork_addressesIsSet(boolean value) {
    if (!value) {
      this.network_addresses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HMS_TABLE:
      if (value == null) {
        unsetHms_table();
      } else {
        setHms_table((org.apache.hadoop.hive.metastore.api.Table)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((List<TPartialPartitionInfo>)value);
      }
      break;

    case COLUMN_STATS:
      if (value == null) {
        unsetColumn_stats();
      } else {
        setColumn_stats((List<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj>)value);
      }
      break;

    case STORAGE_METADATA_LOAD_TIME_NS:
      if (value == null) {
        unsetStorage_metadata_load_time_ns();
      } else {
        setStorage_metadata_load_time_ns((Long)value);
      }
      break;

    case NETWORK_ADDRESSES:
      if (value == null) {
        unsetNetwork_addresses();
      } else {
        setNetwork_addresses((List<org.apache.impala.thrift.TNetworkAddress>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HMS_TABLE:
      return getHms_table();

    case PARTITIONS:
      return getPartitions();

    case COLUMN_STATS:
      return getColumn_stats();

    case STORAGE_METADATA_LOAD_TIME_NS:
      return getStorage_metadata_load_time_ns();

    case NETWORK_ADDRESSES:
      return getNetwork_addresses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HMS_TABLE:
      return isSetHms_table();
    case PARTITIONS:
      return isSetPartitions();
    case COLUMN_STATS:
      return isSetColumn_stats();
    case STORAGE_METADATA_LOAD_TIME_NS:
      return isSetStorage_metadata_load_time_ns();
    case NETWORK_ADDRESSES:
      return isSetNetwork_addresses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPartialTableInfo)
      return this.equals((TPartialTableInfo)that);
    return false;
  }

  public boolean equals(TPartialTableInfo that) {
    if (that == null)
      return false;

    boolean this_present_hms_table = true && this.isSetHms_table();
    boolean that_present_hms_table = true && that.isSetHms_table();
    if (this_present_hms_table || that_present_hms_table) {
      if (!(this_present_hms_table && that_present_hms_table))
        return false;
      if (!this.hms_table.equals(that.hms_table))
        return false;
    }

    boolean this_present_partitions = true && this.isSetPartitions();
    boolean that_present_partitions = true && that.isSetPartitions();
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (!this.partitions.equals(that.partitions))
        return false;
    }

    boolean this_present_column_stats = true && this.isSetColumn_stats();
    boolean that_present_column_stats = true && that.isSetColumn_stats();
    if (this_present_column_stats || that_present_column_stats) {
      if (!(this_present_column_stats && that_present_column_stats))
        return false;
      if (!this.column_stats.equals(that.column_stats))
        return false;
    }

    boolean this_present_storage_metadata_load_time_ns = true && this.isSetStorage_metadata_load_time_ns();
    boolean that_present_storage_metadata_load_time_ns = true && that.isSetStorage_metadata_load_time_ns();
    if (this_present_storage_metadata_load_time_ns || that_present_storage_metadata_load_time_ns) {
      if (!(this_present_storage_metadata_load_time_ns && that_present_storage_metadata_load_time_ns))
        return false;
      if (this.storage_metadata_load_time_ns != that.storage_metadata_load_time_ns)
        return false;
    }

    boolean this_present_network_addresses = true && this.isSetNetwork_addresses();
    boolean that_present_network_addresses = true && that.isSetNetwork_addresses();
    if (this_present_network_addresses || that_present_network_addresses) {
      if (!(this_present_network_addresses && that_present_network_addresses))
        return false;
      if (!this.network_addresses.equals(that.network_addresses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hms_table = true && (isSetHms_table());
    list.add(present_hms_table);
    if (present_hms_table)
      list.add(hms_table);

    boolean present_partitions = true && (isSetPartitions());
    list.add(present_partitions);
    if (present_partitions)
      list.add(partitions);

    boolean present_column_stats = true && (isSetColumn_stats());
    list.add(present_column_stats);
    if (present_column_stats)
      list.add(column_stats);

    boolean present_storage_metadata_load_time_ns = true && (isSetStorage_metadata_load_time_ns());
    list.add(present_storage_metadata_load_time_ns);
    if (present_storage_metadata_load_time_ns)
      list.add(storage_metadata_load_time_ns);

    boolean present_network_addresses = true && (isSetNetwork_addresses());
    list.add(present_network_addresses);
    if (present_network_addresses)
      list.add(network_addresses);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPartialTableInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHms_table()).compareTo(other.isSetHms_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHms_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hms_table, other.hms_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartitions()).compareTo(other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_stats()).compareTo(other.isSetColumn_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_stats, other.column_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStorage_metadata_load_time_ns()).compareTo(other.isSetStorage_metadata_load_time_ns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorage_metadata_load_time_ns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_metadata_load_time_ns, other.storage_metadata_load_time_ns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetwork_addresses()).compareTo(other.isSetNetwork_addresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetwork_addresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.network_addresses, other.network_addresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPartialTableInfo(");
    boolean first = true;

    if (isSetHms_table()) {
      sb.append("hms_table:");
      if (this.hms_table == null) {
        sb.append("null");
      } else {
        sb.append(this.hms_table);
      }
      first = false;
    }
    if (isSetPartitions()) {
      if (!first) sb.append(", ");
      sb.append("partitions:");
      if (this.partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.partitions);
      }
      first = false;
    }
    if (isSetColumn_stats()) {
      if (!first) sb.append(", ");
      sb.append("column_stats:");
      if (this.column_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.column_stats);
      }
      first = false;
    }
    if (isSetStorage_metadata_load_time_ns()) {
      if (!first) sb.append(", ");
      sb.append("storage_metadata_load_time_ns:");
      sb.append(this.storage_metadata_load_time_ns);
      first = false;
    }
    if (isSetNetwork_addresses()) {
      if (!first) sb.append(", ");
      sb.append("network_addresses:");
      if (this.network_addresses == null) {
        sb.append("null");
      } else {
        sb.append(this.network_addresses);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hms_table != null) {
      hms_table.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPartialTableInfoStandardSchemeFactory implements SchemeFactory {
    public TPartialTableInfoStandardScheme getScheme() {
      return new TPartialTableInfoStandardScheme();
    }
  }

  private static class TPartialTableInfoStandardScheme extends StandardScheme<TPartialTableInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPartialTableInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HMS_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hms_table = new org.apache.hadoop.hive.metastore.api.Table();
              struct.hms_table.read(iprot);
              struct.setHms_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.partitions = new ArrayList<TPartialPartitionInfo>(_list72.size);
                TPartialPartitionInfo _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = new TPartialPartitionInfo();
                  _elem73.read(iprot);
                  struct.partitions.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.column_stats = new ArrayList<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj>(_list75.size);
                org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj _elem76;
                for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                {
                  _elem76 = new org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj();
                  _elem76.read(iprot);
                  struct.column_stats.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setColumn_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORAGE_METADATA_LOAD_TIME_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.storage_metadata_load_time_ns = iprot.readI64();
              struct.setStorage_metadata_load_time_nsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NETWORK_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                struct.network_addresses = new ArrayList<org.apache.impala.thrift.TNetworkAddress>(_list78.size);
                org.apache.impala.thrift.TNetworkAddress _elem79;
                for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                {
                  _elem79 = new org.apache.impala.thrift.TNetworkAddress();
                  _elem79.read(iprot);
                  struct.network_addresses.add(_elem79);
                }
                iprot.readListEnd();
              }
              struct.setNetwork_addressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPartialTableInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hms_table != null) {
        if (struct.isSetHms_table()) {
          oprot.writeFieldBegin(HMS_TABLE_FIELD_DESC);
          struct.hms_table.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitions != null) {
        if (struct.isSetPartitions()) {
          oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.partitions.size()));
            for (TPartialPartitionInfo _iter81 : struct.partitions)
            {
              _iter81.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_stats != null) {
        if (struct.isSetColumn_stats()) {
          oprot.writeFieldBegin(COLUMN_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_stats.size()));
            for (org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj _iter82 : struct.column_stats)
            {
              _iter82.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStorage_metadata_load_time_ns()) {
        oprot.writeFieldBegin(STORAGE_METADATA_LOAD_TIME_NS_FIELD_DESC);
        oprot.writeI64(struct.storage_metadata_load_time_ns);
        oprot.writeFieldEnd();
      }
      if (struct.network_addresses != null) {
        if (struct.isSetNetwork_addresses()) {
          oprot.writeFieldBegin(NETWORK_ADDRESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.network_addresses.size()));
            for (org.apache.impala.thrift.TNetworkAddress _iter83 : struct.network_addresses)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPartialTableInfoTupleSchemeFactory implements SchemeFactory {
    public TPartialTableInfoTupleScheme getScheme() {
      return new TPartialTableInfoTupleScheme();
    }
  }

  private static class TPartialTableInfoTupleScheme extends TupleScheme<TPartialTableInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPartialTableInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHms_table()) {
        optionals.set(0);
      }
      if (struct.isSetPartitions()) {
        optionals.set(1);
      }
      if (struct.isSetColumn_stats()) {
        optionals.set(2);
      }
      if (struct.isSetStorage_metadata_load_time_ns()) {
        optionals.set(3);
      }
      if (struct.isSetNetwork_addresses()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetHms_table()) {
        struct.hms_table.write(oprot);
      }
      if (struct.isSetPartitions()) {
        {
          oprot.writeI32(struct.partitions.size());
          for (TPartialPartitionInfo _iter84 : struct.partitions)
          {
            _iter84.write(oprot);
          }
        }
      }
      if (struct.isSetColumn_stats()) {
        {
          oprot.writeI32(struct.column_stats.size());
          for (org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj _iter85 : struct.column_stats)
          {
            _iter85.write(oprot);
          }
        }
      }
      if (struct.isSetStorage_metadata_load_time_ns()) {
        oprot.writeI64(struct.storage_metadata_load_time_ns);
      }
      if (struct.isSetNetwork_addresses()) {
        {
          oprot.writeI32(struct.network_addresses.size());
          for (org.apache.impala.thrift.TNetworkAddress _iter86 : struct.network_addresses)
          {
            _iter86.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPartialTableInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.hms_table = new org.apache.hadoop.hive.metastore.api.Table();
        struct.hms_table.read(iprot);
        struct.setHms_tableIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.partitions = new ArrayList<TPartialPartitionInfo>(_list87.size);
          TPartialPartitionInfo _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = new TPartialPartitionInfo();
            _elem88.read(iprot);
            struct.partitions.add(_elem88);
          }
        }
        struct.setPartitionsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.column_stats = new ArrayList<org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj>(_list90.size);
          org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = new org.apache.hadoop.hive.metastore.api.ColumnStatisticsObj();
            _elem91.read(iprot);
            struct.column_stats.add(_elem91);
          }
        }
        struct.setColumn_statsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.storage_metadata_load_time_ns = iprot.readI64();
        struct.setStorage_metadata_load_time_nsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.network_addresses = new ArrayList<org.apache.impala.thrift.TNetworkAddress>(_list93.size);
          org.apache.impala.thrift.TNetworkAddress _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = new org.apache.impala.thrift.TNetworkAddress();
            _elem94.read(iprot);
            struct.network_addresses.add(_elem94);
          }
        }
        struct.setNetwork_addressesIsSet(true);
      }
    }
  }

}

