/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class THBaseTable implements org.apache.thrift.TBase<THBaseTable, THBaseTable._Fields>, java.io.Serializable, Cloneable, Comparable<THBaseTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THBaseTable");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FAMILIES_FIELD_DESC = new org.apache.thrift.protocol.TField("families", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField QUALIFIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("qualifiers", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BINARY_ENCODED_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_encoded", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THBaseTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THBaseTableTupleSchemeFactory());
  }

  private String tableName; // required
  private List<String> families; // required
  private List<String> qualifiers; // required
  private List<Boolean> binary_encoded; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    FAMILIES((short)2, "families"),
    QUALIFIERS((short)3, "qualifiers"),
    BINARY_ENCODED((short)4, "binary_encoded");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // FAMILIES
          return FAMILIES;
        case 3: // QUALIFIERS
          return QUALIFIERS;
        case 4: // BINARY_ENCODED
          return BINARY_ENCODED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BINARY_ENCODED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAMILIES, new org.apache.thrift.meta_data.FieldMetaData("families", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUALIFIERS, new org.apache.thrift.meta_data.FieldMetaData("qualifiers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BINARY_ENCODED, new org.apache.thrift.meta_data.FieldMetaData("binary_encoded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THBaseTable.class, metaDataMap);
  }

  public THBaseTable() {
  }

  public THBaseTable(
    String tableName,
    List<String> families,
    List<String> qualifiers)
  {
    this();
    this.tableName = tableName;
    this.families = families;
    this.qualifiers = qualifiers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THBaseTable(THBaseTable other) {
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    if (other.isSetFamilies()) {
      List<String> __this__families = new ArrayList<String>(other.families);
      this.families = __this__families;
    }
    if (other.isSetQualifiers()) {
      List<String> __this__qualifiers = new ArrayList<String>(other.qualifiers);
      this.qualifiers = __this__qualifiers;
    }
    if (other.isSetBinary_encoded()) {
      List<Boolean> __this__binary_encoded = new ArrayList<Boolean>(other.binary_encoded);
      this.binary_encoded = __this__binary_encoded;
    }
  }

  public THBaseTable deepCopy() {
    return new THBaseTable(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    this.families = null;
    this.qualifiers = null;
    this.binary_encoded = null;
  }

  public String getTableName() {
    return this.tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public int getFamiliesSize() {
    return (this.families == null) ? 0 : this.families.size();
  }

  public java.util.Iterator<String> getFamiliesIterator() {
    return (this.families == null) ? null : this.families.iterator();
  }

  public void addToFamilies(String elem) {
    if (this.families == null) {
      this.families = new ArrayList<String>();
    }
    this.families.add(elem);
  }

  public List<String> getFamilies() {
    return this.families;
  }

  public void setFamilies(List<String> families) {
    this.families = families;
  }

  public void unsetFamilies() {
    this.families = null;
  }

  /** Returns true if field families is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilies() {
    return this.families != null;
  }

  public void setFamiliesIsSet(boolean value) {
    if (!value) {
      this.families = null;
    }
  }

  public int getQualifiersSize() {
    return (this.qualifiers == null) ? 0 : this.qualifiers.size();
  }

  public java.util.Iterator<String> getQualifiersIterator() {
    return (this.qualifiers == null) ? null : this.qualifiers.iterator();
  }

  public void addToQualifiers(String elem) {
    if (this.qualifiers == null) {
      this.qualifiers = new ArrayList<String>();
    }
    this.qualifiers.add(elem);
  }

  public List<String> getQualifiers() {
    return this.qualifiers;
  }

  public void setQualifiers(List<String> qualifiers) {
    this.qualifiers = qualifiers;
  }

  public void unsetQualifiers() {
    this.qualifiers = null;
  }

  /** Returns true if field qualifiers is set (has been assigned a value) and false otherwise */
  public boolean isSetQualifiers() {
    return this.qualifiers != null;
  }

  public void setQualifiersIsSet(boolean value) {
    if (!value) {
      this.qualifiers = null;
    }
  }

  public int getBinary_encodedSize() {
    return (this.binary_encoded == null) ? 0 : this.binary_encoded.size();
  }

  public java.util.Iterator<Boolean> getBinary_encodedIterator() {
    return (this.binary_encoded == null) ? null : this.binary_encoded.iterator();
  }

  public void addToBinary_encoded(boolean elem) {
    if (this.binary_encoded == null) {
      this.binary_encoded = new ArrayList<Boolean>();
    }
    this.binary_encoded.add(elem);
  }

  public List<Boolean> getBinary_encoded() {
    return this.binary_encoded;
  }

  public void setBinary_encoded(List<Boolean> binary_encoded) {
    this.binary_encoded = binary_encoded;
  }

  public void unsetBinary_encoded() {
    this.binary_encoded = null;
  }

  /** Returns true if field binary_encoded is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_encoded() {
    return this.binary_encoded != null;
  }

  public void setBinary_encodedIsSet(boolean value) {
    if (!value) {
      this.binary_encoded = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case FAMILIES:
      if (value == null) {
        unsetFamilies();
      } else {
        setFamilies((List<String>)value);
      }
      break;

    case QUALIFIERS:
      if (value == null) {
        unsetQualifiers();
      } else {
        setQualifiers((List<String>)value);
      }
      break;

    case BINARY_ENCODED:
      if (value == null) {
        unsetBinary_encoded();
      } else {
        setBinary_encoded((List<Boolean>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case FAMILIES:
      return getFamilies();

    case QUALIFIERS:
      return getQualifiers();

    case BINARY_ENCODED:
      return getBinary_encoded();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case FAMILIES:
      return isSetFamilies();
    case QUALIFIERS:
      return isSetQualifiers();
    case BINARY_ENCODED:
      return isSetBinary_encoded();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THBaseTable)
      return this.equals((THBaseTable)that);
    return false;
  }

  public boolean equals(THBaseTable that) {
    if (that == null)
      return false;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_families = true && this.isSetFamilies();
    boolean that_present_families = true && that.isSetFamilies();
    if (this_present_families || that_present_families) {
      if (!(this_present_families && that_present_families))
        return false;
      if (!this.families.equals(that.families))
        return false;
    }

    boolean this_present_qualifiers = true && this.isSetQualifiers();
    boolean that_present_qualifiers = true && that.isSetQualifiers();
    if (this_present_qualifiers || that_present_qualifiers) {
      if (!(this_present_qualifiers && that_present_qualifiers))
        return false;
      if (!this.qualifiers.equals(that.qualifiers))
        return false;
    }

    boolean this_present_binary_encoded = true && this.isSetBinary_encoded();
    boolean that_present_binary_encoded = true && that.isSetBinary_encoded();
    if (this_present_binary_encoded || that_present_binary_encoded) {
      if (!(this_present_binary_encoded && that_present_binary_encoded))
        return false;
      if (!this.binary_encoded.equals(that.binary_encoded))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_families = true && (isSetFamilies());
    list.add(present_families);
    if (present_families)
      list.add(families);

    boolean present_qualifiers = true && (isSetQualifiers());
    list.add(present_qualifiers);
    if (present_qualifiers)
      list.add(qualifiers);

    boolean present_binary_encoded = true && (isSetBinary_encoded());
    list.add(present_binary_encoded);
    if (present_binary_encoded)
      list.add(binary_encoded);

    return list.hashCode();
  }

  @Override
  public int compareTo(THBaseTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilies()).compareTo(other.isSetFamilies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.families, other.families);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQualifiers()).compareTo(other.isSetQualifiers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQualifiers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qualifiers, other.qualifiers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_encoded()).compareTo(other.isSetBinary_encoded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_encoded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_encoded, other.binary_encoded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THBaseTable(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("families:");
    if (this.families == null) {
      sb.append("null");
    } else {
      sb.append(this.families);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("qualifiers:");
    if (this.qualifiers == null) {
      sb.append("null");
    } else {
      sb.append(this.qualifiers);
    }
    first = false;
    if (isSetBinary_encoded()) {
      if (!first) sb.append(", ");
      sb.append("binary_encoded:");
      if (this.binary_encoded == null) {
        sb.append("null");
      } else {
        sb.append(this.binary_encoded);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTableName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableName' is unset! Struct:" + toString());
    }

    if (!isSetFamilies()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'families' is unset! Struct:" + toString());
    }

    if (!isSetQualifiers()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'qualifiers' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THBaseTableStandardSchemeFactory implements SchemeFactory {
    public THBaseTableStandardScheme getScheme() {
      return new THBaseTableStandardScheme();
    }
  }

  private static class THBaseTableStandardScheme extends StandardScheme<THBaseTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THBaseTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAMILIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.families = new ArrayList<String>(_list70.size);
                String _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = iprot.readString();
                  struct.families.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setFamiliesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUALIFIERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                struct.qualifiers = new ArrayList<String>(_list73.size);
                String _elem74;
                for (int _i75 = 0; _i75 < _list73.size; ++_i75)
                {
                  _elem74 = iprot.readString();
                  struct.qualifiers.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setQualifiersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BINARY_ENCODED
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.binary_encoded = new ArrayList<Boolean>(_list76.size);
                boolean _elem77;
                for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                {
                  _elem77 = iprot.readBool();
                  struct.binary_encoded.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setBinary_encodedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THBaseTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      if (struct.families != null) {
        oprot.writeFieldBegin(FAMILIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.families.size()));
          for (String _iter79 : struct.families)
          {
            oprot.writeString(_iter79);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.qualifiers != null) {
        oprot.writeFieldBegin(QUALIFIERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.qualifiers.size()));
          for (String _iter80 : struct.qualifiers)
          {
            oprot.writeString(_iter80);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.binary_encoded != null) {
        if (struct.isSetBinary_encoded()) {
          oprot.writeFieldBegin(BINARY_ENCODED_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.binary_encoded.size()));
            for (boolean _iter81 : struct.binary_encoded)
            {
              oprot.writeBool(_iter81);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THBaseTableTupleSchemeFactory implements SchemeFactory {
    public THBaseTableTupleScheme getScheme() {
      return new THBaseTableTupleScheme();
    }
  }

  private static class THBaseTableTupleScheme extends TupleScheme<THBaseTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THBaseTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.tableName);
      {
        oprot.writeI32(struct.families.size());
        for (String _iter82 : struct.families)
        {
          oprot.writeString(_iter82);
        }
      }
      {
        oprot.writeI32(struct.qualifiers.size());
        for (String _iter83 : struct.qualifiers)
        {
          oprot.writeString(_iter83);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetBinary_encoded()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetBinary_encoded()) {
        {
          oprot.writeI32(struct.binary_encoded.size());
          for (boolean _iter84 : struct.binary_encoded)
          {
            oprot.writeBool(_iter84);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THBaseTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tableName = iprot.readString();
      struct.setTableNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.families = new ArrayList<String>(_list85.size);
        String _elem86;
        for (int _i87 = 0; _i87 < _list85.size; ++_i87)
        {
          _elem86 = iprot.readString();
          struct.families.add(_elem86);
        }
      }
      struct.setFamiliesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list88 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.qualifiers = new ArrayList<String>(_list88.size);
        String _elem89;
        for (int _i90 = 0; _i90 < _list88.size; ++_i90)
        {
          _elem89 = iprot.readString();
          struct.qualifiers.add(_elem89);
        }
      }
      struct.setQualifiersIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list91 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.binary_encoded = new ArrayList<Boolean>(_list91.size);
          boolean _elem92;
          for (int _i93 = 0; _i93 < _list91.size; ++_i93)
          {
            _elem92 = iprot.readBool();
            struct.binary_encoded.add(_elem92);
          }
        }
        struct.setBinary_encodedIsSet(true);
      }
    }
  }

}

