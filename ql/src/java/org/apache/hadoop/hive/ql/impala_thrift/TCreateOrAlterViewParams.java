/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TCreateOrAlterViewParams implements org.apache.thrift.TBase<TCreateOrAlterViewParams, TCreateOrAlterViewParams._Fields>, java.io.Serializable, Cloneable, Comparable<TCreateOrAlterViewParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateOrAlterViewParams");

  private static final org.apache.thrift.protocol.TField VIEW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("view_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORIGINAL_VIEW_DEF_FIELD_DESC = new org.apache.thrift.protocol.TField("original_view_def", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXPANDED_VIEW_DEF_FIELD_DESC = new org.apache.thrift.protocol.TField("expanded_view_def", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IF_NOT_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_not_exists", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("server_name", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCreateOrAlterViewParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCreateOrAlterViewParamsTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TTableName view_name; // required
  private List<org.apache.impala.thrift.TColumn> columns; // required
  private String owner; // required
  private String original_view_def; // required
  private String expanded_view_def; // required
  private String comment; // optional
  private boolean if_not_exists; // optional
  private String server_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VIEW_NAME((short)1, "view_name"),
    COLUMNS((short)2, "columns"),
    OWNER((short)3, "owner"),
    ORIGINAL_VIEW_DEF((short)4, "original_view_def"),
    EXPANDED_VIEW_DEF((short)5, "expanded_view_def"),
    COMMENT((short)6, "comment"),
    IF_NOT_EXISTS((short)7, "if_not_exists"),
    SERVER_NAME((short)8, "server_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VIEW_NAME
          return VIEW_NAME;
        case 2: // COLUMNS
          return COLUMNS;
        case 3: // OWNER
          return OWNER;
        case 4: // ORIGINAL_VIEW_DEF
          return ORIGINAL_VIEW_DEF;
        case 5: // EXPANDED_VIEW_DEF
          return EXPANDED_VIEW_DEF;
        case 6: // COMMENT
          return COMMENT;
        case 7: // IF_NOT_EXISTS
          return IF_NOT_EXISTS;
        case 8: // SERVER_NAME
          return SERVER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IF_NOT_EXISTS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMENT,_Fields.IF_NOT_EXISTS,_Fields.SERVER_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VIEW_NAME, new org.apache.thrift.meta_data.FieldMetaData("view_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TColumn.class))));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_VIEW_DEF, new org.apache.thrift.meta_data.FieldMetaData("original_view_def", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPANDED_VIEW_DEF, new org.apache.thrift.meta_data.FieldMetaData("expanded_view_def", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IF_NOT_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_not_exists", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("server_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateOrAlterViewParams.class, metaDataMap);
  }

  public TCreateOrAlterViewParams() {
  }

  public TCreateOrAlterViewParams(
    org.apache.impala.thrift.TTableName view_name,
    List<org.apache.impala.thrift.TColumn> columns,
    String owner,
    String original_view_def,
    String expanded_view_def)
  {
    this();
    this.view_name = view_name;
    this.columns = columns;
    this.owner = owner;
    this.original_view_def = original_view_def;
    this.expanded_view_def = expanded_view_def;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateOrAlterViewParams(TCreateOrAlterViewParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetView_name()) {
      this.view_name = new org.apache.impala.thrift.TTableName(other.view_name);
    }
    if (other.isSetColumns()) {
      List<org.apache.impala.thrift.TColumn> __this__columns = new ArrayList<org.apache.impala.thrift.TColumn>(other.columns.size());
      for (org.apache.impala.thrift.TColumn other_element : other.columns) {
        __this__columns.add(new org.apache.impala.thrift.TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetOriginal_view_def()) {
      this.original_view_def = other.original_view_def;
    }
    if (other.isSetExpanded_view_def()) {
      this.expanded_view_def = other.expanded_view_def;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    this.if_not_exists = other.if_not_exists;
    if (other.isSetServer_name()) {
      this.server_name = other.server_name;
    }
  }

  public TCreateOrAlterViewParams deepCopy() {
    return new TCreateOrAlterViewParams(this);
  }

  @Override
  public void clear() {
    this.view_name = null;
    this.columns = null;
    this.owner = null;
    this.original_view_def = null;
    this.expanded_view_def = null;
    this.comment = null;
    setIf_not_existsIsSet(false);
    this.if_not_exists = false;
    this.server_name = null;
  }

  public org.apache.impala.thrift.TTableName getView_name() {
    return this.view_name;
  }

  public void setView_name(org.apache.impala.thrift.TTableName view_name) {
    this.view_name = view_name;
  }

  public void unsetView_name() {
    this.view_name = null;
  }

  /** Returns true if field view_name is set (has been assigned a value) and false otherwise */
  public boolean isSetView_name() {
    return this.view_name != null;
  }

  public void setView_nameIsSet(boolean value) {
    if (!value) {
      this.view_name = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(org.apache.impala.thrift.TColumn elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<org.apache.impala.thrift.TColumn>();
    }
    this.columns.add(elem);
  }

  public List<org.apache.impala.thrift.TColumn> getColumns() {
    return this.columns;
  }

  public void setColumns(List<org.apache.impala.thrift.TColumn> columns) {
    this.columns = columns;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public String getOwner() {
    return this.owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public String getOriginal_view_def() {
    return this.original_view_def;
  }

  public void setOriginal_view_def(String original_view_def) {
    this.original_view_def = original_view_def;
  }

  public void unsetOriginal_view_def() {
    this.original_view_def = null;
  }

  /** Returns true if field original_view_def is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginal_view_def() {
    return this.original_view_def != null;
  }

  public void setOriginal_view_defIsSet(boolean value) {
    if (!value) {
      this.original_view_def = null;
    }
  }

  public String getExpanded_view_def() {
    return this.expanded_view_def;
  }

  public void setExpanded_view_def(String expanded_view_def) {
    this.expanded_view_def = expanded_view_def;
  }

  public void unsetExpanded_view_def() {
    this.expanded_view_def = null;
  }

  /** Returns true if field expanded_view_def is set (has been assigned a value) and false otherwise */
  public boolean isSetExpanded_view_def() {
    return this.expanded_view_def != null;
  }

  public void setExpanded_view_defIsSet(boolean value) {
    if (!value) {
      this.expanded_view_def = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public boolean isIf_not_exists() {
    return this.if_not_exists;
  }

  public void setIf_not_exists(boolean if_not_exists) {
    this.if_not_exists = if_not_exists;
    setIf_not_existsIsSet(true);
  }

  public void unsetIf_not_exists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  /** Returns true if field if_not_exists is set (has been assigned a value) and false otherwise */
  public boolean isSetIf_not_exists() {
    return EncodingUtils.testBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  public void setIf_not_existsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID, value);
  }

  public String getServer_name() {
    return this.server_name;
  }

  public void setServer_name(String server_name) {
    this.server_name = server_name;
  }

  public void unsetServer_name() {
    this.server_name = null;
  }

  /** Returns true if field server_name is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_name() {
    return this.server_name != null;
  }

  public void setServer_nameIsSet(boolean value) {
    if (!value) {
      this.server_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VIEW_NAME:
      if (value == null) {
        unsetView_name();
      } else {
        setView_name((org.apache.impala.thrift.TTableName)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<org.apache.impala.thrift.TColumn>)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case ORIGINAL_VIEW_DEF:
      if (value == null) {
        unsetOriginal_view_def();
      } else {
        setOriginal_view_def((String)value);
      }
      break;

    case EXPANDED_VIEW_DEF:
      if (value == null) {
        unsetExpanded_view_def();
      } else {
        setExpanded_view_def((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case IF_NOT_EXISTS:
      if (value == null) {
        unsetIf_not_exists();
      } else {
        setIf_not_exists((Boolean)value);
      }
      break;

    case SERVER_NAME:
      if (value == null) {
        unsetServer_name();
      } else {
        setServer_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VIEW_NAME:
      return getView_name();

    case COLUMNS:
      return getColumns();

    case OWNER:
      return getOwner();

    case ORIGINAL_VIEW_DEF:
      return getOriginal_view_def();

    case EXPANDED_VIEW_DEF:
      return getExpanded_view_def();

    case COMMENT:
      return getComment();

    case IF_NOT_EXISTS:
      return isIf_not_exists();

    case SERVER_NAME:
      return getServer_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VIEW_NAME:
      return isSetView_name();
    case COLUMNS:
      return isSetColumns();
    case OWNER:
      return isSetOwner();
    case ORIGINAL_VIEW_DEF:
      return isSetOriginal_view_def();
    case EXPANDED_VIEW_DEF:
      return isSetExpanded_view_def();
    case COMMENT:
      return isSetComment();
    case IF_NOT_EXISTS:
      return isSetIf_not_exists();
    case SERVER_NAME:
      return isSetServer_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCreateOrAlterViewParams)
      return this.equals((TCreateOrAlterViewParams)that);
    return false;
  }

  public boolean equals(TCreateOrAlterViewParams that) {
    if (that == null)
      return false;

    boolean this_present_view_name = true && this.isSetView_name();
    boolean that_present_view_name = true && that.isSetView_name();
    if (this_present_view_name || that_present_view_name) {
      if (!(this_present_view_name && that_present_view_name))
        return false;
      if (!this.view_name.equals(that.view_name))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_original_view_def = true && this.isSetOriginal_view_def();
    boolean that_present_original_view_def = true && that.isSetOriginal_view_def();
    if (this_present_original_view_def || that_present_original_view_def) {
      if (!(this_present_original_view_def && that_present_original_view_def))
        return false;
      if (!this.original_view_def.equals(that.original_view_def))
        return false;
    }

    boolean this_present_expanded_view_def = true && this.isSetExpanded_view_def();
    boolean that_present_expanded_view_def = true && that.isSetExpanded_view_def();
    if (this_present_expanded_view_def || that_present_expanded_view_def) {
      if (!(this_present_expanded_view_def && that_present_expanded_view_def))
        return false;
      if (!this.expanded_view_def.equals(that.expanded_view_def))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_if_not_exists = true && this.isSetIf_not_exists();
    boolean that_present_if_not_exists = true && that.isSetIf_not_exists();
    if (this_present_if_not_exists || that_present_if_not_exists) {
      if (!(this_present_if_not_exists && that_present_if_not_exists))
        return false;
      if (this.if_not_exists != that.if_not_exists)
        return false;
    }

    boolean this_present_server_name = true && this.isSetServer_name();
    boolean that_present_server_name = true && that.isSetServer_name();
    if (this_present_server_name || that_present_server_name) {
      if (!(this_present_server_name && that_present_server_name))
        return false;
      if (!this.server_name.equals(that.server_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_view_name = true && (isSetView_name());
    list.add(present_view_name);
    if (present_view_name)
      list.add(view_name);

    boolean present_columns = true && (isSetColumns());
    list.add(present_columns);
    if (present_columns)
      list.add(columns);

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_original_view_def = true && (isSetOriginal_view_def());
    list.add(present_original_view_def);
    if (present_original_view_def)
      list.add(original_view_def);

    boolean present_expanded_view_def = true && (isSetExpanded_view_def());
    list.add(present_expanded_view_def);
    if (present_expanded_view_def)
      list.add(expanded_view_def);

    boolean present_comment = true && (isSetComment());
    list.add(present_comment);
    if (present_comment)
      list.add(comment);

    boolean present_if_not_exists = true && (isSetIf_not_exists());
    list.add(present_if_not_exists);
    if (present_if_not_exists)
      list.add(if_not_exists);

    boolean present_server_name = true && (isSetServer_name());
    list.add(present_server_name);
    if (present_server_name)
      list.add(server_name);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCreateOrAlterViewParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetView_name()).compareTo(other.isSetView_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetView_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.view_name, other.view_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginal_view_def()).compareTo(other.isSetOriginal_view_def());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginal_view_def()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.original_view_def, other.original_view_def);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpanded_view_def()).compareTo(other.isSetExpanded_view_def());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpanded_view_def()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expanded_view_def, other.expanded_view_def);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIf_not_exists()).compareTo(other.isSetIf_not_exists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIf_not_exists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_not_exists, other.if_not_exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_name()).compareTo(other.isSetServer_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_name, other.server_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCreateOrAlterViewParams(");
    boolean first = true;

    sb.append("view_name:");
    if (this.view_name == null) {
      sb.append("null");
    } else {
      sb.append(this.view_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("original_view_def:");
    if (this.original_view_def == null) {
      sb.append("null");
    } else {
      sb.append(this.original_view_def);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expanded_view_def:");
    if (this.expanded_view_def == null) {
      sb.append("null");
    } else {
      sb.append(this.expanded_view_def);
    }
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetIf_not_exists()) {
      if (!first) sb.append(", ");
      sb.append("if_not_exists:");
      sb.append(this.if_not_exists);
      first = false;
    }
    if (isSetServer_name()) {
      if (!first) sb.append(", ");
      sb.append("server_name:");
      if (this.server_name == null) {
        sb.append("null");
      } else {
        sb.append(this.server_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetView_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'view_name' is unset! Struct:" + toString());
    }

    if (!isSetColumns()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' is unset! Struct:" + toString());
    }

    if (!isSetOwner()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'owner' is unset! Struct:" + toString());
    }

    if (!isSetOriginal_view_def()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'original_view_def' is unset! Struct:" + toString());
    }

    if (!isSetExpanded_view_def()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'expanded_view_def' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (view_name != null) {
      view_name.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreateOrAlterViewParamsStandardSchemeFactory implements SchemeFactory {
    public TCreateOrAlterViewParamsStandardScheme getScheme() {
      return new TCreateOrAlterViewParamsStandardScheme();
    }
  }

  private static class TCreateOrAlterViewParamsStandardScheme extends StandardScheme<TCreateOrAlterViewParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreateOrAlterViewParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VIEW_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.view_name = new org.apache.impala.thrift.TTableName();
              struct.view_name.read(iprot);
              struct.setView_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list242 = iprot.readListBegin();
                struct.columns = new ArrayList<org.apache.impala.thrift.TColumn>(_list242.size);
                org.apache.impala.thrift.TColumn _elem243;
                for (int _i244 = 0; _i244 < _list242.size; ++_i244)
                {
                  _elem243 = new org.apache.impala.thrift.TColumn();
                  _elem243.read(iprot);
                  struct.columns.add(_elem243);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORIGINAL_VIEW_DEF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.original_view_def = iprot.readString();
              struct.setOriginal_view_defIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXPANDED_VIEW_DEF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expanded_view_def = iprot.readString();
              struct.setExpanded_view_defIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IF_NOT_EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.if_not_exists = iprot.readBool();
              struct.setIf_not_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server_name = iprot.readString();
              struct.setServer_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreateOrAlterViewParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.view_name != null) {
        oprot.writeFieldBegin(VIEW_NAME_FIELD_DESC);
        struct.view_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
          for (org.apache.impala.thrift.TColumn _iter245 : struct.columns)
          {
            _iter245.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.original_view_def != null) {
        oprot.writeFieldBegin(ORIGINAL_VIEW_DEF_FIELD_DESC);
        oprot.writeString(struct.original_view_def);
        oprot.writeFieldEnd();
      }
      if (struct.expanded_view_def != null) {
        oprot.writeFieldBegin(EXPANDED_VIEW_DEF_FIELD_DESC);
        oprot.writeString(struct.expanded_view_def);
        oprot.writeFieldEnd();
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIf_not_exists()) {
        oprot.writeFieldBegin(IF_NOT_EXISTS_FIELD_DESC);
        oprot.writeBool(struct.if_not_exists);
        oprot.writeFieldEnd();
      }
      if (struct.server_name != null) {
        if (struct.isSetServer_name()) {
          oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
          oprot.writeString(struct.server_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreateOrAlterViewParamsTupleSchemeFactory implements SchemeFactory {
    public TCreateOrAlterViewParamsTupleScheme getScheme() {
      return new TCreateOrAlterViewParamsTupleScheme();
    }
  }

  private static class TCreateOrAlterViewParamsTupleScheme extends TupleScheme<TCreateOrAlterViewParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreateOrAlterViewParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.view_name.write(oprot);
      {
        oprot.writeI32(struct.columns.size());
        for (org.apache.impala.thrift.TColumn _iter246 : struct.columns)
        {
          _iter246.write(oprot);
        }
      }
      oprot.writeString(struct.owner);
      oprot.writeString(struct.original_view_def);
      oprot.writeString(struct.expanded_view_def);
      BitSet optionals = new BitSet();
      if (struct.isSetComment()) {
        optionals.set(0);
      }
      if (struct.isSetIf_not_exists()) {
        optionals.set(1);
      }
      if (struct.isSetServer_name()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetIf_not_exists()) {
        oprot.writeBool(struct.if_not_exists);
      }
      if (struct.isSetServer_name()) {
        oprot.writeString(struct.server_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreateOrAlterViewParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.view_name = new org.apache.impala.thrift.TTableName();
      struct.view_name.read(iprot);
      struct.setView_nameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list247 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.columns = new ArrayList<org.apache.impala.thrift.TColumn>(_list247.size);
        org.apache.impala.thrift.TColumn _elem248;
        for (int _i249 = 0; _i249 < _list247.size; ++_i249)
        {
          _elem248 = new org.apache.impala.thrift.TColumn();
          _elem248.read(iprot);
          struct.columns.add(_elem248);
        }
      }
      struct.setColumnsIsSet(true);
      struct.owner = iprot.readString();
      struct.setOwnerIsSet(true);
      struct.original_view_def = iprot.readString();
      struct.setOriginal_view_defIsSet(true);
      struct.expanded_view_def = iprot.readString();
      struct.setExpanded_view_defIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.if_not_exists = iprot.readBool();
        struct.setIf_not_existsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.server_name = iprot.readString();
        struct.setServer_nameIsSet(true);
      }
    }
  }

}

