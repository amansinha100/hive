/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class TRuntimeProfileNodeMetadata extends org.apache.thrift.TUnion<TRuntimeProfileNodeMetadata, TRuntimeProfileNodeMetadata._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeProfileNodeMetadata");
  private static final org.apache.thrift.protocol.TField PLAN_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_node_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_SINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("data_sink_id", org.apache.thrift.protocol.TType.I32, (short)2);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAN_NODE_ID((short)1, "plan_node_id"),
    DATA_SINK_ID((short)2, "data_sink_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAN_NODE_ID
          return PLAN_NODE_ID;
        case 2: // DATA_SINK_ID
          return DATA_SINK_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAN_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("plan_node_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.DATA_SINK_ID, new org.apache.thrift.meta_data.FieldMetaData("data_sink_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TDataSinkId")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeProfileNodeMetadata.class, metaDataMap);
  }

  public TRuntimeProfileNodeMetadata() {
    super();
  }

  public TRuntimeProfileNodeMetadata(_Fields setField, Object value) {
    super(setField, value);
  }

  public TRuntimeProfileNodeMetadata(TRuntimeProfileNodeMetadata other) {
    super(other);
  }
  public TRuntimeProfileNodeMetadata deepCopy() {
    return new TRuntimeProfileNodeMetadata(this);
  }

  public static TRuntimeProfileNodeMetadata plan_node_id(int value) {
    TRuntimeProfileNodeMetadata x = new TRuntimeProfileNodeMetadata();
    x.setPlan_node_id(value);
    return x;
  }

  public static TRuntimeProfileNodeMetadata data_sink_id(int value) {
    TRuntimeProfileNodeMetadata x = new TRuntimeProfileNodeMetadata();
    x.setData_sink_id(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case PLAN_NODE_ID:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'plan_node_id', but got " + value.getClass().getSimpleName());
      case DATA_SINK_ID:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'data_sink_id', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case PLAN_NODE_ID:
          if (field.type == PLAN_NODE_ID_FIELD_DESC.type) {
            Integer plan_node_id;
            plan_node_id = iprot.readI32();
            return plan_node_id;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DATA_SINK_ID:
          if (field.type == DATA_SINK_ID_FIELD_DESC.type) {
            Integer data_sink_id;
            data_sink_id = iprot.readI32();
            return data_sink_id;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PLAN_NODE_ID:
        Integer plan_node_id = (Integer)value_;
        oprot.writeI32(plan_node_id);
        return;
      case DATA_SINK_ID:
        Integer data_sink_id = (Integer)value_;
        oprot.writeI32(data_sink_id);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case PLAN_NODE_ID:
          Integer plan_node_id;
          plan_node_id = iprot.readI32();
          return plan_node_id;
        case DATA_SINK_ID:
          Integer data_sink_id;
          data_sink_id = iprot.readI32();
          return data_sink_id;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PLAN_NODE_ID:
        Integer plan_node_id = (Integer)value_;
        oprot.writeI32(plan_node_id);
        return;
      case DATA_SINK_ID:
        Integer data_sink_id = (Integer)value_;
        oprot.writeI32(data_sink_id);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case PLAN_NODE_ID:
        return PLAN_NODE_ID_FIELD_DESC;
      case DATA_SINK_ID:
        return DATA_SINK_ID_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public int getPlan_node_id() {
    if (getSetField() == _Fields.PLAN_NODE_ID) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'plan_node_id' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPlan_node_id(int value) {
    setField_ = _Fields.PLAN_NODE_ID;
    value_ = value;
  }

  public int getData_sink_id() {
    if (getSetField() == _Fields.DATA_SINK_ID) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'data_sink_id' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setData_sink_id(int value) {
    setField_ = _Fields.DATA_SINK_ID;
    value_ = value;
  }

  public boolean isSetPlan_node_id() {
    return setField_ == _Fields.PLAN_NODE_ID;
  }


  public boolean isSetData_sink_id() {
    return setField_ == _Fields.DATA_SINK_ID;
  }


  public boolean equals(Object other) {
    if (other instanceof TRuntimeProfileNodeMetadata) {
      return equals((TRuntimeProfileNodeMetadata)other);
    } else {
      return false;
    }
  }

  public boolean equals(TRuntimeProfileNodeMetadata other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TRuntimeProfileNodeMetadata other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
