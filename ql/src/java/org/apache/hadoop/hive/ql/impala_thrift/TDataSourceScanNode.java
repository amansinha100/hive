/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TDataSourceScanNode implements org.apache.thrift.TBase<TDataSourceScanNode, TDataSourceScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TDataSourceScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDataSourceScanNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField INIT_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("init_string", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCEPTED_PREDICATES_FIELD_DESC = new org.apache.thrift.protocol.TField("accepted_predicates", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDataSourceScanNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDataSourceScanNodeTupleSchemeFactory());
  }

  private int tuple_id; // required
  private org.apache.impala.thrift.TDataSource data_source; // required
  private String init_string; // required
  private List<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>> accepted_predicates; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    DATA_SOURCE((short)2, "data_source"),
    INIT_STRING((short)3, "init_string"),
    ACCEPTED_PREDICATES((short)4, "accepted_predicates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // DATA_SOURCE
          return DATA_SOURCE;
        case 3: // INIT_STRING
          return INIT_STRING;
        case 4: // ACCEPTED_PREDICATES
          return ACCEPTED_PREDICATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.DATA_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("data_source", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TDataSource.class)));
    tmpMap.put(_Fields.INIT_STRING, new org.apache.thrift.meta_data.FieldMetaData("init_string", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCEPTED_PREDICATES, new org.apache.thrift.meta_data.FieldMetaData("accepted_predicates", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.extdatasource.thrift.TBinaryPredicate.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDataSourceScanNode.class, metaDataMap);
  }

  public TDataSourceScanNode() {
  }

  public TDataSourceScanNode(
    int tuple_id,
    org.apache.impala.thrift.TDataSource data_source,
    String init_string,
    List<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>> accepted_predicates)
  {
    this();
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
    this.data_source = data_source;
    this.init_string = init_string;
    this.accepted_predicates = accepted_predicates;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDataSourceScanNode(TDataSourceScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetData_source()) {
      this.data_source = new org.apache.impala.thrift.TDataSource(other.data_source);
    }
    if (other.isSetInit_string()) {
      this.init_string = other.init_string;
    }
    if (other.isSetAccepted_predicates()) {
      List<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>> __this__accepted_predicates = new ArrayList<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>>(other.accepted_predicates.size());
      for (List<org.apache.impala.extdatasource.thrift.TBinaryPredicate> other_element : other.accepted_predicates) {
        List<org.apache.impala.extdatasource.thrift.TBinaryPredicate> __this__accepted_predicates_copy = new ArrayList<org.apache.impala.extdatasource.thrift.TBinaryPredicate>(other_element.size());
        for (org.apache.impala.extdatasource.thrift.TBinaryPredicate other_element_element : other_element) {
          __this__accepted_predicates_copy.add(new org.apache.impala.extdatasource.thrift.TBinaryPredicate(other_element_element));
        }
        __this__accepted_predicates.add(__this__accepted_predicates_copy);
      }
      this.accepted_predicates = __this__accepted_predicates;
    }
  }

  public TDataSourceScanNode deepCopy() {
    return new TDataSourceScanNode(this);
  }

  @Override
  public void clear() {
    setTuple_idIsSet(false);
    this.tuple_id = 0;
    this.data_source = null;
    this.init_string = null;
    this.accepted_predicates = null;
  }

  public int getTuple_id() {
    return this.tuple_id;
  }

  public void setTuple_id(int tuple_id) {
    this.tuple_id = tuple_id;
    setTuple_idIsSet(true);
  }

  public void unsetTuple_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTuple_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public org.apache.impala.thrift.TDataSource getData_source() {
    return this.data_source;
  }

  public void setData_source(org.apache.impala.thrift.TDataSource data_source) {
    this.data_source = data_source;
  }

  public void unsetData_source() {
    this.data_source = null;
  }

  /** Returns true if field data_source is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source() {
    return this.data_source != null;
  }

  public void setData_sourceIsSet(boolean value) {
    if (!value) {
      this.data_source = null;
    }
  }

  public String getInit_string() {
    return this.init_string;
  }

  public void setInit_string(String init_string) {
    this.init_string = init_string;
  }

  public void unsetInit_string() {
    this.init_string = null;
  }

  /** Returns true if field init_string is set (has been assigned a value) and false otherwise */
  public boolean isSetInit_string() {
    return this.init_string != null;
  }

  public void setInit_stringIsSet(boolean value) {
    if (!value) {
      this.init_string = null;
    }
  }

  public int getAccepted_predicatesSize() {
    return (this.accepted_predicates == null) ? 0 : this.accepted_predicates.size();
  }

  public java.util.Iterator<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>> getAccepted_predicatesIterator() {
    return (this.accepted_predicates == null) ? null : this.accepted_predicates.iterator();
  }

  public void addToAccepted_predicates(List<org.apache.impala.extdatasource.thrift.TBinaryPredicate> elem) {
    if (this.accepted_predicates == null) {
      this.accepted_predicates = new ArrayList<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>>();
    }
    this.accepted_predicates.add(elem);
  }

  public List<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>> getAccepted_predicates() {
    return this.accepted_predicates;
  }

  public void setAccepted_predicates(List<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>> accepted_predicates) {
    this.accepted_predicates = accepted_predicates;
  }

  public void unsetAccepted_predicates() {
    this.accepted_predicates = null;
  }

  /** Returns true if field accepted_predicates is set (has been assigned a value) and false otherwise */
  public boolean isSetAccepted_predicates() {
    return this.accepted_predicates != null;
  }

  public void setAccepted_predicatesIsSet(boolean value) {
    if (!value) {
      this.accepted_predicates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTuple_id();
      } else {
        setTuple_id((Integer)value);
      }
      break;

    case DATA_SOURCE:
      if (value == null) {
        unsetData_source();
      } else {
        setData_source((org.apache.impala.thrift.TDataSource)value);
      }
      break;

    case INIT_STRING:
      if (value == null) {
        unsetInit_string();
      } else {
        setInit_string((String)value);
      }
      break;

    case ACCEPTED_PREDICATES:
      if (value == null) {
        unsetAccepted_predicates();
      } else {
        setAccepted_predicates((List<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTuple_id();

    case DATA_SOURCE:
      return getData_source();

    case INIT_STRING:
      return getInit_string();

    case ACCEPTED_PREDICATES:
      return getAccepted_predicates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTuple_id();
    case DATA_SOURCE:
      return isSetData_source();
    case INIT_STRING:
      return isSetInit_string();
    case ACCEPTED_PREDICATES:
      return isSetAccepted_predicates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDataSourceScanNode)
      return this.equals((TDataSourceScanNode)that);
    return false;
  }

  public boolean equals(TDataSourceScanNode that) {
    if (that == null)
      return false;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_data_source = true && this.isSetData_source();
    boolean that_present_data_source = true && that.isSetData_source();
    if (this_present_data_source || that_present_data_source) {
      if (!(this_present_data_source && that_present_data_source))
        return false;
      if (!this.data_source.equals(that.data_source))
        return false;
    }

    boolean this_present_init_string = true && this.isSetInit_string();
    boolean that_present_init_string = true && that.isSetInit_string();
    if (this_present_init_string || that_present_init_string) {
      if (!(this_present_init_string && that_present_init_string))
        return false;
      if (!this.init_string.equals(that.init_string))
        return false;
    }

    boolean this_present_accepted_predicates = true && this.isSetAccepted_predicates();
    boolean that_present_accepted_predicates = true && that.isSetAccepted_predicates();
    if (this_present_accepted_predicates || that_present_accepted_predicates) {
      if (!(this_present_accepted_predicates && that_present_accepted_predicates))
        return false;
      if (!this.accepted_predicates.equals(that.accepted_predicates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tuple_id = true;
    list.add(present_tuple_id);
    if (present_tuple_id)
      list.add(tuple_id);

    boolean present_data_source = true && (isSetData_source());
    list.add(present_data_source);
    if (present_data_source)
      list.add(data_source);

    boolean present_init_string = true && (isSetInit_string());
    list.add(present_init_string);
    if (present_init_string)
      list.add(init_string);

    boolean present_accepted_predicates = true && (isSetAccepted_predicates());
    list.add(present_accepted_predicates);
    if (present_accepted_predicates)
      list.add(accepted_predicates);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDataSourceScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTuple_id()).compareTo(other.isSetTuple_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData_source()).compareTo(other.isSetData_source());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source, other.data_source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInit_string()).compareTo(other.isSetInit_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInit_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.init_string, other.init_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccepted_predicates()).compareTo(other.isSetAccepted_predicates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccepted_predicates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accepted_predicates, other.accepted_predicates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDataSourceScanNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data_source:");
    if (this.data_source == null) {
      sb.append("null");
    } else {
      sb.append(this.data_source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("init_string:");
    if (this.init_string == null) {
      sb.append("null");
    } else {
      sb.append(this.init_string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accepted_predicates:");
    if (this.accepted_predicates == null) {
      sb.append("null");
    } else {
      sb.append(this.accepted_predicates);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTuple_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' is unset! Struct:" + toString());
    }

    if (!isSetData_source()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_source' is unset! Struct:" + toString());
    }

    if (!isSetInit_string()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'init_string' is unset! Struct:" + toString());
    }

    if (!isSetAccepted_predicates()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accepted_predicates' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (data_source != null) {
      data_source.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDataSourceScanNodeStandardSchemeFactory implements SchemeFactory {
    public TDataSourceScanNodeStandardScheme getScheme() {
      return new TDataSourceScanNodeStandardScheme();
    }
  }

  private static class TDataSourceScanNodeStandardScheme extends StandardScheme<TDataSourceScanNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDataSourceScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTuple_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data_source = new org.apache.impala.thrift.TDataSource();
              struct.data_source.read(iprot);
              struct.setData_sourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INIT_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.init_string = iprot.readString();
              struct.setInit_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCEPTED_PREDICATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.accepted_predicates = new ArrayList<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>>(_list70.size);
                List<org.apache.impala.extdatasource.thrift.TBinaryPredicate> _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  {
                    org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                    _elem71 = new ArrayList<org.apache.impala.extdatasource.thrift.TBinaryPredicate>(_list73.size);
                    org.apache.impala.extdatasource.thrift.TBinaryPredicate _elem74;
                    for (int _i75 = 0; _i75 < _list73.size; ++_i75)
                    {
                      _elem74 = new org.apache.impala.extdatasource.thrift.TBinaryPredicate();
                      _elem74.read(iprot);
                      _elem71.add(_elem74);
                    }
                    iprot.readListEnd();
                  }
                  struct.accepted_predicates.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setAccepted_predicatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDataSourceScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.data_source != null) {
        oprot.writeFieldBegin(DATA_SOURCE_FIELD_DESC);
        struct.data_source.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.init_string != null) {
        oprot.writeFieldBegin(INIT_STRING_FIELD_DESC);
        oprot.writeString(struct.init_string);
        oprot.writeFieldEnd();
      }
      if (struct.accepted_predicates != null) {
        oprot.writeFieldBegin(ACCEPTED_PREDICATES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.accepted_predicates.size()));
          for (List<org.apache.impala.extdatasource.thrift.TBinaryPredicate> _iter76 : struct.accepted_predicates)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter76.size()));
              for (org.apache.impala.extdatasource.thrift.TBinaryPredicate _iter77 : _iter76)
              {
                _iter77.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDataSourceScanNodeTupleSchemeFactory implements SchemeFactory {
    public TDataSourceScanNodeTupleScheme getScheme() {
      return new TDataSourceScanNodeTupleScheme();
    }
  }

  private static class TDataSourceScanNodeTupleScheme extends TupleScheme<TDataSourceScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDataSourceScanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      struct.data_source.write(oprot);
      oprot.writeString(struct.init_string);
      {
        oprot.writeI32(struct.accepted_predicates.size());
        for (List<org.apache.impala.extdatasource.thrift.TBinaryPredicate> _iter78 : struct.accepted_predicates)
        {
          {
            oprot.writeI32(_iter78.size());
            for (org.apache.impala.extdatasource.thrift.TBinaryPredicate _iter79 : _iter78)
            {
              _iter79.write(oprot);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDataSourceScanNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTuple_idIsSet(true);
      struct.data_source = new org.apache.impala.thrift.TDataSource();
      struct.data_source.read(iprot);
      struct.setData_sourceIsSet(true);
      struct.init_string = iprot.readString();
      struct.setInit_stringIsSet(true);
      {
        org.apache.thrift.protocol.TList _list80 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.accepted_predicates = new ArrayList<List<org.apache.impala.extdatasource.thrift.TBinaryPredicate>>(_list80.size);
        List<org.apache.impala.extdatasource.thrift.TBinaryPredicate> _elem81;
        for (int _i82 = 0; _i82 < _list80.size; ++_i82)
        {
          {
            org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _elem81 = new ArrayList<org.apache.impala.extdatasource.thrift.TBinaryPredicate>(_list83.size);
            org.apache.impala.extdatasource.thrift.TBinaryPredicate _elem84;
            for (int _i85 = 0; _i85 < _list83.size; ++_i85)
            {
              _elem84 = new org.apache.impala.extdatasource.thrift.TBinaryPredicate();
              _elem84.read(iprot);
              _elem81.add(_elem84);
            }
          }
          struct.accepted_predicates.add(_elem81);
        }
      }
      struct.setAccepted_predicatesIsSet(true);
    }
  }

}

