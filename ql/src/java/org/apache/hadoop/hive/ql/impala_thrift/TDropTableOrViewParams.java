/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TDropTableOrViewParams implements org.apache.thrift.TBase<TDropTableOrViewParams, TDropTableOrViewParams._Fields>, java.io.Serializable, Cloneable, Comparable<TDropTableOrViewParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDropTableOrViewParams");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField IF_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_exists", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField PURGE_FIELD_DESC = new org.apache.thrift.protocol.TField("purge", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_table", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("server_name", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDropTableOrViewParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDropTableOrViewParamsTupleSchemeFactory());
  }

  private org.apache.impala.thrift.TTableName table_name; // required
  private boolean if_exists; // required
  private boolean purge; // required
  private boolean is_table; // optional
  private String server_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    IF_EXISTS((short)2, "if_exists"),
    PURGE((short)3, "purge"),
    IS_TABLE((short)4, "is_table"),
    SERVER_NAME((short)5, "server_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // IF_EXISTS
          return IF_EXISTS;
        case 3: // PURGE
          return PURGE;
        case 4: // IS_TABLE
          return IS_TABLE;
        case 5: // SERVER_NAME
          return SERVER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IF_EXISTS_ISSET_ID = 0;
  private static final int __PURGE_ISSET_ID = 1;
  private static final int __IS_TABLE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_TABLE,_Fields.SERVER_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TTableName.class)));
    tmpMap.put(_Fields.IF_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_exists", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PURGE, new org.apache.thrift.meta_data.FieldMetaData("purge", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_TABLE, new org.apache.thrift.meta_data.FieldMetaData("is_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("server_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDropTableOrViewParams.class, metaDataMap);
  }

  public TDropTableOrViewParams() {
  }

  public TDropTableOrViewParams(
    org.apache.impala.thrift.TTableName table_name,
    boolean if_exists,
    boolean purge)
  {
    this();
    this.table_name = table_name;
    this.if_exists = if_exists;
    setIf_existsIsSet(true);
    this.purge = purge;
    setPurgeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDropTableOrViewParams(TDropTableOrViewParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_name()) {
      this.table_name = new org.apache.impala.thrift.TTableName(other.table_name);
    }
    this.if_exists = other.if_exists;
    this.purge = other.purge;
    this.is_table = other.is_table;
    if (other.isSetServer_name()) {
      this.server_name = other.server_name;
    }
  }

  public TDropTableOrViewParams deepCopy() {
    return new TDropTableOrViewParams(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    setIf_existsIsSet(false);
    this.if_exists = false;
    setPurgeIsSet(false);
    this.purge = false;
    setIs_tableIsSet(false);
    this.is_table = false;
    this.server_name = null;
  }

  public org.apache.impala.thrift.TTableName getTable_name() {
    return this.table_name;
  }

  public void setTable_name(org.apache.impala.thrift.TTableName table_name) {
    this.table_name = table_name;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public boolean isIf_exists() {
    return this.if_exists;
  }

  public void setIf_exists(boolean if_exists) {
    this.if_exists = if_exists;
    setIf_existsIsSet(true);
  }

  public void unsetIf_exists() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IF_EXISTS_ISSET_ID);
  }

  /** Returns true if field if_exists is set (has been assigned a value) and false otherwise */
  public boolean isSetIf_exists() {
    return EncodingUtils.testBit(__isset_bitfield, __IF_EXISTS_ISSET_ID);
  }

  public void setIf_existsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IF_EXISTS_ISSET_ID, value);
  }

  public boolean isPurge() {
    return this.purge;
  }

  public void setPurge(boolean purge) {
    this.purge = purge;
    setPurgeIsSet(true);
  }

  public void unsetPurge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGE_ISSET_ID);
  }

  /** Returns true if field purge is set (has been assigned a value) and false otherwise */
  public boolean isSetPurge() {
    return EncodingUtils.testBit(__isset_bitfield, __PURGE_ISSET_ID);
  }

  public void setPurgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGE_ISSET_ID, value);
  }

  public boolean isIs_table() {
    return this.is_table;
  }

  public void setIs_table(boolean is_table) {
    this.is_table = is_table;
    setIs_tableIsSet(true);
  }

  public void unsetIs_table() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_TABLE_ISSET_ID);
  }

  /** Returns true if field is_table is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_table() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_TABLE_ISSET_ID);
  }

  public void setIs_tableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_TABLE_ISSET_ID, value);
  }

  public String getServer_name() {
    return this.server_name;
  }

  public void setServer_name(String server_name) {
    this.server_name = server_name;
  }

  public void unsetServer_name() {
    this.server_name = null;
  }

  /** Returns true if field server_name is set (has been assigned a value) and false otherwise */
  public boolean isSetServer_name() {
    return this.server_name != null;
  }

  public void setServer_nameIsSet(boolean value) {
    if (!value) {
      this.server_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((org.apache.impala.thrift.TTableName)value);
      }
      break;

    case IF_EXISTS:
      if (value == null) {
        unsetIf_exists();
      } else {
        setIf_exists((Boolean)value);
      }
      break;

    case PURGE:
      if (value == null) {
        unsetPurge();
      } else {
        setPurge((Boolean)value);
      }
      break;

    case IS_TABLE:
      if (value == null) {
        unsetIs_table();
      } else {
        setIs_table((Boolean)value);
      }
      break;

    case SERVER_NAME:
      if (value == null) {
        unsetServer_name();
      } else {
        setServer_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTable_name();

    case IF_EXISTS:
      return isIf_exists();

    case PURGE:
      return isPurge();

    case IS_TABLE:
      return isIs_table();

    case SERVER_NAME:
      return getServer_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTable_name();
    case IF_EXISTS:
      return isSetIf_exists();
    case PURGE:
      return isSetPurge();
    case IS_TABLE:
      return isSetIs_table();
    case SERVER_NAME:
      return isSetServer_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDropTableOrViewParams)
      return this.equals((TDropTableOrViewParams)that);
    return false;
  }

  public boolean equals(TDropTableOrViewParams that) {
    if (that == null)
      return false;

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_if_exists = true;
    boolean that_present_if_exists = true;
    if (this_present_if_exists || that_present_if_exists) {
      if (!(this_present_if_exists && that_present_if_exists))
        return false;
      if (this.if_exists != that.if_exists)
        return false;
    }

    boolean this_present_purge = true;
    boolean that_present_purge = true;
    if (this_present_purge || that_present_purge) {
      if (!(this_present_purge && that_present_purge))
        return false;
      if (this.purge != that.purge)
        return false;
    }

    boolean this_present_is_table = true && this.isSetIs_table();
    boolean that_present_is_table = true && that.isSetIs_table();
    if (this_present_is_table || that_present_is_table) {
      if (!(this_present_is_table && that_present_is_table))
        return false;
      if (this.is_table != that.is_table)
        return false;
    }

    boolean this_present_server_name = true && this.isSetServer_name();
    boolean that_present_server_name = true && that.isSetServer_name();
    if (this_present_server_name || that_present_server_name) {
      if (!(this_present_server_name && that_present_server_name))
        return false;
      if (!this.server_name.equals(that.server_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_table_name = true && (isSetTable_name());
    list.add(present_table_name);
    if (present_table_name)
      list.add(table_name);

    boolean present_if_exists = true;
    list.add(present_if_exists);
    if (present_if_exists)
      list.add(if_exists);

    boolean present_purge = true;
    list.add(present_purge);
    if (present_purge)
      list.add(purge);

    boolean present_is_table = true && (isSetIs_table());
    list.add(present_is_table);
    if (present_is_table)
      list.add(is_table);

    boolean present_server_name = true && (isSetServer_name());
    list.add(present_server_name);
    if (present_server_name)
      list.add(server_name);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDropTableOrViewParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIf_exists()).compareTo(other.isSetIf_exists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIf_exists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_exists, other.if_exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurge()).compareTo(other.isSetPurge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purge, other.purge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_table()).compareTo(other.isSetIs_table());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_table()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_table, other.is_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServer_name()).compareTo(other.isSetServer_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServer_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server_name, other.server_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDropTableOrViewParams(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("if_exists:");
    sb.append(this.if_exists);
    first = false;
    if (!first) sb.append(", ");
    sb.append("purge:");
    sb.append(this.purge);
    first = false;
    if (isSetIs_table()) {
      if (!first) sb.append(", ");
      sb.append("is_table:");
      sb.append(this.is_table);
      first = false;
    }
    if (isSetServer_name()) {
      if (!first) sb.append(", ");
      sb.append("server_name:");
      if (this.server_name == null) {
        sb.append("null");
      } else {
        sb.append(this.server_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTable_name()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' is unset! Struct:" + toString());
    }

    if (!isSetIf_exists()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'if_exists' is unset! Struct:" + toString());
    }

    if (!isSetPurge()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'purge' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDropTableOrViewParamsStandardSchemeFactory implements SchemeFactory {
    public TDropTableOrViewParamsStandardScheme getScheme() {
      return new TDropTableOrViewParamsStandardScheme();
    }
  }

  private static class TDropTableOrViewParamsStandardScheme extends StandardScheme<TDropTableOrViewParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDropTableOrViewParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new org.apache.impala.thrift.TTableName();
              struct.table_name.read(iprot);
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IF_EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.if_exists = iprot.readBool();
              struct.setIf_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PURGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.purge = iprot.readBool();
              struct.setPurgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_table = iprot.readBool();
              struct.setIs_tableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.server_name = iprot.readString();
              struct.setServer_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDropTableOrViewParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IF_EXISTS_FIELD_DESC);
      oprot.writeBool(struct.if_exists);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PURGE_FIELD_DESC);
      oprot.writeBool(struct.purge);
      oprot.writeFieldEnd();
      if (struct.isSetIs_table()) {
        oprot.writeFieldBegin(IS_TABLE_FIELD_DESC);
        oprot.writeBool(struct.is_table);
        oprot.writeFieldEnd();
      }
      if (struct.server_name != null) {
        if (struct.isSetServer_name()) {
          oprot.writeFieldBegin(SERVER_NAME_FIELD_DESC);
          oprot.writeString(struct.server_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDropTableOrViewParamsTupleSchemeFactory implements SchemeFactory {
    public TDropTableOrViewParamsTupleScheme getScheme() {
      return new TDropTableOrViewParamsTupleScheme();
    }
  }

  private static class TDropTableOrViewParamsTupleScheme extends TupleScheme<TDropTableOrViewParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDropTableOrViewParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.table_name.write(oprot);
      oprot.writeBool(struct.if_exists);
      oprot.writeBool(struct.purge);
      BitSet optionals = new BitSet();
      if (struct.isSetIs_table()) {
        optionals.set(0);
      }
      if (struct.isSetServer_name()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetIs_table()) {
        oprot.writeBool(struct.is_table);
      }
      if (struct.isSetServer_name()) {
        oprot.writeString(struct.server_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDropTableOrViewParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.table_name = new org.apache.impala.thrift.TTableName();
      struct.table_name.read(iprot);
      struct.setTable_nameIsSet(true);
      struct.if_exists = iprot.readBool();
      struct.setIf_existsIsSet(true);
      struct.purge = iprot.readBool();
      struct.setPurgeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.is_table = iprot.readBool();
        struct.setIs_tableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.server_name = iprot.readString();
        struct.setServer_nameIsSet(true);
      }
    }
  }

}

