/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-11-08")
public class TQueryExecRequest implements org.apache.thrift.TBase<TQueryExecRequest, TQueryExecRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryExecRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryExecRequest");

  private static final org.apache.thrift.protocol.TField PLAN_EXEC_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_exec_info", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_SET_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("result_set_metadata", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FINALIZE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("finalize_params", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("query_ctx", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("query_plan", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STMT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stmt_type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HOST_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("host_list", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField LINEAGE_GRAPH_FIELD_DESC = new org.apache.thrift.protocol.TField("lineage_graph", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField PER_HOST_MEM_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("per_host_mem_estimate", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MAX_PER_HOST_MIN_MEM_RESERVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_per_host_min_mem_reservation", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_PER_HOST_THREAD_RESERVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_per_host_thread_reservation", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField DEDICATED_COORD_MEM_ESTIMATE_FIELD_DESC = new org.apache.thrift.protocol.TField("dedicated_coord_mem_estimate", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueryExecRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueryExecRequestTupleSchemeFactory());
  }

  public List<TPlanExecInfo> plan_exec_info; // optional
  public org.apache.impala.thrift.TResultSetMetadata result_set_metadata; // optional
  public TFinalizeParams finalize_params; // optional
  public TQueryCtx query_ctx; // required
  public String query_plan; // optional
  /**
   * 
   * @see org.apache.impala.thrift.TStmtType
   */
  public org.apache.impala.thrift.TStmtType stmt_type; // required
  public List<org.apache.impala.thrift.TNetworkAddress> host_list; // required
  public org.apache.impala.thrift.TLineageGraph lineage_graph; // optional
  public long per_host_mem_estimate; // optional
  public long max_per_host_min_mem_reservation; // optional
  public long max_per_host_thread_reservation; // optional
  public long dedicated_coord_mem_estimate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAN_EXEC_INFO((short)1, "plan_exec_info"),
    RESULT_SET_METADATA((short)2, "result_set_metadata"),
    FINALIZE_PARAMS((short)3, "finalize_params"),
    QUERY_CTX((short)4, "query_ctx"),
    QUERY_PLAN((short)5, "query_plan"),
    /**
     * 
     * @see org.apache.impala.thrift.TStmtType
     */
    STMT_TYPE((short)6, "stmt_type"),
    HOST_LIST((short)7, "host_list"),
    LINEAGE_GRAPH((short)8, "lineage_graph"),
    PER_HOST_MEM_ESTIMATE((short)9, "per_host_mem_estimate"),
    MAX_PER_HOST_MIN_MEM_RESERVATION((short)10, "max_per_host_min_mem_reservation"),
    MAX_PER_HOST_THREAD_RESERVATION((short)11, "max_per_host_thread_reservation"),
    DEDICATED_COORD_MEM_ESTIMATE((short)12, "dedicated_coord_mem_estimate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAN_EXEC_INFO
          return PLAN_EXEC_INFO;
        case 2: // RESULT_SET_METADATA
          return RESULT_SET_METADATA;
        case 3: // FINALIZE_PARAMS
          return FINALIZE_PARAMS;
        case 4: // QUERY_CTX
          return QUERY_CTX;
        case 5: // QUERY_PLAN
          return QUERY_PLAN;
        case 6: // STMT_TYPE
          return STMT_TYPE;
        case 7: // HOST_LIST
          return HOST_LIST;
        case 8: // LINEAGE_GRAPH
          return LINEAGE_GRAPH;
        case 9: // PER_HOST_MEM_ESTIMATE
          return PER_HOST_MEM_ESTIMATE;
        case 10: // MAX_PER_HOST_MIN_MEM_RESERVATION
          return MAX_PER_HOST_MIN_MEM_RESERVATION;
        case 11: // MAX_PER_HOST_THREAD_RESERVATION
          return MAX_PER_HOST_THREAD_RESERVATION;
        case 12: // DEDICATED_COORD_MEM_ESTIMATE
          return DEDICATED_COORD_MEM_ESTIMATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PER_HOST_MEM_ESTIMATE_ISSET_ID = 0;
  private static final int __MAX_PER_HOST_MIN_MEM_RESERVATION_ISSET_ID = 1;
  private static final int __MAX_PER_HOST_THREAD_RESERVATION_ISSET_ID = 2;
  private static final int __DEDICATED_COORD_MEM_ESTIMATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PLAN_EXEC_INFO,_Fields.RESULT_SET_METADATA,_Fields.FINALIZE_PARAMS,_Fields.QUERY_PLAN,_Fields.LINEAGE_GRAPH,_Fields.PER_HOST_MEM_ESTIMATE,_Fields.MAX_PER_HOST_MIN_MEM_RESERVATION,_Fields.MAX_PER_HOST_THREAD_RESERVATION,_Fields.DEDICATED_COORD_MEM_ESTIMATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAN_EXEC_INFO, new org.apache.thrift.meta_data.FieldMetaData("plan_exec_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanExecInfo.class))));
    tmpMap.put(_Fields.RESULT_SET_METADATA, new org.apache.thrift.meta_data.FieldMetaData("result_set_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TResultSetMetadata.class)));
    tmpMap.put(_Fields.FINALIZE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("finalize_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFinalizeParams.class)));
    tmpMap.put(_Fields.QUERY_CTX, new org.apache.thrift.meta_data.FieldMetaData("query_ctx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryCtx.class)));
    tmpMap.put(_Fields.QUERY_PLAN, new org.apache.thrift.meta_data.FieldMetaData("query_plan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STMT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stmt_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TStmtType.class)));
    tmpMap.put(_Fields.HOST_LIST, new org.apache.thrift.meta_data.FieldMetaData("host_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TNetworkAddress.class))));
    tmpMap.put(_Fields.LINEAGE_GRAPH, new org.apache.thrift.meta_data.FieldMetaData("lineage_graph", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TLineageGraph.class)));
    tmpMap.put(_Fields.PER_HOST_MEM_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("per_host_mem_estimate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_PER_HOST_MIN_MEM_RESERVATION, new org.apache.thrift.meta_data.FieldMetaData("max_per_host_min_mem_reservation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_PER_HOST_THREAD_RESERVATION, new org.apache.thrift.meta_data.FieldMetaData("max_per_host_thread_reservation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEDICATED_COORD_MEM_ESTIMATE, new org.apache.thrift.meta_data.FieldMetaData("dedicated_coord_mem_estimate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryExecRequest.class, metaDataMap);
  }

  public TQueryExecRequest() {
  }

  public TQueryExecRequest(
    TQueryCtx query_ctx,
    org.apache.impala.thrift.TStmtType stmt_type,
    List<org.apache.impala.thrift.TNetworkAddress> host_list)
  {
    this();
    this.query_ctx = query_ctx;
    this.stmt_type = stmt_type;
    this.host_list = host_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryExecRequest(TQueryExecRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlan_exec_info()) {
      List<TPlanExecInfo> __this__plan_exec_info = new ArrayList<TPlanExecInfo>(other.plan_exec_info.size());
      for (TPlanExecInfo other_element : other.plan_exec_info) {
        __this__plan_exec_info.add(new TPlanExecInfo(other_element));
      }
      this.plan_exec_info = __this__plan_exec_info;
    }
    if (other.isSetResult_set_metadata()) {
      this.result_set_metadata = new org.apache.impala.thrift.TResultSetMetadata(other.result_set_metadata);
    }
    if (other.isSetFinalize_params()) {
      this.finalize_params = new TFinalizeParams(other.finalize_params);
    }
    if (other.isSetQuery_ctx()) {
      this.query_ctx = new TQueryCtx(other.query_ctx);
    }
    if (other.isSetQuery_plan()) {
      this.query_plan = other.query_plan;
    }
    if (other.isSetStmt_type()) {
      this.stmt_type = other.stmt_type;
    }
    if (other.isSetHost_list()) {
      List<org.apache.impala.thrift.TNetworkAddress> __this__host_list = new ArrayList<org.apache.impala.thrift.TNetworkAddress>(other.host_list.size());
      for (org.apache.impala.thrift.TNetworkAddress other_element : other.host_list) {
        __this__host_list.add(new org.apache.impala.thrift.TNetworkAddress(other_element));
      }
      this.host_list = __this__host_list;
    }
    if (other.isSetLineage_graph()) {
      this.lineage_graph = new org.apache.impala.thrift.TLineageGraph(other.lineage_graph);
    }
    this.per_host_mem_estimate = other.per_host_mem_estimate;
    this.max_per_host_min_mem_reservation = other.max_per_host_min_mem_reservation;
    this.max_per_host_thread_reservation = other.max_per_host_thread_reservation;
    this.dedicated_coord_mem_estimate = other.dedicated_coord_mem_estimate;
  }

  public TQueryExecRequest deepCopy() {
    return new TQueryExecRequest(this);
  }

  @Override
  public void clear() {
    this.plan_exec_info = null;
    this.result_set_metadata = null;
    this.finalize_params = null;
    this.query_ctx = null;
    this.query_plan = null;
    this.stmt_type = null;
    this.host_list = null;
    this.lineage_graph = null;
    setPer_host_mem_estimateIsSet(false);
    this.per_host_mem_estimate = 0;
    setMax_per_host_min_mem_reservationIsSet(false);
    this.max_per_host_min_mem_reservation = 0;
    setMax_per_host_thread_reservationIsSet(false);
    this.max_per_host_thread_reservation = 0;
    setDedicated_coord_mem_estimateIsSet(false);
    this.dedicated_coord_mem_estimate = 0;
  }

  public int getPlan_exec_infoSize() {
    return (this.plan_exec_info == null) ? 0 : this.plan_exec_info.size();
  }

  public java.util.Iterator<TPlanExecInfo> getPlan_exec_infoIterator() {
    return (this.plan_exec_info == null) ? null : this.plan_exec_info.iterator();
  }

  public void addToPlan_exec_info(TPlanExecInfo elem) {
    if (this.plan_exec_info == null) {
      this.plan_exec_info = new ArrayList<TPlanExecInfo>();
    }
    this.plan_exec_info.add(elem);
  }

  public List<TPlanExecInfo> getPlan_exec_info() {
    return this.plan_exec_info;
  }

  public TQueryExecRequest setPlan_exec_info(List<TPlanExecInfo> plan_exec_info) {
    this.plan_exec_info = plan_exec_info;
    return this;
  }

  public void unsetPlan_exec_info() {
    this.plan_exec_info = null;
  }

  /** Returns true if field plan_exec_info is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan_exec_info() {
    return this.plan_exec_info != null;
  }

  public void setPlan_exec_infoIsSet(boolean value) {
    if (!value) {
      this.plan_exec_info = null;
    }
  }

  public org.apache.impala.thrift.TResultSetMetadata getResult_set_metadata() {
    return this.result_set_metadata;
  }

  public TQueryExecRequest setResult_set_metadata(org.apache.impala.thrift.TResultSetMetadata result_set_metadata) {
    this.result_set_metadata = result_set_metadata;
    return this;
  }

  public void unsetResult_set_metadata() {
    this.result_set_metadata = null;
  }

  /** Returns true if field result_set_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_set_metadata() {
    return this.result_set_metadata != null;
  }

  public void setResult_set_metadataIsSet(boolean value) {
    if (!value) {
      this.result_set_metadata = null;
    }
  }

  public TFinalizeParams getFinalize_params() {
    return this.finalize_params;
  }

  public TQueryExecRequest setFinalize_params(TFinalizeParams finalize_params) {
    this.finalize_params = finalize_params;
    return this;
  }

  public void unsetFinalize_params() {
    this.finalize_params = null;
  }

  /** Returns true if field finalize_params is set (has been assigned a value) and false otherwise */
  public boolean isSetFinalize_params() {
    return this.finalize_params != null;
  }

  public void setFinalize_paramsIsSet(boolean value) {
    if (!value) {
      this.finalize_params = null;
    }
  }

  public TQueryCtx getQuery_ctx() {
    return this.query_ctx;
  }

  public TQueryExecRequest setQuery_ctx(TQueryCtx query_ctx) {
    this.query_ctx = query_ctx;
    return this;
  }

  public void unsetQuery_ctx() {
    this.query_ctx = null;
  }

  /** Returns true if field query_ctx is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_ctx() {
    return this.query_ctx != null;
  }

  public void setQuery_ctxIsSet(boolean value) {
    if (!value) {
      this.query_ctx = null;
    }
  }

  public String getQuery_plan() {
    return this.query_plan;
  }

  public TQueryExecRequest setQuery_plan(String query_plan) {
    this.query_plan = query_plan;
    return this;
  }

  public void unsetQuery_plan() {
    this.query_plan = null;
  }

  /** Returns true if field query_plan is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_plan() {
    return this.query_plan != null;
  }

  public void setQuery_planIsSet(boolean value) {
    if (!value) {
      this.query_plan = null;
    }
  }

  /**
   * 
   * @see org.apache.impala.thrift.TStmtType
   */
  public org.apache.impala.thrift.TStmtType getStmt_type() {
    return this.stmt_type;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TStmtType
   */
  public TQueryExecRequest setStmt_type(org.apache.impala.thrift.TStmtType stmt_type) {
    this.stmt_type = stmt_type;
    return this;
  }

  public void unsetStmt_type() {
    this.stmt_type = null;
  }

  /** Returns true if field stmt_type is set (has been assigned a value) and false otherwise */
  public boolean isSetStmt_type() {
    return this.stmt_type != null;
  }

  public void setStmt_typeIsSet(boolean value) {
    if (!value) {
      this.stmt_type = null;
    }
  }

  public int getHost_listSize() {
    return (this.host_list == null) ? 0 : this.host_list.size();
  }

  public java.util.Iterator<org.apache.impala.thrift.TNetworkAddress> getHost_listIterator() {
    return (this.host_list == null) ? null : this.host_list.iterator();
  }

  public void addToHost_list(org.apache.impala.thrift.TNetworkAddress elem) {
    if (this.host_list == null) {
      this.host_list = new ArrayList<org.apache.impala.thrift.TNetworkAddress>();
    }
    this.host_list.add(elem);
  }

  public List<org.apache.impala.thrift.TNetworkAddress> getHost_list() {
    return this.host_list;
  }

  public TQueryExecRequest setHost_list(List<org.apache.impala.thrift.TNetworkAddress> host_list) {
    this.host_list = host_list;
    return this;
  }

  public void unsetHost_list() {
    this.host_list = null;
  }

  /** Returns true if field host_list is set (has been assigned a value) and false otherwise */
  public boolean isSetHost_list() {
    return this.host_list != null;
  }

  public void setHost_listIsSet(boolean value) {
    if (!value) {
      this.host_list = null;
    }
  }

  public org.apache.impala.thrift.TLineageGraph getLineage_graph() {
    return this.lineage_graph;
  }

  public TQueryExecRequest setLineage_graph(org.apache.impala.thrift.TLineageGraph lineage_graph) {
    this.lineage_graph = lineage_graph;
    return this;
  }

  public void unsetLineage_graph() {
    this.lineage_graph = null;
  }

  /** Returns true if field lineage_graph is set (has been assigned a value) and false otherwise */
  public boolean isSetLineage_graph() {
    return this.lineage_graph != null;
  }

  public void setLineage_graphIsSet(boolean value) {
    if (!value) {
      this.lineage_graph = null;
    }
  }

  public long getPer_host_mem_estimate() {
    return this.per_host_mem_estimate;
  }

  public TQueryExecRequest setPer_host_mem_estimate(long per_host_mem_estimate) {
    this.per_host_mem_estimate = per_host_mem_estimate;
    setPer_host_mem_estimateIsSet(true);
    return this;
  }

  public void unsetPer_host_mem_estimate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PER_HOST_MEM_ESTIMATE_ISSET_ID);
  }

  /** Returns true if field per_host_mem_estimate is set (has been assigned a value) and false otherwise */
  public boolean isSetPer_host_mem_estimate() {
    return EncodingUtils.testBit(__isset_bitfield, __PER_HOST_MEM_ESTIMATE_ISSET_ID);
  }

  public void setPer_host_mem_estimateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PER_HOST_MEM_ESTIMATE_ISSET_ID, value);
  }

  public long getMax_per_host_min_mem_reservation() {
    return this.max_per_host_min_mem_reservation;
  }

  public TQueryExecRequest setMax_per_host_min_mem_reservation(long max_per_host_min_mem_reservation) {
    this.max_per_host_min_mem_reservation = max_per_host_min_mem_reservation;
    setMax_per_host_min_mem_reservationIsSet(true);
    return this;
  }

  public void unsetMax_per_host_min_mem_reservation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_PER_HOST_MIN_MEM_RESERVATION_ISSET_ID);
  }

  /** Returns true if field max_per_host_min_mem_reservation is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_per_host_min_mem_reservation() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_PER_HOST_MIN_MEM_RESERVATION_ISSET_ID);
  }

  public void setMax_per_host_min_mem_reservationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_PER_HOST_MIN_MEM_RESERVATION_ISSET_ID, value);
  }

  public long getMax_per_host_thread_reservation() {
    return this.max_per_host_thread_reservation;
  }

  public TQueryExecRequest setMax_per_host_thread_reservation(long max_per_host_thread_reservation) {
    this.max_per_host_thread_reservation = max_per_host_thread_reservation;
    setMax_per_host_thread_reservationIsSet(true);
    return this;
  }

  public void unsetMax_per_host_thread_reservation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_PER_HOST_THREAD_RESERVATION_ISSET_ID);
  }

  /** Returns true if field max_per_host_thread_reservation is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_per_host_thread_reservation() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_PER_HOST_THREAD_RESERVATION_ISSET_ID);
  }

  public void setMax_per_host_thread_reservationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_PER_HOST_THREAD_RESERVATION_ISSET_ID, value);
  }

  public long getDedicated_coord_mem_estimate() {
    return this.dedicated_coord_mem_estimate;
  }

  public TQueryExecRequest setDedicated_coord_mem_estimate(long dedicated_coord_mem_estimate) {
    this.dedicated_coord_mem_estimate = dedicated_coord_mem_estimate;
    setDedicated_coord_mem_estimateIsSet(true);
    return this;
  }

  public void unsetDedicated_coord_mem_estimate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEDICATED_COORD_MEM_ESTIMATE_ISSET_ID);
  }

  /** Returns true if field dedicated_coord_mem_estimate is set (has been assigned a value) and false otherwise */
  public boolean isSetDedicated_coord_mem_estimate() {
    return EncodingUtils.testBit(__isset_bitfield, __DEDICATED_COORD_MEM_ESTIMATE_ISSET_ID);
  }

  public void setDedicated_coord_mem_estimateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEDICATED_COORD_MEM_ESTIMATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAN_EXEC_INFO:
      if (value == null) {
        unsetPlan_exec_info();
      } else {
        setPlan_exec_info((List<TPlanExecInfo>)value);
      }
      break;

    case RESULT_SET_METADATA:
      if (value == null) {
        unsetResult_set_metadata();
      } else {
        setResult_set_metadata((org.apache.impala.thrift.TResultSetMetadata)value);
      }
      break;

    case FINALIZE_PARAMS:
      if (value == null) {
        unsetFinalize_params();
      } else {
        setFinalize_params((TFinalizeParams)value);
      }
      break;

    case QUERY_CTX:
      if (value == null) {
        unsetQuery_ctx();
      } else {
        setQuery_ctx((TQueryCtx)value);
      }
      break;

    case QUERY_PLAN:
      if (value == null) {
        unsetQuery_plan();
      } else {
        setQuery_plan((String)value);
      }
      break;

    case STMT_TYPE:
      if (value == null) {
        unsetStmt_type();
      } else {
        setStmt_type((org.apache.impala.thrift.TStmtType)value);
      }
      break;

    case HOST_LIST:
      if (value == null) {
        unsetHost_list();
      } else {
        setHost_list((List<org.apache.impala.thrift.TNetworkAddress>)value);
      }
      break;

    case LINEAGE_GRAPH:
      if (value == null) {
        unsetLineage_graph();
      } else {
        setLineage_graph((org.apache.impala.thrift.TLineageGraph)value);
      }
      break;

    case PER_HOST_MEM_ESTIMATE:
      if (value == null) {
        unsetPer_host_mem_estimate();
      } else {
        setPer_host_mem_estimate((Long)value);
      }
      break;

    case MAX_PER_HOST_MIN_MEM_RESERVATION:
      if (value == null) {
        unsetMax_per_host_min_mem_reservation();
      } else {
        setMax_per_host_min_mem_reservation((Long)value);
      }
      break;

    case MAX_PER_HOST_THREAD_RESERVATION:
      if (value == null) {
        unsetMax_per_host_thread_reservation();
      } else {
        setMax_per_host_thread_reservation((Long)value);
      }
      break;

    case DEDICATED_COORD_MEM_ESTIMATE:
      if (value == null) {
        unsetDedicated_coord_mem_estimate();
      } else {
        setDedicated_coord_mem_estimate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAN_EXEC_INFO:
      return getPlan_exec_info();

    case RESULT_SET_METADATA:
      return getResult_set_metadata();

    case FINALIZE_PARAMS:
      return getFinalize_params();

    case QUERY_CTX:
      return getQuery_ctx();

    case QUERY_PLAN:
      return getQuery_plan();

    case STMT_TYPE:
      return getStmt_type();

    case HOST_LIST:
      return getHost_list();

    case LINEAGE_GRAPH:
      return getLineage_graph();

    case PER_HOST_MEM_ESTIMATE:
      return getPer_host_mem_estimate();

    case MAX_PER_HOST_MIN_MEM_RESERVATION:
      return getMax_per_host_min_mem_reservation();

    case MAX_PER_HOST_THREAD_RESERVATION:
      return getMax_per_host_thread_reservation();

    case DEDICATED_COORD_MEM_ESTIMATE:
      return getDedicated_coord_mem_estimate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAN_EXEC_INFO:
      return isSetPlan_exec_info();
    case RESULT_SET_METADATA:
      return isSetResult_set_metadata();
    case FINALIZE_PARAMS:
      return isSetFinalize_params();
    case QUERY_CTX:
      return isSetQuery_ctx();
    case QUERY_PLAN:
      return isSetQuery_plan();
    case STMT_TYPE:
      return isSetStmt_type();
    case HOST_LIST:
      return isSetHost_list();
    case LINEAGE_GRAPH:
      return isSetLineage_graph();
    case PER_HOST_MEM_ESTIMATE:
      return isSetPer_host_mem_estimate();
    case MAX_PER_HOST_MIN_MEM_RESERVATION:
      return isSetMax_per_host_min_mem_reservation();
    case MAX_PER_HOST_THREAD_RESERVATION:
      return isSetMax_per_host_thread_reservation();
    case DEDICATED_COORD_MEM_ESTIMATE:
      return isSetDedicated_coord_mem_estimate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueryExecRequest)
      return this.equals((TQueryExecRequest)that);
    return false;
  }

  public boolean equals(TQueryExecRequest that) {
    if (that == null)
      return false;

    boolean this_present_plan_exec_info = true && this.isSetPlan_exec_info();
    boolean that_present_plan_exec_info = true && that.isSetPlan_exec_info();
    if (this_present_plan_exec_info || that_present_plan_exec_info) {
      if (!(this_present_plan_exec_info && that_present_plan_exec_info))
        return false;
      if (!this.plan_exec_info.equals(that.plan_exec_info))
        return false;
    }

    boolean this_present_result_set_metadata = true && this.isSetResult_set_metadata();
    boolean that_present_result_set_metadata = true && that.isSetResult_set_metadata();
    if (this_present_result_set_metadata || that_present_result_set_metadata) {
      if (!(this_present_result_set_metadata && that_present_result_set_metadata))
        return false;
      if (!this.result_set_metadata.equals(that.result_set_metadata))
        return false;
    }

    boolean this_present_finalize_params = true && this.isSetFinalize_params();
    boolean that_present_finalize_params = true && that.isSetFinalize_params();
    if (this_present_finalize_params || that_present_finalize_params) {
      if (!(this_present_finalize_params && that_present_finalize_params))
        return false;
      if (!this.finalize_params.equals(that.finalize_params))
        return false;
    }

    boolean this_present_query_ctx = true && this.isSetQuery_ctx();
    boolean that_present_query_ctx = true && that.isSetQuery_ctx();
    if (this_present_query_ctx || that_present_query_ctx) {
      if (!(this_present_query_ctx && that_present_query_ctx))
        return false;
      if (!this.query_ctx.equals(that.query_ctx))
        return false;
    }

    boolean this_present_query_plan = true && this.isSetQuery_plan();
    boolean that_present_query_plan = true && that.isSetQuery_plan();
    if (this_present_query_plan || that_present_query_plan) {
      if (!(this_present_query_plan && that_present_query_plan))
        return false;
      if (!this.query_plan.equals(that.query_plan))
        return false;
    }

    boolean this_present_stmt_type = true && this.isSetStmt_type();
    boolean that_present_stmt_type = true && that.isSetStmt_type();
    if (this_present_stmt_type || that_present_stmt_type) {
      if (!(this_present_stmt_type && that_present_stmt_type))
        return false;
      if (!this.stmt_type.equals(that.stmt_type))
        return false;
    }

    boolean this_present_host_list = true && this.isSetHost_list();
    boolean that_present_host_list = true && that.isSetHost_list();
    if (this_present_host_list || that_present_host_list) {
      if (!(this_present_host_list && that_present_host_list))
        return false;
      if (!this.host_list.equals(that.host_list))
        return false;
    }

    boolean this_present_lineage_graph = true && this.isSetLineage_graph();
    boolean that_present_lineage_graph = true && that.isSetLineage_graph();
    if (this_present_lineage_graph || that_present_lineage_graph) {
      if (!(this_present_lineage_graph && that_present_lineage_graph))
        return false;
      if (!this.lineage_graph.equals(that.lineage_graph))
        return false;
    }

    boolean this_present_per_host_mem_estimate = true && this.isSetPer_host_mem_estimate();
    boolean that_present_per_host_mem_estimate = true && that.isSetPer_host_mem_estimate();
    if (this_present_per_host_mem_estimate || that_present_per_host_mem_estimate) {
      if (!(this_present_per_host_mem_estimate && that_present_per_host_mem_estimate))
        return false;
      if (this.per_host_mem_estimate != that.per_host_mem_estimate)
        return false;
    }

    boolean this_present_max_per_host_min_mem_reservation = true && this.isSetMax_per_host_min_mem_reservation();
    boolean that_present_max_per_host_min_mem_reservation = true && that.isSetMax_per_host_min_mem_reservation();
    if (this_present_max_per_host_min_mem_reservation || that_present_max_per_host_min_mem_reservation) {
      if (!(this_present_max_per_host_min_mem_reservation && that_present_max_per_host_min_mem_reservation))
        return false;
      if (this.max_per_host_min_mem_reservation != that.max_per_host_min_mem_reservation)
        return false;
    }

    boolean this_present_max_per_host_thread_reservation = true && this.isSetMax_per_host_thread_reservation();
    boolean that_present_max_per_host_thread_reservation = true && that.isSetMax_per_host_thread_reservation();
    if (this_present_max_per_host_thread_reservation || that_present_max_per_host_thread_reservation) {
      if (!(this_present_max_per_host_thread_reservation && that_present_max_per_host_thread_reservation))
        return false;
      if (this.max_per_host_thread_reservation != that.max_per_host_thread_reservation)
        return false;
    }

    boolean this_present_dedicated_coord_mem_estimate = true && this.isSetDedicated_coord_mem_estimate();
    boolean that_present_dedicated_coord_mem_estimate = true && that.isSetDedicated_coord_mem_estimate();
    if (this_present_dedicated_coord_mem_estimate || that_present_dedicated_coord_mem_estimate) {
      if (!(this_present_dedicated_coord_mem_estimate && that_present_dedicated_coord_mem_estimate))
        return false;
      if (this.dedicated_coord_mem_estimate != that.dedicated_coord_mem_estimate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_plan_exec_info = true && (isSetPlan_exec_info());
    list.add(present_plan_exec_info);
    if (present_plan_exec_info)
      list.add(plan_exec_info);

    boolean present_result_set_metadata = true && (isSetResult_set_metadata());
    list.add(present_result_set_metadata);
    if (present_result_set_metadata)
      list.add(result_set_metadata);

    boolean present_finalize_params = true && (isSetFinalize_params());
    list.add(present_finalize_params);
    if (present_finalize_params)
      list.add(finalize_params);

    boolean present_query_ctx = true && (isSetQuery_ctx());
    list.add(present_query_ctx);
    if (present_query_ctx)
      list.add(query_ctx);

    boolean present_query_plan = true && (isSetQuery_plan());
    list.add(present_query_plan);
    if (present_query_plan)
      list.add(query_plan);

    boolean present_stmt_type = true && (isSetStmt_type());
    list.add(present_stmt_type);
    if (present_stmt_type)
      list.add(stmt_type.getValue());

    boolean present_host_list = true && (isSetHost_list());
    list.add(present_host_list);
    if (present_host_list)
      list.add(host_list);

    boolean present_lineage_graph = true && (isSetLineage_graph());
    list.add(present_lineage_graph);
    if (present_lineage_graph)
      list.add(lineage_graph);

    boolean present_per_host_mem_estimate = true && (isSetPer_host_mem_estimate());
    list.add(present_per_host_mem_estimate);
    if (present_per_host_mem_estimate)
      list.add(per_host_mem_estimate);

    boolean present_max_per_host_min_mem_reservation = true && (isSetMax_per_host_min_mem_reservation());
    list.add(present_max_per_host_min_mem_reservation);
    if (present_max_per_host_min_mem_reservation)
      list.add(max_per_host_min_mem_reservation);

    boolean present_max_per_host_thread_reservation = true && (isSetMax_per_host_thread_reservation());
    list.add(present_max_per_host_thread_reservation);
    if (present_max_per_host_thread_reservation)
      list.add(max_per_host_thread_reservation);

    boolean present_dedicated_coord_mem_estimate = true && (isSetDedicated_coord_mem_estimate());
    list.add(present_dedicated_coord_mem_estimate);
    if (present_dedicated_coord_mem_estimate)
      list.add(dedicated_coord_mem_estimate);

    return list.hashCode();
  }

  @Override
  public int compareTo(TQueryExecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlan_exec_info()).compareTo(other.isSetPlan_exec_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan_exec_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_exec_info, other.plan_exec_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult_set_metadata()).compareTo(other.isSetResult_set_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_set_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_set_metadata, other.result_set_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinalize_params()).compareTo(other.isSetFinalize_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinalize_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finalize_params, other.finalize_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_ctx()).compareTo(other.isSetQuery_ctx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_ctx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_ctx, other.query_ctx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_plan()).compareTo(other.isSetQuery_plan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_plan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_plan, other.query_plan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStmt_type()).compareTo(other.isSetStmt_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmt_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmt_type, other.stmt_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost_list()).compareTo(other.isSetHost_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host_list, other.host_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineage_graph()).compareTo(other.isSetLineage_graph());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineage_graph()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineage_graph, other.lineage_graph);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPer_host_mem_estimate()).compareTo(other.isSetPer_host_mem_estimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPer_host_mem_estimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_host_mem_estimate, other.per_host_mem_estimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_per_host_min_mem_reservation()).compareTo(other.isSetMax_per_host_min_mem_reservation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_per_host_min_mem_reservation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_per_host_min_mem_reservation, other.max_per_host_min_mem_reservation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_per_host_thread_reservation()).compareTo(other.isSetMax_per_host_thread_reservation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_per_host_thread_reservation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_per_host_thread_reservation, other.max_per_host_thread_reservation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDedicated_coord_mem_estimate()).compareTo(other.isSetDedicated_coord_mem_estimate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDedicated_coord_mem_estimate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dedicated_coord_mem_estimate, other.dedicated_coord_mem_estimate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueryExecRequest(");
    boolean first = true;

    if (isSetPlan_exec_info()) {
      sb.append("plan_exec_info:");
      if (this.plan_exec_info == null) {
        sb.append("null");
      } else {
        sb.append(this.plan_exec_info);
      }
      first = false;
    }
    if (isSetResult_set_metadata()) {
      if (!first) sb.append(", ");
      sb.append("result_set_metadata:");
      if (this.result_set_metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.result_set_metadata);
      }
      first = false;
    }
    if (isSetFinalize_params()) {
      if (!first) sb.append(", ");
      sb.append("finalize_params:");
      if (this.finalize_params == null) {
        sb.append("null");
      } else {
        sb.append(this.finalize_params);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("query_ctx:");
    if (this.query_ctx == null) {
      sb.append("null");
    } else {
      sb.append(this.query_ctx);
    }
    first = false;
    if (isSetQuery_plan()) {
      if (!first) sb.append(", ");
      sb.append("query_plan:");
      if (this.query_plan == null) {
        sb.append("null");
      } else {
        sb.append(this.query_plan);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("stmt_type:");
    if (this.stmt_type == null) {
      sb.append("null");
    } else {
      sb.append(this.stmt_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("host_list:");
    if (this.host_list == null) {
      sb.append("null");
    } else {
      sb.append(this.host_list);
    }
    first = false;
    if (isSetLineage_graph()) {
      if (!first) sb.append(", ");
      sb.append("lineage_graph:");
      if (this.lineage_graph == null) {
        sb.append("null");
      } else {
        sb.append(this.lineage_graph);
      }
      first = false;
    }
    if (isSetPer_host_mem_estimate()) {
      if (!first) sb.append(", ");
      sb.append("per_host_mem_estimate:");
      sb.append(this.per_host_mem_estimate);
      first = false;
    }
    if (isSetMax_per_host_min_mem_reservation()) {
      if (!first) sb.append(", ");
      sb.append("max_per_host_min_mem_reservation:");
      sb.append(this.max_per_host_min_mem_reservation);
      first = false;
    }
    if (isSetMax_per_host_thread_reservation()) {
      if (!first) sb.append(", ");
      sb.append("max_per_host_thread_reservation:");
      sb.append(this.max_per_host_thread_reservation);
      first = false;
    }
    if (isSetDedicated_coord_mem_estimate()) {
      if (!first) sb.append(", ");
      sb.append("dedicated_coord_mem_estimate:");
      sb.append(this.dedicated_coord_mem_estimate);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query_ctx == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_ctx' was not present! Struct: " + toString());
    }
    if (stmt_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stmt_type' was not present! Struct: " + toString());
    }
    if (host_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'host_list' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (result_set_metadata != null) {
      result_set_metadata.validate();
    }
    if (finalize_params != null) {
      finalize_params.validate();
    }
    if (query_ctx != null) {
      query_ctx.validate();
    }
    if (lineage_graph != null) {
      lineage_graph.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryExecRequestStandardSchemeFactory implements SchemeFactory {
    public TQueryExecRequestStandardScheme getScheme() {
      return new TQueryExecRequestStandardScheme();
    }
  }

  private static class TQueryExecRequestStandardScheme extends StandardScheme<TQueryExecRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAN_EXEC_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.plan_exec_info = new ArrayList<TPlanExecInfo>(_list42.size);
                TPlanExecInfo _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = new TPlanExecInfo();
                  _elem43.read(iprot);
                  struct.plan_exec_info.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setPlan_exec_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_SET_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_set_metadata = new org.apache.impala.thrift.TResultSetMetadata();
              struct.result_set_metadata.read(iprot);
              struct.setResult_set_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FINALIZE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.finalize_params = new TFinalizeParams();
              struct.finalize_params.read(iprot);
              struct.setFinalize_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_ctx = new TQueryCtx();
              struct.query_ctx.read(iprot);
              struct.setQuery_ctxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_plan = iprot.readString();
              struct.setQuery_planIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STMT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stmt_type = org.apache.impala.thrift.TStmtType.findByValue(iprot.readI32());
              struct.setStmt_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HOST_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.host_list = new ArrayList<org.apache.impala.thrift.TNetworkAddress>(_list45.size);
                org.apache.impala.thrift.TNetworkAddress _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = new org.apache.impala.thrift.TNetworkAddress();
                  _elem46.read(iprot);
                  struct.host_list.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setHost_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LINEAGE_GRAPH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lineage_graph = new org.apache.impala.thrift.TLineageGraph();
              struct.lineage_graph.read(iprot);
              struct.setLineage_graphIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PER_HOST_MEM_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.per_host_mem_estimate = iprot.readI64();
              struct.setPer_host_mem_estimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAX_PER_HOST_MIN_MEM_RESERVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_per_host_min_mem_reservation = iprot.readI64();
              struct.setMax_per_host_min_mem_reservationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_PER_HOST_THREAD_RESERVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_per_host_thread_reservation = iprot.readI64();
              struct.setMax_per_host_thread_reservationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEDICATED_COORD_MEM_ESTIMATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dedicated_coord_mem_estimate = iprot.readI64();
              struct.setDedicated_coord_mem_estimateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.plan_exec_info != null) {
        if (struct.isSetPlan_exec_info()) {
          oprot.writeFieldBegin(PLAN_EXEC_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.plan_exec_info.size()));
            for (TPlanExecInfo _iter48 : struct.plan_exec_info)
            {
              _iter48.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.result_set_metadata != null) {
        if (struct.isSetResult_set_metadata()) {
          oprot.writeFieldBegin(RESULT_SET_METADATA_FIELD_DESC);
          struct.result_set_metadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finalize_params != null) {
        if (struct.isSetFinalize_params()) {
          oprot.writeFieldBegin(FINALIZE_PARAMS_FIELD_DESC);
          struct.finalize_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_ctx != null) {
        oprot.writeFieldBegin(QUERY_CTX_FIELD_DESC);
        struct.query_ctx.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query_plan != null) {
        if (struct.isSetQuery_plan()) {
          oprot.writeFieldBegin(QUERY_PLAN_FIELD_DESC);
          oprot.writeString(struct.query_plan);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stmt_type != null) {
        oprot.writeFieldBegin(STMT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.stmt_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.host_list != null) {
        oprot.writeFieldBegin(HOST_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.host_list.size()));
          for (org.apache.impala.thrift.TNetworkAddress _iter49 : struct.host_list)
          {
            _iter49.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.lineage_graph != null) {
        if (struct.isSetLineage_graph()) {
          oprot.writeFieldBegin(LINEAGE_GRAPH_FIELD_DESC);
          struct.lineage_graph.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPer_host_mem_estimate()) {
        oprot.writeFieldBegin(PER_HOST_MEM_ESTIMATE_FIELD_DESC);
        oprot.writeI64(struct.per_host_mem_estimate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_per_host_min_mem_reservation()) {
        oprot.writeFieldBegin(MAX_PER_HOST_MIN_MEM_RESERVATION_FIELD_DESC);
        oprot.writeI64(struct.max_per_host_min_mem_reservation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_per_host_thread_reservation()) {
        oprot.writeFieldBegin(MAX_PER_HOST_THREAD_RESERVATION_FIELD_DESC);
        oprot.writeI64(struct.max_per_host_thread_reservation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDedicated_coord_mem_estimate()) {
        oprot.writeFieldBegin(DEDICATED_COORD_MEM_ESTIMATE_FIELD_DESC);
        oprot.writeI64(struct.dedicated_coord_mem_estimate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryExecRequestTupleSchemeFactory implements SchemeFactory {
    public TQueryExecRequestTupleScheme getScheme() {
      return new TQueryExecRequestTupleScheme();
    }
  }

  private static class TQueryExecRequestTupleScheme extends TupleScheme<TQueryExecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.query_ctx.write(oprot);
      oprot.writeI32(struct.stmt_type.getValue());
      {
        oprot.writeI32(struct.host_list.size());
        for (org.apache.impala.thrift.TNetworkAddress _iter50 : struct.host_list)
        {
          _iter50.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetPlan_exec_info()) {
        optionals.set(0);
      }
      if (struct.isSetResult_set_metadata()) {
        optionals.set(1);
      }
      if (struct.isSetFinalize_params()) {
        optionals.set(2);
      }
      if (struct.isSetQuery_plan()) {
        optionals.set(3);
      }
      if (struct.isSetLineage_graph()) {
        optionals.set(4);
      }
      if (struct.isSetPer_host_mem_estimate()) {
        optionals.set(5);
      }
      if (struct.isSetMax_per_host_min_mem_reservation()) {
        optionals.set(6);
      }
      if (struct.isSetMax_per_host_thread_reservation()) {
        optionals.set(7);
      }
      if (struct.isSetDedicated_coord_mem_estimate()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPlan_exec_info()) {
        {
          oprot.writeI32(struct.plan_exec_info.size());
          for (TPlanExecInfo _iter51 : struct.plan_exec_info)
          {
            _iter51.write(oprot);
          }
        }
      }
      if (struct.isSetResult_set_metadata()) {
        struct.result_set_metadata.write(oprot);
      }
      if (struct.isSetFinalize_params()) {
        struct.finalize_params.write(oprot);
      }
      if (struct.isSetQuery_plan()) {
        oprot.writeString(struct.query_plan);
      }
      if (struct.isSetLineage_graph()) {
        struct.lineage_graph.write(oprot);
      }
      if (struct.isSetPer_host_mem_estimate()) {
        oprot.writeI64(struct.per_host_mem_estimate);
      }
      if (struct.isSetMax_per_host_min_mem_reservation()) {
        oprot.writeI64(struct.max_per_host_min_mem_reservation);
      }
      if (struct.isSetMax_per_host_thread_reservation()) {
        oprot.writeI64(struct.max_per_host_thread_reservation);
      }
      if (struct.isSetDedicated_coord_mem_estimate()) {
        oprot.writeI64(struct.dedicated_coord_mem_estimate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.query_ctx = new TQueryCtx();
      struct.query_ctx.read(iprot);
      struct.setQuery_ctxIsSet(true);
      struct.stmt_type = org.apache.impala.thrift.TStmtType.findByValue(iprot.readI32());
      struct.setStmt_typeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.host_list = new ArrayList<org.apache.impala.thrift.TNetworkAddress>(_list52.size);
        org.apache.impala.thrift.TNetworkAddress _elem53;
        for (int _i54 = 0; _i54 < _list52.size; ++_i54)
        {
          _elem53 = new org.apache.impala.thrift.TNetworkAddress();
          _elem53.read(iprot);
          struct.host_list.add(_elem53);
        }
      }
      struct.setHost_listIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.plan_exec_info = new ArrayList<TPlanExecInfo>(_list55.size);
          TPlanExecInfo _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = new TPlanExecInfo();
            _elem56.read(iprot);
            struct.plan_exec_info.add(_elem56);
          }
        }
        struct.setPlan_exec_infoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.result_set_metadata = new org.apache.impala.thrift.TResultSetMetadata();
        struct.result_set_metadata.read(iprot);
        struct.setResult_set_metadataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.finalize_params = new TFinalizeParams();
        struct.finalize_params.read(iprot);
        struct.setFinalize_paramsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.query_plan = iprot.readString();
        struct.setQuery_planIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lineage_graph = new org.apache.impala.thrift.TLineageGraph();
        struct.lineage_graph.read(iprot);
        struct.setLineage_graphIsSet(true);
      }
      if (incoming.get(5)) {
        struct.per_host_mem_estimate = iprot.readI64();
        struct.setPer_host_mem_estimateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.max_per_host_min_mem_reservation = iprot.readI64();
        struct.setMax_per_host_min_mem_reservationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.max_per_host_thread_reservation = iprot.readI64();
        struct.setMax_per_host_thread_reservationIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dedicated_coord_mem_estimate = iprot.readI64();
        struct.setDedicated_coord_mem_estimateIsSet(true);
      }
    }
  }

}

